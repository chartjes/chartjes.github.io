

[
    {
        "author": null,
        "categories": [
            "development",
            "php"
        ],
        "content": "<p>I've never been one to stop looking at new tools and figuring\nout if they can be applied to the work I do. When do I find\ninteresting things, I like to talk about them a little and share.\nHere's what I've been looking at in January 2024.<\/p>\n\n<h2 id=\"laravel\">Laravel<\/h2>\n\n<p>Yes, the artisanal elephant in the room. At my <a href=\"https:\/\/ziffdavis.com\">current job<\/a>\nwe are all-in on using Laravel. Which means not only learning \nhow Laravel does things but evaluating every additional choices\nthrough the lense of \"are we going to end up fighting the framework\nif we do it this way.\"<\/p>\n\n<p>I prefer not to fight. Honestly, it's fine. People are having a\nvery hard time separating how they feel about the people behind\nthe tools from the tools themselves. There will always be things to\ndislike about any web application framework.<\/p>\n\n<h2 id=\"aws\">AWS<\/h2>\n\n<p>A enterprise level company with a large web presence relies heavily\non the cloud? THIS IS MY SHOCKED FACE.<\/p>\n\n<p>I don't really have to worry much about going into an AWS console\nto do something, but I am having to learn about <a href=\"https:\/\/aws.amazon.com\/sqs\/\">SQS<\/a>\nand <a href=\"https:\/\/aws.amazon.com\/financial-services\/partner-solutions\/snowflake\/\">Snowflake<\/a>.\nMore importantly, I get to flex some skills behind building things\nthat implement interfaces because my work projects will be dealing\nwith multiple types of queues and multiple data storage back end.<\/p>\n\n<p>Sometimes code architecture matters instead of being a way for\nbored or self-centered-while-misinformed developers to express\nthemselves.<\/p>\n\n<h2 id=\"helix\">Helix<\/h2>\n\n<p>I am a big fan of modal editors as it is very hard to bulid a\nkeyboard-centric editor without modes. After seeing some <a href=\"https:\/\/neovim.io\">NeoVim<\/a>\nfolks say nice things about it, I decided to take a look at <a href=\"https:\/\/helix-editor.com\">Helix<\/a>\nand see if it is something I could migrate towards.<\/p>\n\n<p>Lots to like here! Integration with <a href=\"https:\/\/microsoft.github.io\/language-server-protocol\/\">language servers<\/a>\nand <a href=\"https:\/\/tree-sitter.github.io\/tree-sitter\/\">Tree-sitter<\/a> along\nwith being customizable to a certain extent via configuration\nfiles. No plugin architecture yet though.<\/p>\n\n<p>The show-stopper for me was that it does not have good <a href=\"https:\/\/microsoft.github.io\/debug-adapter-protocol\/\">Debug Anywhere Protocol<\/a> support, which means I could not get <a href=\"https:\/\/xdebug.org\">Xdebug<\/a>\nworking with it. Not being able to use an interactive debugger is a\nshow stopper for me now. Sorry.<\/p>\n\n<h2 id=\"hypermedia\">Hypermedia<\/h2>\n\n<p>I talked about it briefly in <a href=\"https:\/\/grumpy-learning.com\/blog\/2024\/01\/21\/wait-long-enough\/\">another post here<\/a>\nbut I feel like taking a closer look at hypermedia and\nacceptable patterns for it might yield some interesting results\nin my personal projects. Again, I highly encourage you to\ntake a look at <a href=\"https:\/\/hypermedia.systems\/\">Hypermedia Systems<\/a>.<\/p>\n\n<h2 id=\"bootstrap-css\">Bootstrap CSS<\/h2>\n\n<p>CSS and all the associated frameworks is something I also avoided\nover the years. My journey into <a href=\"https:\/\/htmx.org\/\">htmx<\/a> and hypermedia\nalso made me take a look at the state of CSS frameworks. My longest-running\nproject used a very old version of <a href=\"https:\/\/getbootstrap.com\">Bootstrap<\/a> so\nrather than pull it all out and replace it with something like\n<a href=\"https:\/\/tailwindcss.com\">Tailwind<\/a> (which my brain is having a\nhard time wrapping itself around for whatever reason) I'm just back\nto older, more stable tools.<\/p>\n\n<p>When it comes to tools that I do not have a lot of experience with,\nI always need a reduced number of choices. Once I've mastered things more\nthen I appreciate the extensibility and flexibility some tools offer.<\/p>\n\n<h2 id=\"takeaways\">Takeaways<\/h2>\n\n<p>After reading this post you should learn:<\/p>\n\n<ul>\n<li>I still like modal editors<\/li>\n<li>I am constantly looking at tools and languages and frameworks for suitability and ease-of-use<\/li>\n<li>sometimes the old ways were actually better instead of triggering nostalgia<\/li>\n<\/ul>\n",
        "date": "2024-01-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's Grumpy Looking At - January 2024",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2024\/01\/28\/grumpy-tech-jan-24\/"
    },
    {
        "author": null,
        "categories": [
            "development"
        ],
        "content": "<h1 id=\"wait-long-enough-and-sometimes-good-things-happen...\">Wait long enough and sometimes good things happen...<\/h1>\n\n<p>It can't come as a surprise to anyone that if you are in this\nindustry long enough, you see trends and tools come and go.\nSometimes you embrace them, sometimes you can dodge them. One\nof the things I managed to dodge over the years was having\nto do any front-end coding of any substance in JavaScript.<\/p>\n\n<h2 id=\"how-did-you-dodge-javascript%3F%21%3F\">How did you dodge JavaScript?!?<\/h2>\n\n<p>If I am being honest, I think it was a combination of two\nthings. The first was that I began my career helping to\nbuild web sites before AJAX functionality was even a thing.\nI distinctly remember the first time a co-worker showed\nme a set of interactive form drop-downs built using JavaScript.<\/p>\n\n<p>\"Wow, we don't even have to reload the page?!?! That is cool\".<\/p>\n\n<p>Keep in mind this was 2003.<\/p>\n\n<p>The second reason I think I was able to dodge JavaScript was\nbecause I made \"shouting at people about testing their PHP\ncode\" my career niche at around the same time.<\/p>\n\n<p>So over the years I kept working as a \"backend PHP developer\"\nwho would occasionally modify some JavaScript that I cut-and-paste\nfrom somewhere else. My crowning achievement was creating \nan interface that allowed players to be traded between the\npretend baseball teams in my long-running <a href=\"https:\/\/www.ibl.org\">simulation baseball league<\/a>\nby using drag-and-drop.<\/p>\n\n<h2 id=\"i-don%27t-hate-javascript%2C-i-just-don%27t-use-it-much\">I don't hate JavaScript, I just don't use it much<\/h2>\n\n<p>Now, this is not to say I didn't pay a little bit of attention\nto what the folks who did front-end development were doing. I\nwas just skeptical that adopting a framework created by Facebook\nto solve their needs (React) was going to be a good idea.<\/p>\n\n<p>My own personal favourite front-end language is <a href=\"https:\/\/elm-lang.org\">Elm<\/a>.\nHaskell for the web?!? Sounds awesome. Of course, I had no\nprojects that needed that kind of work. So I continued to\nfocus on server-side work and lean heavily on the expertise\nof others when it came time to do anything with JavaScript\nframeworks.<\/p>\n\n<p>I also feel like I am in the minority of people who thought\n<a href=\"https:\/\/coffeescript.org\">CoffeeScript<\/a> was a great idea.<\/p>\n\n<p>(Maybe you're starting to see a pattern?)<\/p>\n\n<p>I think if I was forced to do JavaScript work, I would try\nto do it from the warm embrace of <a href=\"https:\/\/www.typescriptlang.org\">TypeScript<\/a>\nbecause I find adding types to be incredibly useful.<\/p>\n\n<p>During my time doing consulting work for a large avionics\ncompany, their browser-driven test suite relied on\nTypeScript. Look, it's fine. JavaScript is similar enough\nin syntax to PHP that there are no problems.<\/p>\n\n<p>Async stuff though, that is weird and I still don't understand\nit. Maybe I can dodge that too!<\/p>\n\n<h2 id=\"what-did-i-gain-by-waiting%3F\">What did I gain by waiting?<\/h2>\n\n<p>React and Angular have turned out to be, from this grumpy\nPHP programmer's perspective, a disaster. They dominate\nthe industry but from all accounts are not allowing developers\nto build experiences that are great for anyone who is not\nrunning powerful devices with lots of available memory.<\/p>\n\n<p>So I have not done any work with either of those two behemoths.\nI'm just this PHP guy, content to work with folks who understand\nthose tools the same way I understand mine.<\/p>\n\n<p>After looking longingly at Elm, I waited. After waiting for a\nfew more years, I kept finding references and going back to\nlooking at <a href=\"https:\/\/htmx.org\">htmx<\/a>.<\/p>\n\n<p>Then, as serendipity always does, I saw a <a href=\"https:\/\/mastodon.social\/@jakub_zalas\/111778943542624692\">post on Mastodon<\/a>\nby Jakob Zalas where he mentioned htmx and a great new \nweb site promoting some great front-end development\nstrategies called <a href=\"https:\/\/hypermedia.systems\">Hypermedia Systems<\/a>.<\/p>\n\n<p>This was a sign that I should go and take a look now. When\na grizzled veteran of programming, who has done great work\nin multiple languages talks about a JavaScript framework,\nyou should probably listen.<\/p>\n\n<h2 id=\"takeaways\">Takeaways<\/h2>\n\n<p>After reading this blog post you should know:<\/p>\n\n<ul>\n<li>that I seem to like some weird JavaScript frameworks<\/li>\n<li>I successfully dodged entire generations of tools<\/li>\n<li>I like approaches that use repeatable patterns<\/li>\n<li>I pay attention to the recommendations of other programmers I follow and respect<\/li>\n<\/ul>\n",
        "date": "2024-01-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Wait Long Enough And Sometimes Good Things Happen",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2024\/01\/21\/wait-long-enough\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "php"
        ],
        "content": "<h1 id=\"how-a-grumpy-programmer-uses-viewmodels\">How A Grumpy Programmer Uses ViewModels<\/h1>\n\n<p>As I've started putting together a talk about <a href=\"https:\/\/en.wikipedia.org\/wiki\/Command_Query_Responsibility_Segregation\">CQRS<\/a> I noticed that in my own application, I am using\nViewModels in my commands and queries to provide data to\nmy views.<\/p>\n\n<p>The purpose of the view model is to sit between our Models\n(usually something that talks to a data source) and our views\n(usually something that displays data to the screen). As part\nof the application architecture I am trying to keep things\nseparated -- some things should not know about each other.<\/p>\n\n<p>I discovered the concept of the ViewModel from Matthias Noback's\nbook \"Recipes for Decoupling\" where he emphasized the concept\nthat you should not be passing objects (or anything for that matter)\ninto your views and templates that they don't need.<\/p>\n\n<p>There is a whole chapter in this book dedicated to ViewModels. I\ncan't recommend his book highly enough if you are looking to\ncreate or refactor a project are looking for repeatable processes to keep things\nas decoupled as possible.<\/p>\n\n<p>I think showing how the ViewModel works is best done through\nsharing some live, in-production, code with you.<\/p>\n\n<p>I have a simulation baseball league management application. We\nare currently in the middle of our player draft. After some\ndiscussion with the person who handles tracking who was drafted,\nI made some changes to the previously-working functionality.\nNow I am splitting things into Commands and Queries.<\/p>\n\n<p>In this case, we have our AssignPlayersToTeamQuery class. This\nis a Query, meaning it only reads data and doesn't modify anything.\nHere is the code for that Query:<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nnamespace Webreg\\Query;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Slim\\Psr7\\Request;\nuse Slim\\Psr7\\Response;\nuse Twig\\Environment;\nuse Webreg\\ViewModel\\Franchise;\nuse Webreg\\ViewModel\\Roster;\n\nfinal class AssignPlayersToTeamQuery\n{\n    public function __construct(\n        private Environment $twig,\n        private Franchise $franchise,\n        private Roster $roster\n    ) {}\n\n    public function __invoke(Request $request): Response\n    {\n        $response = new Response(200, null);\n        $parsedBody = $request-&gt;getParsedBody();\n        $playersToDraft = new ArrayCollection();\n\n        foreach ($parsedBody['draft'] as $playerId =&gt; $v) {\n            $playersToDraft-&gt;add($this-&gt;roster-&gt;getPlayerById($playerId));\n        }\n\n        $params = [\n            'playersToDraft' =&gt; $playersToDraft,\n            'franchises' =&gt; $this-&gt;franchise-&gt;getAll(),\n            'round' =&gt; $parsedBody['round'],\n        ];\n        $response-&gt;getBody()\n            -&gt;write($this-&gt;twig-&gt;render(\n                'draft\/assign_players.twig',\n                $params\n            )\n        );\n\n        return $response;\n    }\n}\n<\/code><\/pre>\n\n<p>In an architecture where we don't care that much about\nseparating concerns, I'd either just return whatever\nentity or object my database layer returns or just\nconvert things to arrays. PHP loves arrays.<\/p>\n\n<p>However, I don't want to use arrays. I prefer to use\nobjects and collections wherever I can. So instead\nI created a View Model. It's job is to talk to the\ndatabase layer and then give me something that my view\nlayer can use with no modification.<\/p>\n\n<p>The reason to go with this sort of structure is that\nit does allow me to replace things behind the scenes\nif I ever change the data source or want to create\na fake for testing purposes.<\/p>\n\n<p>Okay, let's look at the code for the ViewModel. I created an interface\nfor any ViewModels dealing with Roster objects to use:<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nnamespace Webreg\\ViewModel;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\n\ninterface Roster\n{\n    public function getByTeam(string $iblTeam): ArrayCollection;\n}\n<\/code><\/pre>\n\n<p>Then I implemented a version using that interface.<\/p>\n\n<pre><code class=\"php\">&lt;?php\ndeclare(strict_types=1);\n\nnamespace Webreg\\ViewModel;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Pest\\Support\\Arr;\nuse Webreg\\Repository\\RosterRepositoryUsingDoctrine;\nuse Webreg\\Repository\\TransactionRepositoryUsingDoctrine;\n\nclass RosterUsingDoctrine implements Roster\n{\n    public function __construct(\n        private RosterRepositoryUsingDoctrine $rosterRepository,\n        private TransactionRepositoryUsingDoctrine $transactionRepository)\n    {}\n\n    public function getByTeam(string $iblTeam): ArrayCollection\n    {\n        $roster = new ArrayCollection();\n\n        $deactivations = $this-&gt;transactionRepository-&gt;getRecentDeactivationsByTeam($iblTeam);\n        $battersFromRepo = $this-&gt;rosterRepository-&gt;getBatters($iblTeam);\n        $batters = new ArrayCollection();\n\n        \/** @var \\Webreg\\Domain\\Roster $batter *\/\n        foreach ($battersFromRepo as $batter) {\n            $deactivationDate = null;\n\n            foreach ($deactivations as $deactivation) {\n                if (str_contains(trim($deactivation-&gt;getLogEntry()), trim($batter-&gt;getTigName()))) {\n                    $deactivationDate = $deactivation-&gt;getTransactionDate()-&gt;format('Y-m-d');\n                }\n            }\n\n            $batters-&gt;add([\n                'id' =&gt; $batter-&gt;getId(),\n                'tigName' =&gt; $batter-&gt;getTigName(),\n                'comments' =&gt; $batter-&gt;getComments(),\n                'status' =&gt; $batter-&gt;getStatus(),\n                'deactivationDate' =&gt; $deactivationDate,\n                'uncarded' =&gt; $batter-&gt;getUncarded(),\n            ]);\n        }\n        $roster['batters'] = $batters;\n\n        $pitchersFromRepo = $this-&gt;rosterRepository-&gt;getPitchers($iblTeam); \n        $pitchers = new ArrayCollection();\n\n        \/** @var \\Webreg\\Domain\\Roster $pitcher *\/\n        foreach ($pitchersFromRepo as $pitcher) {\n            $deactivationDate = null;\n\n            foreach ($deactivations as $deactivation) {\n                if (str_contains(trim($deactivation-&gt;getLogEntry()), trim($pitcher-&gt;getTigName()))) {\n                    $deactivationDate = $deactivation-&gt;getTransactionDate()-&gt;format('Y-m-d');\n                }\n            }\n\n            $pitchers-&gt;add([\n                'id' =&gt; $pitcher-&gt;getId(),\n                'tigName' =&gt; $pitcher-&gt;getTigName(),\n                'comments' =&gt; $pitcher-&gt;getComments(),\n                'status' =&gt; $pitcher-&gt;getStatus(),\n                'deactivationDate' =&gt; $deactivationDate,\n                'uncarded' =&gt; $pitcher-&gt;getUncarded(),\n            ]);\n        }\n        $roster['pitchers'] = $pitchers;\n        $roster['currentSeason'] = $this-&gt;rosterRepository-&gt;getCurrentSeason();\n        $roster['previousSeason'] = $roster['currentSeason'] - 1;\n\n        $picks = new ArrayCollection();\n\n        if ($iblTeam !== 'FA') {\n            $picksFromRepo = $this-&gt;rosterRepository-&gt;getPicks($iblTeam);\n\n            \/** @var \\Webreg\\Domain\\Roster $pick *\/\n            foreach ($picksFromRepo as $pick) {\n                $picks-&gt;add([\n                    'id' =&gt; $pick-&gt;getId(),\n                    'tigName' =&gt; $pick-&gt;getTigName()\n                ]);\n            }\n        }\n\n        $roster['picks'] = $picks;\n\n        return $roster;\n    }\n\n    public function getPlayerById(int $playerId): \\Webreg\\Domain\\Roster\n    {\n        return $this-&gt;rosterRepository-&gt;getById($playerId);\n    }\n}\n<\/code><\/pre>\n\n<p>I should probably also add that <code>getPlayerById<\/code> method to the\ninterface as that seems to be functionality I would want no\nmatter what.<\/p>\n\n<p>So as you can see, the <code>getPlayerById<\/code> method returns the result\nof a call to our Repository object (which is also based off an\ninterface, with a Doctrine-specific implementation) to get one\n<code>Roster<\/code> object that maps to our domain.<\/p>\n\n<p>So, now I have a collection full of the players who can be picked\nready to be passed into my view. I am using <a href=\"https:\/\/twig.symfony.com\">Twig<\/a>\nfor rendering my views. Luckily for me it is smart enough to look\nat what I pass into it and figure out if I am iterating over arrays\nor objects.<\/p>\n\n<p>The concept of the ViewModel is not a new one -- most PHP web application\nframeworks just don't use them. They instead lean into the convention of \"you\ncan pass whatever the database layer gives you into your templates\". Which\nis fine! I just wanted more separation.<\/p>\n\n<p>If I was doing something different, like writing code that returns JSON results,\nI could still use the same repository like in my example, but create a View Model\nthat implements the same interface but just returns JSON instead of ArrayCollections or\na single Domain record.<\/p>\n\n<p>I know it seems like a minor thing -- how often are you likely\nto change database servers or change what a template outputs?\nThe reason to go down this route is that you are providing\nconsistency. Rather than just bang out some code and call it\na day, I've followed a plan and the next person who comes\nalong and needs something different can look and say \"oh, I\njust need to implement a new type of ViewModel and the rest\nof the code won't care\".<\/p>\n\n<p>If you are going to be at phptek in Chicago this spring I\nwill be talking about ViewModels and CQRS and decoupling\nat the event.<\/p>\n\n<p>I hope this blog post has done the following:<\/p>\n\n<ul>\n<li>helped you understand what a ViewModel is<\/li>\n<li>when you should consider using them<\/li>\n<li>what does a sample implementation of them look like<\/li>\n<\/ul>\n",
        "date": "2024-01-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How A Grumpy Programmer Uses View Models",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2024\/01\/13\/view-models\/"
    },
    {
        "author": null,
        "categories": [
            "development"
        ],
        "content": "<h1 id=\"return-on-investment-on-updating-dependencies\">Return on Investment on Updating Dependencies<\/h1>\n\n<p>This week I came across two separate posts that seem to\ndefy what a lot of terminally-online PHP developers have\nembraced as common practices:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/alexcabal.com\/posts\/standard-ebooks-and-classic-web-tech\">How Standard Ebooks serves millions of requests per month<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/freescout-helpdesk\/freescout\/wiki\/Development-Guide#maintaining-security-and-laravel-no-upgrade-policy\">Freescout's Maintaining Security and Laravel No-Upgrade Policy<\/a><\/li>\n<\/ul>\n\n<h2 id=\"building-things-with-boring-technology\">Building things with boring technology<\/h2>\n\n<p>The Ebooks blog post is a great primer on how to build something awesome\nthat serves the needs of users without relying on new web application\nframeworks that have a lot of dependencies and features that you aren't\ngoing to need. A lot of thought clearly went into \"how can we provide\nour users with value by using the minimum amount of code and system\nresources\". Definitely an approach more developers should embrace.<\/p>\n\n<p>It also emphasizes a point I have been trying to make to programmers: the\npeople who USE your application will absolutely not care what you are building\nit with. What you use is an implementation detail, and the biggest problem\nyou will face is finding people who can continue to use your chosen implementation\ndetails and keep the application going.<\/p>\n\n<p>I am going to guess that of the most common scripting languages out there,\nPHP is one of the easier ways to accomplish this task. A language born of\nthe web, with a lot of web-centric functionality as part of it's standard\nlibrary, can be used by developers who are familiar with how the web actually\nworks.<\/p>\n\n<p>Alex Cabal talks about how when he wants to build something for the web, he\nreaches for PHP. Setting aside the obvious conclusion that people who know\nPHP well don't hesitate to use it, the only point where he seems to deviate\nfrom my own thoughts is on using web application frameworks.<\/p>\n\n<p>In his post he calls them \"scaffolding that he doesn't want to ever see again\"\nwhile I feel like they are the foundation on which you will be forced to\nbuild everything else on.<\/p>\n\n<p>Sure, you can either use the front-controller pattern implemented in a\nframework that intercepts each call and figures out what to do next...or\nyou can tell Apache to do the same thing. Clearly, the Apache approach\nis the \"old school\" way while most frameworks supply a convention you\nneed to follow.<\/p>\n\n<p>I also like the imaginative use of Git to replace the \"M\" part of the\n\"LAMP stack\" (Linux-Apache-MySql-PHP for those not familiar with the term)\nand furthermore the use of storing all their data in memory instead\nof the file system.<\/p>\n\n<p>It's very clear that the folks at Standard Ebooks clearly understand both\nthe domain and the problems they are trying to solve. It's also very clear\nthat they learned to write PHP code long before the current situation of\ntwo dominant frameworks pushing new ideas.<\/p>\n\n<p>Boring is good. Boring allows you to go home on time and also find solutions\nto your problems that were created a decade ago.<\/p>\n\n<h2 id=\"the-costs-of-updating\">The costs of updating<\/h2>\n\n<p>I have two very long-running PHP applications on the web: one was built using\n<a href=\"https:\/\/cakephp.org\">CakePHP<\/a> and the other is free-form PHP that I am slowly\nmigrating towards having some structure using <a href=\"https:\/\/slimframework.com\">Slim<\/a>.\nSo I am familiar with not only updating the underlying dependencies AND with\nhaving to have enough actual knowledge of how the web works to write code that\ndoes not heavily rely on a framework (side note: I think the <a href=\"https:\/\/php-fig.org\">PHP Standards Recommendations Project<\/a> is an unjustly-maligned resource for building web applications).<\/p>\n\n<p>The post from the Freescout folks is a slightly different. In it, they boldly\nstate that they see no need to update the base framework they used to build\nthe application. They have instead chosen to update \"vendor packages\" -- meaning\nthey are patching the original code provided via Composer.<\/p>\n\n<p>Their reasoning is similar to what the Ebooks folks are thinking -- the constant\nreality of having to update your framework components and (possibly) support\nlibraries is real. Now, I could argue that with a good test suite in place this\ndoes become a non-issue but I do not know the state of the test suite for either\napplication.<\/p>\n\n<p>I do know that it certainly feels like more work to go through dependencies\nwritten by other developers and apply your own custom patches to them. Then\nyou are stuck maintaining your own custom version of your dependencies.<\/p>\n\n<p>I don't know -- perhaps I am just lazy and I am more than willing to suffer\nthe pain of upgrading my dependencies for security fixes or new features\nthe developers of the framework want you to embrace. Good test suites are\nthe key and in the absence of them, I hesitate to both do the work myself\nor trust the folks writing the application I am using that \"we haven't had\nany security issues\".<\/p>\n\n<p>Agian, much like in the case of Standard Ebooks, my thoughts on the approach\nthe Freescout team is taking isn't wildly different or even disparaging.\nI just prefer to use other tools to let me know when I need to fix a problem.<\/p>\n\n<h2 id=\"takeways\">Takeways<\/h2>\n\n<p>First, don't hesitate to build things with \"boring\" tools that you understand\nwell. Your users will literally not care.<\/p>\n\n<p>Second, there are at a high level two \"costs\" to using a framework you will have to deal\nwith. The first is how hard is it to embrace the conventions it uses. The\nsecond is how often are you going to have to devote time and effort to\nupdate both the framework and it's dependencies.<\/p>\n\n<p>Third, tests are a great tool you can use to find out what breaks and\/or\nno longer works as expected when you update dependencies.<\/p>\n",
        "date": "2024-01-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Return on Investment on Updating Dependencies",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2024\/01\/07\/roi-on-updating\/"
    },
    {
        "author": null,
        "categories": [
            "speaking"
        ],
        "content": "<h1 id=\"talks-with-secret-topics\">Talks With Secret Topics<\/h1>\n\n<p>I've been speaking at conferences since 2005. Yes, that is\na ridiculously long time. While these talks have mostly been\nabout testing practices, I enjoy creating talks that actually\nhave a secret topic in them. It's usually related to the main\ntopic, but given I usually have 60 minutes to fill I feel like\nI need to give the attendees a glimpse into how my grumpy mind\nworks.<\/p>\n\n<p>Many of my testing talks end up covering one of more \"secret\ntopics\":<\/p>\n\n<ul>\n<li>defensive coding styles<\/li>\n<li>third party tools to apply consistency<\/li>\n<li>design patterns<\/li>\n<li>how luck is just really skill and opportunity intersecting<\/li>\n<\/ul>\n\n<p>On the one hand, I have a captive audience forced to listen to me.\nOn the other hand, I do like to be entertaining and informative.\nChoosing this \"secret topic\" style allows me to embrace what\nI feel are the good parts of me:<\/p>\n\n<ul>\n<li>loves to talk<\/li>\n<li>has seen so so many good and bad things in his career<\/li>\n<li>wants to help people learn faster than I did with less suffering<\/li>\n<\/ul>\n\n<p>I will be speaking at <a href=\"https:\/\/tek.phparch.com\">php[tek] 2024<\/a> in\nChicago at the end of April. After speaking at LonghornPHP in 2022\nI had decided to no longer do testing talks. I've been doing them\nsince 2005. 18 years is enough. Please. No more.<\/p>\n\n<p>I got selected to give two talks, none of which are testing related.\nI want to share what those talks are probably going to look like. I\ndon't have them written yet but I have the outline rattling around\ninside my head and it will get turned into slides and (in a newer twist)\nsome live coding to go with it.<\/p>\n\n<h2 id=\"cqrs-talk...-that-is-really-about-web-site-architectures\">CQRS talk... that is really about web site architectures<\/h2>\n\n<p>My first talk is \"Break loose from CRUD - use CQRS\" where I will show\nhow I refactored a legacy PHP application that was a mess using the\nCommand Query Responsibility Segregation pattern.<\/p>\n\n<p>In order to understand why we have more options that the \"traditional\"\nCreate Read Update Delete (or CRUD) pattern that ties our implementation\nto database-related actions, I plan on doing a brief history of architectures\nthat can be used with web applications. I think a lot of folks simply\nare not aware of the different options available to them due the domination\nof modern PHP web application frameworks by a few <a href=\"https:\/\/laravel.com\">big<\/a>\n<a href=\"https:\/\/symfony.com\">players<\/a>.<\/p>\n\n<p>I chose CQRS for a project because it had been related to another topic\n(<a href=\"https:\/\/martinfowler.com\/eaaDev\/EventSourcing.html\">event sourcing<\/a>]\nthat other much-smarter programmers than me had been talking about.<\/p>\n\n<h2 id=\"neovim-as-php-ide-talk...that-is-really-about-mastering-tools\">NeoVim-as-PHP-IDE talk...that is really about mastering tools<\/h2>\n\n<p>My second talk is about my <a href=\"https:\/\/neovim.io\">NeoVim<\/a> setup for doing\nPHP work. I also use <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a> a lot\nfor my PHP work, but it's good to have options.<\/p>\n\n<p>I learned how to use Vim almost 20 years ago but dabbled constantly with\nother editors. Some of it was tribalism, some of it was my restlessness\nwith the status quo. I've used Vim\/NeoVim for so long that my muscle\nmemory is strong enough to ruin working inside tools that do not support\nVim bindings or modal editing.<\/p>\n\n<p>NeoVim being completely customizable forces you down the road of thoughtful\ncustomization -- since so many things are possible, and not constrained\nby NeoVim itself, you are responsible for figuring out what you want your\nIDE experience to be like.<\/p>\n\n<p>So this talk will cover my own path to selecting and mastering tools.\nUnderstanding the limitations of something is the best way to push it\nin the direction you really want it to go.<\/p>\n\n<h2 id=\"secret-talks-require-confidence\">Secret Talks Require Confidence<\/h2>\n\n<p>It's no secret that I carry myself with a lot of confidence -- the whole\nGrumpy Learning brand would not have worked without it. When you also\ndecide to create secret talks, you need to have the ability to tell a\nstory and weave different elements together to constantly reinforce\nthe overall message.<\/p>\n\n<p>I don't think this technique is for everybody -- it requires being\ncomfortable with the idea that there is a lot of background information\nthat is relevant to the topic your talk is supposed to be covering.<\/p>\n\n<p>At this point, I don't think I could build talks any other way and still\nbe true to myself.<\/p>\n\n<p>I hope to see you at tek2024!<\/p>\n",
        "date": "2023-12-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Talks with secret topics",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/12\/29\/secret-talks\/"
    },
    {
        "author": null,
        "categories": [
            "php",
            "tools"
        ],
        "content": "<h1 id=\"reducing-friction-in-development-environments\">Reducing Friction in Development Environments<\/h1>\n\n<p>As my 27th year of getting paid to create web applications\nstarts to wind down, I reflect on how hard I work to try\nand create a development environment experience (heh, that\nsounds so pretentious when spoken out loud!) that has as\nlittle friction as possible.<\/p>\n\n<p>Late in 2023, what does that look like for me?<\/p>\n\n<h2 id=\"learn-your-editor\">Learn your editor<\/h2>\n\n<p>I have lost count of the number of editors I have used over\nthe years. Some I would never touch again. Some I felt changed\nhow people built all future editors. If it was available for\nmy Mac, I was at least trying it out.<\/p>\n\n<p>One thing that did eventually change was that I\nsettled on one editor (well, sort-of) and dedicated time\nto exploring it's other features beyond just editing text.<\/p>\n\n<p>Just to be clear, I really don't care what editor you use.\nI just think you should pick one and learn it really well.<\/p>\n\n<p>I do flip back and forth between <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>\nand <a href=\"https:\/\/neovim.io\">NeoVim<\/a>, depending on the task.\nYears of using Vim and NeoVim has imprinted both modal\nediting and Vim keybindings into my muscle memory, so\nI have Vim bindings installed for PhpStorm.<\/p>\n\n<p>If your editor has an extensive list of keyboard shortcuts,\ntake the time to learn all the common ones. While I'm\nnot some kind of productivity grifter, I do feel like reducing\nthe number of times your hands leave your keyboard can\nonly be a good thing.<\/p>\n\n<p>I should probably stop grabbing my phone so much too.<\/p>\n\n<p>Learning how to use your editor and how easily it can integrate\nwith other tools is, for me, the first step towards reducing\nfriction.<\/p>\n\n<h2 id=\"repeatability\">Repeatability<\/h2>\n\n<p>\"Works on my machine\" is both a joke and a reality when you do\ndevelopment work. Here are some solutions I recommend:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/www.docker.com\">Docker<\/a> to create containers that duplicate production<\/li>\n<li><a href=\"https:\/\/nixos.org\/\">Nix and NixOS<\/a> to make reproducible systems<\/li>\n<\/ul>\n\n<p>The bottom line is that you can reduce friction by adopting\ntools that allow other people to use the same dependencies\nthat you are using. Yes, it can be annoying and frustrating\nto get thing \"just right\", along with duplicating a production\nenvironments that relies on a ton of services. But once you\nhave it as close to production as possible, the time to get\ncode out of your development environment and into production\nis greatly reduced.<\/p>\n\n<h2 id=\"standards\">Standards<\/h2>\n\n<p>Coding standards make sure your code all looks the same. I should\nnot be able to figure out who wrote some code by looking at it.\nStatic code analysis applies standards in terms of how the code\nyou wrote should be used by others. Testing standards ensure\nthat you have confidence that the code you wrote will continue\nto behave in the way you expect it to.<\/p>\n\n<h2 id=\"automation\">Automation<\/h2>\n\n<p>For me, this is the one that I think a lot of developers need\nto embrace more. Write small shell scripts to execute multiple\ncommands that you type into your CLI. Use Makefiles. Add things\nto your <code>composer.json<\/code> file so you can type <code>composer test<\/code>\nand have the tests run.<\/p>\n\n<p>Everything you can do to automate repetitive tasks is one less\nthing you have to remember. I'd rather be working on solving\na business-related problem than remembering what order I need\nto run these 10 commands to get my code from my laptop and into\nproduction.<\/p>\n\n<h2 id=\"willingness-to-learn\">Willingness to Learn<\/h2>\n\n<p>I don't know how typical I am in terms of evaluating my tools\nand techniques on a regular basis, but I feel like my willingness\nto learn new things and try out new tools that solve old problems\nhas really helped me reduce friction.<\/p>\n\n<p>Except for rebasing things in Git. That still gives me so many\nproblems and I will go to my post-programming life insisting\nthat version control systems do not need to be so complicated.<\/p>\n\n<h2 id=\"too-much-friction-causes-fires\">Too Much Friction Causes Fires<\/h2>\n\n<p>I think my over-arching point is that the tools you use to\nwrite code every day should not cause you problems. It's entirely\npossible I have learned to ignore the rough edges my tools\npresent (Vim certainly has a steep learning curve) but I truly\nwork on making sure a computer does repetitive actions for me\nas much as possible. It's not going to complain about it to me.<\/p>\n\n<p>I hope I've gotten you to start evaluating or re-evaluating your\nchosen tools and find some new-or-different ways to reduce\nany friction you are finding in your development environments\nand processes.<\/p>\n",
        "date": "2023-09-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Reducing Friction in Development Environments",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/09\/29\/reducing-friction-in-development-environments\/"
    },
    {
        "author": null,
        "categories": [
            "testing",
            "php"
        ],
        "content": "<h1 id=\"deciding-how-to-test-bug-fixes\">Deciding How To Test Bug Fixes<\/h1>\n\n<p>\"Hey Chris, I see that when Rusty went and updated his rotation for this\nweek, there are two entries. Looks like a bug.\"<\/p>\n\n<p>For my <a href=\"https:\/\/www.ibl.org\">other hobby<\/a> I also created a series of\nold-school-spaghetti-and-lasagna-style PHP scripts for doing the\njob of keeping track of rosters, player movement, and potential\npitching rotations. It was a mess. I was initially inspired by\nRasmus Lerdorf's <a href=\"https:\/\/toys.lerdorf.com\/the-no-framework-php-mvc-framework\">\"The no-framework PHP MVC framework\"<\/a>\nblog post. I did a really bad implementation.<\/p>\n\n<p>But that was okay, because only a few people used it and I\nhad extensive domain knowledge that made figuring out what\nthe expected behaviour was supposed to be.<\/p>\n\n<p>While I was <a href=\"https:\/\/www.investopedia.com\/terms\/f\/funemployment.asp\">funemployed<\/a> during December 2022\nI decided to go back and apply some structure to this application.\nIt became a <a href=\"https:\/\/www.slimframework.com\">Slim<\/a> + <a href=\"https:\/\/www.doctrine-project.org\">Doctrine<\/a>\napplication and I started working on refactoring it while also\nmaking sure existing functionality behaved as expected.<\/p>\n\n<p>It had very few tests and I did set about writing tests for the\nrefactored versions because who wants bugs? Except I forgot to\ndo some for some refactored functionality.<\/p>\n\n<p>At a high level, here is the bug:<\/p>\n\n<ul>\n<li>a user is presented with a form to add free-form text to specific rows<\/li>\n<li>when they click on the Save button, it is supposed to update details<\/li>\n<li>it was instead adding new details, not updating<\/li>\n<\/ul>\n\n<p>No problem, I can fix this (and re-learn some things I had forgotten\nabout Doctrine) and will also test this.<\/p>\n\n<h2 id=\"manual-vs.-automated\">Manual vs. Automated<\/h2>\n\n<p>As many people who have listened to me talk, in my opinion there is\na constant tension between \"testing things manually\" and \"writing\nan automated test\". Sometimes this tension is because the people\ninvolved are lazy. Sometimes it is due to time constraints. Sometimes\nit's because the current system is difficult to test in an automated\nway.<\/p>\n\n<p>In this case I actually had two choices. I could work on code changes\nand manually test them using the application itself. This is actually\nhow I normally do work on this particular application.<\/p>\n\n<p>(As an aside, my normal policy is \"if you pay me, I will automate\nas much of the testing as I can\". For hobby projects I literally\ndo whatever I feel like)<\/p>\n\n<p>After looking at the refactored code, I realized that I would have\nto make a bunch of changes so this was a great opportunity to create\nan automated test that uses a real database.<\/p>\n\n<p>This is very low-risk for this project as I am doing 99% of the\ndevelopment work on this code base. There is no build server running\na series of checks. I need the real database to be there for me to\ntest out the \"customer-facing\" side of this application so no new\ninfrastructure is needed.<\/p>\n\n<h2 id=\"real-tests\">Real Tests<\/h2>\n\n<p>This is the actual test I wrote and what the code looks like now.\nI have been working on separating things out into Commands and Queries.\nThis was a Command I had to fix.<\/p>\n\n<p>So, as always, I started off with a test. I still do Arrange-Act-Assert\nas a way to organize the test. I thought about dependencies, like\na Request object and a Response object.<\/p>\n\n<pre><code class=\"php\">        $req = $this-&gt;createMock(Request::class);\n        $req-&gt;expects($this-&gt;once())\n            -&gt;method('getParsedBody')\n            -&gt;willReturn([\n                'week' =&gt; 99,\n                'franchise_id' =&gt; [1],\n                'rotation' =&gt; ['Moe, Larry, Curly'],\n                'current_rotation' =&gt; [''],\n                'rotation_id' =&gt; [0],\n            ]\n        );\n\n        $response = $this-&gt;createMock(Response::class);\n        $response-&gt;expects($this-&gt;any())-&gt;method('withStatus')-&gt;will($this-&gt;returnSelf());\n        $response-&gt;expects($this-&gt;any())-&gt;method('withHeader')-&gt;will($this-&gt;returnSelf());\n<\/code><\/pre>\n\n<p>I also needed to make sure the database would work inside my test\nenvironment. I just cut-and-paste code from a bootstrapping section\nelsewhere in the application. Next time I write a test that needs\nto use the database, I will extract this code into a helper.<\/p>\n\n<pre><code class=\"php\">        $container = new Container(require __DIR__ . '\/..\/..\/config\/settings.php');\n        $container-&gt;set(EntityManager::class, static function (Container $c): EntityManager {\n            $settings = $c-&gt;get('settings');\n\n            $cache = $settings['doctrine']['dev_mode'] ?\n                new ArrayAdapter() :\n                new FilesystemAdapter(directory: $settings['doctrine']['cache_dir']);\n\n            $config = ORMSetup::createAttributeMetadataConfiguration(\n                $settings['doctrine']['metadata_dirs'],\n                $settings['doctrine']['dev_mode'],\n                null,\n                $cache\n            );\n\n            return EntityManager::create($settings['doctrine']['connection'], $config);\n        });\n\n<\/code><\/pre>\n\n<p>Because the application uses a dependency injection container, I also needed to\nmake sure my repository object I needed in the code would be available.<\/p>\n\n<pre><code class=\"php\">        $container-&gt;set(RotationRepository::class, function (Container $c): RotationRepository {\n            return new RotationRepositoryUsingDoctrine($c-&gt;get(EntityManager::class));\n        });\n\n\n        \/** @var RotationRepositoryUsingDoctrine $repo *\/\n        $repo = $container-&gt;get(RotationRepository::class);\n<\/code><\/pre>\n\n<p>With those all set, the test becomes:<\/p>\n\n<ul>\n<li>Given I have an existing rotation<\/li>\n<li>When I update that rotation<\/li>\n<li>I should only see that updated rotation in the database<\/li>\n<\/ul>\n\n<pre><code class=\"php\">        $command = new UpdateRotationsCommand($repo);\n        $command-&gt;__invoke($req, $response);\n\n        $rotation = $repo-&gt;getByWeekAndFranchiseId(99, 1);\n\n        $req = $this-&gt;createMock(Request::class);\n        $req-&gt;expects($this-&gt;once())\n            -&gt;method('getParsedBody')\n            -&gt;willReturn([\n                'week' =&gt; 99,\n                'franchise_id' =&gt; [1],\n                'rotation' =&gt; ['Moe, Larry, Curly Joe'],\n                'rotation_id' =&gt; [$rotation-&gt;getId()],\n                'current_rotation' =&gt; ['Moe, Larry, Curly'],\n            ]\n        );\n        $command = new UpdateRotationsCommand($container-&gt;get(RotationRepository::class));\n        $command-&gt;__invoke($req, $response);\n\n        $rotation = $repo-&gt;getByWeekAndFranchiseId(99, 1);\n\n        $this-&gt;assertEquals('Moe, Larry, Curly Joe', $rotation-&gt;getRotation());\n<\/code><\/pre>\n\n<p>This test took me a bit of work to get exactly right, but I didn't go an write\nany additional code just quite yet. I needed to:<\/p>\n\n<ul>\n<li>update the <code>UpdateRotationsCommand<\/code><\/li>\n<li>add a new <code>getByWeekAndFranchiseId<\/code> method to my rotations repository object<\/li>\n<\/ul>\n\n<pre><code class=\"php\">final class UpdateRotationsCommand\n{\n    public function __construct(private RotationRepository $repo) {}\n\n    public function __invoke(Request $req, Response $response): Response \n    {\n        $params = $req-&gt;getParsedBody();\n        $week = (int) $params['week'];\n\n        $franchiseIds = $params['franchise_id'];\n        $rotations = $params['rotation'];\n        $rotationIds = $params['rotation_id'] ?? [];\n        $currentRotations = $params['current_rotation'];\n\n        foreach ($franchiseIds as $idx =&gt; $franchiseId) {\n            if ($rotations[$idx] !== $currentRotations[$idx]) {\n\n                if (isset($rotationIds[$idx]) &amp;&amp; (int)$rotationIds[$idx] !== 0) {\n                    $rotation = $this-&gt;repo-&gt;getById((int)$rotationIds[$idx]);\n                    $rotation-&gt;setId((int)$rotationIds[$idx]);\n                } else {\n                    $rotation = new Rotation();\n                }\n\n                $rotation-&gt;setWeek($week);\n                $rotation-&gt;setRotation($rotations[$idx]);\n                $rotation-&gt;setFranchiseId((int) $franchiseId);\n                $this-&gt;repo-&gt;save($rotation);\n            }\n        }\n\n        return $response\n            -&gt;withHeader('Location', '\/rotation_management?week=' . $week)\n            -&gt;withStatus(302);\n    }\n}\n<\/code><\/pre>\n\n<p>I remain convinced I can improve that code in the <code>foreach<\/code> but my goal is\nalways to make sure the bug no longer exists and then, if I want, go back\nand make it \"nicer\".<\/p>\n\n<pre><code class=\"php\">    public function getByWeekAndFranchiseId(int $week, int $franchiseId): Rotation \n    {\n        return $this-&gt;em\n            -&gt;getRepository(Rotation::class)\n            -&gt;findOneBy(['week' =&gt; $week, 'franchiseId' =&gt; $franchiseId]);\n    }\n<\/code><\/pre>\n\n<p>So now I have an automated test that verifies that the bug was reported\nno longer exists. Are there any new bugs lurking? No idea. Only three people\nuse this application so there are a whole series of tests I probably will\nnever have to write.<\/p>\n\n<p>Here is the complete test:<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\ORMSetup;\nuse PHPUnit\\Framework\\TestCase;\nuse Slim\\Psr7\\Request;\nuse Slim\\Psr7\\Response;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse UMA\\DIC\\Container;\nuse Webreg\\Command\\UpdateRotationsCommand;\nuse Webreg\\Repository\\RotationRepository;\nuse Webreg\\Repository\\RotationRepositoryUsingDoctrine;\n\nfinal class UpdateRotationsCommandTest extends TestCase\n{\n    \/**\n     * @test\n     *\/\n    public function itUpdatesExistingRecordsCorrectly(): void\n    {\n        $req = $this-&gt;createMock(Request::class);\n        $req-&gt;expects($this-&gt;once())\n            -&gt;method('getParsedBody')\n            -&gt;willReturn([\n                'week' =&gt; 99,\n                'franchise_id' =&gt; [1],\n                'rotation' =&gt; ['Moe, Larry, Curly'],\n                'current_rotation' =&gt; [''],\n                'rotation_id' =&gt; [0],\n            ]\n        );\n\n        $response = $this-&gt;createMock(Response::class);\n        $response-&gt;expects($this-&gt;any())-&gt;method('withStatus')-&gt;will($this-&gt;returnSelf());\n        $response-&gt;expects($this-&gt;any())-&gt;method('withHeader')-&gt;will($this-&gt;returnSelf());\n\n        $container = new Container(require __DIR__ . '\/..\/..\/config\/settings.php');\n        $container-&gt;set(EntityManager::class, static function (Container $c): EntityManager {\n            $settings = $c-&gt;get('settings');\n\n            $cache = $settings['doctrine']['dev_mode'] ?\n                new ArrayAdapter() :\n                new FilesystemAdapter(directory: $settings['doctrine']['cache_dir']);\n\n            $config = ORMSetup::createAttributeMetadataConfiguration(\n                $settings['doctrine']['metadata_dirs'],\n                $settings['doctrine']['dev_mode'],\n                null,\n                $cache\n            );\n\n            return EntityManager::create($settings['doctrine']['connection'], $config);\n        });\n\n        $container-&gt;set(RotationRepository::class, function (Container $c): RotationRepository {\n            return new RotationRepositoryUsingDoctrine($c-&gt;get(EntityManager::class));\n        });\n\n\n        \/** @var RotationRepositoryUsingDoctrine $repo *\/\n        $repo = $container-&gt;get(RotationRepository::class);\n\n        $command = new UpdateRotationsCommand($repo);\n        $command-&gt;__invoke($req, $response);\n\n        $rotation = $repo-&gt;getByWeekAndFranchiseId(99, 1);\n\n        $req = $this-&gt;createMock(Request::class);\n        $req-&gt;expects($this-&gt;once())\n            -&gt;method('getParsedBody')\n            -&gt;willReturn([\n                'week' =&gt; 99,\n                'franchise_id' =&gt; [1],\n                'rotation' =&gt; ['Moe, Larry, Curly Joe'],\n                'rotation_id' =&gt; [$rotation-&gt;getId()],\n                'current_rotation' =&gt; ['Moe, Larry, Curly'],\n            ]\n        );\n        $command = new UpdateRotationsCommand($container-&gt;get(RotationRepository::class));\n        $command-&gt;__invoke($req, $response);\n\n        $rotation = $repo-&gt;getByWeekAndFranchiseId(99, 1);\n\n        $this-&gt;assertEquals('Moe, Larry, Curly Joe', $rotation-&gt;getRotation());\n    }\n}\n<\/code><\/pre>\n\n<p>So now I know that manually testing things is the last option to verify\nbehaviour, not my only option.<\/p>\n",
        "date": "2023-05-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deciding How To Test Bug Fixes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/05\/03\/deciding-how-to-test-bug-fixes\/"
    },
    {
        "author": null,
        "categories": [
            "testing",
            "php",
            "tools"
        ],
        "content": "<h1 id=\"neovim-and-xdebug\">NeoVim and Xdebug<\/h1>\n\n<p>As I continue to work on the configuration for the <a href=\"https:\/\/neovim.io\">One True Editor<\/a>\nI had everything working just about the way that duplicated how I use <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>\nexcept for one thing -- using <a href=\"https:\/\/xdebug.org\">Xdebug<\/a>.<\/p>\n\n<p>As I write this blog post I have an article submitted for <a href=\"https:\/\/www.phparch.com\">php[architect]<\/a>\non how I use NeoVim to do PHP development work and in that article\nI talked about the next few things I was going to work on adding\nsupport for ($100 a year to do enemy research on Copilot AI?!?)\nand getting the tool that I regret not embracing earlier but\nnow find it indispensable.<\/p>\n\n<p>This is not the blog post if you are looking to figure out\nhow to get Xdebug running with whatever version of PHP you\nare trying to use. The excellent documentation on the Xdebug\nweb site will absolutely point you in the right direction.<\/p>\n\n<p>In my case, I went the route of manually compiling the 3.2.x\nseries (I honestly cannot remember why) but most package\nmanagers for your operating system of choice can help you\nwith that.<\/p>\n\n<h2 id=\"xdebug-and-dap\">Xdebug and DAP<\/h2>\n\n<p>DAP (which is short for the <a href=\"https:\/\/microsoft.github.io\/debug-adapter-protocol\/\">Debug Anywhere Protocol<\/a>.\nLook, you can quibble about who is behind DAP but the overarching\ngoal of providing a standardized way for both debugging tools\nand programming languages to talk to each other makes a lot\nof sense. The <a href=\"https:\/\/microsoft.github.io\/language-server-protocol\/\">Language Server Protocol<\/a>\nis a similar effort that has found a lot of traction outside\nof Microsoft.<\/p>\n\n<h2 id=\"prerequisites\">Prerequisites<\/h2>\n\n<p>You to have the following before we get started:<\/p>\n\n<ul>\n<li>a version of PHP with Xdebug support<\/li>\n<li>NeoVim 0.5+ or better<\/li>\n<li>the ability to edit your NeoVim configuration files<\/li>\n<li>the ability to install NeoVim plugins<\/li>\n<li>Node installed (need it to install some tooling)<\/li>\n<li>Git CLI tools installed<\/li>\n<\/ul>\n\n<h2 id=\"debug-adapter-for-php\">Debug Adapter for PHP<\/h2>\n\n<p>To start, I followed the excellent instructions found <a href=\"https:\/\/github.com\/mfussenegger\/nvim-dap\/wiki\/Debug-Adapter-installation#PHP\">here<\/a>\nbut to replicate them here:<\/p>\n\n<pre><code class=\"bash\">git clone https:\/\/github.com\/xdebug\/vscode-php-debug.git\ncd vscode-php-debug\nnpm install &amp;&amp; npm run build\n<\/code><\/pre>\n\n<p>Leveraging an existing tool to make it work is always galaxy-brain-level\nthinking.<\/p>\n\n<p>Next, I decided on which plugins I wanted to use to interact\nwith Xdebug while inside NeoVim. I chose:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/github.com\/mfussenegger\/nvim-dap\">mfussenegger\/nvim-dap<\/a> for high-level support<\/li>\n<li><a href=\"https:\/\/github.com\/rcarriga\/nvim-dap-ui\">rcarriga\/nvim-dap-ui<\/a> as my UI for looking at the debug details<\/li>\n<li><a href=\"https:\/\/github.com\/theHamsta\/nvim-dap-virtual-text\">theHamsta\/nvim-dap-virtual-text<\/a> find variable definitions<\/li>\n<li><a href=\"https:\/\/github.com\/nvim-telescope\/telescope-dap.nvim\">nvim-telescope\/telescope-dap.nvim<\/a> to provide compatibility with Telescope<\/li>\n<\/ul>\n\n<p>Again, I encourage people to start with a base that WORKS and\nthen start experimenting to get it the way you want it.<\/p>\n\n<h2 id=\"dap-plugin-configuration\">DAP Plugin Configuration<\/h2>\n\n<p>Again, this is for my own setup. It might be different for your\nown.<\/p>\n\n<p>I needed to make sure that I turn on Telescope support in my\n<code>init.vim<\/code> file. I need it for other plugins but make sure\nyou enable it if you are using <code>telescope-dap.nvim<\/code>.<\/p>\n\n<pre><code class=\"bash\">lua require('telescope').setup\n<\/code><\/pre>\n\n<p>Note that the above is how to load <a href=\"https:\/\/www.lua.org\">Lua<\/a> files\ninside a <a href=\"https:\/\/devhints.io\/vimscript\">Vimscript<\/a> file. I am starting\nto work on the outline of using Lua for all my NeoVim configuration\nsettings.<\/p>\n\n<p>Next, I have a configuration file just for DAP that I also load in\nmy <code>init.vim<\/code> file:<\/p>\n\n<pre><code class=\"lua\">local dap = require('dap')\nrequire('telescope').load_extension('dap')\n\ndap.adapters.php = {\n    type = \"executable\",\n    command = \"node\",\n    args = { os.getenv(\"HOME\") .. \"\/vscode-php-debug\/out\/phpDebug.js\" }\n}\n\ndap.configurations.php = {\n    {\n        type = \"php\",\n        request = \"launch\",\n        name = \"Listen for Xdebug\",\n        port = 9003\n    }\n}\n<\/code><\/pre>\n\n<p>In here I tell NeoVim:<\/p>\n\n<ul>\n<li>load the DAP extension for Telescope (it overrides the default UI)<\/li>\n<li>I want to use the VS Code DAP adapter<\/li>\n<li>what port to listen for Xdebug info on (Xdebug 3.2.x goes with 9003 as the standard port)<\/li>\n<\/ul>\n\n<p>On the Xdebug web site section <a href=\"https:\/\/github.com\/xdebug\/vscode-php-debug#supported-launchjson-settings\">about VS Code<\/a>\nit points out that you can also add in a <code>pathMappings<\/code>\nvalue in <code>dap.configurations.php<\/code> to \"map the files on the server to\nthe right files on your local machine.\" and gives an example.<\/p>\n\n<p>I don't use <code>pathMappings<\/code> and my setup works just fine.<\/p>\n\n<p>Of course, I could not really use Xdebug from inside the editor without\nsome keyboard mappings:<\/p>\n\n<pre><code class=\"lua\">vim.keymap.set('n', '&lt;F5&gt;', function() require('dap').continue() end)\nvim.keymap.set('n', '&lt;F10&gt;', function() require('dap').step_over() end)\nvim.keymap.set('n', '&lt;F11&gt;', function() require('dap').step_into() end)\nvim.keymap.set('n', '&lt;F12&gt;', function() require('dap').step_out() end)\nvim.keymap.set('n', '&lt;Leader&gt;b', function() require('dap').toggle_breakpoint() end)\nvim.keymap.set('n', '&lt;Leader&gt;B', function() require('dap').set_breakpoint() end)\nvim.keymap.set('n', '&lt;Leader&gt;lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)\nvim.keymap.set('n', '&lt;Leader&gt;dr', function() require('dap').repl.open() end)\nvim.keymap.set('n', '&lt;Leader&gt;dl', function() require('dap').run_last() end)\nvim.keymap.set({'n', 'v'}, '&lt;Leader&gt;dh', function()\n  require('dap.ui.widgets').hover()\nend)\nvim.keymap.set({'n', 'v'}, '&lt;Leader&gt;dp', function()\n  require('dap.ui.widgets').preview()\nend)\nvim.keymap.set('n', '&lt;Leader&gt;df', function()\n  local widgets = require('dap.ui.widgets')\n  widgets.centered_float(widgets.frames)\nend)\nvim.keymap.set('n', '&lt;Leader&gt;ds', function()\n  local widgets = require('dap.ui.widgets')\n  widgets.centered_float(widgets.scopes)\nend)\n<\/code><\/pre>\n\n<p>My usual workflow for debugging is:<\/p>\n\n<ul>\n<li>code I am debugging open in the editor<\/li>\n<li>if I didn't already start debugging, hit <code>F5<\/code> to turn on the debugging session<\/li>\n<li>set breakpoints where I want them with <code>\\b<\/code><\/li>\n<li>run the code, step through the breakpoints, and see what's going on<\/li>\n<\/ul>\n\n<p>Not different in any significant way than how I would do things in PhpStorm.<\/p>\n\n<p>So there you have it! If you are a NeoVim user and want to\nstart utilizing Xdebug to help you, well, debug your code\nfaster my documentation above should get you pointed in\nthe correct direction.<\/p>\n",
        "date": "2023-04-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "NeoVim and Xdebug",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/04\/03\/neovim-and-xdebug\/"
    },
    {
        "author": null,
        "categories": [
            "testing",
            "tools"
        ],
        "content": "<h1 id=\"thinking-about-testing-too-much\">Thinking About Testing Too Much<\/h1>\n\n<p>Back in February and had a <a href=\"https:\/\/www.freethegeek.fm\/51\">very long and fun chat<\/a> with\nmy friend Matt Setter about the one topic I think about way too much -- testing. Rather\nthan steal what Matt wrote, just go read the linked above post to get a sense of what\nwe discussed. If you have followed my rantings online for any period of time, none of\nwhat I discussed there should be new to you.<\/p>\n\n<p>I mean, you can't really blame me -- my career niche has been \"testing PHP code\" since at\nleast 2006. That is a really, really long time to be focussed on an issue. Now, I might\nnot be the best programmer (a lot of times I feel like I have been doing programming for\n1 year, 25 times) but I do know a ton about what does and does not lead to good outcomes\nfor long-running projects.<\/p>\n\n<h2 id=\"the-next-wave-of-testing\">The Next Wave Of Testing<\/h2>\n\n<p>As I write this, I am at a crossroads as to what to talk about next. I'm kind of over speaking\nat conferences except in places I have not been (if you are an organizer of an event in Africa,\nSouth America, or Japan -- please get in touch) and I am not sure I want to put the effort\nin to write yet another book or do training courses. If I am being honest, I am getting older\nand like hanging out at home more and having unstructured time. I have two frustrating hobbies\nthat can keep my mind sharp. Arguing with people about testing their code feels like a losing\nproposition and a huge waste of my time.<\/p>\n\n<p>So, what I have found interesting is the increasingly-growing idea that there are some code-related\nthings that you can do that can reduce the amount of tests you need to write for your code\nor sometimes even eliminate them. This is, of course, at best misguided and at worst, wrong.<\/p>\n\n<h2 id=\"types-as-tests\">Types As Tests<\/h2>\n\n<p>When they got introduced into the language, I viewed typing (I define it as declaring at creation\nwhat 'type' of thing an object or variable is supposed to be) as something that would get rid\nof some types of tests I found myself writing and allow the PHP interpreter to enforce rules\nabout what sort of things my code was returning to other code that called it. No more tests\nverifying that a method returned an array!<\/p>\n\n<p>They are NOT a substitute for tests. They are a helpful tool that provides intent for your code\nand greatly reduces the likelihood of SOME types of errors happening when (for example) your\ncode is expecting a list of things and instead gets a string.<\/p>\n\n<h2 id=\"static-analysis-as-tests\">Static Analysis As Tests<\/h2>\n\n<p>Static analysis tools are something I have been using professionally for a few years. They are\nan additional layer ON TOP OF types that goes even further down the road of making sure the intent\nof your code is clear. Sure, it's annoying to have a tool say \"well, actually, you said over HERE\nthat you are expecting an array but you ACTUALLY are passing a list. What one is it?\" but it's\nbetter than you trying to figure out why some code you wrote yesterday suddenly stopped working\ntoday when you (and this is often not reality) \"didn't change anything\".<\/p>\n\n<p>Again, these are NOT a substitute for tests. They are a COMPLEMENTARY tool for testing. Just because\nPHPStan is not reporting any errors doesn't mean your code is behaving as expected!<\/p>\n\n<h2 id=\"grumpy%27s-theory-on-tests\">Grumpy's Theory On Tests<\/h2>\n\n<p>I am incredibly confident in saying that you should 100% have automated tests for your application\nthat cover:<\/p>\n\n<ul>\n<li>business logic<\/li>\n<li>how your users will interact with your app<\/li>\n<\/ul>\n\n<p>What testing tools you use to make this happens is up to you. If you have done a decent job of\ncreating a decoupled code base where you are injecting dependencies to your objects (let's be\nreal, 90% of PHP code out there still running and accessible online is object oriented) then\nyou should be able to write unit tests where you create the dependencies the code you are testing\nneeds.<\/p>\n\n<p>They can be the real thing (which I prefer) or doubles (don't be scared, you probably waste more\ntime on social media than it would take to keep the doubles in sync as you work on the code base)\nbut you MUST have the ability to modify these dependencies at run time.<\/p>\n\n<p>If you also write your code in a more defensive style -- think filtering input, escaping output,\nvalidating things, using immutability -- your tests become easier\nto create and the testing scenarios you create become easier and easier to define and implement.<\/p>\n\n<p>You need tests. Your code should be easy to test. I'm not mad at you if your code isn't in a place\nwhere it easy to test. There are ways  to make them testable. No, I am\nnot talking about end-to-end tests with browser automation. Those are brittle and I have seen too\nmany of those types of test suites with weird custom helpers and step definitions that do not\nreflect how the application works AT ALL. Don't do that. Browser automation is a last, desperate\ntest in my opinion.<\/p>\n\n<p>Write assertion-based tests using real dependencies as much as possible. I'm happy to help you\nget there. It will cost some time and some money but it will make the cost of the NEXT change so\nmuch easier.<\/p>\n\n<p>Hope you enjoyed the results of thinking too much about this stuff. There is SO much more I want\nto learn in order to make your testing tasks easier.<\/p>\n",
        "date": "2023-03-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Thinking About Testing Too Much",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/03\/09\/thinking-about-it-too-much\/"
    },
    {
        "author": null,
        "categories": [
            "tools"
        ],
        "content": "<h2 id=\"why-does-search-matter%3F\">Why does search matter?<\/h2>\n\n<p>I recently decided to take all the old posts from my old blog AtTheKeyboard\nand add them to this site. Since I used the same <a href=\"https:\/\/getsculpin.io\">blogging system<\/a> it\nwas as simple as copying the markdown source into the correct place\nand generating static HTML for it.<\/p>\n\n<p>I used to have a custom Google site search configured but in this new\nage of me giving a shit about the <a href=\"https:\/\/indieweb.org\">IndieWeb<\/a> I wanted\nsomething a little more open and a little more free. I needed something else.<\/p>\n\n<p>Like all things, this solution might not work one day but I will worry\nabout that when the time comes.<\/p>\n\n<p>Since I have blog posts dating all the way back to 2005 I felt it was\nessential to allow folks to search for stuff when they come here.<\/p>\n\n<h2 id=\"outsourcing-research\">Outsourcing Research<\/h2>\n\n<p>As someone who has been on social media for along time, the best way to find\nan answer is to just ask your devoted audience a question. Eventually someone\nwill answer you. I had tried to use <a href=\"https:\/\/lunrjs.com\">Lunr<\/a> but there was\na lack of knowledge at my end on how to get the index I generated into the\ncorrect place onto the GitHub-pages-powered version of this web site. I had\ndecided to just use a really basic \"redirect-the-request-to-Google\" input text\nform and rely on my site's new content getting indexed sometime soon.<\/p>\n\n<p>Probably not great but I am the type of person who is lazy-with-intense-bursts-of-action.<\/p>\n\n<p>Luckily for me, <a href=\"https:\/\/phpc.social\/@dgoosens\">Dmitri Goosens<\/a> found a solution\nand let me know. I under 30 minutes I had it all working. Which is stunning to me.<\/p>\n\n<h2 id=\"pagefind\">Pagefind<\/h2>\n\n<p><a href=\"https:\/\/pagefind.app\">Pagefind<\/a> is a CLI-based solution that appears to do everything\nI wanted:<\/p>\n\n<ul>\n<li>it can be run via the CLI<\/li>\n<li>it will index all your blog posts<\/li>\n<li>they provide you with snippets of code to embed search boxes and results<\/li>\n<li>it's customizable (came in handy due to some GitHub Pages limitations)<\/li>\n<\/ul>\n\n<p>Their documentation is great and I now have working static search for my blog. For those<\/p>\n\n<h2 id=\"how-i-do-it\">How I Do It<\/h2>\n\n<p>After adding the suggested code snippets to the pages for my blog, I do the following:<\/p>\n\n<ul>\n<li>build the site pages<\/li>\n<li>run Pagefind to generate the index, specifying where my blog posts are and what directory to put Pagefind-specific stuff in<\/li>\n<li>copy all the stuff over to the repo for my blog<\/li>\n<li>add the changes, commit, and push!<\/li>\n<\/ul>\n\n<p>So, if you have a static blog and were wondering how to make it work, I highly\nrecommend giving Pagefind a try.<\/p>\n",
        "date": "2023-02-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Adding search to a static blog",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/02\/10\/adding-search-to-a-static-blog\/"
    },
    {
        "author": null,
        "categories": [
            "testing",
            "PHP"
        ],
        "content": "<h2 id=\"what-is-monkey-patching%3F\">What is monkey patching?<\/h2>\n\n<p>I first learned about <a href=\"https:\/\/en.wikipedia.org\/wiki\/Monkey_patch\">monkey patching<\/a> via the Ruby community. Due to how\nthe language worked, Rubyists tended to override dependencies in their\ntests at run-time, rather than using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Test_double\">test doubles<\/a>.\nPersonally I find the ability to redefine <em>any<\/em> part of the language to be interesting. It \ncertainly does make testing easier.<\/p>\n\n<p>Now, PHP doesn't support the sort of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Metaprogramming\">metaprogramming<\/a> that lends\nitself to making monkey patching easy. Sure, you used to be able to use the Runkit extension but\nthese days, it's not being maintained. So, when we run into a situation where you need to redefine\nsome functionality at run time, your options are limited.<\/p>\n\n<h2 id=\"when-to-use-it%3F\">When to use it?<\/h2>\n\n<p>Like I said before, it can be an alternative to using test doubles. But there are also some\ninteresting scenarios where, due to both PHP's behaviour and the architecture of an application,\nwe can make a change at run time.<\/p>\n\n<p>At my <a href=\"https:\/\/smartours.com\">current gig<\/a> I was adding some functionality\nto verify some objects representing the prices of objects are configured\ncorrectly. One of my tests was to ensure that a specific exception was\nbeing triggered, and that meant creating a new exception object that\nextended a \"loggable\" one.<\/p>\n\n<p>This is code that is being implemented as a <a href=\"https:\/\/wordpress.org\/plugins\/\">plugin<\/a>\nfor WordPress and the logging object I needed to use had some very\nWordPress-specific functionality in it. But I didn't want to have to use all\nthe WordPress-specific stack just for this test. On top of this, the logging\nobject wasn't in a namespace that my <a href=\"https:\/\/phpunit.de\">PHPUnit<\/a> tests could\neven see.<\/p>\n\n<p>So what were my options? My first was to modify the <a href=\"https:\/\/getcomposer.org\">Composer<\/a>\nautoloading configuration and add the namespace to it. I then had a way to\n\"force\" logging into \"test mode\" but I wasn't entirely happy with it. The\ntests passed, the exception was being triggered, but I had worries in the back\nof my mind about whether or not we'd have to do something to the WordPress\nside of the application in order to support this.<\/p>\n\n<p>A <a href=\"https:\/\/phpc.social\/@omerida\">co-worker<\/a> showed me how they were already overriding some things at run-time,\nso it was better to go with what was already working. Introducing uncertainty\ninto our application was not the end goal. Here was their solution:<\/p>\n\n<p>There was an existing <code>test\/bootstrap.php<\/code> file so it was suggested to add a run-time\ncheck to see if the application was attempting to instantiate our logging\nobject via an autoloader and then instead tell it to use a different one.<\/p>\n\n<p>First, a replacement logger was created...<\/p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace Smartours\\Log;\n\nuse Monolog\\Handler\\NullHandler;\nuse Monolog\\Logger;\n\nclass Log\n{\n    public static function logger(): Logger\n    {\n        $logger = new Logger('generic');\n        $logger-&gt;pushHandler(new NullHandler());\n\n        return $logger;\n    }\n}\n\n<\/code><\/pre>\n\n<p>...and then we just included it in our bootstrap file.<\/p>\n\n<pre><code>require __DIR__ . '\/bootstrap\/SmartoursLog.php';\n<\/code><\/pre>\n\n<p>Now, my code that is calling an exception...that needs that\nbase <code>Log<\/code> object...will use my <a href=\"https:\/\/en.m.wikipedia.org\/wiki\/Mock_object\">fake<\/a>\ninstead.<\/p>\n\n<p>The test passes and all is in order again.<\/p>\n\n<h2 id=\"what-are-some-alternatives%3F\">What are some alternatives?<\/h2>\n\n<p>In a more testable world, what logging object the code is\nexpecting to use could be done via a configuration file. We'd\nstill be creating a fake logger, but the mechanism to load it\nwould be different. Most \"modern\" PHP web application frameworks\nsupport the use of <a href=\"https:\/\/en.m.wikipedia.org\/wiki\/Service_locator_pattern\">service locaters<\/a>\nand they can be leveraged to make sure your tests have access\nto the dependencies they need.<\/p>\n\n<p>In the future, if we ever needed to add tests for things like making\nsure the message the exception we throw shows up in the correct log\nfile, this solution will have to adapt to those needs.<\/p>\n\n<p>As always, everyone's testing situation is different and finding\none that fits your need is more important than being perfect..<\/p>\n",
        "date": "2023-01-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Monkey patching in PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2023\/01\/19\/monkeypatching-in-php\/"
    },
    {
        "author": null,
        "categories": [
            "tools"
        ],
        "content": "<h2 id=\"why-python-and-why-irc%3F\">Why Python and why IRC?<\/h2>\n\n<p>My longest-running hobby is being a member of <a href=\"https:\/\/www.ibl.org\">tabletop simulation baseball league<\/a>\nthat uses dice and cards and charts to determine outcomes. There are a lot\nof charts so a signifcant amount of time is spent looking up results that\nplayers haven't memorized.<\/p>\n\n<p>Our league uses IRC as the way to play the games -- the players connect to\nthe server we host and then play games out using a bot that rolls dice\nand communicating with each other via text. Very old school.<\/p>\n\n<p>Making things a little more player-friendly will help the league get\nteam owners up to speed quicker, so naturally I turned to automation\nand programming as a way to do it.<\/p>\n\n<p>I chose Python because it had been a while since I had done <em>anything<\/em> with\nit, so why not sharpen the dull edge of my experience there a little. Thankfully\nthere are lots of examples on how to work with IRC using just the default\nlibraries that come with Python. In this case, the server the bot would be\nrunning on runs Python 3.8. I started off with <a href=\"https:\/\/pythonspot.com\/building-an-irc-bot\/\">this blog post<\/a>\nand went from there.<\/p>\n\n<h2 id=\"initial-implementation\">Initial implementation<\/h2>\n\n<p>From a high level, we are doing the following<\/p>\n\n<p>1) connect to the IRC server\n2) loop endlessly while grabbing any responses from the server\n3) examine those responses for my chosen chartbot trigger\n4) if triggered, then look for dice rolls\n5) display results in-channel<\/p>\n\n<p>Now, I am sure there are better implementations for what I am trying\nto do here involving more commonly-accepted design patterns. In fact,\nthe code analysis tools I am using are already complaining that the\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Cyclomatic_complexity\">cyclomatic complexity<\/a>\nis too high.<\/p>\n\n<p>So, here is an example of what I have been doing<\/p>\n\n<pre><code class=\"python\">while True:\n    text = irc.get_response()\n\n    if \"PRIVMSG\" in text and \".c ifr\" in text:\n        details = text.split(' ')\n        msgChannel = details[-4].strip()\n        batterHand[msgChannel] = details[-1].strip()\n        lookForIfrRoll[msgChannel] = \"yes\"\n<\/code><\/pre>\n\n<p>An example command that this would look for would be '.c ifr rsp'.\nThis maps to:<\/p>\n\n<ul>\n<li>.c is \"activate chartbot\"<\/li>\n<li>ifr is \"Infield Range\"<\/li>\n<li>rsp is \"right-spray hitter\", with other options available<\/li>\n<\/ul>\n\n<p>Early on I realized that I needed to have some kind of \"state\"\nin here because it was a two-step process. Once it knew which\nchart it was supposed to refer to, it then needed to wait to\nget a die roll. Again, this feels like a brute-force method\nbut I could not think of any other way. Maybe, again, there\nis a better pattern for keeping track of this.<\/p>\n\n<p>So, having figured out we want to refer to the \"infield range chart\"\n(commonly known as IFR in game terms), we tell the bot \"the next roll\nin this channel should be checked to see if it works with the IFR chart.\"<\/p>\n\n<p>Here is a sample of the code that watches for an IFR roll:<\/p>\n\n<pre><code class=\"python\">    if \"rolled\" in text:\n        details = text.split(' ')\n        msgChannel = details[-4].strip()\n        roll = details[-1].strip()\n\n        if (msgChannel in lookForIfrRoll and\n                batterHand[msgChannel] in validBatterHand and\n                len(roll) == 2):\n            irc.send(\n                 msgChannel, ifrChart.lookup(batterHand[msgChannel], roll)\n            )\n            del lookForIfrRoll[msgChannel]\n            del batterHand[msgChannel]\n\n<\/code><\/pre>\n\n<p>All rolls for the IFR chart will be from 00-99, so we make sure the rollbot\nreturned something 2 characters in length. We also make sure that the\nbatter hand type matches our expectations. If that is all good, then\nwe call an object that contains our chart information, do a lookup, and\nthen send the results of that lookup into the channel.<\/p>\n\n<p>Here is a sample of what the IFR chart object looks like:<\/p>\n\n<pre><code class=\"python\">class IFRChart:\n    chart = {}\n\n    def __init__(self):\n        self.chart = {\n            'lp': {\n                \"00\": \"Up the middle P\",\n                \"01\": \"High chopper P\",\n                \"02\": \"Line drive P\",\n                \"03\": \"Down the line 1B\",\n                \"04\": \"Down the line 1B\",\n                \"05\": \"Down the line 1B\",\n                # more results snipped\n            }\n        }\n\n    def lookup(self, bats, roll):\n        return self.chart[bats][roll]\n\n<\/code><\/pre>\n\n<p>I will say that creating this chart objects helped me get my muscle\nmemory for Emacs in a better place. So much cut-and-pasting-and-replacing\nof things!<\/p>\n\n<p>So there you have it, a small example of how I have started writing an\nIRC bot that:<\/p>\n\n<ul>\n<li>reads responses for a trigger<\/li>\n<li>figures out what chart to read<\/li>\n<li>waits for a die roll that matches expectations<\/li>\n<li>spits out the lookup result in channel<\/li>\n<\/ul>\n\n<p>As always, I am happy to get some advice on better ways to refactor\nand implement solutions for this code.<\/p>\n",
        "date": "2022-12-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How a grumpy programmer writes Python IRC bots",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/12\/31\/python-irc-bot\/"
    },
    {
        "author": null,
        "categories": [
            "tools"
        ],
        "content": "<h2 id=\"grumpiness-and-neovim\">Grumpiness and NeoVim<\/h2>\n\n<p>I have been a <a href=\"https:\/\/vim.org\">Vim<\/a> user since the early 2000's.\nSomeone who worked in the same building as me and was also a fellow\nLinux user (this was before I had bought my first Macbook) got\nto talking with me as I struggled to figure out <a href=\"https:\/\/www.gnu.org\/software\/emacs\/\">Emacs<\/a>\nsuggested I sit with him for a little bit as he showed me how to\nuse Vim. Still not sure to this day why it clicked with me but I\nhave been using it ever since.<\/p>\n\n<p>In the past few years I have changed which version of Vim I am\nusing and switched to <a href=\"https:\/\/neovim.io\/\">NeoVim<\/a>.<\/p>\n\n<p>Now, to be transparent, these days I use <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>\nas my main PHP programming tool and use NeoVim for pretty much everything\nelse. I do pay for PhpStorm because I think it's important to encourage the creation\nof tools for the programming languages I use. If I was still doing a lot of\nPython work, I'd be paying for <a href=\"https:\/\/www.jetbrains.com\/pycharm\/\">PyCharm<\/a>.\nI had really good experiences with it while at Mozilla.<\/p>\n\n<p>Anyway, I still like to keep up with what is going on in the NeoVim \"community\"\nand I am happy to see a vibrant group of people creating plugins and\nsharing their knowledge. I wanted to give things with NeoVim and PHP another\nspin so it was time to go look at my current setup.<\/p>\n\n<h2 id=\"why-do-all-this%3F\">Why do all this?<\/h2>\n\n<p>My goal is to have a Vim experience that matches the way I currently work.\nI've been using Vim for so long that there is lots of muscle memory and\nI usually enable \"Vim mode\" in any tools I use. Editing things a \"modal way\"\nhas become my default and any tools that don't support doing things that\nway slow me down immensely.<\/p>\n\n<p>So, what do I want out of my NeoVim setup.<\/p>\n\n<ul>\n<li>works well with the languages I will use<\/li>\n<li>allows me to quickly find files<\/li>\n<li>allows me to quickly find source definitions<\/li>\n<li>allows me to quickly find places where code is used<\/li>\n<\/ul>\n\n<p>Now, of course, PhpStorm does all this but also carries a lot of extra\nfunctionality around with it. Which is fine! But in an era where the tools\nwe use on desktop operating systems get bigger and bigger and consume more\nand more resources, I find something appealing in using tools that take up\nas few resources as possible.<\/p>\n\n<p>I did an older post on my old blog from about a year ago so I will\nfollow the same structure but I noticed some changes. I'll be going\nthrough my current NeoVim config and filling things in as we go<\/p>\n\n<pre><code>set nocompatible\nsyntax on \nset encoding=utf8\nfiletype off\n\n\" Load our plugins\nlua require('plugins')\n<\/code><\/pre>\n\n<p>I am using as much <a href=\"https:\/\/www.lua.org\">Lua<\/a> as I can within NeoVim.\nThe first few steps here are pretty much standard:<\/p>\n\n<ul>\n<li>you always turn \"no compatible\" off otherwise lots of things break<\/li>\n<li>I want syntax highlighting by default<\/li>\n<li>I want things to be UTF8<\/li>\n<li>I am going to define my own behaviour for how I want NeoVim to\nhandle filetypes<\/li>\n<\/ul>\n\n<h2 id=\"plugins\">Plugins<\/h2>\n\n<p>My list of plugins:<\/p>\n\n<pre><code class=\"lua\">  return require('packer').startup(function()\n    use 'wbthomason\/packer.nvim'\n    use 'neovim\/nvim-lspconfig'\n\n    -- General plugins\n    use 'dracula\/vim'\n    use 'junegunn\/vim-easy-align'\n    use {\n        'nvim-treesitter\/nvim-treesitter',\n        run = ':TSUpdate'\n    }\n    use 'onsails\/lspkind-nvim'\n    use 'vim-vdebug\/vdebug'\n\n    -- See the git status of the current line in the gutter\n    use 'airblade\/vim-gitgutter'\n\n    --  PHP plugins\n    use 'tpope\/vim-dispatch'\n    use 'StanAngeloff\/php.vim'\n    use 'stephpy\/vim-php-cs-fixer'\n    use 'jwalton512\/vim-blade'\n    use 'noahfrederick\/vim-laravel'\n\n    -- Help for vim-laravel\n    use 'tpope\/vim-projectionist'\n    use 'noahfrederick\/vim-composer'\n\n    -- Respect .editorconfig files for a project\n    use 'editorconfig\/editorconfig-vim'\n\n    -- Telescope support\n    use 'nvim-lua\/plenary.nvim'\n    use 'nvim-telescope\/telescope.nvim'\n    use 'sharkdp\/fd'\n    use {'nvim-telescope\/telescope-fzf-native.nvim', run = 'make' }\n\n    -- LSP support for Typescropt\n    use 'jose-elias-alvarez\/nvim-lsp-ts-utils'\n\n    -- nvim-cmp support\n    use 'hrsh7th\/nvim-cmp'\n    use 'hrsh7th\/cmp-nvim-lsp'\n    use 'saadparwaiz1\/cmp_luasnip'\n    use 'L3MON4D3\/LuaSnip'\n\nend)\n<\/code><\/pre>\n\n<p>I am using <a href=\"https:\/\/github.com\/wbthomason\/packer.nvim\">Packer<\/a> to\nhandle installing all my packages. I have commented in places where I\nfelt that things were not clear, but I guess some further explanations\ncouldn't hurt.<\/p>\n\n<ul>\n<li>I use the <a href=\"https:\/\/draculatheme.com\/vim\">Dracula<\/a> theme<\/li>\n<li>I use <a href=\"https:\/\/github.com\/junegunn\/vim-easy-align\">vim-easy-align<\/a>\nto make it easier to line up blocks of code<\/li>\n<li><a href=\"https:\/\/github.com\/airblade\/vim-gitgutter\">vim-gitgutter<\/a> shows me\nwhich lines have changed from Git's perspective<\/li>\n<li>I like to respect the\n<a href=\"https:\/\/github.com\/editorconfig\/editorconfig-vim\">EditorConfig<\/a>\nsettings for a project if they exist<\/li>\n<li><a href=\"https:\/\/github.com\/nvim-telescope\/telescope.nvim\">Telescope<\/a> \nforms the basis for a lot of fuzzy find functionality<\/li>\n<li>I use <a href=\"https:\/\/github.com\/hrsh7th\/nvim-cmp\">nvim-cmp<\/a> as my\ncompletion engine (and it plays nicely with Intelephense)<\/li>\n<\/ul>\n\n<h2 id=\"more-neovim-settings\">More NeoVim Settings<\/h2>\n\n<pre><code>\" Do smart autoindenting\nset smartindent\nset autoindent\n\n\" I like linenumbers, thanks\nset number\n\n\" set search case to a good configuration http:\/\/vim.wikia.com\/wiki\/Searching\nset ignorecase\nset smartcase\n\n\" I like pretty colours in my terminal\nset t_Co=256\n\n\" Let's get some good colours in our terminal\nlet $NVM_TUI_ENABLE_TRUE_COLOR=1\nset termguicolors\ncolor dracula \n\n\" We want to use ripgrep for any grep commands\nset grepprg='rg'\n\n\" Basic configuration options\nset tabstop=4\nset shiftwidth=4\nset softtabstop=0\nset smarttab\nset expandtab\nset wildmenu\nset wildmode=list:longest,full\nset ttyfast\nset showmatch\nset hlsearch\nset incsearch\nset backspace=indent,eol,start\n\n\" Make sure we are using the version of Python we want\nlet g:python3_host_prog = \"\/opt\/homebrew\/bin\/python3\"\n\n\" We always want to use UTF-8\nset encoding=UTF-8\nset fileencoding=UTF-8\n<\/code><\/pre>\n\n<p>A lot of what is up there is fairly straightforward when it comes to\nVim\/NeoVim, so I am not going to go over a lot of them.<\/p>\n\n<h2 id=\"lsp-configuration\">LSP Configuration<\/h2>\n\n<p>This is the critical piece for me -- supporting different languages\nmakes NeoVim so versatile.<\/p>\n\n<p>In my config I have these two lines:<\/p>\n\n<pre><code>lua require('lsp-config')\nlua require('nvm-cmp')\n<\/code><\/pre>\n\n<p>and these handle my languages and making sure autocompletion behaves\nas I expect.<\/p>\n\n<pre><code class=\"lua\">--- Configuration for LSP, formatters, and linters.\nlocal nvim_lsp = require(\"lspconfig\")\n\n-- short cut methods.\nlocal t = function(str)\n  return vim.api.nvim_replace_termcodes(str, true, true, true)\nend\n\nlocal opts = { noremap=true, silent=true }\nvim.api.nvim_set_keymap('n', '&lt;space&gt;e', '&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;', opts)\nvim.api.nvim_set_keymap('n', '[d', '&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;', opts)\nvim.api.nvim_set_keymap('n', ']d', '&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;', opts)\nvim.api.nvim_set_keymap('n', '&lt;space&gt;q', '&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;', opts)\nvim.api.nvim_set_keymap('n', '&lt;space&gt;f', '&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;', opts)\n\nlocal on_attach = function(client, bufnr)\n  -- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;\n  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')\n\n  -- Mappings.\n  -- See `:help vim.lsp.*` for documentation on any of the below functions\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;C-k&gt;', '&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wa', '&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wr', '&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wl', '&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;D', '&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;rn', '&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;ca', '&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;', opts)\n  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;', opts)\nend\n\n-- PHP\nnvim_lsp.intelephense.setup {\n    cmd = { \"intelephense\", \"--stdio\" },\n    filetypes = { \"php\" },\n}\n\n--- Linter setup\nlocal filetypes = {\n  typescript = \"eslint\",\n  typescriptreact = \"eslint\",\n  php = {\"phpcs\", \"psalm\"},\n}\n\nlocal linters = {\n  phpcs = {\n    command = \"vendor\/bin\/phpcs\",\n    sourceName = \"phpcs\",\n    debounce = 300,\n    rootPatterns = {\"composer.lock\", \"vendor\", \".git\"},\n    args = {\"--report=emacs\", \"-s\", \"-\"},\n    offsetLine = 0,\n    offsetColumn = 0,\n    sourceName = \"phpcs\",\n    formatLines = 1,\n    formatPattern = {\n      \"^.*:(\\\\d+):(\\\\d+):\\\\s+(.*)\\\\s+-\\\\s+(.*)(\\\\r|\\\\n)*$\",\n      {\n        line = 1,\n        column = 2,\n        message = 4,\n        security = 3\n      }\n    },\n    securities = {\n      error = \"error\",\n      warning = \"warning\",\n    },\n    requiredFiles = {\"vendor\/bin\/phpcs\"}\n  },\n  psalm = {\n    command = \".\/vendor\/bin\/psalm\",\n    sourceName = \"psalm\",\n    debounce = 100,\n    rootPatterns = {\"composer.lock\", \"vendor\", \".git\"},\n    args = {\"--output-format=emacs\", \"--no-progress\"},\n    offsetLine = 0,\n    offsetColumn = 0,\n    sourceName = \"psalm\",\n    formatLines = 1,\n    formatPattern = {\n      \"^[^ =]+ =(\\\\d+) =(\\\\d+) =(.*)\\\\s-\\\\s(.*)(\\\\r|\\\\n)*$\",\n      {\n        line = 1,\n        column = 2,\n        message = 4,\n        security = 3\n      }\n    },\n    securities = {\n      error = \"error\",\n      warning = \"warning\"\n    },\n    requiredFiles = {\"vendor\/bin\/psalm\"}\n  }\n}\n\nnvim_lsp.diagnosticls.setup {\n  on_attach = on_attach,\n  filetypes = vim.tbl_keys(filetypes),\n  init_options = {\n    filetypes = filetypes,\n    linters = linters,\n  },\n}\n<\/code><\/pre>\n\n<p>A lot of what is in here I simple stole from other people's\nconfigurations but I think most of it should be straightforward to\nfigure out.<\/p>\n\n<p>Some highlights from my perspective:<\/p>\n\n<ul>\n<li>you pick which language servers to care about<\/li>\n<li>you map functionality to existing Vim bindings so, again, it behaves\nas expected<\/li>\n<\/ul>\n\n<p>Here is what I have for getting the autocompletion engine working:<\/p>\n\n<pre><code class=\"lua\">local capabilities = vim.lsp.protocol.make_client_capabilities()\n\nlocal lspconfig = require('lspconfig')\n\n-- Enable some language servers with the additional completion capabilities offered by nvim-cmp\nlocal servers = { 'intelephense', 'tsserver' }\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup {\n    -- on_attach = my_custom_on_attach,\n    capabilities = capabilities,\n  }\nend\n\n-- luasnip setup\nlocal luasnip = require 'luasnip'\n\n-- nvim-cmp setup\nlocal cmp = require 'cmp'\ncmp.setup {\n  snippet = {\n    expand = function(args)\n      require('luasnip').lsp_expand(args.body)\n    end,\n  },\n  mapping = {\n    ['&lt;C-p&gt;'] = cmp.mapping.select_prev_item(),\n    ['&lt;C-n&gt;'] = cmp.mapping.select_next_item(),\n    ['&lt;C-d&gt;'] = cmp.mapping.scroll_docs(-4),\n    ['&lt;C-f&gt;'] = cmp.mapping.scroll_docs(4),\n    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),\n    ['&lt;C-e&gt;'] = cmp.mapping.close(),\n    ['&lt;CR&gt;'] = cmp.mapping.confirm {\n      behavior = cmp.ConfirmBehavior.Replace,\n      select = true,\n    },\n    ['&lt;Tab&gt;'] = function(fallback)\n      if cmp.visible() then\n        cmp.select_next_item()\n      elseif luasnip.expand_or_jumpable() then\n        luasnip.expand_or_jump()\n      else\n        fallback()\n      end\n    end,\n    ['&lt;S-Tab&gt;'] = function(fallback)\n      if cmp.visible() then\n        cmp.select_prev_item()\n      elseif luasnip.jumpable(-1) then\n        luasnip.jump(-1)\n      else\n        fallback()\n      end\n    end,\n  },\n  sources = {\n    { name = 'nvim_lsp' },\n    { name = 'luasnip' },\n  },\n}\n<\/code><\/pre>\n\n<p>Again, more mapping of existing keys to get the plugin to behave as\nexpected. This sort of thing lies at the very heart of how Vim\/NeoVim\nplugins do so much work -- they literally alter how the application\nbehaves by overriding things. Perhaps this is actually a form of\nmonkey patching? TIME IS A CIRCLE.<\/p>\n\n<h2 id=\"key-mappings\">Key Mappings<\/h2>\n\n<pre><code class=\"vim\">\" ------------------------------------------------------------------------------\n\" # Mappings\n\" ------------------------------------------------------------------------------\n\" # All of your mappings go in this file! Don't worry about your mappings\n\" # being separate from related config. Sourcery provides mappings to\n\" # easily jump between plugin definitions, mappings, and configs.\n\" #\n\" # More info: https:\/\/github.com\/jesseleite\/vim-sourcery#jumping-between-files\n\n\n\" ------------------------------------------------------------------------------\n\" # Example\n\" ------------------------------------------------------------------------------\n\n\" easily switch between vsplit windows\nmap &lt;Leader&gt;j &lt;C-w&gt;j\nmap &lt;Leader&gt;k &lt;C-w&gt;k\nmap &lt;Leader&gt;h &lt;c-w&gt;h\nmap &lt;Leader&gt;l &lt;c-w&gt;l\n\n\" Remove highlighing of search terms\nnnoremap &lt;leader&gt;&lt;space&gt; :nohlsearch&lt;CR&gt;\n\n\" Mappings for EasyAlign\nxmap ga &lt;Plug&gt;(EasyAlign)\nnmap ga &lt;Plug&gt;(EasyAlign)\n\n\" Use &lt;Tab&gt; and &lt;S-Tab&gt; to navigate through popup menu\ninoremap &lt;expr&gt; &lt;Tab&gt;   pumvisible() ? \"\\&lt;C-n&gt;\" : \"\\&lt;Tab&gt;\"\ninoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? \"\\&lt;C-p&gt;\" : \"\\&lt;S-Tab&gt;\"\n\n\" Telescope Lua mappings\nnnoremap &lt;leader&gt;ff &lt;cmd&gt;lua require('telescope.builtin').find_files()&lt;cr&gt;\nnnoremap &lt;leader&gt;fg &lt;cmd&gt;lua require('telescope.builtin').live_grep()&lt;cr&gt;\nnnoremap &lt;leader&gt;fb &lt;cmd&gt;lua require('telescope.builtin').buffers()&lt;cr&gt;\nnnoremap &lt;leader&gt;fh &lt;cmd&gt;lua require('telescope.builtin').help_tags()&lt;cr&gt;\nnnoremap &lt;leader&gt;fr &lt;cmd&gt;lua require('telescope.builtin').lsp_references()&lt;cr&gt;\nnnoremap &lt;leader&gt;fd &lt;cmd&gt;lua require('telescope.builtin').lsp_definitions()&lt;cr&gt;\nnnoremap &lt;leader&gt;ft &lt;cmd&gt;lua require('telescope.builtin').lsp_type_definitions()&lt;cr&gt;\n<\/code><\/pre>\n\n<p>No Vim setup is complete without mapping and re-mapping keys in\nVim. The list above mostly focuses on making Telescope friendlier to\nuse.<\/p>\n\n<p>So there you have it -- this is my current NeoVim setup. It is more\nthan sufficient for me to do daily PHP development work. What are some\nother things I am looking to integrate into my setup?<\/p>\n\n<ul>\n<li>Make it easier to use <a href=\"https:\/\/xdebug.org\">XDebug<\/a><\/li>\n<li>More refactoring tools (I understand Intelephense can help but I\nhave also experimented with\n<a href=\"https:\/\/github.com\/phpactor\/phpactor\">Phpactor<\/a><\/li>\n<\/ul>\n\n<p>As always, I continue to tweak my configuration as I evaluate new\ntools or discover new ways of completing old tasks. I hope you find my\nsetup useful.<\/p>\n",
        "date": "2022-12-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Current NeoVim setup",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/12\/13\/current-neovim-setup\/"
    },
    {
        "author": null,
        "categories": [
            "PHP",
            "testing"
        ],
        "content": "<p>One of the reasons many experienced developers encourage the concept of\n\"decoupling your code\" is so that it makes testing your code straightforward.\nI wanted to share an example of how I went about writing some tests for\nsome code that I had refactored from being a tangled spaghetti-like mess.<\/p>\n\n<p>Here is the code I am looking at, written targeting PHP 8.1.<\/p>\n\n<pre><code class=\"php\">&lt;?php\ndeclare(strict_types=1);\n\nnamespace Webreg\\Query;\n\nuse Slim\\Psr7\\Response;\nuse Slim\\Psr7\\Request;\nuse Twig\\Environment;\nuse Webreg\\Repository\\GameRepository;\nuse Webreg\\ViewModel\\Rotations;\n\nfinal class RotationManagementQuery\n{\n    public function __construct(\n        private Environment $twig,\n        private GameRepository $gameRepository,\n        private Rotations $rotations\n    ) {}\n\n    public function __invoke(Request $request): Response\n    {\n        $params = $request-&gt;getQueryParams();\n        $maxWeek = $this-&gt;gameRepository-&gt;getMaxWeek();\n        $week = (isset($params['week'])) ? (int) $params['week'] : $maxWeek;\n        $rotations = $this-&gt;rotations-&gt;getAllByWeek($week);\n        $response = new Response(200, null);\n        $response-&gt;getBody()-&gt;write($this-&gt;twig-&gt;render('rotations\/management.twig', [\n            'current_week' =&gt; $week,\n            'rotations' =&gt; $rotations,\n        ]));\n\n        return $response;\n    }\n}\n<\/code><\/pre>\n\n<p>I am using <a href=\"https:\/\/www.martinfowler.com\/bliki\/CQRS.html\">Command Query Responsibility Segregation<\/a> in\nthis application's architecture, and this bit of code is a Query that will\nretrieve a collection of pitchers who will be starting for baseball\nteams in my simulation baseball league for a particular week.<\/p>\n\n<p>In following some rules for decoupling, you can see some of the\nfollowing decisions had been made:<\/p>\n\n<ul>\n<li>not extending off of a base class<\/li>\n<li>all dependencies are injected at run time<\/li>\n<li>single-method for the class<\/li>\n<\/ul>\n\n<h2 id=\"identifying-dependencies\">Identifying Dependencies<\/h2>\n\n<p>So what are the dependencies I will need?<\/p>\n\n<ul>\n<li>a <a href=\"https:\/\/twig.symfony.com\">Twig<\/a> object<\/li>\n<li>a <a href=\"https:\/\/martinfowler.com\/eaaCatalog\/repository.html\">repository<\/a> object for retrieving data<\/li>\n<li>a <a href=\"https:\/\/martinfowler.com\/eaaDev\/PresentationModel.html\">view model<\/a> for presenting the data<\/li>\n<li>an object that contains the HTTP <a href=\"https:\/\/www.php-fig.org\/psr\/psr-7\/\">request<\/a><\/li>\n<\/ul>\n\n<p>In the old architecture, I was creating those dependencies deep inside the \"business logic\"\nand therefore it was very hard to write anything other than some kind of \"check\nthe HTML output\" type of test. Ironically that is what the new test does as well but\nthis sort of decoupled architecture leads to a much more straightforward test.<\/p>\n\n<h2 id=\"identifying-output\">Identifying Output<\/h2>\n\n<p>In these tests, I wanted to make sure that if I had at least one rotation\nstored in the database for a particular week, when the page renders I should\nsee that rotation in the output somewhere.<\/p>\n\n<h2 id=\"test-skeleton\">Test Skeleton<\/h2>\n\n<p>As always, I break out the <a href=\"http:\/\/wiki.c2.com\/?ArrangeActAssert\">Arrange-Act-Assert<\/a> pattern\nto create the skeleton of the test:<\/p>\n\n<pre><code class=\"php\">    \/** @test *\/\n    public function it_returns_expected_rotation(): void\n    {\n        \/\/ Arrange\n\n        \/\/ Act\n\n        \/\/ Assert\n        self::fail();\n    }\n<\/code><\/pre>\n\n<p>Remember, you always want to start with a failing test.<\/p>\n\n<h2 id=\"arranging-our-dependencies\">Arranging our dependencies<\/h2>\n\n<p>These days I try and use the fewest number of <a href=\"https:\/\/phpunit.readthedocs.io\/en\/9.5\/test-doubles.html\">test doubles<\/a>\nin my test scenarios. Given the dependencies I needed,\nI was going to need three \"fake\" dependencies, configured\nto provide only the implementation details required to make\nthe scenario work.<\/p>\n\n<p>I don't want to get into a longer discussion on the use of\ntest doubles except to say that the decoupling strategy\nI am using will minimize the chances that any doubles drift\nfrom how the code is actually implemented.<\/p>\n\n<p>Trust me, I do this for a living!<\/p>\n\n<pre><code class=\"php\">    \/** @test *\/\n    public function it_returns_expected_rotation(): void\n    {\n        \/\/ Arrange\n        $loader = new FilesystemLoader(__DIR__ . '\/..\/..\/templates\/');\n        $twig = new Environment($loader);\n\n        $gamesRepo = $this-&gt;createMock(GameRepository::class);\n        $gamesRepo-&gt;expects($this-&gt;once())\n            -&gt;method('getMaxWeek')\n            -&gt;willReturn(1);\n\n        $testRotation = new ArrayCollection();\n        $testRotation-&gt;add([\n            'franchise_id' =&gt; 1,\n            'ibl' =&gt; 'MAD',\n            'rotation' =&gt; 'One, Two, Three'\n        ]);\n\n        $viewModel = $this-&gt;createMock(RotationsUsingDoctrine::class);\n        $viewModel-&gt;expects($this-&gt;once())\n            -&gt;method('getAllByWeek')\n            -&gt;willReturn($testRotation);\n\n        $request = $this-&gt;createMock(Request::class);\n        $request-&gt;expects($this-&gt;once())\n            -&gt;method('getQueryParams')\n            -&gt;willReturn(['week' =&gt; 1]);\n\n        \/\/ Act\n\n        \/\/ Assert\n        self::fail();\n    }\n<\/code><\/pre>\n\n<h2 id=\"acting-on-the-code-under-test\">Acting on the code-under-test<\/h2>\n\n<p>This has always struck me as a weird way to describe \"executing the\ncode we are testing\" but I guess \"Arrange-Execute-Assert\" doesn't\nflow in English quite the same way.<\/p>\n\n<p>Now that I have all my dependencies created and configured the way\nI need, time to run the code and grab some results I can test.<\/p>\n\n<pre><code class=\"php\">    \/** @test *\/\n    public function it_returns_expected_rotation(): void\n    {\n        \/\/ Arrange\n\n        \/\/ Act\n        $query = new RotationManagementQuery($twig, $gamesRepo, $viewModel);\n        $results = $query-&gt;__invoke($request);\n\n        \/\/ Assert\n        self::fail();\n    }\n<\/code><\/pre>\n\n<h2 id=\"asserting-results-of-code-execution\">Asserting results of code execution<\/h2>\n\n<p>Just like I did before, I am checking the HTML output from executing\nthis Query to make sure I am seeing values that I expect<\/p>\n\n<pre><code class=\"php\">    \/** @test *\/\n    public function it_returns_expected_rotation(): void\n    {\n        \/\/ Arrange\n\n        \/\/ Act\n\n        \/\/ Assert\n        self::assertStringContainsString('One, Two, Three', $results-&gt;getBody());\n    }\n<\/code><\/pre>\n\n<p>When building my assertions, I tend to go with \"what are the\nfewest number of things I need to do in order to prove the\ncode is working as expected.\"<\/p>\n\n<p>In this case, I felt checking that I see an expected \"pitching rotation\"\nin the output is good enough.<\/p>\n\n<p>Here is what the whole test looks like:<\/p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace Webreg\\Test\\Query;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Slim\\Psr7\\Request;\nuse Twig\\Environment;\nuse Twig\\Loader\\FilesystemLoader;\nuse Webreg\\Query\\RotationManagementQuery;\nuse PHPUnit\\Framework\\TestCase;\nuse Webreg\\Repository\\GameRepository;\nuse Webreg\\ViewModel\\RotationsUsingDoctrine;\n\nclass RotationManagementQueryTest extends TestCase\n{\n    \/** @test *\/\n    public function it_returns_expected_rotation(): void\n    {\n        \/\/ Arrange\n        $loader = new FilesystemLoader(__DIR__ . '\/..\/..\/templates\/');\n        $twig = new Environment($loader);\n\n        $gamesRepo = $this-&gt;createMock(GameRepository::class);\n        $gamesRepo-&gt;expects($this-&gt;once())\n            -&gt;method('getMaxWeek')\n            -&gt;willReturn(1);\n\n        $testRotation = new ArrayCollection();\n        $testRotation-&gt;add([\n            'franchise_id' =&gt; 1,\n            'ibl' =&gt; 'MAD',\n            'rotation' =&gt; 'One, Two, Three'\n        ]);\n\n        $viewModel = $this-&gt;createMock(RotationsUsingDoctrine::class);\n        $viewModel-&gt;expects($this-&gt;once())\n            -&gt;method('getAllByWeek')\n            -&gt;willReturn($testRotation);\n\n        $request = $this-&gt;createMock(Request::class);\n        $request-&gt;expects($this-&gt;once())\n            -&gt;method('getQueryParams')\n            -&gt;willReturn(['week' =&gt; 1]);\n\n        \/\/ Act\n        $query = new RotationManagementQuery($twig, $gamesRepo, $viewModel);\n        $results = $query-&gt;__invoke($request);\n\n        \/\/ Assert\n        self::assertStringContainsString('One, Two, Three', $results-&gt;getBody());\n    }\n}\n\n<\/code><\/pre>\n\n<p>Some thoughts that occur to me from looking at the final test:<\/p>\n\n<ul>\n<li>decoupling makes your dependencies quite visible during test creation<\/li>\n<li>always make sure to only implement the behaviour of your test doubles that you need<\/li>\n<li>your Arrange step will almost always be the largest part of any test<\/li>\n<li>PHPUnit's built-in test double generators also act as assertions<\/li>\n<li>sometimes the simplest way of verifying behaviour is what you should use<\/li>\n<\/ul>\n\n<p>From my perspective, decoupling the code allows me to focus on smaller\npieces of application behaviour, reducing the chances that a change in\nthis code breaks something somewhere else.<\/p>\n\n<p>For more details on the approach I am using for decoupling my code, check\nout Matthias Noback's <a href=\"https:\/\/leanpub.com\/recipes-for-decoupling\">\"Recipes for Decoupling\"<\/a>.<\/p>\n",
        "date": "2022-12-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing decoupled PHP code?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/12\/06\/testing-decoupled-code\/"
    },
    {
        "author": null,
        "categories": [
            "testing"
        ],
        "content": "<p>Over on Twitter Mathias Verraes tweeted something that immediately \ntriggered some feelings:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>Perhaps TDD isn't as ubiquitous as it should be because you\n    can't make a business model out of it.\n    (Original post on Twitter <a href=\"https:\/\/twitter.com\/mathiasverraes\/status\/1595100145129263106\">https:\/\/twitter.com\/mathiasverraes\/status\/1595100145129263106<\/a><\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>I commented saying \"Boy do I ever have feelings about this topic...\" and\nMatias asked me to share. I decided my response was better off as\na longer blog post. Don't worry, this will end up on Twitter \/ Mastodon\nanyway.<\/p>\n\n<p>He mentioned \"observability\" as a technique that ended up\nbeing a very good business model. Why? In my opinion, figuring out\nhow to observe something in production is generic enough in that you\ncan create a tool and say \"hey, add these stuff to your code or\nproduction systems, and it will report stuff to this well-crafted\ndashboard you can use to get an idea of what is going on.\"<\/p>\n\n<p>I am a fan of these approach -- I highly recommend looking into\nthings like <a href=\"https:\/\/www.honeycomb.io\">Honeycomb<\/a> to get an idea\nof what you are signing up for when you choose that path.<\/p>\n\n<p>So what about testing? Is testing generic enough that you could come\nup with some kind of black box or external system that you can connect\nyour tests to and react to when things fail?<\/p>\n\n<p>Tests are almost entirely bespoke. Dependent on architecture. Dependent\non environments. Heck, dependant on the skill of the people who have to\nwrite and maintain them.<\/p>\n\n<p>Also, in my experience, tests work best when you approach them from\nthe idea that they are there to make sure things are behaving as you\nexpect them to and to give you a way to determine if you've made changes\nthat have broken something elsewhere in your application.<\/p>\n\n<p>In other words, chances are that a failing test is something that the\nusers of your application will never notice. They will notice broken\npages, non-functioning links, slow-to-respond interfaces. Those are things\nthat can probably be monitored through observability tools.<\/p>\n\n<p>In a lot of cases you start off with the idea of having to add tests to\na system being adversarial. Developers don't want to spend the time\nwriting them. Management views them as tasks with little-to-no return\non investments. Clients balk at being told your bid is more expensive because\nyou are writing tests. Flaky tests reduce confidence. Build tools need\nto be able to play nicely with your chosen testing tools. Effective\ntest suites can take a lot of time to create and maintain.<\/p>\n\n<p>Not to mention almost nobody teaches people how to learn to use a programming\nlanguage from a test-centric perspective. I could not even imagine\nhow to teach a novice programmer how to use PHP while also showing them\nhow to use all the tools. Understanding my own target audience is developers-with-experience\nhas really changed how I teach and what I teach them.<\/p>\n\n<p>Using an observability tool\ncan often be as simple as signing up for an online tool, follow their\ndirections on what needs to happen to monitor things, and then you\nwill know a lot faster when things aren't behaving correctly in\nproduction.<\/p>\n\n<p>Under those types of terms, testing will never be ubiquitous. Which\nis a shame because it is a technique that can lead to stable code\nbases and confident deployments to production.<\/p>\n\n<p>Maybe someone out there with a different perspective will figure out\nhow to solve the stuff I talked about here. Until then, I am still happy\nto help teach people how to add automated testing to their skill set\nand hope they find it as useful as I have.<\/p>\n",
        "date": "2022-11-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why isn't testing ubiquitous?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/11\/22\/why-isnt-testing-ubiquitous\/"
    },
    {
        "author": null,
        "categories": [
            "indieweb",
            "technology"
        ],
        "content": "<p>One of the main reasons I have decided to embrace more of\nthe <a href=\"https:\/\/indieweb.org\">IndieWeb<\/a> ethos is out of a desire\nto have more control over where the various things I create\n(micro-blogging and longer-form content) ends up. Twitter ended\nup being something that replaced the blogging I used to do.<\/p>\n\n<p>One of the concepts coming out of the Indieweb is the great-sounding\nacronym POSSE. It stands for Publish On your own Site, Syndicate Elsewhere.\nWhich is another way of saying you should have one central location\nwhere most of your material lives (shitposting on social media still will\nhappen) and then push that content out to other places.<\/p>\n\n<p>So for me, what would this look like?<\/p>\n\n<p>For a long time I had another blog, but once I really leaned into the\nGrumpy Programmer brand that blog served no purpose and I really should've\njust moved stuff over there. Although that old blog is no longer online\nI still have all the posts I made to it. Maybe I will go through one day\nand do \"the best of when I was less grumpy\" or something like that.<\/p>\n\n<p>So, in a world where I embrace POSSE, here is how it should work:<\/p>\n\n<ul>\n<li>I write content on this blog<\/li>\n<li>I use the static site generator <a href=\"https:\/\/sculpin.io\">Sculpin<\/a> to create the site<\/li>\n<li>As part of updating my site, I then automatically publish a link to that blog elsewhere<\/li>\n<\/ul>\n\n<p>There are other solutions to make this happen if you use other blogging\nengines (static or otherwise) but there was nothing out-of-the-box to make it\nwork for Sculpin. So, I used my <a href=\"https:\/\/duckduckgo.com\">favourite search engine<\/a>\nand started doing some research.<\/p>\n\n<p>I also, like any good online influencer, leveraged my personal relationships\nwith people...like the current maintainer of Sculpin...to ask them how I could accomplish\na few tasks.<\/p>\n\n<h2 id=\"writing-on-this-blog\">Writing on this blog<\/h2>\n\n<p>Sculpin supports me writing posts using Markdown. This means I get to keep using\nthe <a href=\"https:\/\/neovim.io\">new One True Editor<\/a> to create new posts. It also uses\n<a href=\"https:\/\/twig.symfony.com\">Twig<\/a> for the templates it uses to generate the static\nHTML for the site.<\/p>\n\n<p>Again, I am not telling you one way or the other what to use for your blog. For a lot\nof folks using <a href=\"https:\/\/wordpress.com\">Wordpress<\/a> and a plugin tailored to IndieWeb\nneeds will work. I didn't want to setup anything new, so I was going to stick with\nSculpin.<\/p>\n\n<h2 id=\"creating-the-site\">Creating the site<\/h2>\n\n<p>I am currently using GitHub pages for this site, so all I have to do is copy the\ngenerated HTML output into the correct location in the repo that holds my site,\npush those changes up to GitHub and in a minute or two I have a new version of\nmy web site for all the world to see.<\/p>\n\n<p>This is no big change for what I was doing previously -- I used to have an AWS\nLightsail instance for hosting the blog but decided GitHub was a better option\nsince I was already paying for an account there. Why pay twice?!?<\/p>\n\n<p>Now, to prepare my site to be \"IndieWeb friendly\" is simply followed the instructions\nat <a href=\"https:\/\/indiewebify.me\">IndeWebify.me<\/a>. Followed by, of course, a lot of\ncommits and pushes to get things to behave exactly the way I needed them to.<\/p>\n\n<p>For example. this is what the template looks like for a blog post, with all the\nIndieWeb <a href=\"https:\/\/microformats.org\/\">microformats<\/a> embedded in them:<\/p>\n\n<pre><code>\n{% extends \"default\" %}\n\n{% block head_meta %}\n    &lt;meta name=\"robots\" content=\"index, follow\"&gt;\n{% endblock %}\n\n{% block content_wrapper %}\n    &lt;article class=\"h-entry\"&gt;\n        &lt;header&gt;\n            &lt;h2&gt;&lt;div class=\"p-name\"&gt;{{ page.title }}&lt;\/div&gt; &lt;small&gt;post&lt;\/small&gt;&lt;\/h2&gt;\n        &lt;\/header&gt;\n        &lt;div class=\"e-content\"&gt;\n            {{ page.blocks.content|raw }}\n        &lt;\/div&gt;\n        {% if page.categories %}\n            &lt;p class=\"categories\"&gt;\n            Categories:\n            {% for category in page.categories %}\n            &lt;a class=\"p-category\" href=\"{{ site.url }}\/blog\/categories\/{{ category|url_encode(true) }}\"&gt;{{ category }}&lt;\/a&gt;{% if not loop.last %}, {% endif %}\n            {% endfor %}\n            &lt;\/p&gt;\n        {% endif %}\n        {% if page.tags %}\n            &lt;p class=\"tags\"&gt;\n            Tags:\n            {% for tag in page.tags %}\n            &lt;a href=\"{{ site.url }}\/blog\/tags\/{{ tag|url_encode(true) }}\"&gt;{{ tag }}&lt;\/a&gt;{% if not loop.last %}, {% endif %}\n            {% endfor %}\n            &lt;\/p&gt;\n        {% endif %}\n        &lt;a href=\"https:\/\/brid.gy\/publish\/mastodon\"&lt;\/a&gt;\n        &lt;a href=\"https:\/\/brid.gy\/publish\/twitter\"&lt;\/a&gt;\n        {% if page.previous_post or page.next_post %}\n            &lt;nav class=\"article\"&gt;\n                &lt;ul&gt;\n                    {% if page.next_post %}\n                        &lt;li&gt;Next: &lt;a class=\"next\" href=\"{{ site.url }}{{ page.next_post.url }}\" title=\"{{ page.next_post.title }}\"&gt;&lt;span class=\"title\"&gt;{{ page.next_post.title }}&lt;\/span&gt;&lt;\/a&gt;&lt;\/li&gt;\n                    {% endif %}\n                    {% if page.previous_post %}\n                        &lt;li&gt;Previous: &lt;a class=\"previous\" href=\"{{ site.url }}{{ page.previous_post.url }}\" title=\"{{ page.previous_post.title }}\"&gt;&lt;span class=\"title\"&gt;{{ page.previous_post.title }}&lt;\/span&gt;&lt;\/a&gt;&lt;\/li&gt;\n                    {% endif %}\n                &lt;\/ul&gt;\n            &lt;\/nav&gt;\n        {% endif %}\n    &lt;\/article&gt;\n{% endblock %}\n\n<\/code><\/pre>\n\n<h2 id=\"the-grumpy-posse\">The Grumpy POSSE<\/h2>\n\n<p>Figuring out how to syndicate my content without an existing plugin proved to\nbe a bit of a challenge. Luckily, I found a blog post that explained how to\nmake this work by embracing <a href=\"https:\/\/indieweb.org\/Webmention\">Webmentions<\/a>\nand using an awesome (and free!) service called <a href=\"https:\/\/brid.gy\">Bridgy<\/a>\nto automate syndication.<\/p>\n\n<p>The solution I found was to create a GitHub action that would be triggered\neach time I did a push to the repo. This action would take care of using\nwebmentions and Brid.gy to do the magic. But first, I needed a feed of\nmy website that was in JSON, not XML.<\/p>\n\n<p>So I hit up <a href=\"https:\/\/phpc.social\/@kboyd\">Kevin Boyd<\/a> and ask him how\ncould I do this in Sculpin. He very gracious created a Twig template\nthat would turn my list of blog posts into a JSON feed. Here it is\nin all it's glory:<\/p>\n\n<pre><code>\n---\npermalink: feed.json\nuse:\n    - posts\n---\n{#\n     Example data structure for delivering a Webmentions feed:\n\n     From: https:\/\/blog.geheimesite.nl\/en\/index.json\n\n     [\n        {\n            \"author\": {},\n            \"categories\": ,\n            \"content\": \"yadda yadda yadda\",\n            \"date\": \"2022-05-03T16:27:18+02:0\",\n            \"site\": \"https:\/\/whateverthing.com\/\",\n            \"tags\": null,\n            \"title\": \"Article One\",\n            \"uri\": \"https:\/\/whateverthing.com\/2022\/11\/11\/article-one\/\"\n        },\n        {\n            \"author\": {},\n            \"categories\": ,\n            \"content\": \"yadda yadda yadda\",\n            \"date\": \"2022-06-03T16:27:18+02:0\",\n            \"site\": \"https:\/\/whateverthing.com\/\",\n            \"tags\": null,\n            \"title\": \"Article Two\",\n            \"uri\": \"https:\/\/whateverthing.com\/2022\/11\/11\/article-two\/\"\n        },\n     ]\n#}\n{% set outputArray = [] %}\n\n{% for post in data.posts[:10] %}\n    {%\n        set postOutput = {\n            'author': site.author,\n            'categories': post.meta.categories,\n            'content': post.blocks.content|raw,\n            'date': post.date|date(\"c\"),\n            'site': site.global_url,\n            'tags': post.meta.tags,\n            'title': post.title,\n            'uri': [ site.global_url, post.url]|join\n        }\n    %}\n    {% set outputArray = outputArray|merge([postOutput]) %}\n{% endfor %}\n\n{{ outputArray|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}\n\n<\/code><\/pre>\n\n<p>I dropped that into the root directory Sculpin uses for generating\nmy site, named it <code>feed.json.twig<\/code> and now I had a JSON-based feed\nfor the site.<\/p>\n\n<p>Now, the GitHub action. This would go in <code>.github\/workflows\/send-webmention.yaml<\/code>\nfor my repo that I am using for the page.<\/p>\n\n<pre><code>name: Send Webmentions\n\non: push\n\njobs:\n  send:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Send Webmentions\n        env:\n          GITHUB_TOKEN: $\n          URL: $\n        run: |\n          NEW=$(curl --silent $URL | jq -r first.uri)\n\n          curl -X POST https:\/\/webmention.app\/check?url=\"https:\/\/grumpy.learning.com$NEW\"\n\n          curl -H \"Content-Type: application\/x-www-form-urlencoded\" --request POST \\\n          -d source=\"https:\/\/grumpy-learning.com$NEW\" \\\n          -d target=\"https:\/\/brid.gy\/publish\/twitter\" \\\n          \"https:\/\/brid.gy\/publish\/webmention\"\n\n          curl -H \"Content-Type: application\/x-www-form-urlencoded\" --request POST \\\n          -d source=\"https:\/\/grumpy-learning.com$NEW\" \\\n          -d target=\"https:\/\/brid.gy\/publish\/mastodon\" \\\n          \"https:\/\/brid.gy\/publish\/webmention\"\n<\/code><\/pre>\n\n<p>The <a href=\"https:\/\/gist.github.com\/dianoetic\/b45466a7c04fa47cf80905b182dbda3c\">original instructions<\/a> recommended\nputting the JSON feed details into a secret and then referencing it inside the action.\nI am not sure it matters that much but stuck with it.<\/p>\n\n<p>So, the next thing is that it grabs the feed using <a href=\"https:\/\/curl.se\">cURL<\/a> and grabs what\nit thinks is the latest post (the first one in the feed) and then proceeds to use\n<a href=\"https:\/\/webmention.app\">webmention.app<\/a> and Brid.gy to syndicate my content by sharing\nthe post title and linking to it).<\/p>\n\n<p>So far it is working well and if you came across this post via my social media microblogging (I\nsound so pretentious when I say it out loud) then it clearly worked.<\/p>\n\n<p>I think my takeway from this is that gluing things together so your existing blog\ncan syndicate content to a variety of platforms. If you're looking to have more control over\nthe things you share online, I highly recommend looking into the IndieWeb. I hope this post helps!<\/p>\n",
        "date": "2022-11-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Grumpy POSSE",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/11\/18\/a-grumpy-posse\/"
    },
    {
        "author": null,
        "categories": [
            "indieweb",
            "technology"
        ],
        "content": "<p>As I write this blog post, Twitter is convulsing as it's new\nowner Elon Musk is trying to treat a huge cruise ship like\nit's a jetski. Having cut a ton of staff and literally workshopping\nideas in public, it's not going well.<\/p>\n\n<p>I have ignored blogging and some other interactions as Twitter made\nit so easy to share those little thoughts and I also became reliant\non a curated feed to find stuff I was interested in. Along the way\nI ran into the idea of the <a href=\"https:\/\/indieweb.org\/\">IndieWeb<\/a>.<\/p>\n\n<p>I have made a non-trivial amount of money off selling my <a href=\"https:\/\/leanpub.com\/u\/chartjes\">books<\/a>\nand have dabbled in paid courses and workshops. So it made a lot of\nsense to me to check out this <a href=\"https:\/\/indiewebify.me\">guide to joining the IndieWeb<\/a>\nand learn about <a href=\"https:\/\/microformats.org\">microformats<\/a>, <a href=\"http:\/\/webmention.org\/\">Webmentions<\/a>\nand start really leaning into POSSEing (Publish on my Own Site, Syndicate Elsewhere)\nmy stuff.<\/p>\n\n<p>This is the first blog post that (if I have set up things correctly at my end) that\nwill be syndicated out to other platforms.<\/p>\n",
        "date": "2022-11-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Federating Yourself",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/11\/12\/federating-yourself\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "testing"
        ],
        "content": "<p>This post could also be subtitled \"The Grumpy Programmer's Guide to Getting Rejected at Interviews\".<\/p>\n\n<p>Someone tagged me in a tweet...<\/p>\n\n<blockquote>\n  <p><em>Book idea for @grmpyprogrammer: an interviewing guide for job seekers wanting to get an idea of how dedicated companies are to testing. Questions to ask, ways to gauge the culture, etc.<\/em>\n  <em>(Originally posted on Twitter at <a href=\"https:\/\/twitter.com\/n00bJackleCity\/status\/1481632465403981824?s=20\">https:\/\/twitter.com\/n00bJackleCity\/status\/1481632465403981824?s=20<\/a>)<\/em><\/p>\n<\/blockquote>\n\n<p>...and it got me to thinking about where to start with\na request like this one. My personal opinion that there\nreally isn't a book in here but it did get me to start thinking\nabout what sort of questions you should be asking.<\/p>\n\n<p>Again, keep in mind that all of this is just my opinion. One based\non many years of experience, but still an opinion.<\/p>\n\n<h2 id=\"why-does-it-matter%3F\">Why Does It Matter?<\/h2>\n\n<p>In my experience, companies that make a commitment to doing automated\ntesting also tend to make a commitment towards \"quality\"\nin their coding practices and \"automation\" in their software development tooling.\nThe reason those are in quotes is because they definitely can mean \ndifferent things depending on the company.<\/p>\n\n<p>Now, again, in my experience, you are likely to have more success\nin solving problems and growing your own skills as a developer if you work\nin an environment where they value those things.<\/p>\n\n<p>After all, just because we can get paid a lot of money to dig in the pixel\nmines doesn't mean we should be forced to eat a shit sandwich. We should at \nleast have a choice of the additional toppings.<\/p>\n\n<h2 id=\"what-questions-should-i-ask%3F\">What Questions Should I Ask?<\/h2>\n\n<p>Like a lot of things related to programming, I find it helpful to start at the\nend result you want and work backwards to figure out what needs to be done. Therefore\nI think the first two things to ask are:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>What things always have to work when you push changes into production\n    and how do you verify that it works as expected?<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>This question cuts to the heart of the issue: what matters and how do we make\nsure it stays that way.<\/p>\n\n<p>What you are looking for is clear statements about what matters and clearer statements\nabout how they verify it. Again, not every company has invested the time and money\ninto having the ability for code changes to seamlessly flow from a development\nenvironment into production, accompanied by effective automated tests and a clear understanding\nof outcomes.<\/p>\n\n<p>If they already have some kind of commitment to testing, asking follow-up questions\nlike this are also very informative:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>What do you like about your current testing practices and what do you want to change?<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>Pay as much attention to what they like as what they dislike. That will give you an idea\nof what challenges lie ahead if you want to be the person making the changes.<\/p>\n\n<p>Finally, if you want to find out about what their commitment to quality is, I feel like\na great question is:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>Tell me about how code gets from the developer and up into production<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>Look for things like:<\/p>\n\n<ul>\n<li>code reviews<\/li>\n<li>coding standards<\/li>\n<li>static code analysis<\/li>\n<li>continuous integration systems<\/li>\n<li>separate staging and production environments<\/li>\n<li>automated deployments<\/li>\n<\/ul>\n\n<p>Not all of these things are going to guarantee great results (nothing\ndoes and never believe anyone who says it) but, when taken together,\nthey show a commitment to making sure that:<\/p>\n\n<ul>\n<li>the intent of code is clear<\/li>\n<li>others can understand the code<\/li>\n<li>the code is taking advantage of appropriate language features<\/li>\n<li>the team uses tooling that integrates with version control to automate error-prone manual checklists<\/li>\n<li>application \/ end-to-end testing happens before it reaches production<\/li>\n<li>repeatable processes ensure consistency<\/li>\n<\/ul>\n\n<h2 id=\"so-now-what%3F\">So Now What?<\/h2>\n\n<p>It's hard for me to give any more specific advice other than \"don't be \nafraid to ask more questions based on the answers you are hearing.\" \nIf we're being honest, most companies aren't doing all that stuff I listed\nabove. You can always start at the bottom (\"we try and manually test all changes\")\nand work as hard as you are allowed to on getting to the point where you\nhave an automated test suite catching issues before your users do.<\/p>\n",
        "date": "2022-01-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Asking Companies About Testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/01\/14\/asking-companies-about-testing\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "PHP"
        ],
        "content": "<p>I was presented with a problem that was occurring in the <a href=\"https:\/\/grumpy-learning.com\/blog\/2021\/12\/30\/repeatable-dev-environments\/\">virtual machine<\/a>\nI was using for client development work -- the PHP-based acceptance test suite was running\nextremely slowly. Normally it takes 12-13 minutes to run outside of the \nvirtual machine but it was taking...54 minutes!<\/p>\n\n<p>Because I am almost never afraid to ask for help, I bugged <a href=\"https:\/\/twitter.com\/ocramius\">Marco Pivetta<\/a>\nto give me a hand, since he is working on the same client project. I figured if anyone knew of where to START diagnosing what\nthe problem is, it would be Marco.<\/p>\n\n<p>Marco's suggestion after watching a smaller test suite run both in his\nlocal environment and in my VM was that we should run the test suite\nwith a debugger enabled so we can see what is going on terms of resources\nbeing consumed. For PHP, this usually means using <a href=\"https:\/\/xdebug.org\">Xdebug<\/a>.<\/p>\n\n<p>What Xdebug allows you to do is:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/xdebug.org\/docs\/step_debug\">step debugging<\/a><\/li>\n<li>see better <code>var_dump()<\/code> information<\/li>\n<li>write every function call to disk for later summarizing and reporting<\/li>\n<li>profile your code to look for performance bottlenecks<\/li>\n<li>generate code coverage when using PHPUnit (not sure if it works with other testing frameworks)<\/li>\n<\/ul>\n\n<p>I've used the step debugging feature a lot on unfamiliar\ncode bases but the profiling feature was definitely what we needed.<\/p>\n\n<p>To ask Xdebug to profile the code we're testing, you need to have the\nXdebug extension installed and then tell <a href=\"https:\/\/phpunit.de\">PHPUnit<\/a> that you want\nto use it. The command to do it from your shell looks something like\nthis:<\/p>\n\n<p><code>XDEBUG_MODE=profile vendor\/bin\/phpunit --testsuite=unit<\/code><\/p>\n\n<p>Because our test environment was configured to run these tests using a specific\nDocker container, I had to access the container directly via <code>docker-compose exec php-fpm<\/code>\nand then execute this command inside the container.<\/p>\n\n<p>This ran the test suite and generated a large number of <a href=\"https:\/\/valgrind.org\/docs\/manual\/cg-manual.html\">cachegrind<\/a>\nfiles. These files contain profiling data but you need a specialized\ntool to read them and get information out of them that makes sense.\nFor Linux users you would likely want to use <a href=\"https:\/\/kcachegrind.github.io\">KCachegrind<\/a>\nbut luckily for me you can read these files using <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>.<\/p>\n\n<p>The first step was to figure out which of these cachegrind files to \nexamine. Unfortunately this is more intuition than science: our test\nsuite uses <code>@runInSeparateProcess<\/code> annotations so all the small ones\nrepresent single tests. These are likely not to return any meaningful \ninformation. \"Just pick the biggest one and let's see what happens.\"<\/p>\n\n<p>So, we both opened up cachegrind files of similar sizes and took a look\nat the data. What exactly where we looking for? In terms of bottlenecks\nwe can place things in either \"network\" or \"CPU\" categories. Is the application\nwaiting a lot for external resources (say, a service in a different container)\nor is it waiting for the CPU to finishing doing something before it \ncan continue.<\/p>\n\n<p>Sadly, I cannot share the cachegrind output here as I have NDA's surrounding\nthe client work but the approach was:<\/p>\n\n<ul>\n<li>sort the calls by how much time was being spent on executing them<\/li>\n<li>figure out if it is network or CPU<\/li>\n<\/ul>\n\n<p>For network issues, we were looking for things like time spent connecting\nto a MySQL database in another container. As we scrolled through the list\nat my end together we started noticing a few things:<\/p>\n\n<ul>\n<li>network access wasn't the problem<\/li>\n<li>we were spending an awful lot of time continually parsing a configuration file written using <a href=\"https:\/\/toml.io\/en\/\">TOML<\/a> during bootstrap (ticket filed to fix this)<\/li>\n<li>a lot of very simple PHP calls were taking significant amounts of CPU time<\/li>\n<\/ul>\n\n<p>The next step was to look at how much memory and CPU power I was giving to \nthe virtual machine. I was giving it half my processing cores and half the\navailable memory. So that should not have been an issue.<\/p>\n\n<p>Marco did some searching and found some forum posts of folks complaining about\nhow slow some VM's were in the latest version of <a href=\"https:\/\/www.vmware.com\/products\/fusion.html\">VMWare Fusion<\/a>\nbut their situation didn't seem to be the same as ours.<\/p>\n\n<p>\"Hrm, Chris, open up that 'Advanced Options' section in the 'Processors &amp; Memory' configuration\nsection. Aha!\"<\/p>\n\n<p>In that section were two disabled options, both dealing with running containers\ninside the virtual machine. Given that we are heavily relying on Docker it definitely\nmade sense to enable those.<\/p>\n\n<p>So I shut down the virtual machine, enabled those two options, and started it up.\nMuch to my surprise, the acceptance test suite now ran in 10 minutes instead of\n54 minutes! Huge improvement and is also faster than how long it takes outside\nof the virtual machine.<\/p>\n\n<p>Afterwards, Marco was explaining to me how much Docker relies on having direct memory\naccess to things so not forcing those connections to go through a different path\nin the VM would yield a huge gain. Now I'm happier with the performance of the test\nsuite.<\/p>\n\n<p>So, in summary:<\/p>\n\n<ul>\n<li>the test suite was much slower than expected<\/li>\n<li>a decision was made to run the test suite with Xdebug profiling enabled<\/li>\n<li>we made an educated guess as to which profile output file to analyze<\/li>\n<li>the profiling output led us to believe that there was a CPU-related bottleneck<\/li>\n<li>the virtual machine had adequate memory and processor resources allocated to it<\/li>\n<li>the VM was not configured to run containerized applications optimally<\/li>\n<li>the VM has stopped and options pertaining to running containers inside the VM were enabled<\/li>\n<li>re-running the test suite saw a huge increase in performance and execution time<\/li>\n<\/ul>\n\n<p>Without the ability to profile the code to get a better idea of where there might \nbe problems, it would've taken a lot longer to come to an effective solution.<\/p>\n",
        "date": "2022-01-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Solving Problems With Profiling",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/01\/05\/solving-problems-with-profiling\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "automation",
            "twitter"
        ],
        "content": "<p>I\u2019m not a New Year\u2019s resolution type but here are some suggestions for my fellow devs of things I believe can lead to better outcomes:<\/p>\n\n<p>Learn your IDE\/editor better: I spent a lot of 2021 refining my <a href=\"https:\/\/neovim.org\">Vim<\/a> setup and I plan on adding increased use of <a href=\"https:\/\/vimwiki.github.io\/\">VimWiki<\/a> for making notes and linking things together.<\/p>\n\n<p>If your dynamic language of choice supports types, start using them and <a href=\"https:\/\/psalm.dev\">static<\/a> <a href=\"https:\/\/phpstan.org\">analysis<\/a> tools. It leads to much clearer intent and can catch problems at the edges.<\/p>\n\n<p>Focus on automation. Stop doing things manually the computer can do for you. Take the time to semi-automate manual processes first. It frees your brain up to solve different problems.<\/p>\n\n<p>Make continuous learning a foundation of everything you do. Even after 23 years of getting paid to program, I learn new things almost every day.<\/p>\n\n<p>Remember that what people call \u201cluck\u201d is often you having the skills to take advantage of an opportunity.<\/p>\n\n<p>(This was originally posted as a Twitter thread starting with <a href=\"https:\/\/twitter.com\/grmpyprogrammer\/status\/1477326886766362626\">https:\/\/twitter.com\/grmpyprogrammer\/status\/1477326886766362626<\/a>)<\/p>\n",
        "date": "2022-01-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Better Outcomes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2022\/01\/02\/better-outcomes\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "automation"
        ],
        "content": "<p>If you have used <a href=\"https:\/\/docker.com\">Docker<\/a> on a Mac\nlaptop, you have likely ran into the \"crossing file systems\"\nissue that can lead to really poor performance in your containers.\nThis becomes frustrating if you are recreating a development environment \nfor applications that rely on a lot of services (micro or otherwise)\n to run. If you are a Windows or Linux user, this sort of thing is pretty much\na non-issue.<\/p>\n\n<p>It seemed like I had two choices on how to potentially deal with this.\nChoice number one was to switch to a different operating system (I have been looking\nat <a href=\"https:\/\/frame.work\">Framework<\/a> laptops) but I was (LOL) grumpy about\ngetting a new laptop when the 2020 13\" MacBook pro I have as I write this is only slightly\nmore than a year old. Okay, I could sell it. But that seems like a bunch\nof busy work.<\/p>\n\n<p>The second choice was to see if I could create a development environment\nthat was faster and still allowed me to use Docker, which is 100% a requirement\nfor the client work I am currently doing.<\/p>\n\n<p>In the past, other people online had hinted at the possibility of doing the development\nwork inside a virtual machine. Basically like connecting to another machine\nvia SSH and then doing my work in there. Good thing I am already a member of the \nCult of Vim.<\/p>\n\n<p>Okay, I think I could work with this. The next issue was HOW to do this all. I've played\naround enough with <a href=\"https:\/\/www.vagrantup.com\/\">Vagrant<\/a>, <a href=\"https:\/\/vmware.com\">VMWare<\/a> and\nVirtual Private Servers to know that the steepest part of the curve with using\nthis solution is getting configured and in a state where it useful rather than\na time-sink or a toy.<\/p>\n\n<p>I am always one to extol the virtues of \"better lucky than good\" and I happened to\nstumble across a tweet from Mitchell Hashimoto (one of the creators of Vagrant)\nwhere he talked about how he does all his development work inside a VM running\non a Mac laptop. I can't find the original tweet, but I made a note about it\nand then he did another tweet about it:<\/p>\n\n<blockquote>\n  <p><em>My NixOS configurations for my dev VM setup are finally sanitized and open source. They work for both Intel and Apple Silicon. And I put together a video showing how I setup a new machine!<\/em>\n  (originally posted at <a href=\"https:\/\/twitter.com\/mitchellh\/status\/1452721115009191938\">https:\/\/twitter.com\/mitchellh\/status\/1452721115009191938<\/a>)<\/p>\n<\/blockquote>\n\n<p>In that tweet he also shared a link to a <a href=\"https:\/\/www.youtube.com\/watch?v=ubDMLoWz76U\">YouTube video<\/a> and\nthe <a href=\"https:\/\/github.com\/mitchellh\/nixos-config\">GitHub repo<\/a> that he was publicly sharing\nthat you could use as a template.<\/p>\n\n<p>Again, in a big coincidence, Mr. Hashimoto was also using <a href=\"https:\/\/nixos.org\">NixOS<\/a> as his\nVM's operating system. NixOS is a Linux distribution based on <a href=\"https:\/\/nixos.org\/manual\/nix\/stable\/introduction.html\">Nix package manager<\/a>.\nWhich doesn't mean much if you're not a fan of their approach.<\/p>\n\n<p>The reason to like Nix is that it bills itself as a <em>purely functional package manager<\/em>.\nIf you've ever come across the \"functional style\" of programming then you might know\nhow powerful it is to have code that has no \"side effects\". This means that your\ncode is not doing things like writing to the file system, or updating records in a database.\nIn a functional world (unless the code is supposed return something random) it is easy\nto test code because the same input should always generate the same output.<\/p>\n\n<p>If you apply this to package management, it means your are choosing and installing dependencies\nin such a way that you can isolate them from each other. It can be difficult to have, for example,\ntwo different versions of PHP installed for your use unless you are relying on third party tools\nto keep track of what version should be active.<\/p>\n\n<p>Nix handles this by forcing you to declare any dependencies explicitly. No more\nworrying about globally-installed libraries causing incompatibility problems. \nWant to see if your PHP project runs on 7.4, 8.0, and 8.1? You can do that easily\nwith NixOS and it's tooling.<\/p>\n\n<p>I guess you can tell I am a fan of NixOS and look forward to using it a lot more.<\/p>\n\n<p>The idea from a high level is this: given a NixOS VM running in VMWare (I am using\nVMWare Fusion) it should take less than 10 minutes to create a development\nenvironment configured with my preferred tools installed from scratch.<\/p>\n\n<p>The repo he provides is definitely not ready to go as-is. You will need to modify\na lot of the things in there -- I know I did. It took about a week of poking at it,\ncreating and destroying lots of VM's, and learning how NixOS wants to do things to\nget it to the point where I could get it up and running and actually use it.<\/p>\n\n<p>I ended up removing a bunch of tools that are related to Mitchell's work on Docker\nand added a few things I knew I was going to need for my work with this client. It\nalso took me a while to figure out how to generate a hash for the password for the \nuser account the build-and-configure process can create for you. But in the\nend I had a VM up and running (that I could also SSH into if I wanted to)<\/p>\n\n<p>By default, the VM uses a graphical interface with a <a href=\"https:\/\/i3wm.org\/\">tiling window manager<\/a>\nand you type Command-N on your Mac and it opens up a terminal session in \n<a href=\"https:\/\/sw.kovidgoyal.net\/kitty\/\">Kitty<\/a> and you are ready to go!.<\/p>\n\n<p>I also had modified the configuration to install Docker and the related\ncommand-line tools. Once I cloned the client repo all I had to do was\n<code>make build<\/code> to create the Docker containers the development environment\nneeded and <code>make unit<\/code> to run the unit test suite in less than half the time.<\/p>\n\n<p>So what is the point of doing all this work? Let's go back to my original\nproblem. Running a test suite that used a development environment consisting\nof multiple Docker containers was incredibly slow. Running on my Mac (and giving\nDocker half the cores and half the available memory) it takes about 80 seconds.\nRunning inside a VM that has access to the same resources takes about 35 seconds.<\/p>\n\n<p>If you've never done a development work flow of \"make a change, run a process to \nverify the change works as expected\" for a large chunk of your work day then perhaps\nyou don't think this is a big deal. Every loop also has come context switching\nas you try and figure out what happened. If you do this 100 times in a day, you\nprobably want this loop to run as quickly as possible.<\/p>\n\n<p>I don't know if there is a phrase or concept or \"law\" about this sort of perception-versus-reality\nissue, but I find myself wanting to get things done FASTER when the process by\nwhich results are determined gets SLOWER. When my test suite runs in 30 seconds,\nI feel like I have lots of time to solve the problem. When it takes a minute-and-a-half\nI get...anxious? Maybe that's the wrong emotion. I know something takes too long \nwhen I start muttering to myself \"this is taking too <insert preferred swear word> long.\".<\/p>\n\n<p>With the \"happens faster than before\" issue solved, I find the next benefit to be \nas I learn how to use Nix to build repeatable environments, a major mistake can be \nsolved by deleting the VM and trying again. Maybe 20 minutes tops to get back to \nwhere I was. When I mess up my development environment\non my MacBook (OS update or maybe <a href=\"https:\/\/brew.sh\/\">Homebrew<\/a> updates an underlying\ndependency) it can be a whole afternoon spent trying to \"fix whatever I broke.\"<\/p>\n\n<p>It's not clear there will ever be any kind of solution for the \"crossing file systems\"\nissue that leads to Docker performing so poorly. My fellow programmers who are\nrunning the newer MacBooks that use Apple's new chips tell me performance is \nquite good. Spending another CAD$3k so Docker runs faster seems like a waste of \nmoney to me, but that is just a personal opinion.<\/p>\n\n<p>I used to be someone who lived on the bleeding edge when it came to their software.\nAs I got older and grumpier I started to value stability and repeatability in my \nsoftware more. A development environment that can be built using <a href=\"https:\/\/www.gnu.org\/software\/make\/\">Make<\/a>\nand a VM is one I can rely on to start me off at a known point, exhibiting\nbehaviour I am expecting. Almost like the benefits of a test suite!<\/p>\n\n<p>Doing this NixOS-in-a-VM stuff relies on you having some experience with Linux \nenvironments. I did run Linux as my desktop environment for several years \nbefore I started buying Apple hardware (which I've done since 2002) and \nMacOS's \"<a href=\"https:\/\/en.wikipedia.org\/wiki\/Berkeley_Software_Distribution\">BSD<\/a> with a pretty window manager\" approach also let me use those\ncommand-line skills.<\/p>\n\n<p>I highly recommend watching Mitchell's YouTube video as he explains how the\nwhole process works. I found it useful because he explains the philosophy of \nhis approach. Understanding WHY someone does things can often lead you to \nquicker insights as to what needs to change to fit your needs.<\/p>\n\n<p>If you do get it all set up, let me know your experiences. With some effort\nI can probably create a more generic version of my set up and create a GitHub\nrepo with all the files in it.<\/p>\n",
        "date": "2021-12-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Repeatable Development Environments",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2021\/12\/30\/repeatable-dev-environments\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<h2 id=\"tl%3Bdr---adding-support-to-an-existing-symfony-3.4-application-for-doctrine\">TL;DR - Adding support to an existing Symfony 3.4 application for Doctrine<\/h2>\n\n<p>(If you like the work I do on OpenCFP, please consider sponsoring me at\n<a href=\"https:\/\/github.com\/sponsors\/chartjes\/\">https:\/\/github.com\/sponsors\/chartjes\/<\/a>)<\/p>\n\n<p>Part of the medium-term planning for <a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a> is\nto refactor the application to stop using <a href=\"https:\/\/cartalyst.com\/manual\/sentinel\/\">Sentinel<\/a>\nas the authentication and ACL choice and start using the <a href=\"https:\/\/symfony.com\/doc\/current\/security.html\">Symfony Scurity<\/a>\ncomponent.<\/p>\n\n<p>When OpenCFP was first built it was a more standalone solution and I picked Sentinel's\npredecessor, Sentry. As it got deprecated, we moved to Sentinel and along the way we\nadded in some code to make <a href=\"https:\/\/laravel.com\/docs\/5.8\/eloquent\">Eloquent<\/a> easier to\nuse within the app. When switching to be more Symfony-based, Doctrine is the ORM that\nneeds to be used. So I have a refactoring process that looks like this:<\/p>\n\n<ul>\n<li>Get Doctrine and it's dependencies into the project<\/li>\n<li>Refactor everything <em>except<\/em> our auth stuff to use Doctrine<\/li>\n<li>Refactor our authentication and authorization code to use Symfony Security<\/li>\n<li>Remove Sentinel and all it's dependencies<\/li>\n<\/ul>\n\n<p>I had not used Doctrine in many many years so a lot of things have changed. Given\nall the trouble I had, I figured I was not alone so it makes sense to document\nthe changes and additions I made.<\/p>\n\n<p>As with most work I do on OpenCFP, this was a journey of discovering things I needed to\nknow that I did not know.<\/p>\n\n<h2 id=\"packages\">Packages<\/h2>\n\n<p>Following the directions for <a href=\"https:\/\/symfony.com\/doc\/3.4\/doctrine.html\">Symfony 3.4<\/a> I\ninstalled my dependencies:<\/p>\n\n<pre><code class=\"bash\">composer require doctrine\/orm\ncomposer require doctrine\/doctrine-bundle\ncomposer require doctrine\/doctrine-cache-bundle\n<\/code><\/pre>\n\n<p>Right now, <code>composer show<\/code> says I have the following Doctrine-related packages installed now<\/p>\n\n<pre><code class=\"bash\">doctrine\/annotations                v1.8.0  \ndoctrine\/cache                      1.9.1   \ndoctrine\/collections                1.6.4   \ndoctrine\/common                     v2.11.0 \ndoctrine\/data-fixtures              1.4.0   \ndoctrine\/dbal                       v2.10.0 \ndoctrine\/doctrine-bundle            1.12.2  \ndoctrine\/doctrine-cache-bundle      1.4.0   \ndoctrine\/doctrine-fixtures-bundle   3.3.0   \ndoctrine\/event-manager              1.1.0   \ndoctrine\/inflector                  1.3.1   \ndoctrine\/instantiator               1.3.0   \ndoctrine\/lexer                      1.2.0   \ndoctrine\/orm                        v2.7.0  \ndoctrine\/persistence                1.2.0   \ndoctrine\/reflection                 v1.0.0  \nsymfony\/doctrine-bridge             v3.4.35 \n<\/code><\/pre>\n\n<p>I may have installed some of these packages manually, but who knows.<\/p>\n\n<h2 id=\"enable-doctrine-in-the-application\">Enable Doctrine in the application<\/h2>\n\n<p>The first sign I had no idea what I was doing was when I could not see\nany of the Doctrine-related commands when I used <code>bin\/console<\/code>. After\nmoaning on Twitter and asking some questions on Stack Overflow, I realized\nit would not automatically find it. so I added a line to my <code>Kernel.php<\/code>\nfile so that the bundle would be available.<\/p>\n\n<pre><code class=\"php\">    public function registerBundles()\n    {\n        $bundles = [\n            new FrameworkBundle(),\n            new SensioFrameworkExtraBundle(),\n            new MonologBundle(),\n            new TwigBundle(),\n            new SwiftmailerBundle(),\n            new WouterJEloquentBundle(),\n            new OneupFlysystemBundle(),\n            new DoctrineBundle(),\n        ];\n\n        if ($this-&gt;getEnvironment() !== Environment::TYPE_PRODUCTION) {\n            $bundles[] = new DebugBundle();\n        }\n\n        if ($this-&gt;getEnvironment() === Environment::TYPE_DEVELOPMENT) {\n            $bundles[] = new WebServerBundle();\n            $bundles[] = new WebProfilerBundle();\n        }\n\n        return $bundles;\n    }\n<\/code><\/pre>\n\n<h2 id=\"making-repositories-available-as-a-service\">Making repositories available as a service<\/h2>\n\n<p>I had to update my `resources\/config\/services\/services.yml' file with the following\nnew section to allow the app to find and inject all the repository files I was going\nto create:<\/p>\n\n<pre><code class=\"yaml\"> OpenCFP\\Domain\\Repository\\:\n    public: true\n    resource: '%kernel.project_dir%\/src\/Domain\/Repository\/*'\n<\/code><\/pre>\n\n<h2 id=\"configuration-files\">Configuration Files<\/h2>\n\n<p>To make Doctrine see the database connections, I had to modify the\nfollowing files:<\/p>\n\n<pre><code class=\"bash\">resources\/config\/config_development.yml\nresources\/config\/config_testing.yml\nresources\/config\/config_production.yml\n<\/code><\/pre>\n\n<p>adding in the following details (determined through trial-and-error and online searches for help)<\/p>\n\n<pre><code class=\"yaml\">doctrine:\n  dbal:\n    url: mysql:\/\/root:@127.0.0.1:3306\/cfp\n    default_table_options:\n      charset: utm8mb4\n      collate: utg8mb4_unicode_ci\n  orm:\n    auto_mapping: true\n    auto_generate_proxy_classes: true\n    mappings:\n      OpenCFP\\Domain\\Entity:\n        type: annotation\n        dir: \"%kernel.root_dir%\/..\/src\/Domain\/Entity\"\n        prefix: OpenCFP\\Domain\\Entity\n<\/code><\/pre>\n\n<p>Early on I had my integration test suite failing to even run because it was complaining it\ncould not find the new repository I had created:<\/p>\n\n<pre><code class=\"php\">&lt;?php\n\ndeclare(strict_types=1);\n\n\/**\n * Copyright (c) 2013-2019 OpenCFP\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n *\n * @see https:\/\/github.com\/opencfp\/opencfp\n *\/\n\nnamespace OpenCFP\\Domain\\Repository;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\EntityRepository;\nuse OpenCFP\\Domain\\Entity\\Airport;\n\nfinal class AirportRepository\n{\n    \/**\n     * @var EntityRepository\n     *\/\n    private $repository;\n\n    public function __construct(EntityManagerInterface $entityManager)\n    {\n        $this-&gt;repository = $entityManager-&gt;getRepository(Airport::class);\n    }\n\n    public function withCode(string $code): ?Airport\n    {\n        $airport = $this-&gt;repository-&gt;findOneByCode($code);\n\n        if ($airport !== null) {\n            return $airport;\n        }\n\n        return null;\n    }\n}\n\n<\/code><\/pre>\n\n<p>Here's the entity I created to go with it<\/p>\n\n<pre><code class=\"php\">&lt;?php\n\ndeclare(strict_types=1);\n\n\/**\n * Copyright (c) 2013-2019 OpenCFP\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n *\n * @see https:\/\/github.com\/opencfp\/opencfp\n *\/\n\nnamespace OpenCFP\\Domain\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n\/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"airports\")\n *\/\nfinal class Airport\n{\n    \/**\n     * @ORM\\Column(type=\"string\", length=3)\n     * @ORM\\Id\n     *\/\n    private $code;\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=255)\n     *\/\n    private $name;\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=255)\n     *\/\n    private $country;\n\n    \/**\n     * @return mixed\n     *\/\n    public function getCode()\n    {\n        return $this-&gt;code;\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function getName()\n    {\n        return $this-&gt;name;\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function getCountry()\n    {\n        return $this-&gt;country;\n    }\n}\n<\/code><\/pre>\n\n<p>The issue turned out to be I needed to set <code>auto_generate_proxy_classes<\/code> to be <code>true<\/code>. The\nerror messages from the application itself were not helpful (complaining it could not inject\nthe <code>EntityManagerInterface<\/code> my code was using). Anyway, once I figured that out my integration\ntest suite passed. Now I could go and modify my code to use the new repository instead of the\nEloquent model.<\/p>\n\n<p>Here's a summary of the steps I took to update the action that uses airport details<\/p>\n\n<ul>\n<li>removed references to the <code>AirportInformationDatabase<\/code> object that was used to access the list of airports and codes<\/li>\n<li>added in the use of the new <code>AirportRepository<\/code> object<\/li>\n<li>updated the constructor for the action to accept <code>AirportRepository<\/code> as a parameter via the magic of autowiring dependencies<\/li>\n<li>updated the code to use the new repository (and fix a code smell involving an exception being caught but never reacted to)<\/li>\n<\/ul>\n\n<p>So now my tests pass and I have a way to add more Doctrine entities and repositories going forward.<\/p>\n",
        "date": "2019-12-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "OpenCFP Engineering Diary -- Adding Doctrine",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/12\/02\/opencfp-engineering-diary-adding-doctrine\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For the first half of 2019 I was borrowed by the Performance Team\nat Mozilla and asked to help them implement a way to measure the\nperformance of various browsers on Android platforms. This has\ninvolved me getting familiar with several tools and environments\nthat I had not touched before:<\/p>\n\n<ul>\n<li>Mozilla's tooling for use with <a href=\"https:\/\/hg.mozilla.org\/mozilla-central\">mozilla-central<\/a><\/li>\n<li>Rooting Android devices for testing purposes<\/li>\n<li><a href=\"https:\/\/developer.android.com\/studio\/\">Android Studio<\/a> and it's device emulation tools<\/li>\n<li>Executing and parsing shell commands<\/li>\n<\/ul>\n\n<p>Of course, I am using <a href=\"https:\/\/docs.pytest.org\/en\/latest\/\">pytest<\/a> as well to make sure\nthat I had thought about testing scenarios and giving whomever\nsupports this code once I am back at my previous role a chance\nto figure out what is going on.<\/p>\n\n<p>One of the testing scenarios I came up with was handing the fact that I\nhad designed the code to have a fallback mode in case the\nshell command I was using did not work on that particular\ndevice. Some code reviews from other developers revealed\nsome differences in how the <a href=\"https:\/\/www.unixtutorial.org\/commands\/top\"><code>top<\/code> command<\/a>\nworks on different phones.<\/p>\n\n<p>So, drawing  on my own experiences with using test\ndoubles in PHP, I asked myself \"how can I create\na mock that has different return values?\". In\npytest this functionality is called <code>side_effect<\/code>.<\/p>\n\n<p>So, here is some of the code in question that I needed\nto test:<\/p>\n\n<pre><code class=\"python\">try:\n    cpuinfo = raptor.device.shell_output(\"top -O %CPU -n 1\").split(\"\\n\")\n    raptor.device._verbose = verbose\n    for line in cpuinfo:\n    data = line.split()\n            if data[-1] == app_name:\n                cpu_usage = data[3]\nexcept Exception:\n    cpuinfo = raptor.device.shell_output(\"dumpsys cpuinfo | grep %s\" % app_name).split(\"\\n\")\n    for line in cpuinfo:\n        data = line.split()\n        cpu_usage = data[0].strip('%')\n<\/code><\/pre>\n\n<p>I wrapped the first call in a try-catch construct because\nan exception is thrown if anything is up with that <code>top<\/code>\ncall. If that call doesn't work, I then want to use that\n<code>dumpsys<\/code> call.<\/p>\n\n<p>In the test itself, I would need the <code>shell_output<\/code> call\nto first throw an exception (as expected for the scenario)\nand then return some output that I can then parse and use.<\/p>\n\n<p>In the PHP world, most test doubling tools allow you to\ncreate a mock and have it return different values on\nconsecutive calls. Pytest is no different, but it took\nme a while to figure out the correct search terms to find\nthe functionality I wanted.<\/p>\n\n<p>So, here is how I did it:<\/p>\n\n<pre><code class=\"python\">def test_usage_with_fallback():\n    with mock.patch('mozdevice.adb.ADBDevice') as device:\n        with mock.patch('raptor.raptor.RaptorControlServer') as control_server:\n            '''\n            First we have to return an error for 'top'\n            Then we return what we would get for 'dumpsys'\n            '''\n            device.shell_output.side_effect = [\n                OSError('top failed, move on'),\n                ' 34% 14781\/org.mozilla.geckoview_example: 26% user + 7.5% kernel'\n            ]\n            device._verbose = True\n\n            # Create a control server\n            control_server.cpu_test = True\n            control_server.test_name = 'cpuunittest'\n            control_server.device = device\n            control_server.app_name = 'org.mozilla.geckoview_example'\n            raptor = Raptor('geckoview', 'org.mozilla.geckoview_example', cpu_test=True)\n            raptor.device = device\n            raptor.config['cpu_test'] = True\n            raptor.control_server = control_server\n\n            # Verify the response contains our expected CPU % of 34\n            cpuinfo_data = {\n                u'type': u'cpu',\n                u'test': u'usage_with_fallback',\n                u'unit': u'%',\n                u'values': {\n                    u'browser_cpu_usage': '34'\n                }\n            }\n            cpu.generate_android_cpu_profile(\n                raptor,\n                \"usage_with_fallback\")\n            control_server.submit_supporting_data.assert_called_once_with(cpuinfo_data)\n<\/code><\/pre>\n\n<p>Let me break down what I did (as always, I am open to\nsuggestions on better ways to write this test).<\/p>\n\n<p>The first double is for a class that communicates with the\nAndroid device. Then the next double I needed was for the\n\"control server\", which is what is used to control the\nbrowser and execute tests.<\/p>\n\n<p>My first \"side effect\" is to generate an error so it\ntriggers the first condition of the scenario that\n'top should not work'. The second \"side effect\" is\nthe response I am expecting to get from the shell\ncommand in my fallback area of the code.<\/p>\n\n<p>Then I continue with the \"arrange\" part of the <a href=\"http:\/\/wiki.c2.com\/?ArrangeActAssert\">Arrange-Act-Assert<\/a>\ntesting pattern I like to use -- I configure my\n\"control server\" to be the way I want it.<\/p>\n\n<p>I finish up with creating what I expect the data\nthat is to be submitted to our internal systems\nlooks like.<\/p>\n\n<p>I execute the code I am testing (the \"act\" part)\nand then use a <a href=\"https:\/\/github.com\/testdouble\/contributing-tests\/wiki\/spy\">spy<\/a>\nto make sure the control server would have submitted\nthe data I was expecting to have been generated.<\/p>\n\n<p>The ability to have a method return different values\nis powerful in the context of writing tests for code\nthat has conditional behaviour. I hope you find this\nexample useful!<\/p>\n",
        "date": "2019-05-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Mocking a function with different return values in Python",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/05\/15\/getting-things-done-while-remote\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For the first half of 2019 I was borrowed by the Performance Team\nat Mozilla and asked to help them implement a way to measure the\nperformance of various browsers on Android platforms. This has\ninvolved me getting familiar with several tools and environments\nthat I had not touched before:<\/p>\n\n<ul>\n<li>Mozilla's tooling for use with <a href=\"https:\/\/hg.mozilla.org\/mozilla-central\">mozilla-central<\/a><\/li>\n<li>Rooting Android devices for testing purposes<\/li>\n<li><a href=\"https:\/\/developer.android.com\/studio\/\">Android Studio<\/a> and it's device emulation tools<\/li>\n<li>Executing and parsing shell commands<\/li>\n<\/ul>\n\n<p>Of course, I am using <a href=\"https:\/\/docs.pytest.org\/en\/latest\/\">pytest<\/a> as well to make sure\nthat I had thought about testing scenarios and giving whomever\nsupports this code once I am back at my previous role a chance\nto figure out what is going on.<\/p>\n\n<p>One of the testing scenarios I came up with was handing the fact that I\nhad designed the code to have a fallback mode in case the\nshell command I was using did not work on that particular\ndevice. Some code reviews from other developers revealed\nsome differences in how the <a href=\"https:\/\/www.unixtutorial.org\/commands\/top\"><code>top<\/code> command<\/a>\nworks on different phones.<\/p>\n\n<p>So, drawing  on my own experiences with using test\ndoubles in PHP, I asked myself \"how can I create\na mock that has different return values?\". In\npytest this functionality is called <code>side_effect<\/code>.<\/p>\n\n<p>So, here is some of the code in question that I needed\nto test:<\/p>\n\n<pre><code class=\"python\">try:\n    cpuinfo = raptor.device.shell_output(\"top -O %CPU -n 1\").split(\"\\n\")\n    raptor.device._verbose = verbose\n    for line in cpuinfo:\n    data = line.split()\n            if data[-1] == app_name:\n                cpu_usage = data[3]\nexcept Exception:\n    cpuinfo = raptor.device.shell_output(\"dumpsys cpuinfo | grep %s\" % app_name).split(\"\\n\")\n    for line in cpuinfo:\n        data = line.split()\n        cpu_usage = data[0].strip('%')\n<\/code><\/pre>\n\n<p>I wrapped the first call in a try-catch construct because\nan exception is thrown if anything is up with that <code>top<\/code>\ncall. If that call doesn't work, I then want to use that\n<code>dumpsys<\/code> call.<\/p>\n\n<p>In the test itself, I would need the <code>shell_output<\/code> call\nto first throw an exception (as expected for the scenario)\nand then return some output that I can then parse and use.<\/p>\n\n<p>In the PHP world, most test doubling tools allow you to\ncreate a mock and have it return different values on\nconsecutive calls. Pytest is no different, but it took\nme a while to figure out the correct search terms to find\nthe functionality I wanted.<\/p>\n\n<p>So, here is how I did it:<\/p>\n\n<pre><code class=\"python\">def test_usage_with_fallback():\n    with mock.patch('mozdevice.adb.ADBDevice') as device:\n        with mock.patch('raptor.raptor.RaptorControlServer') as control_server:\n            '''\n            First we have to return an error for 'top'\n            Then we return what we would get for 'dumpsys'\n            '''\n            device.shell_output.side_effect = [\n                OSError('top failed, move on'),\n                ' 34% 14781\/org.mozilla.geckoview_example: 26% user + 7.5% kernel'\n            ]\n            device._verbose = True\n\n            # Create a control server\n            control_server.cpu_test = True\n            control_server.test_name = 'cpuunittest'\n            control_server.device = device\n            control_server.app_name = 'org.mozilla.geckoview_example'\n            raptor = Raptor('geckoview', 'org.mozilla.geckoview_example', cpu_test=True)\n            raptor.device = device\n            raptor.config['cpu_test'] = True\n            raptor.control_server = control_server\n\n            # Verify the response contains our expected CPU % of 34\n            cpuinfo_data = {\n                u'type': u'cpu',\n                u'test': u'usage_with_fallback',\n                u'unit': u'%',\n                u'values': {\n                    u'browser_cpu_usage': '34'\n                }\n            }\n            cpu.generate_android_cpu_profile(\n                raptor,\n                \"usage_with_fallback\")\n            control_server.submit_supporting_data.assert_called_once_with(cpuinfo_data)\n<\/code><\/pre>\n\n<p>Let me break down what I did (as always, I am open to\nsuggestions on better ways to write this test).<\/p>\n\n<p>The first double is for a class that communicates with the\nAndroid device. Then the next double I needed was for the\n\"control server\", which is what is used to control the\nbrowser and execute tests.<\/p>\n\n<p>My first \"side effect\" is to generate an error so it\ntriggers the first condition of the scenario that\n'top should not work'. The second \"side effect\" is\nthe response I am expecting to get from the shell\ncommand in my fallback area of the code.<\/p>\n\n<p>Then I continue with the \"arrange\" part of the <a href=\"http:\/\/wiki.c2.com\/?ArrangeActAssert\">Arrange-Act-Assert<\/a>\ntesting pattern I like to use -- I configure my\n\"control server\" to be the way I want it.<\/p>\n\n<p>I finish up with creating what I expect the data\nthat is to be submitted to our internal systems\nlooks like.<\/p>\n\n<p>I execute the code I am testing (the \"act\" part)\nand then use a <a href=\"https:\/\/github.com\/testdouble\/contributing-tests\/wiki\/spy\">spy<\/a>\nto make sure the control server would have submitted\nthe data I was expecting to have been generated.<\/p>\n\n<p>The ability to have a method return different values\nis powerful in the context of writing tests for code\nthat has conditional behaviour. I hope you find this\nexample useful!<\/p>\n",
        "date": "2019-05-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Mocking a function with different return values in Python",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/05\/15\/python-mocking-function-with-different-return-values\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I continue to build out <a href=\"https:\/\/opencfpcentral.com\">OpenCFP Central<\/a> I\nwanted to share with you some of the work I have been doing to move it from\nyour typical <a href=\"https:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete\">CRUD<\/a>\nstructure to something a little more robust -- <a href=\"https:\/\/www.martinfowler.com\/bliki\/CQRS.html\">CQRS<\/a>\nand <a href=\"https:\/\/www.martinfowler.com\/eaaDev\/EventSourcing.html\">event sourcing<\/a>.<\/p>\n\n<p>So at the time I wrote this, I had two problems I needed to solve:<\/p>\n\n<ul>\n<li>how to refactor existing code for talk creation to support CQRS+ES<\/li>\n<li>how to go back and create events for data that already exists<\/li>\n<\/ul>\n\n<p>Solving the first problem appears straightforward. This is a <a href=\"https:\/\/laravel.com\/docs\/5.8\">Laravel 5.8<\/a>\napplication, so I spent time looking at some different packages that I thought\ncould help me implement the core features that I needed for event sourcing\nquickly. My first research lead me to two solutions tailored towards PHP:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/getprooph.org\/\">Prooph<\/a><\/li>\n<li><a href=\"https:\/\/eventsauce.io\/docs\/\">EventSauce<\/a><\/li>\n<\/ul>\n\n<p>The problem I quickly ran into was there was some friction in using\nthese packages with Laravel. They both are very powerful, but you will\nend up spending a lot of time writing the wiring and\/or glue yourself.\nThat was time that I felt I did not have. After all OpenCFP Central\nis a project I can only really devote 1-2 days a week on. I needed\nsome help to implement the basic concepts and let me build stuff\nquickly.<\/p>\n\n<p>Like with a lot of problems I try and solve over the years, sometimes\nif you wait long enough someone else will create the solution for you!<\/p>\n\n<p>I discovered that <a href=\"https:\/\/twitter.com\/freekmurze\">Freek Murze<\/a> had been\ntweeting about <a href=\"https:\/\/docs.spatie.be\/laravel-event-projector\/v2\/introduction\">Laravel Event Projector<\/a>.\nThis turned out to be exactly what I needed to get started.<\/p>\n\n<p>So, I need to go backwards and first figure out how do I take the\nexisting data we have and create events from it. The work I needed\nto do will be used when I go and refactor the existing user registration\ncode to support the new event sourcing.<\/p>\n\n<p>What do I need to start?<\/p>\n\n<ul>\n<li>An <a href=\"https:\/\/docs.spatie.be\/laravel-event-projector\/v2\/getting-familiar-with-event-sourcing\/using-aggregates-to-make-decisions-based-on-the-past\">aggregate<\/a> that represents a talk<\/li>\n<li>An event that needs to be triggered to create our talk aggregate<\/li>\n<li>A script that reads in the existing data and creates those events.<\/li>\n<\/ul>\n\n<p>The aggregate looks like this:<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nnamespace App\\Domain\\User;\n\nuse App\\Domain\\User\\Events\\UserCreated;\nuse Spatie\\EventProjector\\AggregateRoot;\n\nfinal class UserAggregateRoot extends AggregateRoot\n{\n    public function createUser(string $email, string $name, string $password)\n    {\n        $this-&gt;recordThat(new UserCreated($email, $name, $password));\n\n        return $this;\n    }\n}\n<\/code><\/pre>\n\n<p>Remember, all I'm storing is the data about this user that is\nimportant to the system. It will automatically create a UUID that\nbelongs to this aggregate. I'll worry about what ends up in the\ndatabase we will <em>read<\/em> information from when I create a \n<a href=\"https:\/\/docs.spatie.be\/laravel-event-projector\/v2\/getting-familiar-with-event-sourcing\/using-projectors-to-transform-events\">projector<\/a>\nto extract data from the event store.<\/p>\n\n<p>Next, I have to create the code for the event that will\nin turn generate our user aggregate.<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nnamespace App\\Domain\\User\\Events;\n\nuse Spatie\\EventProjector\\ShouldBeStored;\n\nfinal class UserCreated implements ShouldBeStored\n{\n    \/** @var string *\/\n    public $email;\n\n    \/** @var string *\/\n    public $name;\n\n    \/** @var string *\/\n    public $password;\n\n    \/**\n     * UserCreated constructor.\n     * @param string $email\n     * @param string $name\n     * @param string $password\n     *\/\n    public function __construct(string $email, string $name, string $password)\n    {\n        $this-&gt;email    = $email;\n        $this-&gt;name     = $name;\n        $this-&gt;password = $password;\n    }\n}\n<\/code><\/pre>\n\n<p>It takes the user information passed into it and assigns it to\nclass attributes.<\/p>\n\n<p>Finally, I will create a console command that I can execute\nwith <code>php artisan<\/code> that will loop through all my existing\nuser records, storing aggregates for them.<\/p>\n\n<pre><code class=\"php\"><br \/>declare(strict_types=1);\n\nnamespace App\\Console\\Commands;\n\nuse App\\Domain\\User\\UserAggregateRoot;\nuse App\\User;\nuse Illuminate\\Console\\Command;\nuse Ramsey\\Uuid\\Uuid;\n\nclass GenerateUserCreatedEvents extends Command\n{\n    \/**\n     * The name and signature of the console command.\n     *\n     * @var string\n     *\/\n    protected $signature = 'admin:generate_user_events';\n\n    \/**\n     * The console command description.\n     *\n     * @var string\n     *\/\n    protected $description = 'Set an existing user to be an admin';\n\n    public function handle() : void\n    {\n        foreach (User::all() as $user) {\n            UserAggregateRoot::retrieve((string) Uuid::uuid4())\n                -&gt;createUser(\n                    $user-&gt;email,\n                    $user-&gt;name,\n                    $user-&gt;password\n                )\n                -&gt;persist();\n        }\n    }\n}\n<\/code><\/pre>\n\n<p>The <code>UserAggregateRoot<\/code> uses some magic behind the scenes to\nthen take the data I submitted and write it to the event store.<\/p>\n\n<p>So what ends up being stored in the events table? In my current\ntest environment I have exactly one user and here's a\nslightly-edited version of what got created.<\/p>\n\n<pre><code>id               | 4\naggregate_uuid   | 2b5f88da-1f51-4443-a080-c566c04d452e\nevent_class      | App\\Domain\\User\\Events\\UserCreated\nevent_properties | {\"email\":\"chartjes@grumpy-learning.com\",\"name\":\"Chris Hartjes\",\"password\":\"clearlynotmypassword\"}\nmeta_data        | []\ncreated_at       | 2019-04-26 19:31:44\n<\/code><\/pre>\n\n<p>Again, I remind you to understand the central concept\nthat we are creating events that do not necessarily map\nexactly to what ends up in a database. One of the central\nparts of CQRS is that by separating the \"command\" (typically\nwriting something to a database) from the \"query\" (typically\nreading something from a database). This gives me the\nflexibility to have multiple database tables that can\ndisplay information in different ways. This is especially\nuseful for domains where multiple types of reports are\nrequired. Multiple tables with exactly the data you need\nare, in my opinion, better than one big table where you\nhave to create customized queries to filter out, and group,\nand aggregate things you are looking for.<\/p>\n\n<p>First, I need to modify the controller method that\nhandles user creation to create an aggregate instead\nof directly writing to the database.<\/p>\n\n<p>Here's what it looks like right now:<\/p>\n\n<pre><code class=\"php\">\/**\n* Create a new user instance after a valid registration.\n*\n* @param  array  $data\n* @return \\App\\User\n*\/\nprotected function create(array $data) : User\n{\n    return User::create([\n        'name' =&gt; $data['name'],\n        'email' =&gt; $data['email'],\n        'password' =&gt; Hash::make($data['password']),\n    ]);\n}\n<\/code><\/pre>\n\n<p>Here's what it does instead:<\/p>\n\n<pre><code class=\"php\">protected function create(array $data) : User\n{\n    $newUuid = (string) Uuid::uuid4();\n        UserAggregateRoot::retrieve($newUuid)\n            -&gt;createUser(\n                $data['email'],\n                $data['name'],\n                Hash::make($data['password'])\n            )\n            -&gt;persist();\n\n        return User::where('email', $data['email'])-&gt;first();\n}\n<\/code><\/pre>\n\n<p>Now, this is not exactly normal behaviour in a CQRS+ES\napplication. Because Laravel's Auth system was not created\nwith this is in mind, I had to cheat a little to make\nthe use registration system behave correctly.<\/p>\n\n<p>Next I need to create a projector that will be triggered\nwhenever the <code>UserCreated<\/code> event happens.<\/p>\n\n<pre><code class=\"php\">declare(strict_types=1);\n\nnamespace App\\Domain\\User\\Projectors;\n\nuse App\\Domain\\User\\Events\\UserCreated;\nuse App\\User;\nuse Spatie\\EventProjector\\Projectors\\Projector;\nuse Spatie\\EventProjector\\Projectors\\ProjectsEvents;\n\nfinal class UserProjector implements Projector\n{\n    use ProjectsEvents;\n\n    public function onUserCreated(UserCreated $event, $aggregateUuid) : void\n    {\n        User::create([\n            'name' =&gt; $event-&gt;name,\n            'email' =&gt; $event-&gt;email,\n        'password' =&gt; $event-&gt;password\n        ]);\n    }\n}\n<\/code><\/pre>\n\n<p>Alert readers will notice this is what the old controller method\nused to do.<\/p>\n\n<p>Any projectors you write will be automatically detected and\nregistered by the application.<\/p>\n\n<p>So there you have it! A successful refactor of some existing\ncode to support a new underlying paradigm. There is still\nmore work to do and I'll share some of it in another blog post\nsoon.<\/p>\n",
        "date": "2019-04-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Watch me get grumpy - event sourcing refactor",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/04\/27\/watch-me-get-grumpy-event-sourcing-refactor\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I am in the process of starting the dreaded Rewrite Of An Existing Application\nThat Works. In this case, it is time that I turned <a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a>\nfrom a install-it-yourself web application into a Software-As-A-Service offering.<\/p>\n\n<p>As part of this rewrite I have decided to use <a href=\"https:\/\/www.martinfowler.com\/bliki\/CQRS.html\">CQRS<\/a>\nand <a href=\"https:\/\/www.martinfowler.com\/eaaDev\/EventSourcing.html\">Event Sourcing<\/a> instead\nof the traditional CRUD-backed-with-a-DB architecture that most of the\nweb is built on.<\/p>\n\n<p>I believe that an application that has so many domain-specific events associated\nwith it will benefit greatly from the ideas underpinning CQRS and Event Sourcing.\nAnyway, the architecture is not up for debate since I'm the one doing it!<\/p>\n\n<p>This app is going to replace what I already created at <a href=\"https:\/\/opencfp-central.com\">OpenCFP Central<\/a>\nand I will cut over to this new one once I have implemented the two existing\nfeatures:<\/p>\n\n<ul>\n<li>allowing people to register accounts<\/li>\n<li>allowing people who are running OpenCFP to use OpenCFP Central for single-sign-on<\/li>\n<\/ul>\n\n<p>Because there is so much reworking to be done with the OpenCFP code base to make it\na SaaS capable of hosting multiple events, I felt it was better to start fresh\nwith the code base. Especially because I now need to add all the CQRS+ES implementation.<\/p>\n\n<p>The existing version of the application is a standard CRUD-backed-with-a-DB that was\nbuilt using <a href=\"https:\/\/laravel.com\">Laravel<\/a>. My research into figuring out how to\nadd CQRS+ES led me to believe that I did not have the requisite knowledge of the\nframework to figure out how to make it work. Laravel is great in that it has lots\nof packages and add-ons to allow you to quickly build something. I felt like this\nwas not going to help me in this case. Laravel is good! But not a great fit for\nsomeone with my level of expertise with it.<\/p>\n\n<p>So I decided to use <a href=\"https:\/\/zendframework.github.io\/zend-expressive\/\">Zend Expressive<\/a>\nas the framework to build this app. My online network of friends includes many \npeople who have used the framework, and one of the best and most thorough examples\nof how to build an application using CQRS+ES was done by <a href=\"https:\/\/twitter.com\/ocramius\">Marco Pivetta<\/a>\nand it was backed by Zend Framework and uses <a href=\"http:\/\/getprooph.org\/\">Prooph<\/a> for\nCQRS+ES functionality.<\/p>\n\n<p>(As an aside, using Zend Expressive has reminded me how much I have relied\non 'batteries included' frameworks in recent years. Forcing myself to also\nwrite glue code is actually a good thing for me)<\/p>\n\n<p>So, I knew the framework, I knew what I could use for CQRS+ES. Now it was time\nto install some other tools to help me build out this version of OpenCFP.<\/p>\n\n<p>I was going to require some sort of tool to create database migrations\nas the app gets built. I was also learning towards trying not to use\nan ORM but instead something like <a href=\"https:\/\/www.doctrine-project.org\/projects\/dbal.html\">Doctrine DBAL<\/a>\nso I decided to also use <a href=\"https:\/\/www.doctrine-project.org\/projects\/migrations.html\">Doctrine Migrations<\/a>\nsince it can be used with our without the ORM.<\/p>\n\n<p>I found some great examples of how to set things up...and it just\nwouldn't work for me. The steps seemed straightforward and I highly\nrecommend watching Adam Culp's Beachcasts tutorial on <a href=\"https:\/\/www.youtube.com\/watch?v=pFvh5ZNhdOQ\">configuring Doctrine ORM and DBAL<\/a>. I had my database configured and working.\nI added in the code to allow the Zend Service manager to locate\nDoctrine as required. The examples said \"this should work just\nfine with DBAL.\" \nI had the 'migrations.php' and 'migrations-db.php' file and it Just\nWouldn't Work.<\/p>\n\n<p>Until I realized the key critical thing I had hand-waved and did not\nthink anything off -- environment variables.<\/p>\n\n<p>The app is going to be deployed to Heroku, where I can set environment\nvariables that can be accessed by code, both in a CLI and web environment.\nI use environment variables in my work at <a href=\"https:\/\/mozilla.com\">the day job<\/a>\nso why wouldn't I do that here?<\/p>\n\n<p>This is what my 'migrations-db.php' file looked like:<\/p>\n\n<pre><code class=\"php\">&lt;?php\ndeclare(strict_types=1);\n\nreturn [\n    'driver' =&gt; 'pdo_pgsql',\n    'dbname' =&gt; \\getenv('DB_DATABASE'),\n    'user' =&gt; \\getenv('DB_USER'),\n    'password' =&gt; \\getenv('DB_PASSWORD'),\n    'host' =&gt; \\getenv('DB_HOST')\n];\n<\/code><\/pre>\n\n<p>When I would run the migration tool it would spit out errors telling me\nit could not read the database configuration file and a bunch of other\nnoise that just made me grumpier and grumpier as I struggled to figure\nout what was wrong.<\/p>\n\n<p>Eventually I decided to see what as actually inside those environment\nvariables. To my surprise there were empty! Ugh. But I did know what\nI could do to fix it. I would make use of Vance Lucas' <a href=\"https:\/\/github.com\/vlucas\/phpdotenv\">dotenv<\/a>\ntool to make sure the contents of my own '.env' file would be\navailable.<\/p>\n\n<p>After installing it using <a href=\"https:\/\/getcomposer.org\">Composer<\/a> as per\nthe documentation, I added this code to my 'migrations-db.php' file:<\/p>\n\n<pre><code class=\"php\">use Dotenv\\Dotenv;\n\nif (file_exists(__DIR__ . '\/.env')) {\n    $dotenv = Dotenv::create(__DIR__);\n    $dotenv-&gt;load();\n}\n<\/code><\/pre>\n\n<p>Now the migrations tool worked just fine, and I was on my way towards\nthe first step of the app -- building the user registration system\nand making sure authentication worked correctly.<\/p>\n\n<p>If you have any comments or suggestions, please reach out to me via\nTwitter (my preferred way) or you can email me at chartjes@grumpy-learning.com.<\/p>\n",
        "date": "2019-03-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Watch Me Get Grumpy -- Zend Expressive Doctrine Configuration",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/03\/17\/zend-expressive-doctrine-configuration\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, <a href=\"https:\/\/docker.com\">Docker<\/a> can be used as a tool to help\nyou out with some testing problems. Let me show an example of\nhow it makes some load testing easier.<\/p>\n\n<p>One of the projects I support at <a href=\"https:\/\/mozilla.com\">Mozilla<\/a> is\nthe push notification service that we run. Among the tests that\nI do for them is a load test using an <a href=\"https:\/\/github.com\/mozilla-services\/autopush-loadtester\">internal tool<\/a> \nthat the developers of the service created. It is a <a href=\"https:\/\/twistedmatrix.com\/trac\/\">Twisted<\/a> application that runs using <a href=\"https:\/\/pypy.org\">PyPy<\/a>.<\/p>\n\n<p>No, I do not know why they made those choices. Further more, it\ndoesn't matter because I have to use it so I roll with the weirdness.<\/p>\n\n<p>Installing it locally on my MacBook Pro was straightforward --\nthe docs even cover expected weirdness with some support libraries.\nBut now that I have switched over to using Windows at work I\nran into some difficulties getting all the dependencies installed\nin <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/about\">Windows Subsystem for Linux<\/a>.<\/p>\n\n<p>In fact, one of the developers uses Windows...and told me of\nthe experience he had at failing to get it to work. \"I just use\nVMWare Player and an Ubuntu VM\".<\/p>\n\n<p>I tried to get that working...and ran into a bunch of issues\nwhere I had to disable something called \"Windows Defender Credential Guard\". Which bugged me because I like to keep security mechanisms in place\nnormally. I followed instructions FROM MICROSOFT on how to do it\nand VMWare Player still wouldn't run. Kept giving me the same\nerror.<\/p>\n\n<p>Okay, on to plan B -- Docker.<\/p>\n\n<p>The first question was \"how do I make this work?\". I theorized\nI needed to do something like this:<\/p>\n\n<ul>\n<li>find a base container of Ubuntu 18<\/li>\n<li>get inside a running version of that image<\/li>\n<li>install all the required dependencies<\/li>\n<li>verify that the load testing tool works<\/li>\n<li>make a copy of that container<\/li>\n<li>push that copy up to Docker hub for teammates to use<\/li>\n<\/ul>\n\n<p>Some searching revealed that I could get a running Ubuntu\ncontainer and connect with it:<\/p>\n\n<pre><code>docker run --rm --it ubuntu\n<\/code><\/pre>\n\n<p>This downloaded the image and gave me access to it via\na <a href=\"https:\/\/www.gnu.org\/software\/bash\/\">Bash<\/a> shell.<\/p>\n\n<p>With that shell, I started installing all the packages\nI would need to install the load testing tool, including\nadding the package repository for PyPy so I could install\nit with the package manager.<\/p>\n\n<p>Once I got all the dependencies installed, I made sure that\nthe tests could run. I even found out that there was a bug\nin the documenation. ;)<\/p>\n\n<p>With a Docker image that had a working installation of the\nload testing tool, the next step turned out to be more\nstraight forward than I had thought.<\/p>\n\n<p>The Docker feature I needed was called snapshots. Here is\nwhat I did.<\/p>\n\n<p>With the Docker container still running, I opened up\nanother shell (in this case I am using <a href=\"https:\/\/docs.microsoft.com\/en-us\/powershell\/\">Powershell<\/a>) and used the command <code>docker ps<\/code>\nto get the name that had been assigned by Docker to my\nrunning container.<\/p>\n\n<p>With that name I used the following command to save\na version of that container:<\/p>\n\n<pre><code>docker commit name_of_container ubuntu:ap-loadtester \n<\/code><\/pre>\n\n<p>Then I tagged the container so I can push up to Docker\nhub under my account:<\/p>\n\n<pre><code>docker tag ubuntu:ap-loadtester chartjes\/ap-loadtester\n<\/code><\/pre>\n\n<p>Last, I pushed it up to Doker hub<\/p>\n\n<pre><code>docker push chartjes\/ap-loadtester\n<\/code><\/pre>\n\n<p>So now I have:<\/p>\n\n<ul>\n<li>an Ubuntu container I can share<\/li>\n<li>that has all the dependencies installed<\/li>\n<li>can be used by teammates to load test the push service<\/li>\n<\/ul>\n\n<p>Again, I emphasize that a tester with some programming\nexperience can create some really useful testing tools\nby leveraging the same tools and environments used to\nbuild whatever you are testing.<\/p>\n",
        "date": "2019-01-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Docker as a testing tool",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/01\/31\/docker-as-a-testing-tool\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(If you use PHP, you can learn how to write automated tests for your code via my <a href=\"https:\/\/leanpub.com\/c\/learntotest\">\"Learn To Test Like A Grumpy Programmer\" course<\/a> over at LeanPub)<\/p>\n\n<p>In this blog post I wanted to talk about some of the lessons I've\nlearned at the <a href=\"https:\/\/mozilla.com\">day job<\/a> about how to use tools and techniques\nwe are familiar with in the developer world to make our job of\ntesting things easier.<\/p>\n\n<h2 id=\"mozilla%27s-push-notification-service\">Mozilla's Push Notification Service<\/h2>\n\n<p>One of the projects I do QA work for is the <a href=\"https:\/\/support.mozilla.org\/en-US\/kb\/push-notifications-firefox\">push notification service<\/a>\nthat Mozilla runs. Yes, I know a lot of people get supremely annoyed\nby push notifications. Yes, they are heavily abused by people. Mozilla\ntries to use them in a way not designed to annoy you. But this is the\nInternet after all, where everything annoys somebody somehow.<\/p>\n\n<p>My work for that team involves doing testing of the service whenever\na new version is ready to be released. The process goes like this:<\/p>\n\n<ul>\n<li>the development team tags a new release along with a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Changelog\">changelog<\/a><\/li>\n<li>the operations team deploys this new release to the staging environment<\/li>\n<li>I create a <a href=\"https:\/\/bugzilla.mozilla.org\/\">BugZilla<\/a> ticket to track the deployment and testing results<\/li>\n<li>I run a series of tests against the service on staging, recording my progress there<\/li>\n<\/ul>\n\n<p>If all my tests pass on staging, I give approval to deploy that version\nof the service to production. The process for that is:<\/p>\n\n<ul>\n<li>the operations team deploys the new release to production<\/li>\n<li>I create another ticket to track the deployment process and testing results<\/li>\n<li>I run the same tests and add an additional set of load tests to make sure the service is responsive<\/li>\n<\/ul>\n\n<p>So what tests do I run?<\/p>\n\n<h2 id=\"api-contract-tests\">API Contract Tests<\/h2>\n\n<p>I wrote some tests using <a href=\"https:\/\/pytest.org\">pytest<\/a> that make API\ncalls using known values and verify that we are getting the responses\nthat we expect.<\/p>\n\n<p>These tests usually are not difficult to write and I did experiment\nwith making them asynchronous using <a href=\"https:\/\/github.com\/pytest-dev\/pytest-asyncio\">pytest-asyncio<\/a>\nso I could learn how asynchronous code works in Python. If you had\na very large test suite, I could see it being useful to speed up the\nprocess. This particular test suite is not big enough to warrant that.<\/p>\n\n<p>For my fellow PHP folks, there are some plugins for <a href=\"https:\/\/phpunit.de\">PHPUnit<\/a>\nthat can run your tests in parallel. For one example check out <a href=\"https:\/\/github.com\/jwage\/phpchunkit\">PHPChunkit<\/a><\/p>\n\n<h2 id=\"load-tests\">Load Tests<\/h2>\n\n<p>I only run the load tests on the production version of the service because\nthe number of nodes that handle push notification requests is higher in\nproduction. These tests are designed to put some non-trivial load onto\nthe system and examine the output from the nodes for any error messages.<\/p>\n\n<h2 id=\"vapid-testing\">VAPID Testing<\/h2>\n\n<p>I use two different Android devices for these tests. Each device has\nlatest stable and nightly releases of Firefox on them. One device\nis configured to point at staging, the other at production.<\/p>\n\n<p>A web page is loaded that uses Javascript to generate <a href=\"https:\/\/blog.mozilla.org\/services\/2016\/08\/23\/sending-vapid-identified-webpush-notifications-via-mozillas-push-service\/\">VAPID-based notifications<\/a>.<\/p>\n\n<p>In the summer of 2018 I did experiment with seeing if I could automate\nthese tests so I could use an online service offering cloud-accessible\nAndroid images. I did make some progress but it seems like some of the\npieces needed to do things like make sure I don't have to click on the\nbrowser to accept notifications are either really brittle or don't exist,\ndepending on what automation tools you are using.<\/p>\n\n<h2 id=\"desktop-notification-tests\">Desktop Notification Tests<\/h2>\n\n<p>The person who did this testing work before me created a Nodejs app that\nserves up an web page with some forms and buttons on them. You fill in\nsome values and it creates a series of push notifications that you\nvisually verify work. He then put it inside a Docker container to make\nit easier for others to run those tests.<\/p>\n\n<p>This test used to be on a personal web page of a (now-former) Mozilla\nemployee.<\/p>\n\n<h2 id=\"desktop-webpush-tests\">Desktop WebPush Tests<\/h2>\n\n<p>These tests are to make sure that a feature of the service where you\ncan group WebPush messages together by topic, only displaying the last one,\nworks correctly.<\/p>\n\n<p>The process for these tests are:<\/p>\n\n<ul>\n<li>checkout a <a href=\"https:\/\/github.com\/jrconlin\/topics\">GitHub repo<\/a> that contains the test<\/li>\n<li>configure everything according to the documenation<\/li>\n<li>start up the \"topic server\" via the CLI, which is serving up a one-page <a href=\"https:\/\/cyclone.io\">Cyclone<\/a> web application<\/li>\n<li>click on a button fire up a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service_Worker_API\">service worker<\/a> that receives requests to send a WebPush notification<\/li>\n<li>then use another CLI tool to fire off notifications (with or without a topic)<\/li>\n<li>visually verify that the notifications appeared<\/li>\n<\/ul>\n\n<p>Given that I already had a Docker-based solution, I decided it was time\nto turn this test into something where I only have to click a few buttons\ninstead of running things via the CLI.<\/p>\n\n<p>The first step was to update the existing one page app to have two more\nbuttons. So I edited the HTML to add some buttons and then added some\nJavaScript that made calls to two new URL's for the app.<\/p>\n\n<p>I then added those two URL's to the Cyclone app, porting over code from\nthe CLI \"topic pusher\" tool to generate the notifications.<\/p>\n\n<p>There was already a Dockerfile for the application, so I used that and\nthen spent some time building and rebuilding and debugging the application\nto make sure it did actually make it so all I had to do was the following:<\/p>\n\n<ul>\n<li>download the Docker image<\/li>\n<li>start running the image (making sure to tell Docker to forward the correct port)<\/li>\n<li>click on the Subscribe button and see the message that the service worker is running and the browser asks to accept notifications<\/li>\n<li>click on the button that sends a single notification and visually verify output<\/li>\n<li>click on the button that sends multiple notifications grouped by topic and visually verify output<\/li>\n<\/ul>\n\n<p>So now I have a test that I can point other folks to that they can\nuse without having to install any dependencies in their local environment\nother than a web browser and Docker.<\/p>\n\n<h2 id=\"programming-skills-%2B-qa-work-%3D%3D-solving-interesting-problems\">Programming Skills + QA work == Solving Interesting Problems<\/h2>\n\n<p>I am far from the only person who has this skill set. But having\nsome ability to create your own purpose-specific tools means\nthat the people around you get to benefit.<\/p>\n\n<p>Often the tools (and automation solutions) that folks use to\ntest things are proprietary and not open to be modified. So\nyou expend a lot of energy trying to bend a tool towards a\nnew purpose.<\/p>\n\n<p>There are other folks out there like me who busy creating wrappers\naround hard-to-use tools or creating new solutions with the\ngoal of making what used to be difficult a lot easier. Encourage\nthose people and promote what they are doing!<\/p>\n",
        "date": "2019-01-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Learn To Test Like A Grumpy Programmer - Part 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2019\/01\/16\/test-like-a-grumpyprogrammer-part-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(You can see more stuff like this blog post if you buy my <a href=\"https:\/\/leanpub.com\/c\/learntotest\">\"Learn To Test Like A Grumpy Programmer\" course<\/a> over at LeanPub)<\/p>\n\n<p>I wanted to show folks how someone who has been writing tests for PHP in anger\nsince 2003 actually implements new features for a web site, driving them with\ntests.<\/p>\n\n<p>More importantly, I want you to focus on how deliberate and methodical I am\nin doing this work. I know it's an overused word, but discipline is a key\nfactor in successfully using a TDD approach for your tests. Skipping steps or\ntaking short cuts is a great way to end up with weird errors that you spend\na very long time debugging.<\/p>\n\n<p>I am building [OpenCFP Central])(https:\/\/opencfpcentral.com), which is a companion\nweb application for <a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a>. OpenCFP is\na PHP web application that conference organizers can install and use to collect\ntalk submissions from prospective speakers.<\/p>\n\n<p>OpenCFP Central is a 100% free service.<\/p>\n\n<p>Right now you can register for an account with OpenCFP Central. For conference\norganizers, you can obtain OAuth tokens so that people can use their OpenCFP Central\naccount to login and submit talk ideas to OpenCFP. This helps to reduce one of\nthe biggest complaints, which was \"why do I have to keep creating OpenCFP accounts?!?\"<\/p>\n\n<p>The next feature I am building is allowing OpenCFP Central users to create talks and\nstore them there. Once I've built that out, then I will add functionality to OpenCFP\nitself to retrieve a list of talks for a user who authenticated using OpenCFP Central\nand allow one-click submission of the talk to that OpenCFP instance.<\/p>\n\n<p>OpenCFP Central is being built using <a href=\"https:\/\/laravel.com\">Laravel<\/a> starting with\nversion 5.7. This is my first Laravel app but so many of the concepts it presents\nare not revolutionary or even unexpected for folks who have been doing web\ndevelopment with these \"front controller style\" web application frameworks.<\/p>\n\n<p>So, with all that out of the way, let me show you how I implemented the first\nbit of functionality of the new feature: displaying an empty talk creation\nform for an authenticated user.<\/p>\n\n<p>I started with a test that assumed everything was working:<\/p>\n\n<pre><code class=\"php\">namespace Tests\\Feature\\Feature;\n\nuse App\\User;\nuse Tests\\TestCase;\n\nclass TalkPage extends TestCase\n{\n    \/**\n     * @test\n     *\/\n    public function it_displays_the_talk_form()\n    {\n        \/**\n         * As a logged-in user\n         * When I follow the route for \"click here to create a talk\"\n         * I should see the talk form being displayed\n         *\/\n        $user = Factory(User::class)-&gt;create();\n        $response = $this-&gt;actingAs($user)\n            -&gt;get(route('create_talk'));\n        $response-&gt;assertStatus(200);\n        $response-&gt;assertSeeText('Create A Talk');\n        $response-&gt;assertSeeText('Title');\n        $response-&gt;assertSeeText('Description');\n        $response-&gt;assertSeeText('Other Details');\n    }\n}\n<\/code><\/pre>\n\n<p>Of course, it failed because I did not have the route created. So I went and\nadded this route to <code>routes\/web.php<\/code><\/p>\n\n<pre><code class=\"php\">Route::get('\/talk\/create', 'TalkController@create')-&gt;name('create_talk');\n<\/code><\/pre>\n\n<p>Now the test fails because I don't have a TalkController. I used the <code>artisan<\/code>\nCLI tool to create an empty TalkController and modified it to use the <code>auth<\/code>\nmiddleware.<\/p>\n\n<pre><code class=\"php\">namespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\View\\View;\n\nclass TalkController extends Controller\n{\n    \/**\n     * Create a new controller instance.\n     *\n     * @return void\n     *\/\n    public function __construct()\n    {\n        $this-&gt;middleware('auth');\n    }\n}\n<\/code><\/pre>\n\n<p>The test fails because I do not have the expected method for <code>TalkController<\/code>\ncreated yet. Let's add that in:<\/p>\n\n<pre><code class=\"php\">namespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\View\\View;\n\nclass TalkController extends Controller\n{\n    \/**\n     * Create a new controller instance.\n     *\n     * @return void\n     *\/\n    public function __construct()\n    {\n        $this-&gt;middleware('auth');\n    }\n\n    \/**\n     * Show the application dashboard.\n     *\n     * @return \\Illuminate\\View\\View\n     *\/\n    public function create(): View\n    {\n    }\n}\n<\/code><\/pre>\n\n<p>Test still failing (as expected) because it's not doing anything.\nI'll add some code where I grab our authenticated user and ask\nit to display a specific view.<\/p>\n\n<pre><code class=\"php\">&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\View\\View;\n\nclass TalkController extends Controller\n{\n    \/**\n     * Create a new controller instance.\n     *\n     * @return void\n     *\/\n    public function __construct()\n    {\n        $this-&gt;middleware('auth');\n    }\n\n    \/**\n     * Show the application dashboard.\n     *\n     * @return \\Illuminate\\View\\View\n     *\/\n    public function create(): View\n    {\n        $user = Auth::user();\n        return view('talk.create')\n            -&gt;with('user', Auth::user());\n    }\n}\n<\/code><\/pre>\n\n<p>Now the test fails because that view does not exist. I need to\ncreate the appropriate directory structure to group views related\nto talks and create a blank one that uses our existing layout.<\/p>\n\n<pre><code class=\"php\">@extends('layouts.app')\n\n@section('content')\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;Create A Talk&lt;\/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;p&gt;\n                            Use the form below to create a talk that can be submitted to OpenCFP instances that are\n                            using OpenCFP Central\n                        &lt;\/p&gt;\n                    &lt;\/div&gt;\n                &lt;\/div&gt;\n            &lt;\/div&gt;\n        &lt;\/div&gt;\n    &lt;\/div&gt;\n@endsection\n<\/code><\/pre>\n\n<p>Test still fails because there is no form information in there. So I created\na partial view that contains the form fields I want. I did it without the\nopening and closing form tags because I plan on reusing this form snippet\nelsewhere. As part of a future test I need to modify this snippet to \nset default values as part of verifying you can actually succesfully\ncreate or update a test. Sometimes it's okay to think a little bit ahead.\nThis strikes me as a very minor detail.<\/p>\n\n<pre><code class=\"php\">&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"talk_title\"&gt;Title&lt;\/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" name=\"talk_title\" \/&gt;\n&lt;\/div&gt;\n&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"description\"&gt;Description&lt;\/label&gt;\n    &lt;textarea class=\"form-control\" name=\"talk_description\"&gt;&lt;\/textarea&gt;\n&lt;\/div&gt;\n&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"other\"&gt;Other Details&lt;\/label&gt;\n    &lt;textarea class=\"form-control\" name=\"talk_other\"&gt;&lt;\/textarea&gt;\n&lt;\/div&gt;\n<\/code><\/pre>\n\n<p>Next I updated the main \"create talk\" view to use this form and wrapped\nit form tags that POST the results to another method.<\/p>\n\n<pre><code class=\"php\">@extends('layouts.app')\n\n@section('content')\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row justify-content-center\"&gt;\n            &lt;div class=\"col-md-8\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header\"&gt;Create A Talk&lt;\/div&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;p&gt;\n                            Use the form below to create a talk that can be submitted to OpenCFP instances that are\n                            using OpenCFP Central\n                        &lt;\/p&gt;\n                            &lt;form method=\"post\" action=\"\/talk\/create\"&gt;\n                                @csrf\n                                @include('talk.form')\n                                &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Create Talk&lt;\/button&gt;\n                            &lt;\/form&gt;\n                    &lt;\/div&gt;\n                &lt;\/div&gt;\n            &lt;\/div&gt;\n        &lt;\/div&gt;\n    &lt;\/div&gt;\n@endsection\n<\/code><\/pre>\n\n<p>Now the test passes!<\/p>\n\n<p>I hope this blog post helps you understand what a TDD flow with an app under\nreal conditions looks like.<\/p>\n",
        "date": "2018-12-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Learn To Test Like A Grumpy Programmer - Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/12\/18\/test-like-a-grumpy-programmer-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><a href=\"https:\/\/grumpy-learning.com\/grumpyconf2019.php\">GrumpyConf 2019<\/a> will mark\nthe 7th conference I've been involved in running:<\/p>\n\n<ul>\n<li>CakeFest in Orlando, Florida, USA in 2008<\/li>\n<li>TrueNorthPHP in Mississauga, Ontario, Canada from 2012 until 2016<\/li>\n<li>GrumpyConf in Ingersoll, Ontario, Canada starting in 2018<\/li>\n<\/ul>\n\n<p>As I helped organize these events, I quickly came to understand that the role\nof sponsors is to help offset the costs of running these events. In exchange,\nyou promise to give them access to your attendees in a number of ways:<\/p>\n\n<ul>\n<li>keynotes\/talks\/hackathons related to their products<\/li>\n<li>booths or tables for outreach<\/li>\n<li>paying for meals and\/or snacks<\/li>\n<li>swag to give to attendees and sometimes speakers<\/li>\n<\/ul>\n\n<p>I have never been shy about asking for sponsorship of my events because \nthey are expensive to run and I have certain ideas and standards I want\nto stick to.<\/p>\n\n<p>But what do you do when the normal ways you have to reward sponsors aren't\navailable? This is the dilemma I face with GrumpyConf.<\/p>\n\n<p>The idea of GrumpyConf is to have a small event at a somewhat isolated\nlocation and set up conditions where the attendees mingle with speakers\nwho have experience solving tough problems and have great personal skils.\nIf you're looking for an event that will show you a path to \"levelling up\"\nyour skills to further your career, this is the one for you.<\/p>\n\n<p>The event is not cheap because it's at a <a href=\"http:\/\/www.elmhurstinn.com\/\">nice resort<\/a>\nand the ticket includes three nights' stay and meals. Plus I pay my speakers'\ntravel expenses and hotel. So I set the prices to make sure I could break\neven if the same number of folks come who did last year. It's entirely\nfunded out of my pocket through ticket sales and whatever other expenses I\nneed to cover. As long as I don't have to put a lot of my own money into\nthe event, I can continue to run it. I am not a charity and will not run\nan event at any kind of substantial loss.<\/p>\n\n<p>I would love sponsorship of my event to defray the costs of my speakers.\nBut I am at a lost to figure out what I can give these generous sponsors\nin exchange for their money.<\/p>\n\n<p>If you are interested in sponsoring GrumpyConf 2019, please get in touch\nwith me. My contact information is in the sidebar (on desktop) or all the\nway at the bottom in mobile versions.<\/p>\n",
        "date": "2018-11-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why GrumpyConf Has No Sponsors",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/11\/08\/why-grumpyconf-has-no-sponsors\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Author note -- I am trying to do more blogging and less long\nTwitter threads.)<\/p>\n\n<p>Recently I had a very respectful conversation with someone who bought\none of my books (The <a href=\"https:\/\/leanpub.com\/grumpy-phpunit\">PHPUnit Cookbook<\/a>)\nand is not happy with the book. They have pointed out the things they\ndon't like and believe are wrong, and finished off one email with the\nphrase \"sorry if I am coming across as harsh\".<\/p>\n\n<p>In my response I did say that I am not offended by feedback. Some feedback\nis helpful. Some is not. All I can control is how I choose to react to\nthat feedback. Like my mother taught me: we're not losers, we're choosers.<\/p>\n\n<p>I did finish off the conversation by pointing\nout that LeanPub offers a money-back guarantee on all their books. I am not\noffended by anyone taking LeanPub up on that offer. I would prefer to\nhave happy customers rather than ones who felt they wasted their money\non one of my books.<\/p>\n\n<p>Maybe that book just isn't a good fit for them.<\/p>\n",
        "date": "2018-10-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Maybe This Book Isn't For You",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/10\/22\/maybe-this-book-isnt-for-you\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Back in September of this year had a chance to go <em>just<\/em> across the border into\nthe US to Buffalo, NY and speak at <a href=\"http:\/\/codedaze.me\/\">CodeDaze<\/a>, a conference\nrun by long-time devrel evangelist PJ Hagerty and some friends of his.<\/p>\n\n<p>This year they had closed-captioning for the hearing impaired and they very\ngraciously have provided me with a transcript of my talk. I have cleaned\nit up, edited a few things, and added some links to topics I spoke about.<\/p>\n\n<p>Here's the talk:<\/p>\n\n<p>Thanks.  Can everyone hear me\nokay in the back with the mic, \nbecause I'm a very large human?<\/p>\n\n<p>Can you hear me okay in the \nback?  I also talk really loud.<\/p>\n\n<p>This talk is about how your \ntests won't save you. I'm going \nto talk about a set of \ncomplementary tools if you're \nworking with a test-centric \nworkflow.  Sorry for my thick \nCanadian accent. I hope the \npeople doing the captions add \nthe U's where they're supposed to \nbe.<\/p>\n\n<p>I've been working for Mozilla \nabout three years. I work with the \nTest Engineering group that \ntests every release of Firefox \nand associated services to make sure everything goes \nokay.<\/p>\n\n<p>I've been yelling at people \nabout testing your PHP\u00a0code \nsince 2003.<\/p>\n\n<p>This talk has no code or tests.<\/p>\n\n<p>You won't have to hurt your eyes \ntrying to look at code.  It also\nrefers to tools from the PHP\nworld. If you \nknow Perl or Ruby, it is \nclose enough.  I'm describing \npractices that I think apply to \nprojects where you'll have two \nor more contributors to it.<\/p>\n\n<p>I'm \ngoing to talk about reducing \nwhat I see as a bunch of \nfriction points in development \nand getting your application out \ninto the real world.  You may \nlook at something and go that's \nnot a big deal, but when you \nhave like 10 or 11 of these \nthings, the idea of friction and \nthe project keeps rubbing up \nagainst problems and pain points \nall the time, that will cause \nyour project to lose velocity.<\/p>\n\n<p>You'll drop contributors.\nYou'll spend way more time \ntrying to get your eyes out of \nyour laptop.<\/p>\n\n<p>I have these \nfeatures.  I want to share them \nwith as many people as possible, \nso I have to find a way to get \nsome velocity going.<\/p>\n\n<p>Thankfully for someone like me \nthe value of automated test \nsuites has been proven via \nstudies.<\/p>\n\n<p>The <a href=\"https:\/\/www.infoq.com\/news\/2009\/03\/TDD-Improves-Quality\">canonical study<\/a>\nwas done by IBM and Microsoft.<br \/>\nThey got a bunch of teams \ntogether and said \"okay, here's \na problem we want you to solve. We want some of you to use test-driven development\nand some of you to not\".<\/p>\n\n<p>When I talk about test-driven \ndevelopment, we're talking about \nthe Wikipedia-style definition \nwhere we're planning things with \nour unit tests.  We are planning \nfunctionality and behaviors.<br \/>\nWe're writing tests assuming \nthat everything is working \ncorrectly, and then we write \ncode until the tests pass.<\/p>\n\n<p>Then \nwe rinse and repeat until we get \nan application that is working \nthe way we expect it to.  The \nresults of that study were that for \n20% to 40% extra time that \nyou'll spend writing your unit \ntests, you'll have 40% to 90% \nfewer bugs showing up in \nproduction.  If you're an \nevangelist for testing stuff \nlike me and you want to lie\u00a0-- \nwell, not lie but exaggerate a \nbit to convince the people above \nyou who give you permission to \ndo things -- you tell them \"for one \n    day a week we'll have 90% pure \n    bugs\".  It's not true, but it is \n    a nice sound byte to tell \n    people.  There is definite value \n    in investing time to have \n    automated test suite.<\/p>\n\n<p>But tests only fix a small \nrange of problems when you have \na collaborative project.<br \/>\nBecause tests don't help with \npeople problems.<\/p>\n\n<p>That's what \nI've kind of discovered over the \nyears.  The problem isn't the \ntesting tools themselves \nanymore.<\/p>\n\n<p>There was a time when I \nhad to walk both ways uphill in \nthe snow to get these things to \nwork, but there's now testing \nframeworks for pretty much every \nsingle mainstream programming \nlanguage you can think of, and \nthere's plenty of examples on \nhow to write tests and lots and \nlots of examples on philosophy \nand the ideas behind testing.<\/p>\n\n<p>I \nwrite books about testing, so \nthere's no shortage of \ninformation, but the problem is \nthese are technology-based \nsolutions.  As we all know, \npeople are the worst, and people \nare the problem.  It's never the \ntools.<\/p>\n\n<p>So, if you're thinking the idea \nbehind tests is \"I'm trying to \nprevent bugs from reaching the \nusers\", there's this mythical \nthing that if I have tests, I'm \ngoing to increase the quality, \nwhatever quality means, but my \nexperiences have been<\/p>\n\n<p>As an aside, I'm like Avdi (note, I am referring to <a href=\"https:\/\/twitter.com\/avdi\">Avdi Grimm<\/a>).  I've \nbeen doing this for a long time.\nThis is my 21st year getting\npaid to write computer programs.<\/p>\n\n<p>I got my first computer probably \nbefore a lot of people in this \nroom were born.  I got a\u00a0-- has \nanyone heard of the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Commodore_VIC-20\">Commodore \nVic 20<\/a>?<\/p>\n\n<p>I'm 47, which is 470 in \ninternet years.  300 years I've \nhad a computer, so I've been using computers for \na long time.<\/p>\n\n<p>I discovered the \nproblem when you had to \ncollaborate.  When it is just \nyou working on this stuff, it \ndoesn't matter.  But if you want \nsomeone else working on your \nproject and you want quality code and \nas few bugs as possible, just \nhaving a test alone won't save \nyou.<\/p>\n\n<p>But we can address some of \nthe people problems with some \nhelp from technology.  But \ntechnology is not the answer to \nall the people problems.  This \nis a blind spot that many \nprogrammers have that we're so \nenthusiastic about the work \nwe're doing and technology and \nthe promise\u00a0of the future.<\/p>\n\n<p>There's that old \njoke about \"where the jet cars we were promised?!?\".\nIf you're like me and you grew \nup in the 1970s and 1980s, we \nhave the exact future we were \npromised, a corporate dystopia. It's the \ntechnology that's enabling \npeople problems to be worse.<\/p>\n\n<p>Technology can't solve horrible \npeople, but it can help to kind of \nsmooth things out in your \nproject.<\/p>\n\n<p>So here's what I want \nto talk about.  What do I really \nthink helps?  I want to talk \nabout tools that can save us \nfrom thinking too much and tools \nthat can save us from \nremembering too many things and \ntools that can save us from \nourselves.<\/p>\n\n<p>Because I know a \ncurrent me is always cursing \nyesterday me for making a stupid \nmistake that was easily \navoidable.<\/p>\n\n<p>What are some tools that can help \nsave us from ourselves?  There \nare three things I want to talk \nabout today.  I want to talk \nabout build tools, code stylers \nand sniffers, and probably the \nmost controversial tool because \nI think it is in really, really \nshort supply these days: empathy.<\/p>\n\n<p>Build tools: what they save us \nfrom is remembering error-prone \nsequences.  When you think about \nthe modern web application\u00a0-- I \nsaw a joke that said PHP was the \noriginal serverless language.<\/p>\n\n<p>Those were the glory days of \nlazy developers where you didn't \nhave to do much, but now pretty \nmuch any nontrivial web \napplication has not only source \ncode that you have to think \nabout, but we're talking about \ndatabases, so we have migrations \nand database initializations.<br \/>\nWe have to compile assets.<\/p>\n\n<p>There's a bunch of different \nthings you need to do so it is \nno longer just a case of I can \ntake my source code and copy it \nsomewhere.  Hopefully, you're \nnot using FTP.  I know that's an \nold joke.  Please don't use FTP.\nYou're going to make it that \nnobody wants to work for you.<\/p>\n\n<p>You can't just copy your stuff \nup anymore.  As a result, we \nhave all these other additional \ntools that we need to learn to \nuse.  That is additional \noverhead and context switching \nthat you need to do when you're \nworking on stuff, so build tools \ncan save us from that.  When I \ntalk about build tools, there's \na couple of things that come to \nmind.<\/p>\n\n<p>We can talk about a series of \nhand crafted shell scripts.\nYou're trying to \ntake things you've been doing \nmanually to deploy the \napplication and get the computer \nto do it.<\/p>\n\n<p>You'll start off with \na shell script or we're manually \ntyping in terminal shells.  You then move \nto some sort of tool that's tied \nto some sort of specific \nprogramming language.<\/p>\n\n<p>On the \nPHP side of things, there's a \ntool called <a href=\"https:\/\/www.phing.info\/\">Phing<\/a>.  It uses \nXML to define things, so don't \nbe scared of XML.  I used to \nwork for a company that did \nnothing but XML.  All I did was \nlose my hair over it.  Don't \nworry.<\/p>\n\n<p>Anyway, <a href=\"https:\/\/www.chef.io\/chef\/\">Chef<\/a> is \n very tightly linked to Ruby.  We \n move from the shell scripts to \n language-specific tools.<\/p>\n\n<p><a href=\"https:\/\/jenkins.io\/\">Jenkins<\/a> is probably the most \n popular one for people that want \n to do it themselves.  At \n Mozilla, we make heavy use of \n Jenkins.  We have our own build \n server, and what the build \n server does is run our tests for \n us.<\/p>\n\n<p>The operations build tool will call \n to our Jenkins instance and say \n \"we just did a deployment\", and passes \n in a bunch of information.  We \n wrote some stuff in Jenkins to \n parse tags.<\/p>\n\n<p>I'm doing this\n project, and it is aimed at \n staging or it is in<br \/>\n development or in \n production.  Then Jenkins goes \n and runs the test.<\/p>\n\n<p>That is kind \n of the sweet spot to be in \n because what you want to get \n away from is this idea that \n whenever a deployment happens, \n everyone has to be there just in \n case something happens.<\/p>\n\n<p>I've worked at places where \neveryone stayed on a Friday \nuntil 10:00 p.m. just because \nthere were any glitches.  We \nwant to move towards this idea \nthat deployments can be \nflawless.<\/p>\n\n<p>People make mistakes, \nright?  Because computers are \ngreat at what we tell them or \nmore accurately what we think \nwe're telling them to do over \nand over again usually without \ncomplaining.<\/p>\n\n<p>Hopefully, your \ncomputer doesn't complain to you \nwhen you try to get it to do \nsomething, but humans make all \nkind of mistakes because we're \nhumans.  We're not beings of \npure logic. We make mistakes.<\/p>\n\n<p>We have unconscious biases. We \nunderstand that some parts of \nour application are kind of \ntricky, so we're reluctant to \ntest them in the way that they \nneed to be tested.  More \nimportantly, we can fat-finger \nstatements.<\/p>\n\n<p>Imagine you have \nsome deployment process that is \n32 steps long.  If you make a \nmistake at step 17 and don't \nrealize until step 27 because \nyou're seeing some weird error, \nthis is a mistake, and it is \nkind of avoidable.<\/p>\n\n<p>A build server is freeing up \n mental energy for other tasks, \n right? I find that as I age  my brainpower \n gets less and less, so I want to \n use my brain for\u00a0other things -- I play that \n expensive card game Magic the \n Gathering.  I have this other \n stuff rattling in my head that I \n sometimes think is more \n important than work, but if I need \n to think about which of these 32 \n steps am I going to make a \n mistake.  I want to free up \n mental energy to actually solve \n problems.<\/p>\n\n<p>In the testing work I \n do, there are some very \n     interesting problems to solve, \n     and I would rather spend the \n     mental energy on that.<\/p>\n\n<p>How many people here have had \nexperience using Jenkins or \n<a href=\"https:\/\/travis-ci.org\">Travis<\/a> for your projects?  A \nfair number.  For those who may \nhave heard of it and never gone \nthrough it, here's a summary of \nhow a build tool can be set up \nto help you.<\/p>\n\n<p>Usually, the build \ntool is triggered by your \nversion control system.  I hope \neveryone is using version \ncontrol.  Again, we're at a \npoint in time where it is super \neasy to use version control, so \nthere's really no excuse not to \nuse it.<\/p>\n\n<p>It should grab a copy \nof your code, including the \nchanges that you've just made.<br \/>\nThen here's the important part \n-- we can save ourselves because \nit will build an environment.<br \/>\nIt is going to check out the \ncode.  It is going to do any \ndatabase migrations, anything \nelse that you need done, warming \n    up caches and things like that.<br \/>\n    You want the build tool to do it \n    because you don't want to be \n    babysitting these automated \n    systems.  If you can't trust the \n    automated system, you need to \n    fix it until you can trust it.<br \/>\n    Then it runs the test, and it \n    will let you know what has \n    passed or failed, right?<\/p>\n\n<p>The build tools are going to \nsave you from yourself, and the \nbuild tools are pretending to be \nyou executing all these steps \nflawlessly, so again you save \nthat mental energy.  You're not \nworrying at all about which of \nthese steps am I going to have \nto remember.<\/p>\n\n<p>Also, using things like build \ntools will move you down the \nroad toward continuous \ndeployment.<\/p>\n\n<p>What I mean is the \nidea is you want to have the \ndeployments of your application \na non-event.<\/p>\n\n<ul>\n<li>We deploy once very two weeks or once a month.<\/li>\n<li>We never deploy on a Monday because everyone is pissed off because it is Monday.<\/li>\n<li>We don't deploy on Fridays because everyone is pissed off on Fridays<\/li>\n<\/ul>\n\n<p>You don't want that.<\/p>\n\n<p>I have seen places that have \nmade this work, but they're not \nlarge places with tons of \nengineering resources.  There's \na web page and someone presses a \nbutton that says deploy.  That's \nit.<\/p>\n\n<p>For me personally, the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Holy_Grail\">Holy \nGrail<\/a>\n for this is every single \nchange you make through a system \nof automated systems goes up \nproduction.  If the tests pass \nup in production, it goes.  You \nwant to be able to deploy 10, \n15, 20 times a day.  It should \nbe literally a nonevent.  It \nshould be sending off a tweet.<\/p>\n\n<p>Another tool that I think helps \nreduce our cognitive load and \ngets rid of friction are code \nstylers and sniffers.<\/p>\n\n<p><a href=\"https:\/\/twitter.com\/colindean\">Colin<\/a>'s \ntalk on code reviews, a lot of \nwhat he talked about really \nresonated with me, but he didn't \nget into the downside or maybe \nhe did because I was too busy \nmaking notes.<\/p>\n\n<p>We start arguing \nabout how things look, what the \nvariable was named, especially \nin PHP because it is so flexible \nwith the syntax.  Why is the \ncurly brace there?  Why are \nthere extra spaces before the \nvariable name?  We know that we \ndon't use private class \nattributes.  They should be \nprotected or public.<\/p>\n\n<p>People are \narguing over how it looks \ninstead of the point of the \nreview, which is supposed to be \n\"is this code behaving the way \nthat I've said it is behaving\".<\/p>\n\n<p>Is it solving the problem it is \nsupposed to be solving?\nInstead, we're relying on a \nthird party.  It is not \nnecessarily arbitrary because \noftentimes you can go and give \nthe code sniffer and styler your \nown ideas on how you want things \nto look.<\/p>\n\n<p>The project that I work on on \nthe PHP side of things is called \n<a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a>.<\/p>\n\n<p>The best way you can \ndescribe it is a competitor for \n<a href=\"https:\/\/papercall.io\">Papercall<\/a>.<\/p>\n\n<p>I used to run a \nconference up in Toronto called \nTrueNorthPHP, and I needed a \ntool to collect papers from \npeople who wanted to speak.  I \nwrote something.  I thought I \nmight as well open source it so \nI can fix the bugs and weird \nbehavior that must come up.<br \/>\nThere must be 30 or 40 \nconferences that use open CFP.<br \/>\nWe love it.<\/p>\n\n<p>(At this point I was talking about <a href=\"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\">PHP Codesniffer<\/a>\nbut the captioning folks couldn't make out what I was rambling about)<\/p>\n\n<p>What can this tool do for us to \nreduce arguments in code \nreviews?  It checks are we using \nthe correct array syntax for the \nnewer versions of PHP.  We look \nat tools about line spacing to \nmake the source code a lot \neasier to read.  We have a thing \nthat checks if there is a test \nattached to it.  If you have a \nclass named a certain way in a \nspecific namespace, we have a \nspecific test.  We look for \nreturn-type declarations.<\/p>\n\n<p>PHP \nhas type hints for parameters \nand return values.  If you \nhaven't looked at PHP in the \nlast four or five years, I don't \nblame you for not knowing what has changed.  Now it is a modern \noriented language with a lot of \ncool features.  PHP powers about \nhalf the web.  Wikipedia runs on \nit, WordPress.  So much web \ncontent is served on PHP.<\/p>\n\n<p>We are slowly moving towards \nstatic types or Java with dollar \nsigns on the front, but these \nare all things it checks.<\/p>\n\n<p>There's another 50 things we \nlook for.  These are all things \nthat we found we were arguing \nabout all the time or things \nthat were being adopted as best \npractices by other PHP projects.<\/p>\n\n<p>If we agreed with it, we would \njust add a line or a line or two \nof configuration to the code \nsniffer and then we would look \nfor these things.  We wanted \n    consistent enforcement of these \n    style rules.  We didn't want it \n    to be that I could do things one \n    way and someone could do things \n    a different way.<\/p>\n\n<p>Al those arguments just disappear because \nwe decided on a set of rules \nthat said we have this tool.<\/p>\n\n<p>I don't know about you, but if \n I look at code bases, you kind \n of learn the general style \n that's applied to it.  When you \n see something that doesn't match \n that style, when it is late on a \n Thursday and you're thinking \n you're going to go out and have \n dinner and your eyes are glazed \n over and you can see the \n indentation patterns, some of \n that doesn't look the same as \n the rest of the code stands out \n at you automatically.<\/p>\n\n<p>It is a \n     little tiny friction point.<\/p>\n\n<p>This does not look like the rest \n of the code.  Now I have to stop \n and process and say why is this \n different.  Maybe there's \n nothing wrong with it.<\/p>\n\n<p>Maybe \n     they just like to name variables \n     differently or they added an \n     extra line of indention.<br \/>\n     Sometimes it is a structural \n     problem, like you didn't even \n     run this code before hitting \n     execute.<\/p>\n\n<p>This is all about \n      mental energy.  We're \n     trying to save our\u00a0-- this is \n     all about trying to save our \n     mental energy.<\/p>\n\n<p>There is no flexibility or room \nto disagree.  The code sniffer \nsaid this was a mistake.  In \nOpenCFP, the code \nsniffer finding a problem is \nconsidered a failed build.  You \nhave to go back and fix it.<\/p>\n\n<p>You \ncan run the code sniffer, and there \nare some types of errors it can \nfix for you.  It will add in \ndeclarations if you're missing \nthem and return-type hits, \nindents.  It will fix a bunch of \nthings so I don't have to go \nback and fix them myself.<\/p>\n\n<p>Some other languages are \n starting to provide automated \n formatting and sniffer.  My \n apologies if I don't use \n anything that's in widespread \n use anymore.  Go uses goformat.<br \/>\n Python created these standards called PEP8 \n of things they wanted people to \n do with the language and with \n     the community and stuff like \n     that, so there's several command \n     line tools that will scan your \n     code and say, hey, it violates \n     this rule and this rule.  Do you \n     want to fix it?<\/p>\n\n<p>I found this called Rubocop\n     for Ruby.  I don't know if \n     Rubyists use it.  The Ruby I \n     have looks pretty clean and \n     consistent across projects.<br \/>\n     Maybe code formatting isn't a \n     problem.  Between PHP\u00a0code \n     sniffer and Python, I don't have \n     to worry about it.  I take \n     advantage of these sniffing \n     tools and styling tools in order \n     to eliminate remembering what \n     code should look like.<\/p>\n\n<p>(After my talk I was approached by a Rubyist who\nwent on an extended rant about all the things\nthey disliked about Rubocop.)<\/p>\n\n<p>This is the last one.  Then I \nwill be just about done.<\/p>\n\n<p>Empathy.  This is a tricky one \nbecause empathy is the most \ndifficult tool of all to \nimplement for a project because \nthere is a quite large group of \npeople who think empathy has no \nplace in programming.<\/p>\n\n<p>I like to \ncall it the lie of the \nmeritocracy.  No, it is not a \nmeritocracy.  A lot of it is \nabout how you know and how long \nyou've been doing certain \nactivities.  Your technical \nbrilliance won't enough to \nadvance you through your career.<\/p>\n\n<p>As <a href=\"https:\/\/twitter.com\/editingemily\">Emily<\/a> said, a career is a \nmarathon.  It is not a sprint.<br \/>\nI've done this long enough to \nunderstand, yes, this is a \nmarathon.  I need to grind \nthings out to get the victories \nthat I want.<\/p>\n\n<p>Empathy is the \nthing because if you got into \nprogramming\u00a0-- you figured it \nwas a good way to avoid dealing \nwith people and talking to \npeople.  You talk to your \ncomputer.  Unless you're having \nsome mental health issues, the \ncomputer shouldn't be talking \nback to you without you expecting to, so you're thinking \nit will be great.<\/p>\n\n<p>I'll just sit \nsomewhere.  They'll give me work \nto do.  I'll do my work, and \nthen I won't have to talk to \npeople.<\/p>\n\n<p>You're going to be \nextremely disappointed.<\/p>\n\n<p>If \nyou're trying to move from \nprogramming as a job to \nprogramming as a career, \nprogramming as a job is about \nsolving specific problems.<br \/>\nProgramming as a career is about \ncollaborating with a bunch of \npeople to solve problems.<\/p>\n\n<p>I know people watching up here \nmight be surprised to know when \nI first started giving talks I \nwas terrified to be up on stage.<\/p>\n\n<p>In high school, I was the person \nwith a sheet of paper up at the \nfront doing the speech and the \npaper shaking and stuff.<\/p>\n\n<p>When I \nwent to college during medieval \ntimes, we did a mandatory course \non presentations.  I don't know \nwhat that teacher did, but he \naligned all the right switches \nin my head where I could \nsuddenly give talks.  I didn't \nmatter if it is 3 people or \n1,000 people.<\/p>\n\n<p>It's about \ncommunication and collaboration.\nOnce I figured that out, the \ncareer took off.  I've been \nspeaking at conferences since \n2004.  I think if I didn't learn \nthat collaboration and empathy \nwas the way forward, none of \nthis stuff would have happened \nfor me.<\/p>\n\n<p>Things turned very toxic \neasily.  Programmers argued \nincessantly about little \ndetails.  I think empathy is \nyour best weapon against \ntoxicity in your project.  When \nI talk about empathy, I'm \ntalking about this idea\u00a0-- a lot \nof people have a problem with \nthis, the ability to understand \nother people are not like you.<\/p>\n\n<p>When you hear discussions with \npeople going \"I don't understand \nhow person X can do activity Y\"\n-- you need to understand other \npeople's point of views.  You \nneed to understand how and why \npeople react to certain things.<\/p>\n\n<p>In programming, I think this is \nvery critical because you really \ndo need to understand that \n    everyone does not think like \n    you.<\/p>\n\n<p>Because if you can \n    understand how people are going \n    to react to what you're doing, \n    it allows you to anticipate \n    reactions and head off potential \n    problems within your project.<\/p>\n\n<p>Anyone who has done any type of \ntesting for a little bit \nunderstands that even today it \nis still quite a contentious \nsubject with lots of people not \nunderstanding the value.<\/p>\n\n<p>Why do \nyou want to spend this time \nwriting tests?  Why do we want \nto spend time investing in \nlearning how to use these tools \nand frameworks?  It's because \nit's been proven that it works, \nbut people want to argue about \nit.<\/p>\n\n<p>When you start testing your \ncode, it will change how you \nwrite your code.  You have to \nwrite code in a specific way to \ntake advantage of testing tools.<br \/>\nAt the unit level anyway.<\/p>\n\n<p>People don't like being told you \nneed to change something that \nyou think you've been successful \nat in the past.<\/p>\n\n<p>I'm not immune to this.  I \ndon't always like being told I'm \nwrong.  Some people won't \nchange.  This is an interesting \nthing I've found.  People like \nto change what they use but not \nhow they use it.  What I mean by \nthis is there are many, many \nprogrammers who are always \nchasing the new and shiny \ntool.<\/p>\n\n<p>Five more minutes?  I'm \nalmost done.<\/p>\n\n<p>They want to change to the \nnewest framework for their \nprogramming language or the \nnewest tool.  They don't like \nbeing told you need to change \nhow you're using it because how \nyou're using it doesn't lead to \ngood outcomes.<\/p>\n\n<p>People don't \nlike this, so it generates toxic \npeople from people who don't \nwant to change.  It might have \nbeen short-term success, but \nlong term and medium term it is \nnot going to work.<\/p>\n\n<p>Toxicity drives away people \nfrom projects.  Sometimes I lack \nthe skill to execute on the last \n10% on a particular problem.  I \nwant to draw people in who are \ninterested in collaboration and \ninterested in solving problems.<\/p>\n\n<p>If I want to continue to have \naccess to people like that, I \ncan't have toxic communities.  I \ncan't have people insulting \npeople on threads and GitHub and \nTwitter.  I clamp down on that \nshit.  It's not going to push my \nstuff forward.<\/p>\n\n<p>I told people the reason I \ndon't go into management after \nall this time is because I have \ntwo kids that I do enough \nmanaging at home that I don't \nwant to manage other people.  I \nknow the millisecond I step out \nthe door I hear my kids start \narguing with my wife.<\/p>\n\n<p>Your career will depend on \nworking with others.<\/p>\n\n<p>We're just \nabout done.<\/p>\n\n<p>Your testing \nframework won't save you from \nproblems because it is simply \nnot enough.<\/p>\n\n<p>You should use \nbuild tools because they protect \nyou from performing complicated \nstepping manually.<\/p>\n\n<p>You should \nbe using code sniffers and \nstylers to protect from you \narguments.<\/p>\n\n<p>Empathy protects \nyour project from being toxic.<\/p>\n\n<p>I do Twitter performance art as <a href=\"https:\/\/twitter.com\/grmpyprogrammer\">grumpyprogrammer without the u<\/a>,\nI sell books on my <a href=\"https:\/\/grumpy-learning.com\">website<\/a> and<\/p>\n\n<p>I have a conference coming up \nnext year, so please support my \nefforts so I can continue to \ncome to conferences and not have \nmy employer complain about it.<\/p>\n\n<p>Thanks very much.<\/p>\n",
        "date": "2018-10-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CodeDaze 2018 Talk",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/10\/18\/codedaze-talk\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At the <a href=\"https:\/\/mozilla.com\">current day-job<\/a> I use <a href=\"https:\/\/docs.pytest.org\/en\/latest\">pytest<\/a>\nfor writing what I call \"configuration tests\" for the various services\nand tools that I am responsible for doing QA work for.<\/p>\n\n<p>One of these is <a href=\"https:\/\/github.com\/Kinto\/\">Kinto<\/a>, a \"generic JSON\ndocument store\" that we wrote (and open-sourced) at Mozilla and is\nused by a lot of services.<\/p>\n\n<p>These days there are three \"flavours\" of Kinto that I have to worry about:<\/p>\n\n<ul>\n<li><code>kinto-dist<\/code> which is the core of Kinto<\/li>\n<li><code>kinto-settings<\/code> which is the Kinto core plus a bunch of records representing settings stored for users of Firefox<\/li>\n<li><code>kintowe<\/code> which is the Kinto core and some extensions for it that we use to track records of what web extensions Firefox users have stored<\/li>\n<\/ul>\n\n<p>Whenever we have a new version of any of these \"flavours\" that need\nto be tested, it is deployed to a target environment (either staging\nor production) and tests that I wrote are run by our operations team's\ndeployment tool making a call to a CI server run by the QA department.\nThis CI server then runs all the tests I wrote.<\/p>\n\n<p>But I had a problem. There were some tests that needed to be run no\nmatter what \"flavour\" we were deploying, and then some tests that\nbelong only to one \"flavour\". Previously I just had duplicate repos\nbut wanted to consolidate them.<\/p>\n\n<p>I enlisted the help of one of our team tool-makers <a href=\"https:\/\/twitter.com\/davehunt82\">Dave Hunt<\/a>\nwhile at our All-Hands meeting in Austin in December of 2017 to go\nover some better strategies and to make better use of our CI server.<\/p>\n\n<p>After scribbling a lot of stuff on a white board to get Dave up to\nspeed, he suggested moving all the tests into one repo and using a \nfeature of pytest called \"markers\" to figure out what \"flavour\" we\nwere testing.<\/p>\n\n<p>Note: at the time of writing I was doing this work with Python 3.6.3\nand pytest 3.3.2.<\/p>\n\n<p>Pytest makes heavy use of decorators to extend its functionality.\nFixtures (which can be best described as helper methods for tests)\nare declared using annotations, and then these fixtures are\navailable to any test method that you pass it into as a parameter\n(with some exceptions based on the scope of a fixture).<\/p>\n\n<p>Here's an example of a fixture that reads in a configuration file\nand returns an object that contains those values:<\/p>\n\n<pre><code class=\"python\">@pytest.fixture(scope=\"module\")\ndef conf():\n    config = configparser.ConfigParser()\n    config.read('manifest.ini')\n    return config\n<\/code><\/pre>\n\n<p>To use it, I just pass it in as a parameter like this:<\/p>\n\n<pre><code class=\"python\">async def test_server_info(api, conf, env):\n    res = await api.server_info()\n    data = await res.json()\n    expected_fields = aslist(conf.get(env, 'server_info_fields'))\n\n    for key in data:\n        assert key in expected_fields\n\n    for field in expected_fields:\n        assert field in data\n<\/code><\/pre>\n\n<p>To use a marker, I simply add an annotation to tell pytest \"mark\nthis test as belonging to <code>dist<\/code>\" or any other \"flavour\" I want\nthis test to belong to. Check out the annotations for this test:<\/p>\n\n<pre><code class=\"python\">@pytest.mark.asyncio\n@pytest.mark.dist\n@pytest.mark.settings\n@pytest.mark.webextensions\nasync def test_version(api, conf, env, apiversion):\n    res = await api.__version__()\n    data = await res.json()\n    expected_fields = aslist(conf.get(env, 'version_fields'))\n\n    # First, make sure that data only contains fields we expect\n    for key in data:\n        assert key in expected_fields\n\n    # Then make the we only have the expected fields in the data\n    for field in expected_fields:\n        assert field in data\n\n    # If we're passed an API version via the CLI, verify it matches\n    if apiversion:\n        assert apiversion == data['version']\n<\/code><\/pre>\n\n<p>There is a lot going on here, let me break it down:<\/p>\n\n<ul>\n<li>we are marking this test as being able to run asynchronously using Python 3's <a href=\"https:\/\/docs.python.org\/3\/library\/asyncio.html\">asyncio<\/a> module<\/li>\n<li>we want this test to be run any time we are testing <code>dist<\/code><\/li>\n<li>we want this test to be run any time we are testing <code>settings<\/code><\/li>\n<li>we want this test to be run any time we are testing <code>webextensions<\/code><\/li>\n<li>we are passing in an API helper as a parameter<\/li>\n<li>we are passing in a configuration helper as a parameter<\/li>\n<li>we are passing in a helper that reads a target environment parameter from the CLI<\/li>\n<li>we are passing in a halper that reads an API version parameter from the CLI<\/li>\n<\/ul>\n\n<p>Here's a test we only want run when we do a <code>kinto-settings<\/code> deployment:<\/p>\n\n<pre><code class=\"python\">@pytest.mark.settings\ndef test_plugins_signatures(env, conf):\n    client = Client(\n        server_url=conf.get(env, 'reader_server'),\n        bucket='blocklists',\n        collection='plugins'\n    )\n    try:\n        collection, records, timestamp = get_collection_data(client)\n        if len(records) == 0:\n            pytest.skip('blocklists\/plugins has no records')\n\n        assert verify_signatures(collection, records, timestamp)\n        assert verify_signer_id(collection, 'onecrl_key')\n    except KintoException as e:\n        if e.response.status_code == 401:\n            pytest.fail('blocklists\/plugins does not exist')\n        pytest.fail('Something went wrong: %s %s' % (e.response.status_code, e.response))\n<\/code><\/pre>\n\n<p>I also needed a way to figure out what markers were set so I could\nuse the correct value from our configuration file (depending on the\nenvironemnt). Pytest has a <code>request<\/code> fixture that is globally available\nto any test.<\/p>\n\n<p>I have another helper that uses <a href=\"https:\/\/swagger.io\/\">Swagger<\/a> to\nparse an API spec that the developers built for me. I pass the\n<code>request<\/code> object to the API helper, and look for specific markers:<\/p>\n\n<pre><code class=\"python\">@pytest.fixture(scope=\"module\")\ndef api(event_loop, conf, env, request):\n    api_definition = 'dist_api_definition'\n\n    if 'settings' in request.node.keywords:\n        api_definition = 'settings_api_definition'\n    elif 'webextensions' in request.node.keywords:\n        api_definition = 'webextensions_api_definitions'\n\n    return API(conf.get(env, api_definition), loop=event_loop)\n<\/code><\/pre>\n\n<p>(By the way, you can find all this code in the <a href=\"https:\/\/github.com\/Kinto\/kinto-integration-tests\">GitHub repo<\/a>\nfor these tests)<\/p>\n\n<p>So, when we are doing a deployment of <code>kinto-dist<\/code> to our staging\nenvironment, we can run the tests this way:<\/p>\n\n<pre><code class=\"shell\">pytest -m dist --env=stage config-tests\/\n<\/code><\/pre>\n\n<p>Then the tests we want to get run, get run. I'm not sure what\nother ways there are to organize your tests, but this is a method\nthat works and makes sense to me. Got any comments or suggestions?\nEmail me or contact me via Twitter using details in the sidebar.<\/p>\n",
        "date": "2018-01-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Using markers in pytest",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/01\/15\/using-markers-in-pytest\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For many years I have been getting together with a group of people that\nI met online when I used to play a lot of the paper-and-pencil\nrole-playing game <a href=\"http:\/\/www.herogames.com\/\">Hero System<\/a>. It started\ngetting harder and harder to get everyone together to play, which makes\nany kind of long-running campaign impossible to maintain. If you don't\nknow from session to session who is going to be available, how can you\nplan anything?!?!<\/p>\n\n<p>So a few years back I decided the path going forward was for us to play\nboard games instead. That way if someone can't make it, it's not as\nbig a deal as having a character whom you built an entire campaign\naround not showing up.<\/p>\n\n<p>An email goes out saying it's time to play, we all indicate what\nSaturdays work for an upcoming month (it's always a Saturday) and\nonce we get consensus we make plans to show up at someone's house (we\nall take turns) and a good time is had by all attendees.<\/p>\n\n<p>I apologize for the lack of pictures of the various board states but\nthe group is usually on my case to \"put your damn phone away, Chris!!!\"\nso I am trying to be a better friend and tame my obvious phone addiction.\nThis time out 6 of the 8 members of our group showed up.<\/p>\n\n<p>One of the more interesting challenges is making sure that we have games\nthat can handle that large number of people.<\/p>\n\n<h2 id=\"hadz\">Hadz<\/h2>\n\n<p>We played this game while we waited for the last two members to show up.<\/p>\n\n<p>My mother got me a beautiful hand-crafted board game called <a href=\"http:\/\/niconico.ca\/?wpsc-product=hadz&amp;lang=en\">Hadz<\/a>\nthat reminded me of the old game <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sorry!_(game)\">Sorry<\/a> with some betting involved.<\/p>\n\n<p>The game looks like it would take a while to go all the way through\nand I am pretty sure we are missing out on some of the strategies that \nmight lead to better outcomes. It was fun yelling at the top as it failed\nto knock a marble into the locations you had bet on.<\/p>\n\n<h2 id=\"joking-hazard\">Joking Hazard<\/h2>\n\n<p>If you've played <a href=\"https:\/\/cardsagainsthumanity.com\/\">Cards Against Humanity<\/a> you will be familiar with this\ntype of game. In <a href=\"https:\/\/explosm.net\/joking-hazard\">Joking Hazard<\/a> you are\ntrying to build the best three-panel comics with cards that contain the type\nof material that is best played either by people who know each other very well\nor by people who are easily amused by toilet humour or aggressively-sexual\ncontent.<\/p>\n\n<p>Not really my game but man some of the comics that got created were quite\ndark. We played two rounds of that and then prepared for the main event.<\/p>\n\n<h2 id=\"space-cadets\">Space Cadets<\/h2>\n\n<p>In this game you are a bunch of <a href=\"https:\/\/boardgamegeek.com\/boardgame\/123096\/space-cadets\">Space Cadets<\/a>\nwho are trying to complete a mission as the crew of a spaceship. Each turn\nthe crew members are trying to solve a puzzle specific to their assigned\nstation (helm, engineering, weapons, etc.) in order to advance the mission.\nIt's frantic, you always feel stressed and I'm not sure I really want to play\nit again.<\/p>\n\n<p>We've played it at least 4 times and have never one. In fact, I have no idea\nhow anyone ever completes the mission because the quality of puzzles that\nneed to be solved is quite uneven, and the critical station (tractor beams)\nrequires you to memorize the number, colour, shape, and location of puzzle\npieces by flipping them over two at a time.<\/p>\n\n<p>The game can be exciting while you yell at crew members who don't complete\ntheir tasks and put the crew in danger, but I think I'm done with it.<\/p>\n\n<h2 id=\"quartermaster-general\">Quartermaster General<\/h2>\n\n<p>This game can be best described as \"<a href=\"https:\/\/boardgamegeek.com\/boardgame\/98\/axis-allies\">Axis and Allies<\/a> that you can actually\nget done in one night.\" <a href=\"https:\/\/boardgamegeek.com\/boardgame\/159473\/quartermaster-general\">Quartermaster General<\/a>\nis a game where all the players take the role of one of the Axis or Allied\npowers in World War 2 and play out the war using a series of cards\nand units representing tanks, ships, and aircraft. The game itself took\nus about 2 hours but the first 30 minutes was just going over all the\nrules and doing some sample turns.<\/p>\n\n<p>I really enjoyed this game. I got to be Germany, and I saw how the game\ncreators did a great job of representing the various power levels of\nthe combatants in the war. All of us made plenty of mistakes, and in the\nend the Allies won victory by 8 points over the 20 turns. The owner of\nthe game said that he'd never seen a game go to turns. I will definitely\nwant to play this again.<\/p>\n\n<p>There is an expansion set for that shakes things up via additional cards\nthat allows things to be more of a 50-50 proposition for the Axis. It\nwas pointed out to use that there were basically for scenarios all\nbased on on how well one side starts<\/p>\n\n<p>Axis fast + Allies fast = Allies win\nAxis fast + Allies slow = Axis wins\nAxis slow + Allies fast = Allies ROFLstomp win\nAxis slow + Allies slow = Allies win<\/p>\n\n<p>Making it 50-50 allows for strategies to matter rather than simply\nduplicating history.<\/p>\n\n<h2 id=\"summary\">Summary<\/h2>\n\n<ul>\n<li>would play Hadz again with a smaller group to kill some time<\/li>\n<li>not that enthused about Joking Hazard<\/li>\n<li>don't want to play Space Cadet any time soon<\/li>\n<li>would definitely play Quartermaster General again<\/li>\n<\/ul>\n",
        "date": "2018-01-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "January 2018 board game night",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/01\/14\/jan-2018-board-game-night\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I really like browsing through <a href=\"https:\/\/usesthis.com\">Uses This<\/a> to see what\nfolks from all sorts of industries use to get the job done. Since they are\nunlikely to invite me, here's my own details. I share in hopes of discovering\nnew tools for doing my job and showing folks who haven't been doing this for\n20 years what \"professional programmers\" use. You might be surprised.<\/p>\n\n<h3 id=\"who-are-you%2C-and-what-do-you-do%3F\">Who are you, and what do you do?<\/h3>\n\n<p>Monday to Thursday am I working for <a href=\"https:\/\/mozilla.com\">Mozilla<\/a> as part of\nthe <a href=\"https:\/\/www.mozilla.org\/en-US\/firefox\/new\/\">Firefox<\/a> Test Engineering group\nwhere I test web services that Firefox talks to, along with deployment testing\nof some internal developer tools and a <a href=\"https:\/\/github.com\/Kinto\/kinto\">generic JSON document store<\/a>\nthat we built ourselves.<\/p>\n\n<p>On Fridays I continue to work on <a href=\"https:\/\/grumpy-learning.com\">Grumpy Learning<\/a> stuff.\nI'm currently writing a \"how to test legacy PHP code\" video training course for\na large online education provider and are organizing a personal-development course\ncalled <a href=\"https:\/\/grumpy-learning.com\/grumpy-conf.php\">GrumpyConf<\/a> that will be held\nMarch 22-24, 2018. No new books on the horizon and I currently only appearing at\n<a href=\"https:\/\/tek18.phparch.com\">phptek 2018<\/a> in late May of this year.<\/p>\n\n<p>If you want me to come speak at your event in the fall, get in touch.<\/p>\n\n<h3 id=\"what-hardware-do-you-use%3F\">What hardware do you use?<\/h3>\n\n<p>My main device is a <a href=\"https:\/\/www.apple.com\/macbook-pro\/\">13-inch 2016 MacBook Pro with Touch Bar<\/a> with \n16 GB of RAM and a 512GB SSD drive. It runs in closed-mode 99.999% of the time\nplugged into a <a href=\"http:\/\/www.dell.com\/en-us\/shop\/dell-27-ultra-hd-4k-monitor-p2715q\/apd\/210-adof\/monitors-monitor-accessories\">Dell P2715Q display<\/a> and I use the Apple <a href=\"https:\/\/www.apple.com\/shop\/product\/MLA22LL\/A\/magic-keyboard-us-english\">Magic Keyboard<\/a> and <a href=\"https:\/\/www.apple.com\/shop\/product\/MLA02LL\/A\/magic-mouse-2\">Magic Mouse 2<\/a>. When I travel I bring a <a href=\"https:\/\/www.therooststand.com\/\">Roost laptop stand<\/a> with me. Being a Large Human\nusing the Roost has made it so I can actually work in environments other than\nmy configured-for-me home office.<\/p>\n\n<p>I also make heavy use of an <a href=\"https:\/\/www.apple.com\/shop\/buy-iphone\/iphone6s\">iPhone 6S Plus<\/a>\nmostly for messaging and <a href=\"https:\/\/twitter.com\/grmpyprogrammer\">Twitter<\/a> use.\nI also have a Samsung Chromebook that I can do some PHP web development work on but\nit is not powerful enough for the day job. I tried it out to see if it was\nsuitable as a road laptop for a world where border crossings can quickly\nturn ugly. Right now it's not.<\/p>\n\n<p>I listen to a lot of music (yay <a href=\"https:\/\/spotify.com\">Spotify<\/a>) and since I\ndid notice the poor quality of audio from my laptop I splurged and bought\na <a href=\"http:\/\/www.audioquest.com\/dragonfly-series\/\">DragonFll USB DAC<\/a> along with\nthe <a href=\"http:\/\/www.audioquest.com\/jitterbug\/jitterbug\">Jitterbug USB data and power noise filter<\/a>.\nI now have awesome, clean-sounding music coming from my <a href=\"https:\/\/www.amazon.com\/dp\/B00KVEIY4E\/?tag=thewire06-20&amp;linkCode=xm2&amp;ascsubtag=AgEAAAAAAAAAALxg\">desktop speakers<\/a>.<\/p>\n\n<h3 id=\"and-what-software%3F\">And what software?<\/h3>\n\n<p>I use macOS (always using the latest stable version of it -- patch your systems people!)\nas my development environment and some flavour of Linux (usually <a href=\"https:\/\/ubumtu.com\">Ubuntu<\/a>)\nas a deployment environment.<\/p>\n\n<p>When I am doing <a href=\"https:\/\/python.org\">Python<\/a> (which is what I use at Mozilla) I am using <a href=\"https:\/\/www.jetbrains.com\/pycharm\/\">PyCharm<\/a>\nand if I am doing <a href=\"https:\/\/php.org\">PHP<\/a> I am using <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>.\nFor everything else I am using <a href=\"https:\/\/neovim.io\">Neovim<\/a>. I used to be a Vim-only person\nbut over the years I have found the value that IDE's provide me to be invaluable.\nThey have totally-acceptable-to-me Vim bindings anyway.<\/p>\n\n<p>I make heavy use of the CLI and use <a href=\"https:\/\/iterm2.com\/\">iTerm2<\/a>.<\/p>\n\n<p>For work I rely on the following tools every single day:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/irccloud.com\">IRCCloud<\/a> for talking to co-workers<\/li>\n<li>Mozilla uses Google Mail and Google Calendar, which works nicely with my phone<\/li>\n<li><a href=\"https:\/\/vidyo.com\">Vidyo<\/a> for video conference -- great product, works well<\/li>\n<li>Firefox web browser. I run the <a href=\"https:\/\/www.mozilla.org\/en-US\/firefox\/channel\/desktop\/\">Nightly<\/a> version<\/li>\n<\/ul>\n\n<p>When I do <a href=\"https:\/\/devhell.info\">my podcast<\/a> with Ed, I use <a href=\"https:\/\/skype.com\">Skype<\/a> with\nthe <a href=\"http:\/\/www.ecamm.com\/mac\/callrecorder\/\">Call Recorder<\/a> plug in. I send the recording\nof my side to him and he fixes it all up.<\/p>\n\n<p>On my iPhone I use the following apps quite a bit:<\/p>\n\n<ul>\n<li>Mail.app<\/li>\n<li>Mobile Safari<\/li>\n<li><a href=\"https:\/\/twitterrific.com\/ios\/\">Twitterrific<\/a> (and on macOS too)<\/li>\n<li><a href=\"https:\/\/overcast.fm\">Overcast<\/a> for listening to podcasts<\/li>\n<\/ul>\n\n<p>I also use all sorts of other apps (messaging ones mostly) like any long-time\nuser of an iOS device.<\/p>\n\n<p>I am a competitive-casual <a href=\"https:\/\/magic.wizards.com\">Magic: The Gathering<\/a>\nplayer, mostly playing the Legacy format (but with a splash of Vintage\nand the random cube or EDH game mixed in). For many years I was frustrated\nwith my lack of success at the tournament level. I was lucky enough to\nfall in with a group of people who made me realize that I actually enjoyed\nthe social aspect of the game the most.<\/p>\n\n<h3 id=\"what-would-be-your-dream-setup%3F\">What would be your dream setup?<\/h3>\n\n<p>I've worked from home for 11 years now -- I never want to go back to a\nfull-time office experience ever again. I'm totally happy with my\ncomputer and my display and all the other tools I use. I tend to upgrade\nthings incrementally instead of in big shots. I like consistency and\nthe ability to quickly get back to work when upgrading any of my\nequipment.<\/p>\n\n<p>I hope this helps! Got any more questions or suggestions of things I should\ncheck out. Hit me up on Twitter or via the email link in the sidebar.<\/p>\n",
        "date": "2018-01-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What A Grumpy Programmer Uses - 2018 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2018\/01\/05\/what-a-grumpy-programmer-uses-2018-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Back at the beginning of August my long-suffering wife and I packed\nup our possessions and moved almost 2 hours away to a small village\nof ~2500 people into a house on a street that doesn't seem to show\nup on a lot of major GPS systems. Luckily it shows up both on Apple\nand Google maps, and there is a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Tim_Hortons\">Tim Hortons<\/a>\nclose by to act as a known landmark and guide people in.<\/p>\n\n<p>With the move came an opportunity to Do Something Different with the\nhome wireless setup. In the past, I used a good, consumer-grade home\nwireless router and it was usually good enough. Sometimes my oldest\ndaughter (her room was the furthest away from the wifi router) would\ncomplain about poor signal, so I bought some <a href=\"http:\/\/www.tp-link.com\/us\/home-networking\/network-extenders\/range-extenders\">wifi extenders<\/a>\nand those did the trick.<\/p>\n\n<p>So this sort of thing was great...but I felt like I was not prepared\nfor the near-future, which is a home filled with all sorts of devices\nthat will connect via wifi to do things. I got a <a href=\"https:\/\/nest.com\/thermostats\/nest-learning-thermostat\/overview\/\">Nest thermostat<\/a> and was going to have an <a href=\"https:\/\/www.amazon.com\/dp\/B06Y6FSV5Q\/?tag=thewire06-20&amp;linkCode=xm2&amp;ascsubtag=AgEAAAAAAAAAAMEe\">awesome TV<\/a> that needed a network connection. I also would have an older <a href=\"https:\/\/www.roku.com\">Roku<\/a>\ndevice that would want to be on the network. Not to mention my own\ndevices for work...and my wife's iPad and iPhone...and devices my\nkids were going to be using.<\/p>\n\n<p>In short, I wanted to future-proof my network somewhat and try and\nanticipate an explosion of devices that would need to be connected\nto it. Yes, I am aware of some security implications and I am going\nto be working on minimizing the exposure these things will have to\nmy network.<\/p>\n\n<p>At some point I came across Troy Hunt's great blog post explaining\nhow he <a href=\"https:\/\/www.troyhunt.com\/wiring-a-home-network-from-the-ground-up-with-ubiquiti\/\">helped wire his brother's home<\/a>\nwith some great networking hardware. I clearly am not re-inventing\nthe wheel here -- Troy's template is one that I would absolutely\nfollow...if you have the ability to run wires in your home.<\/p>\n\n<p>In my case, it was not going to be a problem. The previous owner had\nbeen using VoIP for their phones so there were already several wired\nconnections backed by cat5. I was going to need some other lines run\nthroughout the house but it was not going to be an issue.<\/p>\n\n<p>So I ended up with most of the hardware Troy recommended in his blog\npost:<\/p>\n\n<ul>\n<li>7 in-wall 802.11ac access points throughout the house<\/li>\n<li>1 24-port Power-over-ethernet switch<\/li>\n<li>1 security gateway device that I am slowly learning how to configure correctly<\/li>\n<li>4 cat5 connections for the access points<\/li>\n<li>3 cat6 connections for the other access points<\/li>\n<li>6u server cabinet (helpfully mounted on the wall) for all the equipment<\/li>\n<\/ul>\n\n<p>I kept my existing <a href=\"https:\/\/www.netgear.com\/home\/products\/networking\/wifi-routers\/R6400.aspx\">wifi router<\/a>,\nconverted it to an access point, and plugged\nit into the switch because my youngest's Netbook refused to connect to the new hardware.<\/p>\n\n<p>But why go to all this trouble and expense (it cost me CDN$2k for hardware and another CDN$1.5k for the cabling work) for\nmy home network? Flexibility. This setup will be great for as long as gigabit\nethernet remains faster than anything I can get at my home. Right now our\n<a href=\"http:\/\/quadro.net\">local internet provider<\/a> provides me with 50Mbps down \/ 5 Mbps\nup over coax -- the modem is mounted on the wall next to the cabinet.\nAt some point they will be upgrading connections around here -- less than 1km \naway they are building a brand new subdivision with gigabit fiber being run to\nhomes. When the time comes, I'll just have to update the modem...and nothing\nelse. Maybe at some point <a href=\"https:\/\/www.ubnt.com\">Ubiquiti<\/a> releases some nicer in-room access points.\nI can just swap my old ones for the new ones and everything else will just still\nwork great.<\/p>\n\n<p>Each room has an access point now that covers a small area. The equipment smoothly\nhandles transitions from one location to another, and I can get to see some\ncool reports about who is doing what (how much is my youngest watching YouTube?!?)\nand adding and removing hardware for this setup is easy.<\/p>\n\n<p>I highly recommend this type of setup for your home:<\/p>\n\n<ul>\n<li>centralized location of a switch near where your modem \/ internet connection enters<\/li>\n<li>wired connections to multiple locations, terminating near the switch<\/li>\n<li>in-wall or very small, unobtrusive access points<\/li>\n<\/ul>\n\n<p>I realize not everyone can do this -- apartments and older homes make this very\nimpractical. I would recommend looking into mesh networks (Ubiquiti's consumer\nline of Amplifi look really good) to give yourself sufficient capacity. The\nnumber of network-aware or even network-required devices is only to go up, not down. If you can get out in\nfront of it a little bit you'll be in a great spot to take advantage of it.<\/p>\n",
        "date": "2017-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How a Grumpy Programmer wires their home for internet",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/09\/14\/how-a-grumpy-programmer-wires-their-home\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the things I have grown to enjoy over the years is mentoring\npeople. It has felt like a very natural extension of the many years I\nhave spend doing conference talks -- find people who are struggling to\nlearn a concept I am familiar with, and then guide them through solutions.\nIt's a very hands-on experience for me, and it provides me with an outlet\nto keep my programming skills from completely atrophying.<\/p>\n\n<p>Back in March I got an email from <a href=\"https:\/\/twitter.com\/skoop\">Stefan Koopmanschap<\/a> \nasking me if I was interested in participating in <a href=\"https:\/\/weca.mp\">WeCamp<\/a> later\non in the year. After a quick check with <a href=\"https:\/\/twitter.com\/internet_widow\">She Who Must Be Obeyed<\/a>\nflights were booked and plans were hatched.<\/p>\n\n<p>WeCamp is a very unique experience. Code retreats, where you get a group of\nprogrammers together in a somewhat-isolated environment to work on something,\nare rare enough. I've participated in a few while at Mozilla, so I have a\nfirm understanding of the underlying principles. WeCamp spins that a little\ndifferently by putting people on a <a href=\"http:\/\/suitcasemag.com\/wp-content\/uploads\/2014\/04\/island-2.jpg\">private island in the Netherlands<\/a> where they are actually camping (albeit with beds instead of\nsleeping on the floor of the tent).<\/p>\n\n<p>I've been camping before, but not in at least 20 years, but I didn't think\nthat would be a problem. Instead, there was the issue of what I was going\nto be doing as a coach. I had an idea of what a coach <em>might<\/em> do, but not\nsure exactly what would happen. Luckily, we had a Coach of Coaches in\n<a href=\"https:\/\/twitter.com\/phpcodemonkey\">Jeremy Coates<\/a> to guide myself and the\nother coaches (Steven de Vries, Michelangelo van Dam, Jeroen van der Gulik,\nand Juliette Reinders Folmer) through what we should expect and how to handle\nsome rough situations (more on that later).<\/p>\n\n<p>We were all assigned teams, the other campers showed up, and we got to work.\nAnd despite what you might think, it was actually work for the coaches too.<\/p>\n\n<p>In my role as a mentor, I am used to being very hands-on with folks -- after\nall I am here to help and share what I know! But coaching is a very different\nthing. You are expected to help but definitely not step in and do the work\nfor them.<\/p>\n\n<p>My team did ask me lots of really good questions and I was happy to share\nmy thoughts on a whole bunch of topics. My answers also surprised some of the\nteam members because of a phenomenon I call \"social media dissonance\" and is\nentirely 100% my fault.<\/p>\n\n<p>As someone who has spent A LOT of time on social media building up a brand to\nwrap my programming-related activities around, it's natural that people assume\nwhat they see me do on Twitter is how I am 100% of the time. To be clear, I am\nsimply exaggerating certain traits of mine for fun and to build up a consistent\nmarketing message. But I am not my Twitter account - it is part of me but not\nall of me. People see me, a very physically large white male with some very\nstrong opinions on things, and assume it's going to be confrontations and\nyelling from the get go. That is not who I am, but that is the message I pushed\nfor many years. Anyone who meets me in person and interacts with me for more\nthan 30 seconds realizes what Twitter performance art is really about.<\/p>\n\n<p>So when people asked me questions related to testing during the code retreat\nthey were surprised to find that I was not immediately bellowing at them to\nwrite tests for everything. Look, playing the character on Twitter can be a lot\nof fun, but at the end of the day I am a real person dealing with real situations.\nOne of those is what to do when you are prototyping things as part of a code\nretreat. Tests are nice, but until you have decided exactly what you are doing\nwriting tests might be a distraction. Figure out your approach, your API, your\ninterfaces and <em>then<\/em> break out the TDD and build stuff.<\/p>\n\n<p>For the most part I valued the experience -- helping people reach higher levels\nof skill (technical or otherwise) was the goal. I watched for tension between\nteam members, I got them water and snacks, and I worked very very hard to stay\nout of their way but be there when they needed something from me. But it wasn't\nall good.<\/p>\n\n<p>One of the campers on my team was not having a good time -- they were struggling\nwith a lot of personal and professional issues. In retrospect, the type of help\nthey were looking for was not going to be provided at WeCamp. A discussion happened\nat one point where this camper expressed their frustration at some professional\nsetbacks and was determined to not accept any feedback that contradicted their\nown opinion. I attempted to provide some calm, constructive feedback on better ways to\nhandle the emotional side of such setbacks, and it culminated in the camper storming\nout of the yurt we were working in and leaving the team.<\/p>\n\n<p>This was definitely not what I was expecting.<\/p>\n\n<p>Luckily there was a good support system\nin place both for our frustrated camper and our stunned coach. In the end, the camper\nwas given the freedom to work on other tasks and I just stayed out of the way as to\nnot run the risk of another inadvertent confrontation.<\/p>\n\n<p>In the end, my team got their application up to Minimum Viable Product status,\nintegrated our lost camper back into the presentation, and I am very proud of the work\nthey done and left them a lot of new things to think about. There is also a commitment\nfor follow-up conversations in November to find out how they have been able to apply\ntheir experiences at WeCamp to their lives (both personal and professional).<\/p>\n\n<p>See, part of the purpose of WeCamp is to give people a chance to set some goals that\nwill push them out of their comfort zone. My team members got a chance to do some of\nthat -- some with more success than others. But they definitely embraced the idea\nof \"willful change\" and that part alone made it worth it to me.<\/p>\n\n<p>Despite the blow-up with the frustrated camper, I enjoyed the coaching experience and\nwould not hesitate to do it again. As for WeCamp itself...I am not sure that I would\nget a lot out of it just as a participant. My goals are moving towards non-coding\nterritory and something like WeCamp is not a good venue for working through those.<\/p>\n\n<p>If you're looking for a very unique experience and a chance to push some boundaries\nas a coder, you should check out WeCamp and code retreats in general. They offer\nsome very unique experiences in an environment geared towards providing you with\nthe support needed to make the cost of failure almost zero.<\/p>\n",
        "date": "2017-09-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Who Coaches The Coaches?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/09\/06\/who-coaches-the-coaches\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, the rumours are true. Your grumpy blogger, a long-time and generally\nsatisfied <a href=\"https:\/\/vim.org\">Vim<\/a> user has decided to embrace some fear,\nturn on <a href=\"https:\/\/www.emacswiki.org\/emacs\/Evil\">EVIL mode<\/a> and give Emacs\na fair evaluation.<\/p>\n\n<p>To be truthful, I had used Emacs before. Back in 2002 I was using Linux as\nmy working environment and used it because the guy sitting next to me\n(hi Kemo, wherever you are!) was using it and showed me the basics. All I\nretained over the years was C-x C-f to load files and C-x C-c to quit.<\/p>\n\n<p>Over the years I tried all sorts of editors -- <a href=\"https:\/\/www.eclipse.org\/\">Eclipse<\/a>,\n<a href=\"http:\/\/jedit.org\/\">JEdit<\/a>, <a href=\"https:\/\/macromates.com\/\">TextMate<\/a>, <a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a> --\nbefore finally settling on Vim and builidng the request muscle memory along\nwith the proper superior attitude.<\/p>\n\n<p>I also have used <a href=\"https:\/\/www.jetbrains.com\/pycharm\/\">PyCharm<\/a> and <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>\nbecause sometimes you need an IDE to help you when you are learning new languages\nbeyond the beginner stage or dealing with a <a href=\"https:\/\/github.com\/opencfp\/opencfp\">really complicated code base you let spin out of control<\/a>.\nRight tool for the right job is a real thing, not just advice that developers\nwho are bitter you don't like the tool they think is \"right\" give.<\/p>\n\n<p>Vim is a great modal editor -- really powerful, and has a ridiculous amount\nof plugins that can extend Vim to make it even more useful. I've been able\nto get quite productive with it. At the same time, I can also get frustrated\nwith how some stuff seemed really hard to get just right with plugins and\nhow weird <a href=\"http:\/\/learnvimscriptthehardway.stevelosh.com\/\">Vimscript<\/a> is.<\/p>\n\n<p>All the while I would see Emacs stuff bubble up to the surface on Twitter or\nYouTube would recommend that I watch a video about it. I came to realize that\nEmacs is very powerful and can do pretty much everything that Vim can do.\nPlus there is EVIL mode, which allows me to use Emacs with all the HJKL goodness\nI have come to expect from Vim.<\/p>\n\n<p>I thought it might be constructive for me to go over my .emacs file as it\ncurrently stands and explain my choices. Honestly, it hasn't been that hard a\ntransition using Emacs at this point. Retraining my brain to remember new\nkey combinations is the harder part.<\/p>\n\n<pre><code>;;; Code:\n(package-initialize)\n\n(setq package-archives '((\"gnu\" . \"http:\/\/elpa.gnu.org\/packages\/\")\n                         (\"marmalade\" . \"https:\/\/marmalade-repo.org\/packages\/\")\n             (\"melpa-stable\" . \"https:\/\/stable.melpa.org\/packages\/\")\n                       (\"melpa\" . \"http:\/\/melpa.org\/packages\/\")))\n<\/code><\/pre>\n\n<p>All I am gonna say here is that Emacs packaging is interesting.<\/p>\n\n<pre><code>;;; EVIL mode to help me transition from Vim to Emacs\n(require 'evil)\n(evil-mode 1)\n<\/code><\/pre>\n\n<p>EVIL mode is a really good Vim emulation mode for Emacs. It allows me to\nuse most of the keystrokes I am comfortable with to move around within\nEmacs buffers.<\/p>\n\n<pre><code>;;; Some general settings\n(setq make-backup-files nil)\n(define-coding-system-alias 'UTF-8 'utf-8)\n(setq inhibit-startup-message t)\n(set-language-environment 'utf-8)\n(set-default-coding-systems 'utf-8)\n(set-selection-coding-system 'utf-8)\n(set-locale-environment \"en.UTF-8\")\n(prefer-coding-system 'utf-8)\n<\/code><\/pre>\n\n<p>I took these from Some Random Person's Emacs Settings. Mostly it's to make\nsure we do everything in UTF-8 and to not have my filesystem littered with\nall sorts of back-up files.<\/p>\n\n<pre><code>;;; Set up autocomplete\n(require 'auto-complete-config)\n(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))\n(ac-config-default)\n(global-auto-complete-mode t)\n<\/code><\/pre>\n\n<p>Autocompletition that works! Before you get all mad, I have used autocompletion\nin Vim for a long time but sometimes it wouldn't quite work properly. I have found\nEmacs autocomplete to be programming language sensitive, something I did not notice happening\nin Vim.<\/p>\n\n<pre><code>;;; YaSnippet\n(yas-global-mode 1)\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/www.emacswiki.org\/emacs\/Yasnippet\">YASnippet<\/a> is an Emacs mode that allows\nyou to create language-specific templates to allow you to quickly generate code for\nthings like for loops or if-then statements.<\/p>\n\n<pre><code>;;; PHP settings\n(require 'php-mode)\n(require 'php-auto-yasnippets)\n(define-key php-mode-map (kbd \"C-c C-y\") 'yas\/create-php-snippet)\n(payas\/ac-setup)\n(setq php-auto-yasnippet-php-program \"\/Users\/chartjes\/.emacs.d\/Create-PHP-YASnippet.php\")\n<\/code><\/pre>\n\n<p>Still gotta do PHP work despite all my Python QA work! The PHP mode is pretty solid,\nand I like being able to generate snippets for my work. Remember kids, we only have so\nmany keystrokes in our fingers.<\/p>\n\n<pre><code>;;; Some file mappings\n(add-to-list 'auto-mode-alist '(\"\\\\.md\\\\'\" . markdown-mode))\n(add-to-list 'auto-mode-alist '(\"\\\\.py\\\\'\" . python-mode))\n<\/code><\/pre>\n\n<p>Just telling Emacs what file endings map to what languages. Some programming-language\nmodes can figure this out, Emacs wanted me to be specific about Markdown and Python<\/p>\n\n<pre><code>;;; Modeline\n(defvar sml\/theme)\n(setq sml\/theme 'powerline)\n(sml\/setup)\n<\/code><\/pre>\n\n<p>If you're a Vim user who liked <a href=\"https:\/\/github.com\/Lokaltog\/vim-powerline\">a cool status line<\/a>?\nCheck out <a href=\"https:\/\/github.com\/Malabarba\/smart-mode-line\/\">smart-mode-line<\/a><\/p>\n\n<pre><code>;;; Flycheck\n(require 'flycheck)\n(global-flycheck-mode t)\n(setq flycheck-phpcs-standard \"psr2\")\n(add-to-list 'flycheck-disabled-checkers 'python-pylint)\n(add-hook 'python-mode-hook #'flycheck-mode)\n(add-hook 'python-mode-hook\n      (lambda () (flycheck-select-checker 'python-flake8)))\n(require 'flycheck-color-mode-line)\n(eval-after-load \"flycheck\"\n  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/github.com\/flycheck\/flycheck\">Flycheck<\/a> will do on-the-fly syntax checking\nof your code. Just hook into the proper modes and you'll be good to go. Works great\nwith PHP code too.<\/p>\n\n<pre><code>;;; JEDI autocompletion for Python\n(add-hook 'python-mode-hook 'jedi:setup)\n(defvar jedi:complete-on-dot)\n(setq jedi:complete-on-dot t)\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/github.com\/davidhalter\/jedi\">JEDI<\/a> is a cool tool for doing Python-specific\nstatic analysis and syntax checking for your Python code. Highly recommend it.<\/p>\n\n<pre><code>;;; Mageit for Git\n(require 'magit)\n(global-set-key (kbd \"C-x g\") 'magit-status)\n<\/code><\/pre>\n\n<p>The only Emacs mode you will ever need to do work with Git<\/p>\n\n<pre><code>;;; Elm-specific settings\n(require 'elm-mode)\n<\/code><\/pre>\n\n<p>Maybe one day I can do Elm for money.<\/p>\n\n<pre><code>;;; We will also need web mode stuff\n(require 'web-mode)\n(setq web-mode-ac-sources-alist\n  '((\"php\" . (ac-source-yasnippet ac-source-php-auto-yasnippets))\n    (\"html\" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))\n    (\"css\" . (ac-source-css-property ac-source-emmet-css-snippets))))\n(add-hook 'web-mode-before-auto-complete-hooks\n          '(lambda ()\n             (let ((web-mode-cur-language\n                    (web-mode-language-at-pos)))\n               (if (string= web-mode-cur-language \"php\")\n                   (yas-activate-extra-mode 'php-mode)\n                 (yas-deactivate-extra-mode 'php-mode))\n               (if (string= web-mode-cur-language \"css\")\n                   (setq emmet-use-css-transform t)\n                 (setq emmet-use-css-transform nil)))))\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/web-mode.org\/\">Web mode<\/a> is intended to make working with web-centric\nlanguages easier in that it can recoginze when you have HTML and CSS code\nmixed in with your scripting language of choice, applying different syntax\nhighlighting and styling rules to them. Really neat stuff<\/p>\n\n<pre><code>;;; Python settings\n(require 'virtualenvwrapper)\n(venv-initialize-interactive-shells)\n(setq venv-location '(\"\/Users\/chartjes\/Kinto\/kinto-integration-tests\/venv-kit\"))\n<\/code><\/pre>\n\n<p>Did I mention that you can make Emacs aware of virtual Python environments?<\/p>\n\n<pre><code>;;; Settings for Corral (surrounding text with stuff)\n(global-set-key (kbd \"M-9\") 'corral-parentheses-backward)\n(global-set-key (kbd \"M-0\") 'corral-parentheses-forward)\n(global-set-key (kbd \"M-[\") 'corral-brackets-backward)\n(global-set-key (kbd \"M-]\") 'corral-brackets-forward)\n(global-set-key (kbd \"M-{\") 'corral-braces-backward)\n(global-set-key (kbd \"M-}\") 'corral-braces-forward)\n(global-set-key (kbd \"M-\\\"\") 'corral-double-quotes-forward)\n<\/code><\/pre>\n\n<p>I have relied heavily on <a href=\"https:\/\/github.com\/tpope\/vim-surround\">surround.vim<\/a> in the past,\n<a href=\"https:\/\/github.com\/nivekuil\/corral\">Corral<\/a> seems to be a great solution to do the same thing in Emacs.<\/p>\n\n<p>So there you have it! My early experiences with Emacs are good, I am slowly learning\nnew keystrokes to do new things and trying to get Emacs to intelligently help me be\na better developer.<\/p>\n",
        "date": "2017-05-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Letting Emacs into your grumpy heart",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/05\/26\/letting-emacs-into-your-grumpy-heart\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've started liking the idea of creating contract-style tests for the APIs\nthat power services at Mozilla. They are simply another line of defense\nagainst regressions and the accidental release of new functionality. As\nwith all my work at Mozilla, it's being done in Python using <a href=\"https:\/\/docs.pytest.org\/en\/latest\">pytest<\/a>\nbut thanks to some work from my co-worker <a href=\"https:\/\/twitter.com\/tarek_ziade\">Tarek<\/a>\nI have some new tools at my disposal.<\/p>\n\n<p>First, we've started making use of <a href=\"http:\/\/swagger.io\">Swagger<\/a> to get \nthe developers to document their APIs. There is a wide variety of tools\nthat work with Swagger API specs, but Tarek went a little further and\nput together <a href=\"https:\/\/github.com\/tarekziade\/smwogger\">Smwogger<\/a> to make\nthis type of testing even easier.<\/p>\n\n<p>He describes it as \"a smoke test tool for services described through Swagger\"\nwhile I describe it as \"a way for me to quickly write contract tests against an\nAPI spec\". I'm pretty sure we're both right.<\/p>\n\n<p>While you can use it as a CLI tool (the docs are geared towards that) he also\nthoughtfully added support for me to use the library from inside pytest. The only\ncatch is that the tool uses <a href=\"https:\/\/docs.python.org\/3\/library\/asyncio.html\">asyncio<\/a>,\nwhich is what Python 3 uses to support writing concurrent code.<\/p>\n\n<p>I thought it would be way more difficult than it was but Tarek guided me through\nthe extreme basics of concurrent Python code and after that I was able to write\nthe tests I wanted. So here's some code for you to see:<\/p>\n\n<pre><code class=\"python\">import asyncio\nimport configparser\nimport pytest\nfrom smwogger import API\n\nfrom fxtesteng.helpers import aslist\n\n@pytest.fixture(scope=\"module\")\ndef conf():\n    config = configparser.ConfigParser()\n    config.read('manifest.ini')\n    return config\n\n\n@pytest.fixture(scope=\"module\")\ndef event_loop():\n    return asyncio.get_event_loop()\n\n\n@pytest.fixture(scope=\"module\")\ndef api(event_loop, conf, env):\n    return API(conf.get(env, 'api_definition'), loop=event_loop)\n\n\n@pytest.mark.asyncio\nasync def test_version(api):\n    res = await api.__version__()\n    data = await res.json()\n    expected_fields = aslist(conf.get(env, 'version_fields'))\n\n    # First, make sure that data only contains fields we expect\n    for key in data:\n        assert key in expected_fields\n\n    # Then make the we only have the expected fields in the data\n    for field in expected_fields:\n        assert field in data\n\n\n@pytest.mark.asyncio\nasync def test_heartbeat(api):\n    res = await api.__heartbeat__()\n    data = await res.json()\n    expected_fields = aslist(conf.get(env, 'heartbeat_fields'))\n\n    # First, make sure that data only contains fields we expect\n    for key in data:\n        assert key in expected_fields\n\n    # Then make the we only have the expected fields in the data\n    for field in expected_fields:\n        assert field in data\n<\/code><\/pre>\n\n<p>I hope the code is clear (except for the async parts) but the idea is \nto use the API object from smwogger to make calls, using the ID's that\nthe developer has assigned to that API call. I then loop through the\nexpected fields for that call (they are stored in that manifest.ini file\nmentioned in the <code>conf()<\/code> fixture) and make sure everything matches\nour expectations.<\/p>\n\n<p>The next bit of work I need to do is to use the Swagger spec some more\nand check the fields the API returns against what is actually in the spec\ninstead of using pre-defined values in that manifest file. Making sure\nthe developers follow their own specs is part of regression testing too!<\/p>\n",
        "date": "2017-04-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Async API testing in Python",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/04\/26\/async-api-testing-in-python\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It's no secret that I am on Twitter a lot. I mean, really a lot. Almost 100k\nworth of posts a lot. But as I use it more and more I find I was spending\nway more time treating Twitter as read-only, when what I wanted was to actually\ninteract with people! Maybe that is a naive position to take, but it is what\nit is.<\/p>\n\n<p>Then I stumbled upon this <a href=\"https:\/\/elvery.net\/drzax\/the-list-cycle\">blog post<\/a> \nwhere someone described an experiment they were trying out. The code for it\nwas written in Node and I couldn't get it to work so like any pragmatic programmer\nI used the tools I am most comfortable with and <a href=\"https:\/\/gist.github.com\/chartjes\/57e4470ef686d2fdcf5e496812d9fea1\">wrote a version in PHP<\/a>.<\/p>\n\n<p>So every morning a cron job kicks off on a server and looks at the last 30\ndays of my Twitter timeline. It looks for users who I have \"interacted\" with\nduring that time frame. What is \"interaction\"? It's defined as:<\/p>\n\n<ul>\n<li>you replied to, favourited, or retweeted a tweet of mine<\/li>\n<li>you favourited or retweeted a tweet I was mentioned in<\/li>\n<li>I mentioned you in a tweet<\/li>\n<li>I replied to or favourited a tweet of yours<\/li>\n<\/ul>\n\n<p>The results so far have been interesting. I definitely see a different group\nof people on my feed than I have expected. Which is entirely the point! It\nhas made me <em>use<\/em> Twitter differently...which again is the point. I'm far freer\nwith my favourites and retweets than I was before. I'm also slowing down to\nactually read my timeline rather than just scroll through it super quickly\nlike a trained monkey or something.<\/p>\n\n<p>It's also making me be a lot less judgemental of the people who do end up on\nthis list. While some of the people I follow are definitely blasting out stuff\nI am not all that interested in, I'm willing to take a chance and not just\nmute them as soon as I don't like the minutiae of their life. Diversity is\na good thing and filter bubbles are not.<\/p>\n\n<p>Another side effect of this has been some people proclaiming \"I didn't know you\nwere following me!\" when I say something to them. Hate to burst your bubble but\nI'm not following you -- you are on my 'cycle' list and I can see your Tweets.<\/p>\n\n<p>I know some folks follow accounts that send out emergency information and\nthings like that -- I work from home so things like that are not of great\nuse to me. YMMV etc etc.<\/p>\n\n<p>If you're looking to have a different experience with Twitter, try my code out\nand see what kind of list it can generate for you. I'm going to keep using this\nfor the near future because I feel like it's a worthy experiment. In fact, some\nTwitter accounts I felt were essential to follow have just slid off the list\nand I haven't missed them.<\/p>\n",
        "date": "2017-03-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Different Twitter Experience",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/03\/27\/a-different-twitter-experience\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This past week (March 5th-10th) I went to Crested Butte, Colorado to attend\nthe <a href=\"http:\/\/www.mindviewinc.com\/Conferences\/JavaPosseRoundup\/\">Winter Tech Forum<\/a>\nwith my fellow Mozillian <a href=\"https:\/\/twitter.com\/m8ttyb\">Matt Brandt<\/a>. He'd been\nencouraging me for about a year to come out for a visit and see the conference\nfor myself.<\/p>\n\n<p>I went intending to push myself out of my comfort zone. I pushed a little too\nhard.<\/p>\n\n<p>WTF (pretty sure it was named this on purpose) is an Open Spaces conference.\nThis means that there are no set speakers -- attendees self-organize and the\ngoal is really for smaller sessions where it's more of a discussion than\nyour traditional lecture-style session. It seems to me it leans more towards\nhaving a number of attendees in the 30-40 range -- Bruce Eckel, one of the\norganizers for this event, mentioned he felt things started to change once\nyou get up to 50 people. This year's event was just a little over 20.<\/p>\n\n<p>So, the first thing that caused me some stress was the very first session where\nBruce explained how everything worked and the attendees introduced themselves.\nWhen it was my turn I introduced myself and talked about how I came into this\nevent with no expectations and was going to try and just go with the flow.<\/p>\n\n<p>It was very strange to go from being a known quantity after all these years of\ngiving talks at PHP conferences to being absolutely nobody at this event. I'm\nnot going to lie -- it was a very uncomfortable feeling for me. There were four\nnewcomers, I only knew Matt, and it seemed like EVERYONE ELSE knew each other.<\/p>\n\n<p>So the sessions started going and there were some interesting discussions:<\/p>\n\n<ul>\n<li>a quick intro to Machine Learning led by someone who worked for a consultancy specializing in it<\/li>\n<li>I led a discussion about how I manage social media and a discussion about whether or not to interact with haters and trolls<\/li>\n<li>offered some input and my experiences to a discussion on remote working<\/li>\n<\/ul>\n\n<p>The afternoons were ours to do with as we wished. A lot of attendees liked to\nski or do other activities. Since I am usually against sweating while outdoors,\nI retreated to my charming little Airbnb and kept on doing a big refactor of\n<a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a> to add in consistency for the\nuse of forms and replacing Sentry (the authentication and authorization library)\nwith it's replacement from Caratalyst, <a href=\"https:\/\/cartalyst.com\/manual\/sentinel\/2.0\">Sentinel<\/a>.<\/p>\n\n<p>Tuesday was more of the same -- open discussions in the morning and then we\nwere free to do whatever we wanted in the afternoons. Tuesday's sessions for me were:<\/p>\n\n<ul>\n<li>Matt led a discussion on app and web accessibility issues<\/li>\n<li>What had people done with hardware devices and ideas for the Wednesday hack day<\/li>\n<\/ul>\n\n<p>I didn't go to the last sessions, I instead went to go hack some more on OpenCFP\nin order to have something to show off on Wednesday night. Had some lunch at\none of the many fine restaurants in Crested Butte, and went back to my Airbnb.<\/p>\n\n<p>Wednesday I spent the entire day working on more OpenCFP stuff -- adding tests\nto the application is a very slow and deliberate process and I am trying to\nbe a Good Open Source Project Maintainer. After dinner everyone went back to\nthe conference venue (the local parish hall) and I fought against my fear\nand loathing by going first and doing a quick 5 minute demo of OpenCFP.\nWhat else did we see?<\/p>\n\n<ul>\n<li>demo of using machine learning to detect angry tweets<\/li>\n<li>demo of a Slack bot that uses Markov chains of some Twitter accounts to generate output<\/li>\n<li><a href=\"https:\/\/developer.amazon.com\/alexa\">Alexa<\/a>-as-a-mentalist demo<\/li>\n<li>Using an Echo dot to turn a disco ball off and on<\/li>\n<li>Adding some Alexa skills to give people information about Crested Butte<\/li>\n<li>A <a href=\"https:\/\/en.wikipedia.org\/wiki\/Brainfuck\">Brainfuck<\/a> compiler written in <a href=\"https:\/\/en.wikipedia.org\/wiki\/Clojure\">Clojure<\/a><\/li>\n<li>Using a <a href=\"https:\/\/www.leapmotion.com\">Leap Motion<\/a> controller to allow people to cast spells from Harry Potter by hand<\/li>\n<li>A quick demo of <a href=\"https:\/\/ponylang.org\">Pony<\/a><\/li>\n<\/ul>\n\n<p>There were two other demos that I cannot remember and didn't take notes for, sorry folks.<\/p>\n\n<p>Dinner that night was at an awesome restaurant that specialized in dishes for\nsharing -- the 12 of us had one of (almost) everything on the menu. Probably\nthe best $50 I ever spent on a dinner.<\/p>\n\n<p>Then Thursday happened.<\/p>\n\n<p>I went to some sessions but my brain wouldn't let go of a fear of going to the\nprogressive dinner event. It starts off by going to a house (many of the\nattendees rented houses for the event) for appetizers, then a different\nhouse for the main course, and a third place for dessert.<\/p>\n\n<p>I watched sessions on:<\/p>\n\n<ul>\n<li>keeping things like login and passwords your app needs from being leaked out<\/li>\n<li>a jumpstart for a functional programmer getting into Python<\/li>\n<\/ul>\n\n<p>Then I went back and hacked some more, had lunch, and went back to my Airbnb.<\/p>\n\n<p>It's been a very long time since I've had a panic attack. The last time was\nwhen I was going to do a joint talk with <a href=\"https:\/\/twitter.com\/stuherbert\">Stuart Herbert<\/a>\nat ZendCon and he couldn't come due to medical issues.<\/p>\n\n<p>My brain just latched onto:<\/p>\n\n<ul>\n<li>20 people<\/li>\n<li>you don't know any of them<\/li>\n<li>it's too many people in one small house<\/li>\n<li>I WILL NOT LET YOU GO<\/li>\n<\/ul>\n\n<p>So I remained in my Airbnb and had a salad I had bought at the local grocery\nstore. I felt bad that I couldn't go -- but many of the attendees approached\nme on Friday to lend me their support and tell me they have often felt the\nsame thing. That was the one big thing that made this event really, really\ndifferent -- everyone was 100% serious about giving yourself permission to\ndo as much or as little as you wanted at this event.<\/p>\n\n<p>Friday was a much, much better day.<\/p>\n\n<ul>\n<li>Session for the new attendees to discuss their experience<\/li>\n<li>Integrating remote folks into your teams<\/li>\n<\/ul>\n\n<p>Then the closing session where Bruce talked about his own experiences this\nyear, some changes he was thinking about, and his own plans for future\nevents like this in 2017. We went around the circle sharing our own\nexperiences and then we took off for lunch.<\/p>\n\n<p>I went back to my Airbnb and worked on converting over a <a href=\"https:\/\/cakephp.org\">CakePHP<\/a>\napplication from 2.x to 3.4. Of <em>course<\/em> the ORM has changed things so I have\nlots of work to do.<\/p>\n\n<p>Then the finale of the event was awesome -- dinner at a yurt that you could\nonly get to my snowshoeing, skiing, or snowmobile. There were multiple starting\npoints depending on your own comfort level and experience level. I had decided\non the 1.5 mile starting point and would snowshoe in. I had never used snowshoes\nbefore.<\/p>\n\n<p>This time I felt comfortable having dinner with the whole group. The snowshoe\nexperience was not going to deter me from making it.<\/p>\n\n<p>In the end, the experience was GREAT. We walked as the sun set, great conversations\nto be had and then a great dinner prepared in the yurt for us. I sat at a table\nwith all the other attendees named Chris (there were 4 of us) and I shared\nthe tale of my grandfather's experiences as a German soldier who got caught\nin the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Battle_of_Stalingrad\">siege at Stalingrad<\/a>.<\/p>\n\n<p>The return walk was even better -- walking in bright moonlight combined with\na great talk with an attendee about his upcoming job helping to build the\ninfrastructure for an autonomous car company. It made me regret not participating\nin the progressive dinner the night before.<\/p>\n\n<p>Saturday I got up early and Matt drove me back to Durango for my flights home.\nAgain, great chats with Matt over the 4-1\/2 hour drive and I feel like we really turned a professional\nrelationship into a real friendship. My flights home were uneventful and I\ngrabbed my car from the off-airport valet parking around midnight.<\/p>\n\n<p>So what are my big takeaways from this event?<\/p>\n\n<p>First, it's really intimidating to get into meaningful discussions on any topic\nwith a group of strangers. By the end of the week I felt like these people\nweren't strangers any more -- it felt more like work colleagues. It's clear\nto me that the event (which is 10+ years old if I recall correctly) acts as\na support and networking group for these people. They really care about each\nothers' lives and careers. It was great to see.<\/p>\n\n<p>The second thing is a bit of weird perspective from me. For a lot of people,\nthey get the impression that what they are doing is unique and then these\nsort of events show you that others are doing or experiencing the same things.<\/p>\n\n<p>I had always felt that what I was doing was very similar to other peoples' experiences.\nInstead, I discovered much of my experience and views on remote working, personal management,\nand communication skills are quite unique. Attendees told me they really liked\nhow I articulated my views on these topics and that they got a lot out of it.\nNice little boost for the ego, to be sure.<\/p>\n\n<p>So, will I be back? I want to go back and immerse myself more into this\ngroup. Hopefully I can convince <a href=\"https:\/\/twitter.com\/funkatron\">Ed<\/a> to come\nwith me.<\/p>\n\n<p>Thanks to Bruce for being so warm and welcoming and treating me like I had\nbeen part of this forever. Extra special thanks to Matt for being my conference\nbuddy. I would not have gone to an event like this without knowing someone.<\/p>\n\n<p>Finally, this event has made me wonder if my 2018 event idea (GrumpyCon) should\nbe something similar. I am moving in the summer and maybe I get lucky and\nwherever I end up has the ability for me to allow me to host 30 people\nfor a week of in-depth discussions and experiences about PHP and other topics\npeople want to discuss.<\/p>\n",
        "date": "2017-03-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Fighting Fear and Loathing In Crested Butte",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/03\/12\/fighting-fear-and-loathing-in-crested-butte\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At the <a href=\"https:\/\/mozilla.org\">day job<\/a> I deal with making sure that a number\nof different services\nget tested sufficiently that we have confidence that what's being deployed and\nthen used by Firefox is correct. This is a big change from what I did before\nI got to Mozilla - I mostly wrote unit tests and integration tests for code.\nThese services are like black boxes as far as QA is concerned -- I do have\nsome insight into the code itself by being involved in code reviews to make\nsure unit and integration tests are still in place but my task is to make sure\nthe service is functioning as expected.<\/p>\n\n<p>Since it's 2017, most of the services around here are returning JSON-based\nresponses but <a href=\"https:\/\/github.com\/mozilla\/balrog\">Balrog<\/a> returns XML that\nis consumed by Firefox itself to let you know any updates that need to be\nmade to Firefox itself or any add-ons you've installed.<\/p>\n\n<p>Normally I would write some <a href=\"https:\/\/pytest.org\">pytest<\/a> scripts that use the\n<a href=\"https:\/\/pypi.python.org\/pypi\/requests\">Requests<\/a> library and then parse the\nXML responses. These days I like to create what I call \"API contract\" tests\nthat look at the API responses and verify not that the contents of the\nresponse make sense, but we look at the \"shape\" of the responses to make sure\nwe are getting expected fields and other content. This helps us catch any\nunexpected changes to the body of the response and also verify the documented\ncalls to API's are still correct.<\/p>\n\n<p>So I was all set to dive into parsing XML in Python (shoutout to <a href=\"http:\/\/lxml.de\/\">lxml<\/a>)\nwhen my co-worker <a href=\"https:\/\/ziade.org\/\">Tarek<\/a> suggested an easier path is to\nuse DTD (Document Type Definition) files instead. \"It would be easier than\nwhat you are trying to do and probably faster.\" Tarek is very wise.<\/p>\n\n<p>So the process for the test would become something like this:<\/p>\n\n<ul>\n<li>make a request to a known Balrog API endpoint<\/li>\n<li>grab the XML response<\/li>\n<li>validate it against the DTD<\/li>\n<li>assert that the validation worked<\/li>\n<li>profit!<\/li>\n<\/ul>\n\n<p>I know I mentioned I am using Python for this but the same principles apply to\nany language where there are tools available to manipulate and validate XML\nusing a DTD.<\/p>\n\n<p>So, after conversing with the main developer on the project I got a list of\nsample URL's and got some details about what fields where required, what ones\nwere optional, and some potential different responses. Next I needed to\ncreate some DTD's that act as our validation set. For example, here's a\ntypical response from Balrog:<\/p>\n\n<pre><code class=\"xml\">&lt;updates&gt;\n    &lt;update type=\"minor\" displayVersion=\"50.1.0\" appVersion=\"50.1.0\" platformVersion=\"50.1.0\" buildID=\"20161208153507\" detailsURL=\"https:\/\/www.mozilla.org\/en-US\/firefox\/50.1.0\/releasenotes\/\"&gt;\n        &lt;patch type=\"complete\" URL=\"http:\/\/download.mozilla.org\/?product=firefox-50.1.0-complete&amp;os=win64&amp;lang=en-US&amp;force=1\" hashFunction=\"sha512\" hashValue=\"1c2cea9770c814c58058c66ad9f99c678bf1612c8e05960fe415772383c4ab5e293eafef51b8b574307667a880c567d71b0d32c89d2c65dae02f68967991f8f7\" size=\"56892755\"\/&gt;\n        &lt;patch type=\"partial\" URL=\"http:\/\/download.mozilla.org\/?product=firefox-50.1.0-partial-50.0.1&amp;os=win64&amp;lang=en-US&amp;force=1\" hashFunction=\"sha512\" hashValue=\"52dab15fb6cbfb3a324a117fb5f1576a0b5947555d1a4535e0f5735a918e817d7c03f5300b3624883758b3a9300a9061a0e190087f1653fef39eb77b81311f69\" size=\"13185929\"\/&gt;\n    &lt;\/update&gt;\n&lt;\/updates&gt;\n<\/code><\/pre>\n\n<p>(Apologies for the long line lengths)<\/p>\n\n<p>FYI I used <a href=\"http:\/\/www.w3schools.com\/xml\/xml_dtd.asp\">this documentation<\/a> to\nfigure out what I needed to do to make the DTD work.<\/p>\n\n<p>Now, what does the DTD look like?<\/p>\n\n<pre><code>&lt;!ELEMENT updates (update*) &gt;\n&lt;!ELEMENT update (patch+) &gt;\n&lt;!ATTLIST update\ntype CDATA #REQUIRED\ndisplayVersion CDATA #REQUIRED\nappVersion CDATA #REQUIRED\nplatformVersion CDATA #REQUIRED\nbuildID CDATA #REQUIRED\ndetailsURL CDATA #IMPLIED\nlicenseURL CDATA #IMPLIED\nshowPrompt CDATA #IMPLIED\nshowNeverForVersion CDATA #IMPLIED\nactions CDATA #IMPLIED\nopenURL CDATA #IMPLIED\nnotificationUrl CDATA #IMPLIED\nalertUrl CDATA #IMPLIED\npromptWaitTime CDATA #IMPLIED\nbackgroundInterval CDATA #IMPLIED &gt;\n&lt;!ELEMENT patch (#PCDATA)&gt;\n&lt;!ATTLIST patch\ntype CDATA #REQUIRED\nURL CDATA #REQUIRED\nhashFunction CDATA #REQUIRED\nhashValue CDATA #REQUIRED\nsize CDATA #REQUIRED &gt;\n<\/code><\/pre>\n\n<p>There is a lot going on in here so let's break it down. This DTD describes\nthe elements and attributes I am expecting to find in this type of response\nfrom the service.<\/p>\n\n<ul>\n<li>There needs to be a top element <em>updates<\/em><\/li>\n<li>It has zero or more <em>update<\/em> elements (the &#42; indicates that)<\/li>\n<li>Each <em>update<\/em> has a bunch of attributes that are required or optional (that's what #IMPLIED refers to)<\/li>\n<li>Each <em>update<\/em> should have one or more <em>patch<\/em> elements<\/li>\n<li>Each <em>patch<\/em> element has some required attributes<\/li>\n<\/ul>\n\n<p>The Python code for a test is pretty simple. Again, substitute your own\npreferred tools in your own language of choice.<\/p>\n\n<pre><code class=\"python\">'''\nWe're using lxml for the XML parsing and validating\nurl contains the full URL to the API endpoint\n'''\nrepsonse = requests.get(url)\nroot = etree.XML(response.text)\n# Load our DTD file\nf = open('.\/api-tests\/updates.dtd')\ndtd = etree.DTD(f)\n\n# Validate the response against the DTD and show the errors if it fails\nvalid = dtd.validate(root)\n\nif valid:\n    assert True\nelse:\n    print(dtd.error_log.filter_from_errors())\n    assert False\n<\/code><\/pre>\n\n<p>As a rule I try and find libraries and tools that solve problems for me rather\nthan write my own. In this case, lxml and the use of DTD's was the right\nchoice than my initial thoughts of using <a href=\"https:\/\/en.wikipedia.org\/wiki\/XPath\">XPath<\/a>\nto hunt for attributes inside the elements.<\/p>\n\n<p>Hope this gives you a different perspective on strategies for testing API's.<\/p>\n",
        "date": "2017-01-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing XML-based API's",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/01\/18\/testing-xml-based-apis\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>On the <a href=\"https:\/\/devhell.info\">\/dev\/hell podcast<\/a> episode I recorded with <a href=\"https:\/\/twitter.com\/funkatron\">Ed<\/a>\nlast night, I got the chance to talk at length about my early experiences with\nmy new laptop. According the 'About This Mac':<\/p>\n\n<ul>\n<li>MacBook Pro (13-inch, 2016, Four Thunderbolt 3 Ports)<\/li>\n<li>Processor 2.9 GHz Inetl Core i5<\/li>\n<li>Memory 16 GB 2133 MHz LPDDR3<\/li>\n<li>Startup Disk Macintosh HD<\/li>\n<li>Graphics Intel Iris Graphics 550 1536 MB<\/li>\n<li>Pretentious Level High<\/li>\n<\/ul>\n\n<p>Thanks to a focus by Apple on People Not Like Me, I was able to get up and\nrunning really quickly on my new laptop. The Migration Assistant worked\nperfectly except for not copying over some saved game files for a Steam\ngame that I play quite a bit (<a href=\"https:\/\/en.wikipedia.org\/wiki\/Football_Manager_2016\">Football Manager 2016<\/a>).\nEspecially when I have a setup that requires the use of SSH keys and applications\nall configured to my liking, this was awesome.<\/p>\n\n<p>My next thought turned to security. Clearly we are in a era where attempts to\naccess people's computers is on the rise. Not that I am thinking I am the\ntarget of a shady cabal of l33t hax0rs being paid by shadowy security forces\nof governments that don't like my politics, but I want to at least make them\nwork a bit. So I want to share what I decided to do.<\/p>\n\n<p>I've been using <a href=\"https:\/\/en.wikipedia.org\/wiki\/FileVault\">FileVault<\/a> for a long\ntime (in fact, it was a requirement for me if I wished to use my own equipment\nwhile working for Mozilla).<\/p>\n\n<p>After that, you have all sorts of options. After seeing a Tweet from someone\nmentioning a bunch of tools that can help increase the security of your laptop\nI decided to take the plunge.<\/p>\n\n<p>First, I installed <a href=\"https:\/\/www.obdev.at\/products\/littlesnitch\/index.html\">Little Snitch<\/a>.\nIt monitors all my network connections and provides me with a bunch of options\nto allow or deny the connection, forever or just for a limited time. Starting\nwith this tool I had to (and still are, to a minor extent) acknowledge and\ndecide what to do about a ridiculous number of connection attempts by all sorts\nof programs. For the older crowd, I feel like I am playing some new version of\nEverquest. So. Much. Furious. Clicking.<\/p>\n\n<p>Not content to develop repetitive stress injuries to my right hand, I installed\n<a href=\"https:\/\/www.littleflocker.com\/\">Little Flocker<\/a>. It's a good complement\nto Little Snitch -- it watches for any interactions with files, looks for\nkeystroke loggers, and checks for malware. More. Clicking.<\/p>\n\n<p>Next up was to install <a href=\"https:\/\/obdev.at\/products\/microsnitch\/index.html\">Micro Snitch<\/a>\nto tell me any time my webcamera and microphones were being used. More alerts\nto acknowledge but at least my microphone only turns on when I need it to. So far.<\/p>\n\n<p>Finally I installed <a href=\"https:\/\/objective-see.com\/products\/blockblock.html\">BlockBlock<\/a>\nto let me know if something keeps trying to install malware in known locations.\nJust another layer of security for someone to overcome. They clearly indicate\nthat the application is in beta, so keep that in mind.<\/p>\n\n<p>With those apps installed and running and configured, I massaged my very sore\nwrist and started reading <a href=\"https:\/\/github.com\/drduh\/macOS-Security-and-Privacy-Guide\">this awesome document<\/a> at the\nsuggestion of a kind soul on Twitter. Lots of great stuff in there that you\ncan do and raises interesting points about deciding what type of threats you\nare looking to protect yourself from. Here's a list of the advice from it that\nI followed:<\/p>\n\n<ul>\n<li>patch everything when updates are available<\/li>\n<li>frequent system backups (shoutout to <a href=\"https:\/\/www.backblaze.com\/\">Backblaze<\/a>)<\/li>\n<li>full-volume encryption<\/li>\n<li>third-party firewalls<\/li>\n<li>Disable Spotlight Suggestions<\/li>\n<li>Use <a href=\"http:\/\/brew.sh\/\">Homebrew<\/a><\/li>\n<li>turn off captive portal<\/li>\n<li>use <a href=\"https:\/\/www.privoxy.org\/\">Privoxy<\/a> as a local web proxy<\/li>\n<\/ul>\n\n<p>I plan on implementing some of the other recommendations, but that's what I\nstarted with. For Mac users, please read through that document. So much good\nstuff along with explanations of why you should do it.<\/p>\n\n<p>Hope that helps!<\/p>\n\n<p><em>UPDATE February 1, 2018<\/em><\/p>\n\n<p>I received two emails recently pointing out a few things about the tools above.<\/p>\n\n<p>The first was that the company that sponsors the work of Privoxy has a link on their web site to \nsome very sketchy financial trading software. The person who informed me of\nthis was trying to get me to link to a free VPN solution they were promoting.\nMy personal view is that people running free VPN's are sniffing the hell out\nof your traffic selling what you're are doing to someone. Make the decision to\nuse a free VPN service with your eyes wide open.<\/p>\n\n<p>Secondly, I used to recommend the dnsmasq\/DNSSEC\/DNSCrypt combo but DNSCrypt is no longer available, so I\nsuggest you look for some other tools for encrypting your DNS traffic. The\nperson who emailed me about DNSCrypt pointed to a blog post they wrote about\nabout <a href=\"https:\/\/thebestvpn.com\/dnscrypt-best-alternatives\/\">DNSCrypt alternatives<\/a>.\nEither way, encrypting your DNS is a good idea so please consider it.<\/p>\n\n<p>I used to recommend <a href=\"https:\/\/www.littleflocker.com\/\">Little Flocker<\/a> but it looks\nlike the project has become an F-Secure product and is no longer free. Check out\nit's successor <a href=\"https:\/\/campaigns.f-secure.com\/xfence\/\">F-Secure XFENCE<\/a><\/p>\n",
        "date": "2017-01-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How A Grumpy Programmer Secures Their Laptop",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2017\/01\/09\/how-a-grumpy-programmer-secures-their-laptop\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<h2 id=\"could-be-called-%27revenge-of-the-comfortable%27\">Could Be Called 'Revenge Of The Comfortable'<\/h2>\n\n<p>Welp, the Surface Book sat on my desk next to my MacBookAir in it's <a href=\"https:\/\/ca.hengedocks.com\/\">Henge Dock<\/a>\nand didn't get used beyond Monday. I had some rough times with it that made\nme retreat back into the comfortable arms of macOS.<\/p>\n\n<p>In our <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2016\/11\/18\/from-macos-to-win10-part-2\">previous post<\/a>\nI mentioned some things I had to take a look at. How did that go?<\/p>\n\n<h3 id=\"needed-an-http-client-similar-to-paw\">Needed an HTTP client similar to <a href=\"https:\/\/paw.cloud\">Paw<\/a><\/h3>\n\n<p>Ugh -- nothing I found was similar enough and I also encountered something\nthat became a recurring theme -- how much work did I want to do in order to\nmaster a skill but using a different tool? The answer was \"not much\".<\/p>\n\n<p>That's probably a personal failing but at age 45 I'm not sure how much time\nI want to spend remapping those hard-fought memory mapped skills. I'm sure\nyou are starting to guess what the final conclusion might be.<\/p>\n\n<h3 id=\"connect-to-external-monitor-and-keyboard\">Connect To External Monitor And Keyboard<\/h3>\n\n<p>I didn't bother pairing the bluetooth keyboard I'm currently typing on to\nthe Surface Book, but getting the monitor connected was. Multiple <em>hours<\/em>\nspent trying to figure out what the problem was. Was it the drivers? Was it\nmy old monitor? What the hell was happening here -- mini display port to HDMI\nworks just fine on my Mac. In the end, it would only work when I used a\nmini-display-port-to-VGA connector. It's 2016 and I was highly disappointed.<\/p>\n\n<p>This then prompted another hour of me searching around looking at monitors\n(hey, a 4K one sounds great) to discover it wouldn't work with my current\nlaptop and <em>might<\/em> not work correctly with a Surface Book (not all apps\nscale properly).<\/p>\n\n<h3 id=\"better-hosts-file-management\">Better Hosts File Management<\/h3>\n\n<p>\"Just edit it with Notepad\" -- said by people that never used <a href=\"http:\/\/gas-mask.apponic.com\/mac\/\">Gas Mask<\/a><\/p>\n\n<h3 id=\"battery-life-is-weird\">Battery Life Is Weird<\/h3>\n\n<p>One of the reasons I thought the Surface Book would be enticing is I could\ndetach the screen and use it as a tablet. That actually worked okay...but I\nwould run low on battery after about an hour of usage. That is way less than\nwhat my ancient iPad 3 gives me.<\/p>\n\n<p>I don't really use my laptop much unplugged, but a tablet that has really\npoor battery life isn't that great.<\/p>\n\n<h3 id=\"maybe-the-best-change-is-no-change\">Maybe The Best Change Is No Change<\/h3>\n\n<p>Look, I know people are going to think I'm weak-willed about this. Yes, the Win10\nplatform has made leaps and bounds. I did find it jarring to use, and I was\nactually able to do everything I needed to do at my day job with it. Bash\non Win10 worked great (except for curl not working correctly). Atom was a\nmore than suitable editor. Firefox works just fine on Win10. I could do\nmost of what I want to do on Win10. But I would have to relearn a bunch of\ntools. I'm not sure I want to do that.<\/p>\n\n<p>I have to give back the Surface Book when I get back from a work meeting in\nHawaii (yes, sucks to be me) in a few weeks, so the decision is far from over.\nOne review I read said <a href=\"https:\/\/hackernoon.com\/a-week-with-the-new-macbook-pro-with-touch-pad-126eebb89ac#.tfcsz7pap\">don't get it if you have a newish MBP<\/a> while another felt that Apple had\n<a href=\"https:\/\/medium.com\/@ageitgey\/the-new-macbook-pro-is-kind-of-great-for-hackers-64c1c577a4d2#.1a7jc5ck3\">built a great machine for hackers<\/a>.<\/p>\n\n<p>Where does this leave someone with a 4-1\/2 year old (that's 45 years in\ninternet time) MacBook Air? Even more confused than before.<\/p>\n\n<p>I don't need the Touch Bar because my laptop will run in clamshell\/lid-closed\nmode approximately 99% of the time. What I really wanted was a MacBook\nthat has 32 GB of RAM. I can't get that right now. But will there be one\navailable in April? I would be super-pissed if that happened after I bought\na 16GB one.<\/p>\n\n<p>I'm still more indecisive about it than ever.<\/p>\n",
        "date": "2016-11-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "From macOS to Windows 10 - Part 3",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/11\/28\/from-macos-to-win10-part-3\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I spent this past week only using my loaner <a href=\"https:\/\/www.microsoft.com\/surface\/en-us\/devices\/surface-book\">Surface Book<\/a>\ninstead of my trusty MacBook Air for doing my work at the <a href=\"https:\/\/mozilla.com\">day job<\/a>.\nIf there is a better of test for figuring out if I can do my regular work in it,\nI can't think of one.<\/p>\n\n<h2 id=\"it-has-linux-under-the-hood\">It Has Linux Under The Hood<\/h2>\n\n<p>In the <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2016\/11\/10\/from-macos-to-win10-part-1\/\">previous post<\/a>\nI talked about how you could get a Bash shell using Ubuntu 14 (I think) running\nnatively on Windows. Well, it absolutely 100% works except for one problem\nthat I had. I was trying to debug a problem with an API  using <a href=\"https:\/\/curl.haxx.se\/\">curl<\/a>\nand it just wouldn't return anything at all. A quick pop back to macOS and\neverything was just fine. Still no idea what the issue is, but I think I\nneed to try and reproduce it. I do know that the lead developer for curl\nworks at Mozilla so maybe I can get some help that way.<\/p>\n\n<p>Otherwise, <em>everything<\/em> I normally do in the macOS terminal (well, <a href=\"https:\/\/iterm2.com\/\">iTerm2<\/a>)\nI was able to do just fine in the Bash shell in Windows 10. I was pleasantly\nsurprised.<\/p>\n\n<p>All the other tools I used for work were just fine:<\/p>\n\n<ul>\n<li>The <a href=\"https:\/\/atom.io\">Atom<\/a> editor behaved just fine<\/li>\n<li>Firefox is cross-platform, everything was just fine<\/li>\n<li>I didn't like how our video chat client looked (fonts way too small) but it worked<\/li>\n<\/ul>\n\n<p>In other words, I could easily see myself using a Surface Book every day for\nwork. To be honest, if I didn't have access to the Bash shell I wouldn't even\nhave bothered trying to do this.<\/p>\n\n<p>So what are the last few things I have to try out?<\/p>\n\n<ul>\n<li>need a HTTP client similar to <a href=\"https:\/\/paw.cloud\/\">Paw<\/a><\/li>\n<li>connected to external monitor and keyboard<\/li>\n<li>better hosts file management -- <a href=\"http:\/\/gas-mask.apponic.com\/mac\/\">Gas Mask<\/a> is just so good<\/li>\n<li>haven't fired up Skype in it yet<\/li>\n<li>haven't looked at screencasting software<\/li>\n<\/ul>\n\n<p>Next week I should have another update on putting the last touches onto the\nexperience.<\/p>\n",
        "date": "2016-11-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "From macOS to Windows 10 - Part 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/11\/18\/from-macos-to-win10-part-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Those who follow me on <a href=\"https:\/\/twitter.com\/grmpyprogrammer\">Twitter<\/a> noticed\na tweetstorm about my unhappiness regarding the news of Apple updating their\nline of laptops. I've been using Mac laptops for almost 13 years now (I'm\non my third one personally and used ones provided by employers), I own an old\niPad 3 and are on my 3rd iPhone (4S, to 6, to 6S+).<\/p>\n\n<p>I was not impressed at all by Apple's offerings. I am currently using a mid-2012\nMacBook Air. I have been happy with it but it no longer fits the needs of the\ntype of work I do. I need to use <a href=\"https:\/\/www.vagrantup\">Vagrant<\/a> and <a href=\"https:\/\/docker.io\">Docker<\/a>\nand they like having lots of memory. 8GB just isn't enough to run virtual machines\nand containers and modern web browsers and whatever other applications I need\nopen to do my job.<\/p>\n\n<p>But the price of the latest Apple offering has jumped immensely. To buy a new\nMacBook Pro with 13\" screen, the OLED touch bar, 16GB of RAM,a 512GB SSD drive, and AppleCare will cost me\nabout CDN$3200 including taxes. Holy crap that is a lot of money. When I bought\nmy MacBook Air I payed just a little under CDN$2000 and felt I got a good\nprice.<\/p>\n\n<p>Now, some of my friends have quite correctly pointed out that this is a device\nthat I will use every day to make myself a lot of money. I cannot argue with\nthat but I can state that I feel like that is an awful lot of money. But that's\nnot what really bothered me.<\/p>\n\n<p>What bothered me was a feeling that Apple no longer cares about the group of\ncustomers that I belong to -- the web developers who adopted their hardware\nin droves and recommended it to all their non-technical friends. Heck, even\nmy mother bought a Mac after me telling her she'd have a lot less headaches.<\/p>\n\n<p>So that got me to thinking -- could I do my job on a Windows laptop? To get this\nout of the way, I won't switch to Linux. I need to record my half of podcasts\nand want to create screen casts for my <a href=\"https:\/\/grumpy-learning.com\">side gig<\/a>.\nDoing that on Linux just isn't feasible.<\/p>\n\n<p>Now, I also want a laptop with some of the same aesthetics as a Mac one -- the\nhardware needs to look nice and feel like the company that made it actually\ncares how everything goes together. I could easily go with a more utilitarian\nPC laptop. I don't want to.<\/p>\n\n<p>So I took a look at the new Surface Book from Microsoft. In the wake of some\nrecent hardware announcements it looks like they have been paying attention\nto how Apple's line of laptops and desktops has been are changing and are\nmaking a play to get more developers back to using their hardware.<\/p>\n\n<p>The Surface Studio looks amazing. The Surface Pro looks like a weird hybrid\ntablet and computer. But the Surface Book looks...very enticing.<\/p>\n\n<p>I have considered it even with costing about $200 more than a similarly-equipped\nMacBook Pro. It has a touch screen and the screen itself detaches for use\nlike a tablet. My old iPad is showing it's age and I would love a tablet that\nis responsive and bigger than my iPhone 6S+.<\/p>\n\n<p>So at TrueNorthPHP 2016 I managed to play around with one of the older generation\nSurface Books that <a href=\"https:\/\/twitter.com\/auroraeosrose\">Elizabeth Smith<\/a> uses.\nIt reminded a lot of a MacBook. The detachable screen is incredibly light.\nI was starting to think \"this could work\".<\/p>\n\n<p>Luckily for me, my friend Mickey MacDonald from Microsoft has hooked me up\nwith a 30 day loaner of a Surface Book with 16GB of RAM and a 512GB hard drive.\nI'm going to take one of these for a spin and see if I like it enough to\nplunk down some money for one of my own.<\/p>\n\n<p>I got a few days ago and have just started trying to configure it the way that\nI need it to be. I want to share some of these early thoughts.<\/p>\n\n<h2 id=\"operating-system-choices\">Operating System Choices<\/h2>\n\n<p>Yes, I remember how much better OS-X was than previous versions of Windows.\nNow, I'm just not sure it matters to me. I'm not a power user of any of my\nsystems any more. I prefer a stable experience. Yes, I've used Windows 10\nrecently -- my wife and oldest daughter have laptops with it on it. To me,\nit's not a problem.<\/p>\n\n<p>I also ran Windows 10 for a while via Bootcamp on my MacBook Air. Again, I\ndidn't have any problems. It worked fine. So the OS won't be the issue.<\/p>\n\n<h2 id=\"linux%2Fbsd-underneath\">Linux\/BSD underneath<\/h2>\n\n<p>Now, <em>this<\/em> could be a problem. Luckily it seems I can get a nice Bash shell\nand a flavour of Ubuntu that works. <a href=\"https:\/\/en.wikipedia.org\/wiki\/Windows_Subsystem_for_Linux\">Windows Subsystem for Linux<\/a> provides\nme <a href=\"https:\/\/en.wikipedia.org\/wiki\/Bash_(Unix_shell)\">Bash<\/a> along with all the Ubuntu tools I expect (like apt-get).\nAfter doing the Windows update dance I was able to get it up-and-running with\nno problems. I haz Bash now.<\/p>\n\n<h2 id=\"hybrid-approaches\">Hybrid Approaches<\/h2>\n\n<p>After seeking some advice from my fellow PHP developers who use Windows\nfull-time it was suggested I use a hybrid approach. First, I should use Bash\nfor everything I normally use the terminal for on OS-X. This means 99% of the\ntime I'm doing stuff in Python with <a href=\"http:\/\/docs.pytest.org\/en\/latest\/\">pytest<\/a>.\nI did check out some of my work-related code and got it working. Again, that\nwon't be an obstacle.<\/p>\n\n<p>I was then told to store my Linux-related stuff not in \/home\/chartjes but in\non the C drive. This is so that the Windows apps I would use (like <a href=\"https:\/\/atom.io\">Atom<\/a>)\nwould be able to read the files there. This makes total sense to me, and it\nworked like a charm.<\/p>\n\n<p>To be clear, it's still very early days. But I feel like I've passed the first\nhurdle. I have installed a VPN client so I can connect to things at work, and\nnext up will be to install some other tools I need (like our <a href=\"http:\/\/www.vidyo.com\/\">video conferencing software<\/a>).<\/p>\n\n<p>This weekend I plan on spending some time using the screen in tablet mode. The\nSurface Book came with a pen, so it should be interesting to see how that works\nin conjunction with the touch screen.<\/p>\n\n<p>Next week I'll have another update about actually using it for work!<\/p>\n",
        "date": "2016-11-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "From macOS to Windows 10 - Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/11\/10\/from-macos-to-win10-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\"Why are you stopping the conference?!?\"<\/p>\n\n<p>This is the most common question I've been asked since earlier in the year when\nmy conference partner Pete and I decided that we would run our small PHP-centric\nconference TrueNorthPHP one more time and then shut it down.<\/p>\n\n<p>While there are some short answers, there are also some very long ones. I did\n30 minute closing talk at the end of the conference to talk about my feelings\nabout all this. Since not everyone was able to be there, I thought I'd rehash\nsome of my thoughts on this so others can learn from my experiences and draw their own\nconclusions.<\/p>\n\n<p>I absolutely picked the right partner for all this in Pete. I was able\nto be the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Hype_man\">hype man<\/a> for the event\nwhile Pete...did pretty much everything else. This, of course, was right in my\nego-driven, self-promoting wheel house. Talk all the time about something cool\nI am doing and what others to participate in? EASY. Make sure speakers are\ntreated the way I wanted to be treated? DONE. Keep everything on track\nduring the event and keep the talk flow going? SIMPLE.<\/p>\n\n<p>Because of this great partnership, doing the conference never felt stressful.\nSeriously. We knew what we needed to do, and made sure we got the right help\nfor the things we couldn't do ourselves. The staff at Microsoft Canada did\neverything we needed...and then some. An extreme pleasure to deal with once\nwe got things rolling, they often anticipated our needs and always delivered.<\/p>\n\n<p>I know you might not believe me, but it's true -- we set things up so this\nevent would run smoothly with some oversight from us instead of becoming an\nall-consuming monster like some conferences seem to be for other folks.<\/p>\n\n<p>So 5 times I asked for people to submit talks, encouraged my old friends and\nhopeful strangers to submit talks, picked people up at the airport, tried to\ntalk to all of them during the event itself, shook a lot of hands, thanked\nmany people for compliments, and just tried to do what I thought was right.<\/p>\n\n<p>Clearly it worked because I did notice all the people talking about the event\nover the years. I'm happy it all worked out so well and I'm happy so many\nother people looked at what Pete and I did as inspiration for running their\nown events.<\/p>\n\n<p>But <em>why<\/em> did I go along with shutting down such an awesome event. Sure, I\ncould keep doing this another 5 times. But I'm just not wired this way.<\/p>\n\n<p>When Pete and I hatched a scheme to actually do this, the goal was clear --\nrun the first PHP-centric event in the Greater Toronto Area since 2006. I also\nsaw that we could bring in some awesome speakers because I had made so many\nfriends while speaking at events myself. The event was smaller than I wanted\nit to be, but I quickly realized that we couldn't possibly run something bigger\nthan this with just 2 main organizers (Vic Metcalfe helped out so much over the\nyears).<\/p>\n\n<p>So 5 times we has from 130-150 folks spend the first Friday and Saturday of\nNovember learning about programming in a very chill environment.<\/p>\n\n<p>But it's over. Done. Finished. No more TrueNorthPHP. I did everything I\nwanted to do with this thing, so to me there was no point in doing it any more.\nBetter to go out while on top instead of let this thing linger and end up a\npale shadow of itself. If other people want to run a PHP-centric event in the\nToronto area, I'm happy to offer advice. But it won't be TrueNorthPHP.<\/p>\n\n<p>I'm sure many of you are disappointed. That's okay. Many of you might find it\negotistical that I have identified so strongly with TrueNorthPHP being an\nextension of myself. That's okay too. I didn't do this all just for you, I did\nit to prove something to myself too. I can now add \"was an integral part of a\nsuccessful developer conference\" to my list of \"things I did that are awesome\".<\/p>\n\n<p>But I always get restless. Things that were a challenge become normal, and\nI start doing them without reflecting on their awesomeness. \"Running a\nconference\" is now part of that. But don't worry, I'm not going to stop doing\nthem. I'm just taking what I feel is a well-deserved break from doing this\nsoft of stuff. I've spent almost 20 years as a programmer -- I think I've\nearned a year of relaxing with my wife and concentrating on really small\ntasks...like packing up and moving after 13 years to try and find a Compound\nof Grumpiness in a slightly-rural-but-has-high-speed-internet location.<\/p>\n\n<p>At some point the restlessness will kick in and I will want to run an event.\nI have some ideas -- the early feedback seems interesting but it needs to\npercolate and roll around in my head until I fully figure out what it's\ngoing to be. The likelihood of there being a GrumpyCon in 2018 is very strong.<\/p>\n\n<p>Like I said at the end of my talk, I cannot possibly thank everyone that helped\nme and Pete put on such a great event over the past few years. Instead, I will\nsay \"see you soon\".<\/p>\n",
        "date": "2016-11-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "True North PHP Is Done",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/11\/07\/true-north-php-is-done\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Having done unit tests for so long, there is a tendency to forget that when you\nstart doing QA work you need to make sure your test cases are recorded somewhere\nso they can be found by others later. The test code you write is always there\nin the unit test! Hopefully it makes sense to others.<\/p>\n\n<p>Since I do a QA role, I'm not touching anyone else's unit tests. I end up using\na combination of automation (always in Python and mostly with <a href=\"http:\/\/docs.pytest.org\/en\/latest\">pytest<\/a>) and manual testing. Things like API\ncontract tests (did they add new fields to their API without telling me?!?) or\nscripts written by developers to verify things like \"are the cryptographic\nsignatures for this data still correct\".<\/p>\n\n<p>At Mozilla we use <a href=\"https:\/\/www.bugzilla.org\/\">Bugzilla<\/a> to track pretty much\neverything that we do. Pretty much all of my testing happens when one of the\nprojects I do QA work for is ready to do a new release. A \"bug\" is created, I\nam assigned to it as the QA contact and away we go with the process to get code\napproved by QA for deployment to production.<\/p>\n\n<p>For example, here's me running some scripts and reporting the results along\nwith a question:<\/p>\n\n<p><img src=\"https:\/\/grumpy-learning.s3.amazonaws.com\/e6gv86j8.png\" alt=\"QA feedback\" \/><\/p>\n\n<p>(Turns out I can only run that xml-verifier script in our staging environment)<\/p>\n\n<p>We use <a href=\"https:\/\/pypi.python.org\/pypi\/virtualenv\">virtualenv<\/a> a lot to create small sandboxed environments to run our tests in, and the developers on the <a href=\"https:\/\/github.com\/Kinto\">Kinto Project<\/a> have been very good at creating small little\ntools for me to use to help with testing things.<\/p>\n\n<p>So not only did I have to test that all the signatures remain the same, I also\nneeded to do some manual testing to ensure the admin UI they created works\nas expected.<\/p>\n\n<p>We are starting to use <a href=\"http:\/\/www.gurock.com\/testrail\/\">TestRail<\/a> to track\nour software test cases. One of the goals is to use it's API and make calls to\nit as part of test runs -- we're in the early stages, but that is something\nI am working on this upcoming week.<\/p>\n\n<p>Here's an example of me outlining the manual process of adding some fonts to\nthe collection that <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Mozilla\/Developer_guide\/Build_Instructions\/Simple_Firefox_for_Android_build\">Fennec<\/a> uses.<\/p>\n\n<p><img src=\"https:\/\/grumpy-learning.s3.amazonaws.com\/L8psH5O2.png\" alt=\"Test cases for Kinto Writer\" \/><\/p>\n\n<p>Later in the same \"bug\" about deploying Kinto, I added my notes on doing the\nmanual testing for uploading fonts.<\/p>\n\n<p><img src=\"https:\/\/grumpy-learning.s3.amazonaws.com\/PUzu7ofc.png\" alt=\"Manual testing passed\" \/><\/p>\n\n<p>Python + Pytest + Virtualenv + Bugzilla + TestRails == my tools for testing.<\/p>\n",
        "date": "2016-08-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Tracking Test Cases",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/08\/22\/tracking-test-cases\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I write this I have an iPhone 6S+ that is not working correctly because\nof decisions made by developers and maybe even some managers. Apps randomly\nlock up when I click on some links, but not all of them. It's a known issue\nand one of my friends who works at Apple (Hi Dave) has told me they are working\non a fix.<\/p>\n\n<p>Naturally I used Twitter to rant about it and said \"developer laziness and shitty\nattitudes about testing is why my phone doesn't work correctly now.\" I stand\nby this statement 100% because I have seen time and time again what happens\nwhen deliberate choices about not having formalized, repeatable testing for your\napplication are made. A might-as-well-be-broken phone is one of those.<\/p>\n\n<p>As is expected, some people disagree with me. In fact, one person wrote a blog\npost accusing me of <a href=\"http:\/\/www.zacharyburnham.com\/2016\/03\/28\/on-test-shaming\/\">\"test shaming\"<\/a>\nand outlined why they are currently in a position to not write tests.<\/p>\n\n<p>Zach and I had a long private conversation about his blog post. We disagree on\nmany of the points he made in his blog post, and I won't share all of what we\ntalked about but I wanted to address some things.<\/p>\n\n<p>My mother, as some of you know, is a retired high school teacher who taught\nspecial education courses to her students. She had a saying that her students\nhated to hear from her that she would use when people started complaining about\ntheir problems: \"We're choosers, not losers\".<\/p>\n\n<p>Zach's blog post is full of the choices that he has made and is making but he\nis trying to frame it as if they are not choices at all but immutable\nconstraints on his life. They are choices. Nothing more. Sometimes the choices\nyou are presented with suck. But realize they are choices because that lets\nyou focus on them in a different way.<\/p>\n\n<p>The choices of his that I totally agree with are the ones where he is putting\nhis family first. I never advocate just stomping out of a job with no backup\nplan. The plan I always advocate is \"stay in your job while you look for\nsomething better\". Don't mistake Zach as being lazy or some other nonsense.\nI just disagree with some of his other choices.<\/p>\n\n<p>Programming is hard. Changing cultures is hard. Not everyone can do it. Hell,\nI don't do it all the time successfully. But I stay focused and try to make\nit work.<\/p>\n\n<p>First, I have a day job where I am required to do what my boss tells me or else\nthere are professional consequences. I don't work in academia, I'm not a technical\nmanager, I am not some kind of testing architect. I work with teams of developers\nto figure out ways to write tests that give us high confidence that services\nthat can be used by millions of people work correctly. The stakes are high and\nI like the challenge.<\/p>\n\n<p>I have worked at exactly one place where I was told that tests were a waste of\ntime. Not long after being told that I put into motion plans to leave. I left,\nI still have a good career, and that company is gone and dead. If you find\nyourself continually working for people like that, the problem is how you are\ndeciding to take those jobs.<\/p>\n\n<p>Zach asked me if I would turn down a job if it was awesome but they didn't do\nany testing. The answer is 100% yes. Lack of testing is usually the tip of the\niceberg of suffering you will be slammed into at a job like that. Organizations\nthat commit to testing tend to have other attributes that are extremely useful\nwhen shit goes wrong, which it will.<\/p>\n\n<p>Testing is not a line item on a time card. It is something that you Just Do as\npart of programming. You are informally testing things any way, so why not hold\nonto those tests and make them more permanent. One of these days I need to talk\nto a manager who tells their developers that they are not allowed to write tests,\nif only to write their arguments down so I can refute them as the bullshit they\nare.<\/p>\n\n<p>It is not career suicide to have strong opinions about the positive value of writing\nautomated tests for code and be willing to suffer some short term pain because\nof it. I made it work because it's what I wanted and I was not afraid of any\nlasting consequences. Again, there has been no shortage of people who have asked\nme to come work for them because of these traits. If you care about these things,\nothers will notice. They will ask you to come work for them too.<\/p>\n\n<p>My commitment to testing since 2006 is not some kind of Pyrrhic crusade. It has\nnot ruined my career -- in fact it has done quite the opposite.<\/p>\n\n<p>The old argument about how testing doesn't add to the bottom line is one that I\nhave shown to simply be not true. Bugs that make it into production cost more\nto fix than bugs found by tests when the developer is working on code. Failure\nto understand this is major error on the part of testing critics everywhere.\nIf you are unable to quantify how much mistakes in production code cost you\nwhen compared to what your developers' time costs you, that's on you.<\/p>\n\n<p>Whenever I switch jobs, I do not do it lightly. I too have a family and a long\nstretch of underemployment due to stubbornness would harm my family. But switching\njobs frequently does not hurt your career. I've had 12 jobs in 18 years -- do you\nsee me having problems getting new jobs and making more money with each position?\nThis type of argument aimed at me ignores the early part of my career where I\nbusted my ass working for people while building up the skills on my own time so\nI could do want I wanted. As if my early employers let me spend my work day writing\nbooks or preparing conference talks. All done after work.<\/p>\n\n<p>Finally, when I talk to people about why they should test it is not from a\nthrone of bones in an ivory tower. I have gone in there and worked hard to\nchange cultures to be more open to testing. I have written countless tests and\nhelped developers build their skills. I have worked hard to leave places in a\nbetter state than when I got there.<\/p>\n\n<p>I am not asking for your approval. My message is not condescension but a reminder\nto take ownership of what you do and your choices. 10 years ago I did not imagine\nI would be in this position, but I do not regret anything that has happened\nalong the way. There have been some bad choices, but there were choices I made\nwith an understanding of the consequences to me, my family, and my career.<\/p>\n\n<p>It's true the world isn't always the way we want it. The best way for it to stay\nthat way is to choose to. We're not losers, we're choosers. I want you to choose\na path that leads to success.<\/p>\n",
        "date": "2016-03-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "We're choosers, not losers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/03\/29\/choosers-not-losers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(I'm not sure I've ever done a post on a Leap Day...)<\/p>\n\n<p>At Mozilla a lot of folks make use of automation tools in order to write tests.\nThere's even an entire IRC channel devoted to discussions about it. As I get\ndepper and deeper into my time at Mozilla I now have to think about how to use\nthese tools to accomplish my testing goals. Like my post about <a href=\"https:\/\/littlehart.net\/atthekeyboard\/2016\/02\/03\/containers-and-the-grumpy-tester\/\">using Docker<\/a>\nI wanted to share my first steps in using Marionette, a set of automation tools\nthat focus on driving a browser much in the same way <a href=\"http:\/\/behat.org\">Behat<\/a> does.\nIt's an essential tool for testing all the various versions of the FireFox broswers\nthat Mozilla releases.<\/p>\n\n<p>In this case I'm going to be highlighting the use of <a href=\"https:\/\/pypi.python.org\/pypi\/marionette_driver\/1.1.0\">Marionette Driver<\/a>. This is a Python\nlibrary that allows you to control a browser that has <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Mozilla\/QA\/Marionette\/Builds\">support for Marionette built in<\/a>.<\/p>\n\n<p>As an aside, I find it very encouraging that the major browser companies are\nstarting to build hooks right in to support tools that use the <a href=\"https:\/\/github.com\/w3c\/webdriver\">WebDriver API<\/a>.<\/p>\n\n<p>As the link to Marionette-enabled builds states, support for interacting with\nMarionette is in every recent (as of February 29, 2016) build of Firefox that is\navailable to the public but is not turned on by default. To enable it, you will\nneed to start Firefox from the command line and add a <code>--marionette<\/code> switch.<\/p>\n\n<p>My examples were done on Mac OS-X El Capitan. Specific steps might be different\nfor your environment. So let me run your through a very quick example of how\nMarionette does it's stuff.<\/p>\n\n<p>First, I opened another terminal window and started up a copy of <a href=\"https:\/\/www.mozilla.org\/en-US\/firefox\/developer\/\">Firefox Developer Edition<\/a> and started it up:<\/p>\n\n<p><code>\/Applications\/FirefoxDeveloperEdition.app\/Contents\/MacOS\/firefox --marionette<\/code><\/p>\n\n<p>Once it started, there was a notice that it was ready and listening for connections\non port 2828, which is the default. Next I proceeded to use <a href=\"https:\/\/github.com\/pypa\/virtualenv\">Virtualenv<\/a> to create a sandboxed environment\nfor my code to run in. Once inside this new virtual environment\nI installed the Marionette driver using the version of <a href=\"https:\/\/pip.pypa.io\/en\/stable\/\">pip<\/a>\nthat Virtualenv had thoughtfully installed:<\/p>\n\n<p><code>pip install marionette_driver<\/code><\/p>\n\n<p>With the Marionette driver installed, it was time to do a simple test to make\nsure everything was working. I fired up a Python interpreter (2.7.1) and\ntried to load a web page up the same way the <a href=\"http:\/\/marionette-client.readthedocs.org\/en\/latest\/interactive.html\">old documentation for Marionette client<\/a><\/p>\n\n<p>Here's a very simple example of how to use it:<\/p>\n\n<pre><code>Python 2.7.11 (default, Jan 22 2016, 08:29:18)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import marionette_driver\n&gt;&gt;&gt; from marionette_driver import marionette\n&gt;&gt;&gt; client = marionette.Marionette(host='localhost', port=2828)\n&gt;&gt;&gt; client.start_session()\n{u'rotatable': False, u'raisesAccessibilityExceptions': False, u'takesScreenshot': True, u'acceptSslCerts': False, u'appBuildId': u'20160225004014', u'XULappId': u'{ec8030f7-c20a-464f-9b0e-13a3a9e97384}', u'browserVersion': u'46.0a2', u'specificationLevel': u'1', u'platform': u'DARWIN', u'browserName': u'Firefox', u'version': u'46.0a2', u'device': u'desktop', u'proxy': {}, u'platformVersion': u'15.3.0', u'takesElementScreenshot': True, u'platformName': u'Darwin'}\n&gt;&gt;&gt; client.execute_script(\"alert('o hai there!');\")\n&gt;&gt;&gt; client.navigate(\"http:\/\/www.mozilla.org\")\n&gt;&gt;&gt; client.get_url()\nu'https:\/\/www.mozilla.org\/en-US\/'\n&gt;&gt;&gt; from marionette_driver import By\n&gt;&gt;&gt; first_link = client.find_element(By.TAG_NAME, \"a\")\n&gt;&gt;&gt; first_link.click()\n<\/code><\/pre>\n\n<p>What did I do?<\/p>\n\n<ul>\n<li>loaded the Marionette-driver library<\/li>\n<li>from that library I wanted to use some functionality that's part of <code>marionette<\/code><\/li>\n<li>create a <code>client<\/code> that's connected to a browser running on <code>localhost<\/code> and port 2828<\/li>\n<li>start a session<\/li>\n<li>cause the browser to execute some arbitrary Javascript (an alert in this case)<\/li>\n<li>navigate to a specific page<\/li>\n<li>verify the URL<\/li>\n<li>grab a helper for identifying elements in a page<\/li>\n<li>find the first <code>a<\/code> tag on the page<\/li>\n<li>click that link<\/li>\n<\/ul>\n\n<p>I am just at the beginning of my work using Marionnette (how the heck can I click\non things that are part of the brower itself and not on the HTML page). Hope\nthis little example helps you get started too.<\/p>\n",
        "date": "2016-02-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Marionette -- First Steps",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/02\/29\/marionette-first-steps\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Even with my personal focus on promoting Test-Driven Development I still end up\ndoing a lot of functional testing. For clarification purposes I want to define\na functional test as one where I create an automated test that treats the system\nI'm testing as a black box.<\/p>\n\n<p>In this case I needed to write some functional tests for <a href=\"https:\/\/github.com\/Kinto\/kinto\">Kinto<\/a>.\nKinto is a lightweight storage server that is designed to be distributed-friendly\nand is being used at Mozilla in production RIGHT NOW to handle the SSL certificate\nrevocation list that Firefox uses.<\/p>\n\n<p>Being a big fan of automation, I started to brainstorm ideas on what the ideal\nenvironment for running these tests would look like. So I set on the following\nideas:<\/p>\n\n<ul>\n<li>we should be able to easily start up however many instances of Kinto we need<\/li>\n<li>the test script itself needs to know if it's own dependencies are all set<\/li>\n<li>someone other than me needs to be able to easily use this tool<\/li>\n<\/ul>\n\n<h2 id=\"docker-as-a-new-qa-tool\">Docker as a new QA tool<\/h2>\n\n<p>Before we go any further, please go and buy Chris Tankersley's <a href=\"https:\/\/leanpub.com\/dockerfordevs\">awesome book about Docker<\/a>. Chris is a friend of mine (and current\nPHP Magic: The Gathering champion) and his help in going from knowing nothing\nabout Docker to knowing enough to create something useful was invaluable.<\/p>\n\n<p>For the uninitiated, I will give a gross over-simplification of what Docker is.\nDocker is a set of tools that allow you to create small containers inside which\nyou can run applications. The theory behind this is that is allows you to run\nmultiple applications on the same server. I'm not sure how it works it's magic\non Linux-based systems but on OS-X the tools have you using a Vagrant VM to\nhost all these containers for you. I'm not always comfortable with using tools\nthat appear to be magical to me, but I'm okay with what Docker is doing.<\/p>\n\n<p>In many ways this reminds me of a tool that FreeBSD provided called <a href=\"https:\/\/www.freebsd.org\/doc\/handbook\/jails.html\">jails<\/a>. Back in 2003-2004 the\ncompany I was working for gave us development boxes that worked on that used\njails to simulate what our production environment looked like. I thought it was\na very interesting bit of technology that solved a real problem -- how to\nprovide developers with a solid development environment.<\/p>\n\n<p>Lucky for me the Kinto project already has a <a href=\"https:\/\/hub.docker.com\/r\/kinto\/kinto-server\/\">Docker image we can use<\/a>\nso it seems like a natural thing to try and use. After some conversations with\n<a href=\"https:\/\/twitter.com\/dragonmantank\">Mr. Tankersley<\/a> it appeared what I needed\nwas to use <a href=\"https:\/\/docs.docker.com\/compose\/\">Docker Compose<\/a>. Docker Compose\nlets you start multiple containers at once, create links with them, and do\nall sorts of other interesting things with them.<\/p>\n\n<p>Initially I had a grand plan for using Docker Compose. I was going to spin up\ncontainers for two different Kinto instances and then two <a href=\"http:\/\/postgresql.org\">PostgeSQL<\/a>\nservers and then they can talk to each other and then it's going to be awesome\nand I will look like a goddamn genius!<\/p>\n\n<p>Like so many of plans, things started off super complicated and then eventually\ngot pared down to what I really needed. I ran into all sorts of problems with\nmy initial scheme because I ended up with basically what amounted to a race\ncondition happening.<\/p>\n\n<p>I need to spin up the database containers FIRST and then run some database\nmigrations and OH MY GOD WHY IS THIS ALL SO COMPLICATED.<\/p>\n\n<p>After banging my head unsuccessfully against this problem, I took a step back\nand figured out what it was I really needed to create this environment. After\ncalming down and telling imposter syndrome to hit the road, I took a closer look\nat what the Kinto containers were doing and realized it was fine to use the\ndefault of creating a small in-memory database for storing things.<\/p>\n\n<p>This is a test that is designed to be run in a continuous integration\nenvironment so it doesn't really need any permanence. So with that issue out\nof the way, I tweaked my Docker Compose configuration file until I was happy\nwith it:<\/p>\n\n<pre><code>master:\n  image: kinto\/kinto-server\n  ports:\n   - \"8888:8888\"\nread-only:\n  image: chartjes\/kinto-read-only\n  ports:\n   - \"8889:8889\"\n<\/code><\/pre>\n\n<p>I created a <a href=\"https:\/\/hub.docker.com\/r\/chartjes\/kinto-read-only\/\">custom Docker image<\/a>\nfor this. I suppose it has a terrible name because it's not <em>really<\/em> a read-only\ninstance but it's playing the role of the \"only read by Firefox\" side of the\ntesting environment.<\/p>\n\n<p>Do when you run <code>docker-compose<\/code> in the directory with this docker-compose.yml\nfile, it will spin up two containers that are running two different Kinto\nservers.<\/p>\n\n<h2 id=\"semi-intelligent-testing-scripts\">Semi-intelligent testing scripts<\/h2>\n\n<p>Next up was to write some tests. Right now we do our tests in Python using the\nawesome <a href=\"https:\/\/github.com\/pytest-dev\/pytest\">pytest<\/a> testing tool. I wanted\nto make sure that the test would gracefully fail if our Docker containers\nweren't up and running so I hacked together some code that goes in the\n<code>setup<\/code> method for the test.<\/p>\n\n<pre><code>def setUp(self):\n    # Figure out what the IP address where the containers are running\n    f = os.popen('which docker-machine')\n    docker_machine = str(f.read()).strip()\n\n    if string.find(docker_machine, \"\/docker-machine\") == -1:\n        print(\"Could not find docker-machine in our path\")\n        exit()\n\n    f = os.popen('%s ip default' % docker_machine)\n    ip = str(f.read()).strip()\n\n    # Set our master and read-only end points and create our test bucket\n    self.master_url = \"http:\/\/%s:8888\/v1\/\" % ip\n    self.read_only_url = \"http:\/\/%s:8889\/v1\/\" % ip\n    self.credentials = ('testuser', 'abc123')\n    self.master = Client(server_url=self.master_url, auth=self.credentials)\n    self.read_only = Client(server_url=self.read_only_url, auth=self.credentials)\n    self.bucket = self.get_timestamp()\n    self.master.create_bucket(self.bucket)\n    self.read_only.create_bucket(self.bucket)\n<\/code><\/pre>\n\n<p>As with all code examples I put up here, I'm open to feedback and corrections.<\/p>\n\n<h2 id=\"time-for-that-test\">Time for that test<\/h2>\n\n<p>The scenario I'm going to share is a very simple one that accurate duplicates\na use case: someone alters the collection of data and those changes need to\nget replicated over to a different server.<\/p>\n\n<p>The test should make sense because I made sure to add comments<\/p>\n\n<pre><code>def test_sync(self):\n    # Generate some random records\n    collection = self.get_timestamp()\n    self.master.create_collection(collection, bucket=self.bucket)\n    self.read_only.create_collection(collection, bucket=self.bucket)\n    for x in range(10):\n        self.read_only.create_record(\n            data=self.generate_record(),\n            bucket=self.bucket,\n            collection=collection)\n\n    # Pause and generate some more random records on the master end-point\n    time.sleep(3)\n    for x in range(5):\n        self.master.create_record(\n            data=self.generate_record(),\n            bucket=self.bucket,\n            collection=collection)\n\n    # Get the timestamp of our last record by doing an HTTP query of the\n    # read-only collection and grabbing the value from the header\n    response = self.read_only.get_records(bucket=self.bucket, collection=collection)\n    last_record = response[-1]\n    since = last_record['last_modified']\n\n    # Query the master using that value for all the records since that one\n    new_records = self.master.get_records(bucket=self.bucket, collection=collection, _since=since)\n\n    # Add those records to our read-only end-point\n    for data in new_records:\n        new_data = {'internal_id': data['internal_id'], 'title': data['title']}\n        self.read_only.create_record(data=new_data, bucket=self.bucket, collection=collection)\n\n    master_records = self.master.get_records(bucket=self.bucket, collection=collection)\n    read_only_records = self.read_only.get_records(bucket=self.bucket, collection=collection)\n\n    # We should have 5 records in master and 15 in read-only\n    self.assertEquals(5, len(master_records))\n    self.assertEquals(15, len(read_only_records))\n\n    # Clean up our collections\n    self.master.delete_collection(collection, bucket=self.bucket)\n    self.read_only.delete_collection(collection, bucket=self.bucket)\n<\/code><\/pre>\n\n<p>Again, very straight forward. Like I've told people many times -- writing tests\nis just like writing code, and the test code doesn't need to be fancy. It just\nneeds to accurate execute the test scenario you have in mind.<\/p>\n\n<h2 id=\"always-be-evaluating\">Always Be Evaluating<\/h2>\n\n<p>As a tester I'm always looking for tools that I think can provide real value to\nme and help with testing scenarios. It's still early days with Docker and it\n(along with associated tools) are only getting better. If you've been struggling\nwith a way to try and build a reasonably-sandboxed environment to run functional\ntests in, I encourage you to take a look at what I've done here and copy it to\nyour advantage.<\/p>\n\n<p>The tests I've been working on can be found inside <a href=\"https:\/\/github.com\/mozilla-services\/services-test\">this GitHub repo<\/a><\/p>\n",
        "date": "2016-02-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Containers And The Grumpy Tester",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/02\/03\/containers-and-the-grumpy-tester\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yesterday I gave a short talk at <a href=\"https:\/\/twitter.com\/_GPUG_\">GPUG<\/a> about a topic I've dubbed\n\"metatesting\". Borrowing the phrase from a <a href=\"http:\/\/magic.wizards.com\">children's card game<\/a>\nI wanted to talk about the state of testing and associated tools.<\/p>\n\n<p>While giving the talk I noticed I was a little rusty in my delivery. I've only\nspoken twice in the past 12 months but I think I have the makings of another\nsolid talk based on what I did here.<\/p>\n\n<p>Enjoy the video!<\/p>\n\n<video id=\"metatesting\" class=\"video-js\" controls preload=\"auto\" width=\"640\" height=\"264\">\n    <source src=\"https:\/\/s3.amazonaws.com\/grumpy-learning\/metatesting.mp4\" type=\"video\/mp4\">\n    <p class=\"vjs-no-js\">\n      To view this video please enable JavaScript, and consider upgrading to a web browser that\n      <a href=\"https:\/\/videojs.com\/html5-video-support\/\" target=\"_blank\">supports HTML5 video<\/a>\n    <\/p>\n  <\/video>\n\n<script src=\"https:\/\/vjs.zencdn.net\/5.5.3\/video.js\"><\/script>\n",
        "date": "2016-01-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Metatesting",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/01\/28\/metatesting\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(This is a re-post from my <a href=\"http:\/\/grumpy-learning.com\/newsletter\">newsletter<\/a>.\nSign up to get this material when it first comes out)<\/p>\n\n<p>Hello fellow testers! It's a new year and my 19th as a software developer, which\nis crazy when I actually sit down and think about it. I hope you had an\nenjoyable holiday break and going back yesterday didn't stress you out too much.<\/p>\n\n<p>This week I wanted to talk about an interesting testing tool that was created\nby the driving force behind Mockery, P\u00e1draic Brady. It's called <a href=\"https:\/\/github.com\/padraic\/humbug\">Humbug<\/a> and it\nis a mutation testing tool.<\/p>\n\n<p>Mutation testing is a process by which you alter the actual source code by\ninjecting small changes, then re-running the unit tests. The idea behind it is\nthat if unit tests are designed to make sure\nyou haven't introduced any regressions into your code, \"mutating\" tiny bits of\nit should be caught by your tests.<\/p>\n\n<p>Based on P\u00e1draic's comments, it seems he feels that mutation testing is more\nvaluable than aiming for high code coverage. He states that it's \"intended to\nhelp you judge how well your unit tests actually perform and where they could\nbe improved\"<\/p>\n\n<p>He wrote up a <a href=\"http:\/\/blog.astrumfutura.com\/2015\/01\/lies-damned-lies-and-code-coverage-towards-mutation-testing\/\">nice long article about it<\/a>\nand it's a very interesting perspective to take. The interesting thing I took\nfrom it is what is the real value behind mutation testing.<\/p>\n\n<p>If you deliberately change something in your code and the unit test fails,\nthat unit test was actually good! If it passes then it means you probably have\na defect in your code that you didn't think about. Time to take a look\nat that mutation and figure out what needs to be changed.<\/p>\n\n<p>There are so many good points in his article that I suggest you read it for\nyourself and decide if you think it's a useful tool. I think it is definitely\nworth running it a few times on your code base, if only to watch it in action.<\/p>\n\n<p>I'm afraid it will show some horribleness in the <a href=\"https:\/\/github.com\/opencfp\/opencfp\">OpenCFP<\/a> code base...<\/p>\n",
        "date": "2016-01-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Mutation Testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2016\/01\/16\/mutation-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>PHP turns 20 years old today. What was once a collection of libraries created\nby a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Rasmus_Lerdorf\">Danish-Canadian programmer<\/a> \nto make creating web sites easier is now powering a ridiculously high percentage\nof the internet. To all the PHP haters I say \"CHECK THE SCOREBOARD\".<\/p>\n\n<p>I first encountered PHP either in 1997 or 1998. I literally cannot remember\nwhen I first used it. All I do remember is that I needed to find something that\nwas free to use because the company I was working for at the time did not want\nto pay for licenses for using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Active_Server_Pages\">ASP<\/a>.<\/p>\n\n<p>I built my first PHP application -- a web\nsite that allowed you to enter the name of an artist or song title and see if\nit existed in the MySQL database I set up using CSV dumps from a Microsoft\nAccess database.<\/p>\n\n<p>I had no idea that the decision to use PHP would end up being the thing that\nbuilt a career that is now 18 years long and counting.<\/p>\n\n<p>I quickly figured out there were other people using PHP -- my early searches\nusing AltaVista revealed a whole world of other people stumbling around trying\nto figure out how to get PHP to do things. In retrospect it's surprising that\nPHP is still essentially a collection of wrappers around C libraries that are\nused to pull information out of databases and display them on a web page.<\/p>\n\n<p>That led me to figure out a way to go to my first PHP conference back in 2005\nin Toronto at the Holiday Inn across from the Yorkdale shopping centre. I\nharassed my manager to go, even offering to do a talk when I get back on the\ninteresting things that I discovered. I think they eventually gave in just to\nshut me up, and two other colleagues of mine joined me for that conference.<\/p>\n\n<p>True story -- I happened to walk into the hotel lobby at the same time as\n<a href=\"http:\/\/derickrethans.nl\/\">Derick Rethans<\/a> and he mistook me for someone that\nhe knew. Of course, I didn't know who he was at the time but I quickly figured\nit out. Brush with greatness!<\/p>\n\n<p>That was also the first time I got to see Rasmus speak at a conference. His\ntalks haven't really changed that much over the past 10 years -- same sort of\nslides, and he just keeps showing us more and more why PHP is still one of the\nbest tools for building web applications.<\/p>\n\n<p>Once I went to that conference, I was hooked. I wanted to be part of this\nbigger community. I think watching people give presentations flipped the bits\nin my brain related to teaching. As the son of a high school teacher I suppose\nthe potential was always lurking in there. I spoke at a conference for the\nfirst time in 2006 (I spoke about what PHP folks could learn from the success\nof Ruby on Rails) and I decided I never wanted to stop doing it.<\/p>\n\n<p>Speaking gave me the confidence to experiment and try and do things that I\nreally wanted to do. I got involved in an open source project (CakePHP) and\nperfected my trolling skills on the mailing list. I tried to find other people\nwho thought that automated tests would save their future selves from their\ncurrent selves. All the while trying to get more involved in the PHP community.<\/p>\n\n<p>This led to more talks, and books, and videos, and still more talks, and a PHP\nuser group, and even more talks, and flying to Europe to speak, and more books,\nand even helping to organize a PHP conference.<\/p>\n\n<p>The awesome career (and I know it is the height of ego to suggest that you\nhave an awesome career, but I do not think you can look at what I have done\nobjectively and not say it's turned out really, really well) I have is 100%\nbecause of PHP.<\/p>\n\n<p>At times when I worried more about making money than being happy I thought\nabout switching away from PHP. In fact, back in 2005 I turned down a job with\na friend of mine where I would've morphed into a very early Ruby on Rails\nadopter. I have no idea what would've happened, but somehow I think that\nyou could do 's\/PHP\/Ruby\/g' in my life and it would've been pretty close.<\/p>\n\n<p>One person's creation has ended up powering the careers of thousand and\nthousands of people. Thanks Rasmus for helping me unlock my potential and\ncreate a PHP monster who has shared his thoughts on Twitter more than\n70000 times.<\/p>\n",
        "date": "2015-06-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHP Created This Monster",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2015\/06\/08\/php-created-this-monster\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I got an email from Daniele earlier this morning about the post I did talking\nabout <a href=\"https:\/\/littlehart.net\/atthekeyboard\/2014\/10\/31\/web-acceptance-tools-suck\/\">how web acceptance tools suck<\/a> and\nthey were kind enough to share their thoughts on how they felt I was (to use\ntheir words) \"facing the problem in the wrong way\".<\/p>\n\n<p>They went on to describe how I should just separate the front-end from the\nback-end to make testing the app as a whole easier. They shared a link\nto a project where they had done that so <a href=\"https:\/\/github.com\/fourlastor\/playlist\">go take a look<\/a>.<\/p>\n\n<p>I don't find much wrong with that approach but it has a hole in it big enough\nto throw my ego through without scraping the sides. Daniele, this has nothing\nto do with you and everything to do with a mind set that continually comes up\nin our industry.<\/p>\n\n<p>The incredible casualness with which we tell people that the solution to all\ntheir problems is to refactor things.<\/p>\n\n<p>Just stop it. Stop telling me that. Stop telling other people that. It reflects\nthat you have given no thought to the other person's situation. Do they have\nthe time to refactor? Do they have permission to refactor? Are they even skilled\nenough to refactor the app in such a way to make it better? These are all legitimate\nquestions. Blindly recommending refactoring isn't the solution.<\/p>\n\n<p>In my case for my current work-related activities, there is zero chance we will be\ndoing the kind of refactoring that Daniele is very-helpfully recommending. Why?\nThe application in question works and brings in money. So the app in it's current\nform needs to stay up and keep working. So that means I need to find the least-invasive\nway possible to test the application's UI.<\/p>\n\n<p>There are other refactorings I am doing (moving the app from ZF1 to ZF2 is among\nthem) but those take time and have to ensure the existing application doesn't\ncrash and burn due to those changes. I suspect I may be ending up buying a bunch\nof over-worked QA people in Kiev a nice thank-you present when they finish the\nextensive testing I need them to do.<\/p>\n\n<p>Send me your thoughts and ideas on Twitter or to chartjes@grumpy-learning.com<\/p>\n",
        "date": "2014-12-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Stop Telling Me To Refactor",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2014\/12\/14\/stop-telling-me-to-refactor\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Wow. Almost a whole year since I posted something. Time to change that.<\/p>\n\n<p>It is not a coincidence that I write this blog post on Halloween 2014. Because\nI want to talk about something that should make your skin crawl and want to \nturn all the lights on in the location where you are reading this.<\/p>\n\n<p>I am talking, of course, about writing automated web acceptance tests.<\/p>\n\n<p>At ZendCon2014 I did a talk about how to use <a href=\"http:\/\/behat.org\">Behat<\/a> and\n<a href=\"http:\/\/mink.behat.org\">Mink<\/a> to write some automated acceptance tests for\nyour web sites. You know, the type of thing where you drive a browser using\nsome code and it pretends to click on things...and you lie to yourself about\nwhat value all this work is giving you.<\/p>\n\n<p>I also made the classic mistake of waiting too long to go over my slides for\nthis talk and realized I was using versions of these tools that were extremely\nout of date. I then spent 6 hours updating the code, instead of watching my\nfriends give awesome talks about PHP and complementary technologies.<\/p>\n\n<p>This sucked. Sucked big time.<\/p>\n\n<p>As far as I can tell, we are currently at the point in the PHP community with \nthese tools like unit testing tools were 10 years ago when I first decided I\nneeded to find ways to never work 120 hours of overtime in 6 weeks leading\nup to Christmas ever again.<\/p>\n\n<p>Behat and Mink are both very powerful tools, but their documentation is\nlacking and the code samples review what I think is a very large disconnect\nbetween how the creators of these tools use them and how the rest of us use\nthem. I have no idea if there is even any blame to be handed out, unless you\nsubscribe to the theory that shitty documentation is the fault of the people\nwho created the projects in question.<\/p>\n\n<p>I am not diminishing the work of those who created these things. They are\ngreat programmers, and I am just a grumpy guy who wants things to work a\ncertain way and not act like obstacles. I like my tools to be complementary\nand easy to figure out how to bend to my will.<\/p>\n\n<p>But when I look at how brittle these things are, and how slow they are, it\nmakes me wonder if I wasted my time learning how to use them.<\/p>\n\n<p>For those who don't understand what I am getting at, or think I am acting like\nthe drama queen they secretly hope I am, consider this -- the best way to\nidentify elements on a web page is to use tools that expect you to either\nfully understand CSS and also how XPath works.<\/p>\n\n<p>Folks, this is a shit show.<\/p>\n\n<p>Now, it is entirely possible I am simply Doing It Wrong, and will be happy\nto be corrected. Take a look at the code in <a href=\"https:\/\/github.com\/chartjes\/wat-zendcon14\">this repo<\/a>\nAND DESPAIR. This code is brittle, has to maintain state between test steps\nmanually, and the tests take forever to run because you have the overhead\nof starting up a browser and painfully crawling through the DOM to find things.<\/p>\n\n<p>(By the way, who is the person that decided the DOM was the best way to internally\nrepresent elements on a web page? If it was Tim Berners-Lee, well, it strikes me\nas a decision that is biting us in the ass now but was probably totally logical\nat the time)<\/p>\n\n<p>I am hopeful that someone out there is working on a better set of abstractions\nand tools that will make the types of things we are asking Behat and Mink and\nPage Objects and PhantomJS to do a lot better.<\/p>\n\n<p>Send me your thoughts and ideas on Twitter or to chartjes@grumpy-learning.com\nand I will do a follow-up post.<\/p>\n",
        "date": "2014-10-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Web Acceptance Tools Suck",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2014\/10\/31\/web-acceptance-tools-suck\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While recording some screencasts I was struggling to figure out how to\nget PHPUnit's built-in object mocking tools to allow me to create what is\nknown as a \"test spy\". I talk about them briefly in my <a href=\"http:\/\/grumpy-phpunit.com\">PHPUnit Cookbook<\/a>\nbut I think that what I wanted to do in this instance was beyond what PHPUnit\ncould give me.<\/p>\n\n<p>I had some code-under-test that had a conditional statement inside a foreach()\nloop (aggravating my desire to use <a href=\"http:\/\/www.slideshare.net\/rdohms\/bettercode-phpbenelux212alternate\">object calisthenics<\/a>)\nand I wanted to make sure that both branches of the conditional statement got\nexecuted.<\/p>\n\n<p>I first tried something like this:<\/p>\n\n<pre><code>    \/\/ $db is our mocked database object based off stdClass for testing\n    $db-&gt;expects($this-&gt;once())\n        -&gt;method('query')\n        -&gt;with($update, ['id' =&gt; 1]);\n    $db-&gt;expects($this-&gt;once())\n        -&gt;method('query')\n        -&gt;with($delete, ['id' =&gt; 5]);\n<\/code><\/pre>\n\n<p>I was using <a href=\"http:\/\/auraphp.com\/manuals\/v1\/en\/sql\/\">Aura.Sql<\/a> and it's Update\nand Delete objects. I wanted to be sure that I was using both objects.<\/p>\n\n<p>I also tried using <em>$this->at(0)<\/em> and <em>$this->at(1)<\/em> as well, I got errors\nranging from \"method query was not mocked\" to problems complaining about\nexpected values not showing up at the expected sequence.<\/p>\n\n<p>I knew there had to be a better way, but I really wanted just to use PHPUnit's\nbuilt-in mocking. I couldn't figure it out. So instead I turned to a mocking\nlibrary that I knew supported test spies: <a href=\"https:\/\/github.com\/padraic\/mockery\">Mockery<\/a>.<\/p>\n\n<p>The code reads a lot smoother:<\/p>\n\n<pre><code>    \/\/ m is an alias to \\Mockery\n    $db = m::mock('stdClass');\n    $db-&gt;shouldReceive('query')-&gt;with($update, ['id' =&gt; 1])-&gt;once();\n    $db-&gt;shouldReceive('query')-&gt;with($delete, ['id' =&gt; 5])-&gt;once();\n<\/code><\/pre>\n\n<p>The first thing that jumps out at me is that the Mockery version looks cleaner.\nWell, really, it's only one less chained call. But looks do count for something.<\/p>\n\n<p>More importantly, my test worked the first time with no weird error messaging\nabout unexpected behaviour.<\/p>\n\n<p>So the next time you are writing a unit test and need to create spies on\nmethods of a mocked object, I cannot recommend enough that you take a look\nat Mockery.<\/p>\n",
        "date": "2013-12-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Test Spies and Mockery",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/12\/27\/test-spies-and-mockery\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At <a href=\"http:\/\/synacor.com\">work<\/a> I have been involved with an effort to put some\nautomated front-end testing in place. The combination of <a href=\"http:\/\/behat.org\">Behat<\/a>,\n<a href=\"http:\/\/mink.behat.org\">Mink<\/a> running tests using <a href=\"http:\/\/phantomjs.org\">PhantomJS<\/a>\nis a good one for this. Open source, easy to configure, handles JavaScript-heavy\npages reasonably well.<\/p>\n\n<p>There was just one wrinkle in our plans: our use of local host files.<\/p>\n\n<p>Somewhere back in the mists of time it was decided that in order to properly\ntest our web applications without pummelling our production assets (like\nimage farms, content servers, API end points) that a \"hostfile generator\"\nwould be created and is accessible on every machine in our development VM\nnetwork.<\/p>\n\n<p>You hit <hostname>\/hosts and it spits out a file that you can use on your\nlaptop to alias production assets \/ resources \/ whatever to things on your\ndevelopment server. I use a program on my MacBook called <a href=\"http:\/\/www.clockwise.ee\/gasmask\/\">Gas Mask<\/a>\nthat lets me quicky switch between host files when testing out sites on\nvarious development boxes. I am sure a similar tool exists for Windows and\nLinux users.<\/p>\n\n<p>So, initially the only way to make Behat play nicely with the host files was\nto manually over-write the \/etc\/hosts file on the development server with\nthe host-specific one the generator gives us. That way all the host aliases\nin place.<\/p>\n\n<p>This is fine and all, but I am pretty sure our sysadmins would never allow\nthe user that runs our continuous integration jobs have the proper permissions\nto  overwrite the host files. If a test run were to crash and generate fatal\nerrors, we would end up with a machine with a bad host file in place.<\/p>\n\n<p>So clearly what was needed was a proxy. After doing a little bit of digging\naround I found a solution: <a href=\"http:\/\/bmp.lightbody.net\/\">BrowserMobProxy<\/a>. While\nit bills itself as a tool for helping web developers \"watch and manipulate\nnetwork traffic from their AJAX applications\" it also has a feature that\nis of great interest to our problem: it supports the ability to create aliases\nto hosts...oddly enough just like we do with our host files at work.<\/p>\n\n<p>So, BrowserMobProxy is great in that you can send requests to REST-style but\nI didn't want to mess around with manual calls, so I was happy to find that\nmy friend <a href=\"http:\/\/element34.ca\">Adam Goucher<\/a> had written a PHP library for\ninteracting with it. I forked his code, cleaned it up a little and it's\nnow available via <a href=\"https:\/\/packagist.org\/packages\/chartjes\/php-browsermob-proxy\">Packagist<\/a>\nand ready to install via <a href=\"http:\/\/getcomposer.org\">Composer<\/a>.<\/p>\n\n<p>So, let's get started with what I did.<\/p>\n\n<p>Here's my composer.json file for the project<\/p>\n\n<pre><code>{\n    \"require\": {\n        \"behat\/behat\": \"2.4.*@stable\",\n        \"behat\/mink\": \"1.4@stable\",\n        \"behat\/mink-extension\": \"*\",\n        \"behat\/mink-goutte-driver\": \"*\",\n        \"behat\/mink-selenium2-driver\": \"*\",\n        \"chartjes\/php-browsermob-proxy\" \"dev-master\",\n        \"sauce\/connect\": \"&gt;=3.0\",\n        \"sauce\/sasuage\": \"&gt;=0.5\",\n    },\n    \"config\": {\n        \"bin-dir\": \"bin\/\"\n    }\n}\n<\/code><\/pre>\n\n<p>We are experimenting with using <a href=\"http:\/\/sauce.io\">SauceLabs<\/a> for testing our\nsites on mobile devices (in case you were wondering).<\/p>\n\n<p>With that stuff installed, I next downloaded a copy of BrowserMobProxy (herafter referred to as BMP) and\ncopied the CLI runner and JAR files into the 'bin' directory. Next, I installed\nPhantomJS in \/usr\/local\/bin on my server.<\/p>\n\n<p>Next, we setup our Behat configuration file to point to PhantomJS when doing\nour tests using Selenium2's web driver capabilities:<\/p>\n\n<pre><code>phantomjs:\n    context:\n        class: \"FeatureContext\"\n    extensions:\n        Behat\\MinkExtension\\Extension:\n            default_session: selenium2\n            javascript_session: 'selenium2'\n            base_url: http:\/\/synacor.com\n            selenium2:\n                wd_host: http:\/\/127.0.0.1:4444\/wd\/hub\n<\/code><\/pre>\n\n<p>Now, we get to the tricky part.<\/p>\n\n<p>BMP requires you to connect to it first to get it to start a\nproxy connection running on a <em>different<\/em> port than the one the main service\nruns on. In my Behat test runner script I use the PHP BMP library to create\na connection, and it assigns it to the first available port in a range you\ncan specify at run time.<\/p>\n\n<p>Because I can count on this value to be the same all the time, I then start\nup an instance of PhantomJS telling it to run in \"accept requests like I am\nWebDriver compatible\" proxy all requests through BMP<\/p>\n\n<pre><code>\/usr\/local\/bin\/phantomjs --webdriver=4444 --proxy=http:\/\/localhost:9091\n<\/code><\/pre>\n\n<p>In my Behat context class I add in a step that reads in the host file via\nour host file generator and assigns the host aliases to BMP so that when\nBehat uses PhantomJS to load web pages, it will use the host aliases set\nwithin BMP.<\/p>\n\n<p>I know that it's pretty convoluted, but I know with 100% certainty that it\nworks.<\/p>\n\n<p>If you spot anything here that doesn't make sense, let me know and I will\nupdate the post.<\/p>\n",
        "date": "2013-11-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Power of the BrowserProxyMob",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/11\/18\/the-power-of-the-browserproxymob\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was asked a question on Twitter by <a href=\"https:\/\/twitter.com\/tex_morgan\">Tex Morgan<\/a> \nabout a problem he was having with <a href=\"http:\/\/phpunit.de\/manual\/current\/en\/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers\">PHPUnit data providers<\/a>. He was trying to pass in some data and kept wondering\nwhy PHPUnit was serializing the data instead of doing what he was expecting.<\/p>\n\n<pre><code>public function preLoaderArrayDataProvider()\n{\n    return array(\"one\" =&gt;\n        array(\n            'http:\/\/yahoo.com',\n            'http:\/\/google.com',\n            'http:\/\/facebook.com',\n            'http:\/\/twitter.com'\n        ), \"two\" =&gt;\n        array(\n            \"http:\/\/jquery.com\",\n            \"http:\/\/jqueryui.com\"\n        )\n    );\n}\n\n\/** testSetArray\n * @dataProvider   preLoaderArrayDataProvider\n *\/\npublic function testSetArray($array)\n{\n    $this-&gt;expected = true;\n    $this-&gt;actual = $this-&gt;object-&gt;setArray($array);\n    $this-&gt;assertEquals($this-&gt;expected, $this-&gt;actual);\n}\n<\/code><\/pre>\n\n<p>I see what Mr. Morgan was trying to do, and more importantly why it wasn't\nworking. The problem he was running into has to deal with how PHPUnit expects\ndata to be sent by the data providers.<\/p>\n\n<p>The method under test is expecting one parameter that consists of an array.\nData providers are supposed to return an array of arrays, where each element\nof the inner array maps to a parameter the method under test is expecting.<\/p>\n\n<p>So what went wrong? The data provider is passing in 5 strings as a parameter.\nHere's the results:<\/p>\n\n<pre><code>PHPUnit 3.7.28 by Sebastian Bergmann.\n\nFF\n\nTime: 28 ms, Memory: 2.50Mb\n\nThere were 2 failures:\n\n1) TexTest::testSetArray with data set \"one\" ('http:\/\/yahoo.com', 'http:\/\/google.com', 'http:\/\/facebook.com', 'http:\/\/twitter.com')\nFailed asserting that false matches expected true.\n\n\/Users\/chartjes\/src\/php-test-bootcamp-practice\/tests\/TexTest.php:29\n\n2) TexTest::testSetArray with data set \"two\" ('http:\/\/jquery.com', 'http:\/\/jqueryui.com')\nFailed asserting that false matches expected true.\n\n\/Users\/chartjes\/src\/php-test-bootcamp-practice\/tests\/TexTest.php:29\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 2.\n<\/code><\/pre>\n\n<p>The fix is easy. The method under tests is expecting one parameter that is an\narray, so let's give it one.<\/p>\n\n<pre><code>public function preLoaderArrayDataProvider()\n{\n    return array(\"one\" =&gt;\n        array(\n            array(\n                'http:\/\/yahoo.com',\n                'http:\/\/google.com',\n                'http:\/\/facebook.com',\n                'http:\/\/twitter.com'\n            )\n        ), \"two\" =&gt;\n        array(\n            array(\n                \"http:\/\/jquery.com\",\n                \"http:\/\/jqueryui.com\"\n            )\n        )\n    );\n}\n<\/code><\/pre>\n\n<p>The result?<\/p>\n\n<pre><code>PHPUnit 3.7.28 by Sebastian Bergmann.\n\n..\n\nTime: 17 ms, Memory: 2.25Mb\n\nOK (2 tests, 2 assertions)\n<\/code><\/pre>\n\n<p>Problem solved. Hope this helps you give a better understanding of how\nPHPUnit data providers work.<\/p>\n",
        "date": "2013-10-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Data providers and arrays",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/10\/26\/data-providers-and-arrays\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you follow me online at all you are probably aware that I help organize\n<a href=\"http:\/\/truenorthphp.ca\">TrueNorthPHP<\/a>, a PHP-centric conference for developers.\nThis is the second time I've helped out, and I have been watching with a mixture\nof horror and fear how social media networks are filling up with tales of\nexcessive alcohol consumption and sexual assaults of female attendees at\nconferences.<\/p>\n\n<p>I know people hate talking about this sort of stuff, but I am keenly aware\nof the ridiculous amount of privilege I have in this society. White, male,\nover 40, heterosexual, married, well-paid, working in technology. Some of\nthis has been earned, much of it just handed to me.<\/p>\n\n<p>As I briefly <a href=\"https:\/\/twitter.com\/grmpyprogrammer\/status\/389825655460073472\">mentioned on Twitter<\/a>\nmy goal is to try and create an environment where people can meet and find\ncommon ground. Sure, there will always be assholes who wreck if for you.\nSometimes those assholes are the conference organizers themselves. Ultimately,\nthe responsibility for the attendees feeling wanted, engaged and safe belongs\nto the organizers.<\/p>\n\n<p>As I see it, there are two major concerns for a conference organizer in late\n2013: too much alcohol makes people uncomfortable, and harassment of women\nby attendees. I wanted to share my thoughts on both.<\/p>\n\n<p>I intend on enforcing a zero-tolerance-for-bullshit-behaviour policy at the conference.\nThis includes harassing people based on gender, sexual preference, country of\norigin. In short, if you act like an asshole and I find out, chances are you\nwill be escorted out personally with no refund. It's not hard to avoid acting\nin an unacceptable way, and never mind your own incorrect opinions on free\nspeech and the consequences that come with it.<\/p>\n\n<p>It's a shame that I have to say things like this to other adults, because I \nwould prefer to trust people to know what is acceptable in such an environment.<\/p>\n\n<p>Second, clearly, there is an alcohol problem in general at conferences. There\nis a huge cultural component to it (bros want to slam down the brewskis) and\nmany people who do not drink alcohol (for whatever reason) are made to feel\nuncomfortable with not drinking it. The cheers when people hear that there\nis an open bar, the jokes about people not attending talks on the second day\nbecause they are hungover. I could go on, but I think you get the idea.<\/p>\n\n<p>In a culture where drinking, often to excess, is acceptable to a large percentage\nof the population, this is very tough battle. Personally, I am looking to offer\nfree alcohol at the conference but in very limited amounts. The conference venue\ndoesn't allow any on-site alcohol so your only chance to have a drink on me \nis at our party on the Saturday. Which is at a bar near the venue.<\/p>\n\n<p>If you don't drink alcohol, come and sit with me at the restaurant and I will\nmake sure you are welcomed and not uncomfortable. I don't need to drink alcohol to\nsocialize with my friends and peers, and neither will you. Being with a bunch\nof strangers is intimidating enough without feeling pressure to conform.<\/p>\n\n<p>Third, people still have the attitude that computer programming should be one\nbig sausage party. Women are expected to \"know their place\" and go along\nwith all the crude humour and intimidating behaviour that those who think\nwomen are inferior are supposed to just endure with a smile. When I see\ncomments like \"you're encroaching on a safe place for males\" it makes me\nwant to physically confront them about their incredibly wrong ideas.<\/p>\n\n<p>I worked hard to attract women speakers who would provide interesting content\nto my conference. Did things go as well as I thought they could? No, it never\ndoes. I could've worked harder to seek out more talented women speakers, but\nthere is only so much time and the list of things a conference organizer\nhas to think about is long.<\/p>\n\n<p>Any female attendees for TrueNorth can feel comforted that I will be 100%\napproachable and 100% on your side should you be subject to any objectionable\nbehaviour by any attendee. As the father of two girls, I already see the \nbullshit they are being asked to put up with simply because of their gender.\nI won't go along with letting it happen to you.<\/p>\n\n<p>If you come to our Saturday social and are feeling uncomfortable, again, join\nme at my table and I will work my hardest to make sure you are as comfortable\nas I will be.<\/p>\n\n<p>Last year, the conference was awesome and I didn't hear any complaints. That\ndoesn't mean things didn't happen, and part of me wonders if many suffered in\nsilence because they thought complaining wouldn't change anything.<\/p>\n\n<p>I want you to enjoy yourselves at TrueNorthPHP, with an\nunderstanding that binge-drinking and harassment of attendees is something\nthat will absolutely not be tolerated or promoted by the organizers.<\/p>\n\n<p>The goal is to spend 2 days learning and sharing things about PHP and related\ntechnologies, while also having a good time in an environment where you should\nexpect to be looked after and feel safe.<\/p>\n\n<p>Don't hesitate to track me down and ask me about ANYTHING while at the \nconference. I am here to help you.<\/p>\n",
        "date": "2013-10-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Booze, babes, and buttholes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/10\/14\/booze-babes-and-buttholes\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had an idea to put together some kind of \"PHP Testing Koans\" site as a way\nto help PHP developers get better at learning how to actually write tests. Most\ndevelopers who are introduced to testing get blocked at the point of actually\nwriting a test. This, in my opinion, has been part of my advocacy that I \nhave been struggling to find a good way to teach to people.<\/p>\n\n<p>So I started to brainstorm ways to make it happen. With some help from <a href=\"https:\/\/twitter.com\/jclermont\">Joel Clermont<\/a>\nI stumbled upon using test listeners for this.<\/p>\n\n<p>To be completely fair, I first ran across test listeners when <a href=\"https:\/\/twitter.com\/old_sound\">Alvfaro Videla<\/a>\nshowed me a blog post he had written on how to <a href=\"http:\/\/videlalvaro.github.io\/2013\/04\/using-rabbitmq-in-unit-tests.html\">write unit tests for RabbitMQ<\/a>.\nIt's a very imaginative use of them, so I wondered if I could bend those test\nlisteners to my will.<\/p>\n\n<p>From a high-level view, test listeners in PHPUnit are bits of code designed\nto be executed whenever a test suite or individual test is run. For the example\nof dealing with RabbitMQ, this makes total sense.<\/p>\n\n<p>Imagine how happy I was to find that I could use it to determine if a particular\ntest existed. So how did I do it?<\/p>\n\n<pre><code>&lt;?php\n\nclass Koan1Listener extends PHPUnit_Util_Printer implements PHPUnit_Framework_TestListener\n{\n    private $expected_tests = array();\n    private $found_tests = array();\n\n    public function __construct()\n    {\n        $this-&gt;expected_tests = array('testHelloWorld');\n    }\n\n    public function __destruct()\n    {}\n\n    public function startTestSuite(PHPUnit_Framework_TestSUite $suite)\n    {\n    }\n\n    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)\n    {\n        foreach ($this-&gt;expected_tests as $test) {\n            if (!in_array($test, $this-&gt;found_tests)) {\n                throw new Exception(\"Missing test {$test}\");\n            }\n        }\n    }\n\n    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {}\n\n    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)\n    {}\n\n    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {}\n\n    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)\n    {}\n\n    public function startTest(PHPUnit_Framework_Test $test)\n    {\n        $test_names = get_class_methods($test);\n\n        foreach ($test_names as $test_name) {\n            $this-&gt;found_tests[] = $test_name;\n        }\n    }\n\n    public function endTest(PHPUnit_Framework_Test $test, $time)\n    {}\n}\n\n<\/code><\/pre>\n\n<p>When you create a listener, you are implementing all the required methods\nfor <em>PHPUnit_Framework_TestListener<\/em>. You can see that there are a lot of\nthem, but in this instance all we needed were <em>endTestSuite<\/em> and <em>startTest<\/em>.<\/p>\n\n<p>The approach is simple: for each test class that gets executed, add the names\nof all the methods to an internal list. When the entire test suite is finished,\nwe then check to see if the test names that we were expecting are in our\nlist of methods we found. I am sure there is a more efficient way to do it, \nso let me know in the comments of a different approach.<\/p>\n\n<p>In the case of the example listener, I wanted to make sure that the person\ndoing the first exercise has a test called <em>testHelloWorld<\/em> written. As more\nkoans (or whatever you want to call them) get created, I can use test listeners\nto make sure that all the tests, and data providers, and internal class methods\ndesigned to improve code reuse are actually getting written.<\/p>\n\n<p>Despite all my years of using these tools, I still find things that I didn't \nknow about that can be (ab)used to accomplish certain goals.<\/p>\n\n<p>I hope you find that something you thought you couldn't figure out becomes\npossible using test listeners.<\/p>\n",
        "date": "2013-09-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Listeners",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/09\/27\/test-listeners\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As part of a project to migrate the PHP code at <a href=\"http:\/\/synacor.com\">work<\/a>\nfrom PHP 5.2 to PHP 5.4, I'm using our extensive test suite to look for instances\nwhere something that changed between the versions of PHP that we are using\nhas caused some unexpected behaviour.<\/p>\n\n<p>In one of our code bases, I found some tests that are exhibiting a test smell\nthrough their use of a try \/ catch block in the test itself.<\/p>\n\n<p>Here's a totally-contrived example:<\/p>\n\n<pre><code>    &lt;?php\n    public function testThatExceptionIsThrown()\n    {\n        \/\/ Use a helper to give us a ready-to-go parser\n        $parseHelper = $this-&gt;getHelper('parseHelper');\n\n        \/**\n         * If we pass a string as the first parameter to parseGrumpyRambling\n         * instead of an array, we should get an exception generated because\n         * we are using a type hint\n         *\/\n        try {\n            $weirdCanadianWords = '';\n            $phrase = \"No doot aboot it, we're gonna win at hockey!\";\n            $parsedText = $parseHelper-&gt;parseGrumpyRambling(\n                $weirdCanadianWords,\n                $phrase\n            );\n            $this-&gt;fail();\n        } catch (Exception $e) {\n            $this-&gt;assertContains(\n                'must be of the type array, string given',\n                $e-&gt;getMessage()\n            );\n        }\n    }\n<\/code><\/pre>\n\n<p>Okay, so why does this test offend me so much?<\/p>\n\n<p>First, I am of the opinion that writing a test to check to make sure you are\nenforcing type hinting for your class method parameters is probably not a\ngood use of your time. I mean, what potential problem are you catching?<\/p>\n\n<p>Consider the following:<\/p>\n\n<ul>\n<li>you likely have access to info about what type of value each parameter\nis expected to be<\/li>\n<li>you are probably much better off filtering for parameter type before you\neven call that method<\/li>\n<\/ul>\n\n<p>I can say with confidence that a test like this is returning very little\nvalue for the effort.<\/p>\n\n<p>Second, putting any logic inside your unit tests is a great way to end\nup with unexpected results. Need an \"if\" statement? Write two tests\nfor that condition. Need a switch \/ case? Again, one test per case is a\nmuch better way to logically divide things up.<\/p>\n\n<p>The worst thing about using try \/ catch is that <em>PHPUnit gives you two built-in\nmethods to not ever have to use it<\/em>. I've had people say to me \"but Chris,\nif you use try \/ catch you get much better control over determining where\nin the process to test that the exception was thrown.\" I don't buy it, and\nI will try and explain why.<\/p>\n\n<p>If you are using docblocks on your tests (which you should) it is super easy\nto indicate what exception you are expecting to be thrown.<\/p>\n\n<pre><code>    &lt;?php\n    \/**\n     * @expectedException Exception\n     * @expectedExceptionMessage must be of the type array \n     *\/\n    public function testThatExceptionIsThrown()\n    {\n        \/\/ Use a helper to give us a ready-to-go parser\n        $parseHelper = $this-&gt;getHelper('parseHelper');\n\n        \/**\n         * If we pass a string as the first parameter to parseGrumpyRambling\n         * instead of an array, we should get an exception generated because\n         * we are using a type hint\n         *\/\n        $weirdCanadianWords = '';\n        $phrase = \"No doot aboot it, we're gonna win at hockey!\";\n        $parsedText = $parseHelper-&gt;parseGrumpyRambling(\n            $weirdCanadianWords,\n            $phrase\n        );\n    }\n<\/code><\/pre>\n\n<p>Now we have a much cleaner-looking test with no conditional logic inside it.<\/p>\n\n<p>You can also choose to use a built in PHPUnit method to set what exception\nyou are expecting.<\/p>\n\n<pre><code>    &lt;?php\n    public function testThatExceptionIsThrown()\n    {\n        $this-&gt;setExpectedException(\n            'Exception',\n            'must be of the type array'\n        );\n\n        \/\/ Use a helper to give us a ready-to-go parser\n        $parseHelper = $this-&gt;getHelper('parseHelper');\n\n        \/**\n         * If we pass a string as the first parameter to parseGrumpyRambling\n         * instead of an array, we should get an exception generated because\n         * we are using a type hint\n         *\/\n        $weirdCanadianWords = '';\n        $phrase = \"No doot aboot it, we're gonna win at hockey!\";\n        $parsedText = $parseHelper-&gt;parseGrumpyRambling(\n            $weirdCanadianWords,\n            $phrase\n        );\n    }\n<\/code><\/pre>\n\n<p>Again, a much cleaner-looking test with no conditional logic in sight.<\/p>\n\n<p>On Twitter Brian Fenton shared a <a href=\"http:\/\/www.brianfenton.us\/2011\/09\/bad-practice-setting-expected.html\">blog post<\/a>\nhe wrote back in 2011 that disagrees with me. In it he very briefly talks about\nwhy you should use try \/ catch in your tests, but I feel like he is contradicting\nhimself when he talks about why.<\/p>\n\n<p>Basically, Brian is concerned about how @expectedException and <em>setExpectedException()<\/em>\ncan be triggered by other errors in your tests (including other exceptions\nbeing unexpectedly triggered. He feels that by using try \/ catch you have\nmuch better control over when and where you wish to trigger an exception.<\/p>\n\n<p>To quote Brain's post:<\/p>\n\n<blockquote>\n  <p>\"The basic idea here is that the most specific test is best, because\n  you have the least likelihood of a false negative or a test error slipping\n  through the cracks.\"<\/p>\n<\/blockquote>\n\n<p>If you are making sure that every test is the most specific test that you\ncan write, then you NEVER have to worry about whether or not some other\ncode under test is throwing an exception or other error that is messing up\nthe current test.<\/p>\n\n<p>Using try-catch because you want to not miss errors that might occur before\nyou deliberately throw an exception is a sign that you are doing too much\nin that test.<\/p>\n\n<p>A test failure is a test failure, no matter what caused it. The harder you\nwork to make sure that a test is actually testing the most specific thing\npossible, the less likely you have to worry about the things that Brian\nfeels require him to use try \/ catch.<\/p>\n\n<p>This is the same reason I don't like seeing tests like this:<\/p>\n\n<ul>\n<li>do Task A<\/li>\n<li>do an assertion on the results of Task A<\/li>\n<li>do Task B<\/li>\n<li>do an assertion on the results of Task B<\/li>\n<\/ul>\n\n<p>Those are really two separate tests, so split them up. In fact, you could \nwrite two tests that look like this:<\/p>\n\n<ul>\n<li>do Task A<\/li>\n<li><p>do an assertion on results of Task A<\/p><\/li>\n<li><p>do Task A<\/p><\/li>\n<li>do Task B<\/li>\n<li>do an assertion on the results of Task B<\/li>\n<\/ul>\n\n<p>That second test doesn't need to re-assert that Task A did it's job because\nTask A was already covered in the previous test.<\/p>\n\n<p>Test smells, testing anti-patterns, whatever you want to call them, do exist\nand many programmers are often unaware of the consequences of those decisions\nare.<\/p>\n\n<p>Keep your tests small, keep them very specific, and don't use conditional\nlogic in your tests. I have yet to see a specific example where the use\nof conditional logic did anything except reduce the amount of lines of\ncode a grumpy developer didn't want to type.<\/p>\n",
        "date": "2013-04-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Smells - try\/catch",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/04\/30\/testing-smells-try-catch\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My co-worker <a href=\"https:\/\/twitter.com\/chipersoft\">Jarvis<\/a> wrote a blog post\nabout how he <a href=\"http:\/\/chipersoft.com\/p\/I-Dont-Care-About-Your-Culture\/\">doesn't care about your company culture<\/a>.<\/p>\n\n<p>I don't know what prompted this blog post, but I disagree with many fundamental\nparts of it. Jarvis seems like a decent guy (have only met him online and not\nyet in person) but I think Jarvis is making a mistake that many people (not\njust software developers) make: thinking that the rest of the world should\nthink like you when it clearly doesn't.<\/p>\n\n<p>Initially I was going to make a point-by-point takedown of his blog post, but\nhalfway through it I realized I was being an asshole. So instead I want to\ndiscuss where I think he's wrong.<\/p>\n\n<p>I mentioned on Twitter to Jarvis that it's just as important to work on your\nco-workers as all the other things you do. He said two interesting things in\nresponse:<\/p>\n\n<ul>\n<li>\"This is what I don't like about big companies\"<\/li>\n<li>\"I work on computers, not people\"<\/li>\n<\/ul>\n\n<p>First, I've worked at places both big and small. There is nothing inherently\nbetter about either type. Do not kid yourself thinking only great things\nhappen at small companies. Great things happen when groups of smart people\nget together and are given permission to go make it happen.<\/p>\n\n<p>I've seen it work at large places where managers \"ran interference\" so their\nemployees could make stuff happen. I've seen small places stifle creativity\nin their employees out of fear of change.<\/p>\n\n<p>It's not the size of the company that matters, it's how they choose to work\ntogether that matters.<\/p>\n\n<p>The second point is the one where I think Jarvis has made the biggest mistake\nin his approach.<\/p>\n\n<p>We work FOR people USING computers. The computer is a tool\nto achieve a goal. Those goals are achieved by working with others, whether\nyou wish to believe that or not.<\/p>\n\n<p>As someone who has worked from home for a long time, I understand and\nsympathize with many of the things Jarvis indicates that bug him. Noise\nfrom co-workers, drive-by meetings, feeling pressure to participate in\nsocial activities.<\/p>\n\n<p>But at the end of the day, to accomplish anything of substance requires me\nto interact with others in REAL TIME. I have proven that I can both get work\ndone AND not be such an asshole that others choose to ignore the remote\nworker instead of working hard to integrate me into the team.<\/p>\n\n<p>I find that socializing with my co-workers is a good way to learn about the\npeople I work with, so that when I need something from them later they are\nless likely to say \"why the fuck should I help that guy?\" I need their help\nas much as they need mine.<\/p>\n\n<p>Of course, I don't think this bit at the end helps much:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>I am extremely productive in this setting. For five years I have cranked out more code in this room than many people have written in their entire careers.<\/p>\n    \n    <p>I am exceedingly good at my job and I am sick of being told that my lack of cultural involvement makes me a bad employee.<\/p>\n    \n    <p><em>mic drop<\/em><\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>Disrespecting co-workers isn't always the smartest move. Failing to understand\nwhy others think that being aloof and distant and insisting that results matter\nmore than how you treat people isn't always the smartest move either.<\/p>\n\n<p>Tech is not a meritocracy, despite our wishes for it to be. Jarvis, you're not\nalone in wanting people to just leave you the hell alone so you can get some\nwork done. I am that way many times, but I make sure to create those bonds\nwith my co-workers so that the amount of time that I spend with them is\nenjoyable instead of resenting the time there.<\/p>\n\n<p>Nothing creates bonds of friendship like a shitty job, but being friendly with\nyour co-workers costs you nothing but a little time, time you're probably\nspending doing horrible things like reading the comments on Hacker News.<\/p>\n",
        "date": "2013-03-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's Guide To Software Company Culture",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/03\/30\/grumpy-culture\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Today is my 42nd birthday, which is 420 in internet years. I am feeling old\nbut thankful that I have so many friends who keep lying to me and saying I'm\nnot a programming dinosaur.<\/p>\n\n<p>I haven't done one of these blog posts in a while, so I thought I would solicit\nsome ideas from my Twitter followers and address a few of them.<\/p>\n\n<h1 id=\"can-i-unit-test-in-140-characters-or-less%3F\">Can I unit test in 140 characters or less?<\/h1>\n\n<p>No. Testing, in general, does not lead itself to brevity. The tools we use\nto test our code in an automated fashion can only abstract so much away from\nus before we actually have to write some code.<\/p>\n\n<p>Large amounts of setup work is a sign that perhaps your code-under-test is\ndoing too much. Sometimes it is unavoidable if you are using dependency\ninjection to create multiple dependencies.<\/p>\n\n<p>Of course, \"large\" is also subjective. I would offer my opinion on what \"large\namounts of setup work\" means to me, but that would just lead to people arguing\nwith me about testing when I'd rather argue about why dick jokes spoken at\nconferences are the tip of the metaphorical iceberg that represents white male\nprivilege in the tech industry.<\/p>\n\n<p><em>sigh<\/em><\/p>\n\n<h1 id=\"what-are-your-favourite-vim-plugins%3F\">What are your favourite Vim plugins?<\/h1>\n\n<p>I group the plugins I use into two categories: \"essential\" and \"everything else\".\nRight now, I only have four essential plugins:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-pathogen\">Pathogen<\/a> for organizing my plugins<\/li>\n<li><a href=\"https:\/\/github.com\/ervandew\/supertab\">Supertab<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/scrooloose\/syntastic\">Syntastic<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-surround\">Surround.vim<\/a><\/li>\n<\/ul>\n\n<p>All other plugins swap in and out depending on my mood and whatever problems\nI am attempting to solve in code. Right now I've got the following<\/p>\n\n<ul>\n<li><a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=13\">Closetag<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/kien\/ctrlp.vim\">Ctrl-P<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/scrooloose\/nerdcommenter\">NERD Commenter<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/scrooloose\/nerdtree\">NERD Tree<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/troydm\/pb.vim\">pb.vim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/kchmck\/vim-coffee-script\">Vim CoffeeScript<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/airblade\/vim-git-gutter\">Vim Git Gutter<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/pangloss\/vim-javascript\">vim-javascript<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-repeat\">repeat.vim<\/a><\/li>\n<\/ul>\n\n<h1 id=\"is-grumpy-cat-your-cat%3F\">Is Grumpy Cat your Cat?<\/h1>\n\n<p>No.<\/p>\n\n<h1 id=\"life-as-a-unicorn-in-canada\">Life as a unicorn in Canada<\/h1>\n\n<p>This was asked tongue-in-cheek by my <a href=\"https:\/\/twitter.com\/PolarLava\">boss<\/a>, who \nrefers to me as his \"Canadian unicorn\" because of my unique status within \nthe company  but\nI think it's actually better re-framed as \"what is it like working in a senior\nrole when you are remote?\"<\/p>\n\n<p>First, my co-workers go to great lengths to make sure that myself and the\ntwo other remote workers in a group of over a dozen (I cannot remember all\nthe people who are on the other team that makes up our group) are integrated\ninto all decisions.<\/p>\n\n<p>We have been experimenting with using Google+ Hangouts as a way for all the\nremote workers to see what's going on in the office. Despite my initial\nreservations that it's simply a way for nervous management to keep an eye on\nus I think it has worked out well. They've created a permanent \"remote station\"\nand people have walked up to it to find one of us and ask us directly a\nquestion.<\/p>\n\n<p>It's growing on me, and I have also started looking at this awesome site on\n<a href=\"http:\/\/remotepairprogramming.com\/\">making remote pair programming smoother<\/a> \nfor inspiration on how to make it better. I already use my iPad as my \"personal device\"\nwhile working from home, so it seems natural to start using it as my visual gateway\ninto the office.<\/p>\n\n<p>Second, because I am remote and therefore trusted to work for long stretches\nof time with Eyeball Supervision (a.k.a walking up behind you and asking what\nyou're working on) you get assigned tasks that can be done by one person\n(sometimes two if the other can be dedicated to the task) and take a while\nto do.<\/p>\n\n<p>Unless you make the commitment to do remote pair-programming (which I have\ndone with great success) you should get used to working on stuff in a directly-unsupervised\nfashion.<\/p>\n\n<p>This suits me just fine.<\/p>\n\n<p>Finally, make sure that everyone who has to work with you knows that just because\nyou are remote does not mean that you are unwilling to do one-on-one communication\nwith people. I have a soft phone that work has provided me, and I get phone calls\nfrom co-workers asking me stuff. I do Skype calls and lots of text chats.<\/p>\n\n<p>In other words, I probably talk to my co-workers about work-related stuff\nas much as anyone else in the office.<\/p>\n\n<p>What I miss out on are the social events that happen. That sucks, but I always\nmake sure to do something at my end (and expense it ;) ) very similar to \nwhat my co-workers are doing. If they get pizza during a tech presentation, I\nmake sure to order myself something similar.<\/p>\n\n<p>Remember, being remote does not mean that you are invisible.<\/p>\n\n<h1 id=\"productivity-and-task-management-tips\">Productivity and task management tips<\/h1>\n\n<p>How does this grumpy guy get things done while working remotely?<\/p>\n\n<ul>\n<li>pay attention in meetings so that you are not forced into positions that\nare untenable for you<\/li>\n<li>work hard to get everything done that you have promised to do<\/li>\n<li>work hard to communicate with everyone because you can't just walk over to\ntheir cubicle \/ office to bitch at them for not getting stuff done on your own\nschedule<\/li>\n<\/ul>\n\n<p>That's it really. Get stuff done, do good work, and there will be fewer and\nfewer excuses for your employer to prevent others from reaping the rewards\nof your trail-blazing efforts.<\/p>\n\n<h1 id=\"a-day-in-the-life-of-a-grumpy-programmer\">A Day in the life of a Grumpy Programmer<\/h1>\n\n<ul>\n<li>woken up at 6am by the Office Manager, who is seeking cat treats for himself\nand the HR Manager<\/li>\n<li>lay in bed in a daze until 6:45am when my wife is showered, dressed and heads\ndownstairs.<\/li>\n<li>wake kids up at 7am and putter around getting breakfast and lunches together<\/li>\n<li>throw kids out of the house between 8am and 8:15am so they are not late for\nschool<\/li>\n<li>have breakfast, work out, shower and start my day<\/li>\n<\/ul>\n\n<p>For the rest, just follow me on Twitter to get a feel for my mood. ;)<\/p>\n",
        "date": "2013-03-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - Birthday Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/03\/24\/whats-in-chris-brain-birthday-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After I wrote my <a href=\"http:\/\/grumpy-testing.com\">first Leanpub book<\/a> I would get\nasked all the time on how to use PHPUnit itself. Again, much like the information\nI put into the \"Grumpy Testing\" book, I found lots of shallow information on\nhow to use PHPUnit itself.<\/p>\n\n<p>I did some research <a href=\"http:\/\/unicornfree.com\/30x500\">30x500 style<\/a>, worked\non my pitch while writing the book, and on March 4th I launched <a href=\"http:\/\/grumpy-phpunit.com\">\"The Grumpy Programmer's PHPUnit Cookbook\"<\/a>.<\/p>\n\n<p>This book is a collection of the most common tips and techniques I use myself\nto write effective and quick tests for PHP code. If you've ever wondered\nhow to create mock objects, or wanted to know how to test code that uses\nremote API calls, my book will help you.<\/p>\n\n<p>As my way of saying thank you to those who read my blog, you can use the code\nGRUMPYFEED to get $5 off my book for the next week.<\/p>\n\n<p>As always, I welcome your feedback via email (chartjes@littlehart.net) or\nTwitter (@grmpyprogrammer).<\/p>\n",
        "date": "2013-03-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's PHPUnit Cookbook launched",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/03\/07\/grumpy-phpunit-launched\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>To paraphrase Batman:<\/p>\n\n<blockquote>\n  <p>\"Programmers are a cowardly, superstitious lot\"<\/p>\n<\/blockquote>\n\n<p>Programmers often look to external sources for validation of\nall sorts of things they do. Did they choose the right\nlanguage? Are they writing good code? Will they be\naccepted by their peers.<\/p>\n\n<p>Of course, there are those who are leaders within a \ncommunity. Those who manage to do great things\nbut with an idiosyncratic way of doing things.\nLet's call these people shamans. In many ways\nprogramming is a mystical thing: you conjure\nup solutions to problems using tools that\noften require strange incantations.<\/p>\n\n<p>For those who pay attention to the workings of the PHP community\nyou might have heard about the \"PHP Standards Recommendations\"\nthat have been coming out of the <a href=\"http:\/\/www.php-fig.org\/\">PHP Framwork Interop Group<\/a>.<\/p>\n\n<p>It's first contribution was <a href=\"https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-0.md\">PSR-0<\/a>, which covers recommended standards for\nautoloading of PHP code (no more remembering to require\/include files\nany more to load your class files), then followed by <a href=\"https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-1-basic-coding-standard.md\">PSR-1<\/a> (which covers basic coding standards) and <a href=\"https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-2-coding-style-guide.md\">PSR-2<\/a> which is about a coding style guideline.<\/p>\n\n<p>More recently this group has been working on a standard for logging \ninterfaces called <a href=\"https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-3-logger-interface.md\">PSR-3<\/a>.<\/p>\n\n<p>I spoke about this on Twitter, and I will repeat it here: \nI think PHP programmers should get behind PSR-0 and efforts like\nPSR-3. I feel that PSR-1 and PSR-2 are solutions looking for\na problem and seem, to me anyway, to me out of place with\nthe solutions offered by PSR-0 and PSR-3.<\/p>\n\n<p>Standards that are enforced by the community have a power\nthat people really don't understand. The classic example of\nthis are the <a href=\"http:\/\/www.python.org\/dev\/peps\/\">Python Enhancement Proposals<\/a>.\nThey cover a incredible range of ideas and concepts that a Python\ndeveloper needs to worry about.<\/p>\n\n<p>PEP-8, which covers coding standards, is probably the one most\ncasual Python programmers are familiar with. The whole community followed\nit, which might have been easier due to Python's use of significant\nwhitespace. But more importantly, it was championed by\nPython's Benevolent Dictator For Life, Guido van Rossum.\nHe was able to use his soapbox as the guiding force behind it.<\/p>\n\n<p>PSR-1 and PSR-2 are generating a lot of, well, pissing and moaning \nfrom people. I get it: I often grind my teeth when looking at\ncode written in a style that deviates quite a bit from my\nnormal coding style and practices.<\/p>\n\n<p>However, it's far more important to be able to understand\nwhat the code is doing. PSR-0, in my opinion, serves to standardize\napplication layout for the purpose of making it easier to\nload classes you need in your code. PSR-3 (and similar interface\nstandard recommendations) serves to allow you to integrate\n3rd party code with yours a lot quicker.<\/p>\n\n<p>Standards, soapboxes and shamans are an integral part of\nany programming community that wants to move forward and keep\nproducing better and better tools and applications. Any programming\nlanguage community that does not work as hard as possible to\nmake it easier to integrate other's libraries of code together\nis asking for irrelevancy.<\/p>\n",
        "date": "2013-01-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Standards, soapboxes, and shamans",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/01\/20\/standards-soapboxes-and-shamans\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It was one year ago today that I released <a href=\"http:\/\/grumpy-testing.com\">\"The Grumpy Programmer's Guide To Building Testable PHP Applications\"<\/a>. 650+ customers later (about 10% of those are free copies) \nI am happy with some of the outcomes, and unhappy about others.<\/p>\n\n<p>Just for the sake of openness, here's an awesome ASCII bar graph made with\n<a href=\"https:\/\/github.com\/stefanschramm\/barg\">barg<\/a> to show you week-by-week sales\ncounts and numbers. I apologize for the scrolling you might have to do to see it.<\/p>\n\n<pre>\nWeek Starting          #  Paid\n2012-01-09 00:00:00-05 56 $673.06 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| \n2012-01-16 00:00:00-05 29 $306.05 |||||||||||||||||||||||||||||||||||||||||                                         \n2012-01-23 00:00:00-05 17 $95.00  ||||||||||||||||||||||||                                                          \n2012-01-30 00:00:00-05 19 $203.50 |||||||||||||||||||||||||||                                                       \n2012-02-06 00:00:00-05 17 $160.00 ||||||||||||||||||||||||                                                          \n2012-02-13 00:00:00-05 7  $73.05  ||||||||||                                                                        \n2012-02-20 00:00:00-05 14 $162.2  ||||||||||||||||||||                                                              \n2012-02-27 00:00:00-05 7  $89.71  ||||||||||                                                                        \n2012-03-05 00:00:00-05 6  $69     ||||||||                                                                          \n2012-03-12 00:00:00-04 7  $70.93  ||||||||||                                                                        \n2012-03-19 00:00:00-04 15 $128.67 |||||||||||||||||||||                                                             \n2012-03-26 00:00:00-04 55 $356.97 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||   \n2012-04-02 00:00:00-04 11 $131.00 |||||||||||||||                                                                   \n2012-04-09 00:00:00-04 1  $8.50   |                                                                                 \n2012-04-16 00:00:00-04 25 $277.30 ||||||||||||||||||||||||||||||||||||                                              \n2012-04-23 00:00:00-04 16 $157.83 |||||||||||||||||||||||                                                           \n2012-04-30 00:00:00-04 8  $95.00  |||||||||||                                                                       \n2012-05-07 00:00:00-04 7  $81.50  ||||||||||                                                                        \n2012-05-14 00:00:00-04 8  $75.04  |||||||||||                                                                       \n2012-05-21 00:00:00-04 13 $43.00  ||||||||||||||||||                                                                \n2012-05-28 00:00:00-04 2  $21.50  ||                                                                                \n2012-06-04 00:00:00-04 19 $149.41 |||||||||||||||||||||||||||                                                       \n2012-06-11 00:00:00-04 8  $74.42  |||||||||||                                                                       \n2012-06-18 00:00:00-04 10 $92.00  ||||||||||||||                                                                    \n2012-06-25 00:00:00-04 7  $30.00  ||||||||||                                                                        \n2012-07-02 00:00:00-04 11 $104.08 |||||||||||||||                                                                   \n2012-07-09 00:00:00-04 14 $157.47 ||||||||||||||||||||                                                              \n2012-07-16 00:00:00-04 3  $26.99  ||||                                                                              \n2012-07-23 00:00:00-04 3  $34.50  ||||                                                                              \n2012-07-30 00:00:00-04 11 $120.50 |||||||||||||||                                                                   \n2012-08-06 00:00:00-04 4  $43.00  |||||                                                                             \n2012-08-13 00:00:00-04 10 $108.00 ||||||||||||||                                                                    \n2012-08-20 00:00:00-04 4  $47.50  |||||                                                                             \n2012-08-27 00:00:00-04 7  $82.00  ||||||||||                                                                        \n2012-09-03 00:00:00-04 6  $55.50  ||||||||                                                                          \n2012-09-10 00:00:00-04 6  $464.98 ||||||||                                                                          \n2012-09-17 00:00:00-04 6  $62.01  ||||||||                                                                          \n2012-09-24 00:00:00-04 3  $34.50  ||||                                                                              \n2012-10-01 00:00:00-04 5  $61.40  |||||||                                                                           \n2012-10-08 00:00:00-04 55 $624.92 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||   \n2012-10-15 00:00:00-04 21 $218.78 ||||||||||||||||||||||||||||||                                                    \n2012-10-22 00:00:00-04 16 $169.50 |||||||||||||||||||||||                                                           \n2012-10-29 00:00:00-04 6  $105.00 ||||||||                                                                          \n2012-11-05 00:00:00-05 12 $120.00 |||||||||||||||||                                                                 \n2012-11-12 00:00:00-05 4  $43.00  |||||                                                                             \n2012-11-19 00:00:00-05 10 $112.02 ||||||||||||||                                                                    \n2012-11-26 00:00:00-05 9  $101.25 |||||||||||||                                                                     \n2012-12-03 00:00:00-05 15 $159.00 |||||||||||||||||||||                                                             \n2012-12-10 00:00:00-05 6  $72.30  ||||||||                                                                          \n2012-12-17 00:00:00-05 13 $142.03 ||||||||||||||||||                                                                \n2012-12-24 00:00:00-05 4  $38.50  |||||                                                                             \n2012-12-31 00:00:00-05 1  $13.90  |                                                                                 \n<\/pre>\n\n<p>What am I disappointed about? I think, to use the old expression, I left a lot\nof money on the table. I could've charged more for the book, but this was\nbefore I started learning more about the marketing of info products and\nhow to do research to find solutions to problems people are experiencing.<\/p>\n\n<p>Setting that aside, I think my Testing Crusade is paying dividends for the\ncommunity as a whole. The more developers who are exposed to the ideas\nthat people like myself are promoting, the higher quality code that\nis likely to be produced.<\/p>\n\n<p>If you're a customer of mine, thanks so much for supporting my efforts through\nyour paid contributions. Writing automated tests and code that you can easily test doesn't have to suck.\nI can show you how to do it, and I look forward to bringing you more of it\nin 2013.<\/p>\n",
        "date": "2013-01-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "One year of Grumpy Testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/01\/11\/one-year-of-grumpy-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Every once in a while I come across a blog post or a presentation that helps\nme figure out something that has been bothering but I was having problems\narticulating. Lately I've been struggling to come up with strategies to help\ndevelopers figure out when they should REALLY be writing tests for their code.<\/p>\n\n<p>If you believe in the power of TDD, then the answer is \"you write tests from\nthe beginning of the project and forever after.\" I am a believer that TDD can\nbe a very powerful design tool for building things at the unit \/ module \/ component\nlevel.<\/p>\n\n<p>Then some people asked me my thoughts on the comments by the creator of the\nRails project about the usefulness of dependency injection. As happens when\nI am feeling frustrated, I started firing out the tweets on my feelings on\ntesting and the lonely Crusade that I am on.<\/p>\n\n<p>Then I saw a talk by Dan North called <a href=\"http:\/\/www.infoq.com\/presentations\/Decisions-Decisions\">\"Decisions, Decisions\"<\/a> at the recommendation of <a href=\"https:\/\/twitter.com\/ianbarber\">Ian Barber<\/a> that made me realize that someone else has articulated my feelings on\nwhen you should be doing testing. Slides for the presentation can be found\n<a href=\"http:\/\/qconlondon.com\/dl\/qcon-london-2012\/slides\/DanNorth_DecisionsDecisions.pdf\">here<\/a>.<\/p>\n\n<p>You should watch the whole presentation. So many decisions about programming\nare made without understanding, REALLY understanding the trade-offs involved\nwhen making one decision vs. another.<\/p>\n\n<p>Let's look at TDD vs. Test whenever. The trade-off being made here is not\nabout quality of code or guarding against regressions. It's about opportunity cost.\nThis had occurred to me but I had dismissed it as being \"anti-testing\".<\/p>\n\n<p>But I think I was wrong, and here's why.<\/p>\n\n<p>In that awesome presentation he talks about \"patterns\" he observed on the team\nhe was working with at the time. He was amazed at how much work this team was\ngetting done, so he spent time analyzing what they were doing and trying to\nturn some of their activities into patterns of behaviour. Repeatable processes\nare good, right?<\/p>\n\n<p>The one that he saw being related to writing was a pattern he called \"Spike\nand Stabilize.\" Basically, you write code without any tests until it becomes\na solid part of your application's architecture. Once this code has proven\nit's usefulness, you start writing comprehensive tests in order to verify\nthat it is in fact doing the job and doesn't break going forward.<\/p>\n\n<p>This is so obvious to me now. Clearly, you are leaving yourself open to the\npotential of writing not just application code but testing code that gets\ntossed away if the idea you are implementing is unable to prove it's value.<\/p>\n\n<p>Opportunity cost is huge and often dismissed by developers too. If you have\nsome prototype code, or even functionality with a half-life measured\nin 3-month-increments, what else could be worked on while tests for this\ncode are being written?<\/p>\n\n<p>Could this hybrid approach be an easier sell to skeptical managers or\nother stakeholders? That's hard to say. The \"too busy to write tests\"\ncamp still has many members, and is still seems that it takes catastrophic\nfailures before many people join the Testing Crusade.<\/p>\n\n<p>To be perfectly clear: I find great value in prototyping code and then\ncommitting to tests once the prototype is ready to move to a more stable\nenvironment.<\/p>\n\n<p>I try and do prototyping before I commit to writing code, because I often\nfeel that way. My prototypes are usually command-line scripts that try\nand accomplish the task I've been assigned. That way, it's easier to\nactually write some tests once I know what I'm doing and guard against\nregressions later.<\/p>\n\n<p>The key to all this is being able to identify at what stage in this particular\npattern your code is at. Is it still a spike, meaning you are working out\nimplementation details and trying to figure out if it will even have the\ndesired result? Or is it stable, providing solid value to the application \nas a whole and ready to be wrapped in tests to protect against regressions?<\/p>\n\n<p>Next time you are thinking about \"I need some tests for this\", consider the\nSpike and Stabilize pattern. The answer might be \"you need tests...but not yet.\"<\/p>\n",
        "date": "2013-01-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "You need tests...just not yet",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2013\/01\/07\/you-need-tests-just-not-yet\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>2012 was a very interesting year for me. It started with me being tired\nand unhappy...and this year ended with me being tired and unhappy. For\ndifferent reasons, though.<\/p>\n\n<p>I had a much different blog post written, and decided to scrap it in favour\nof a different approach. Buckle up, here we go, starting with January and \ncontinuing to the end of the year:<\/p>\n\n<ul>\n<li>unhappy with start-up life<\/li>\n<li>started grinding out episodes of a <a href=\"http:\/\/devhell.info\">podcast<\/a> with <a href=\"https:\/\/twitter.com\/funkatron\">Ed<\/a><\/li>\n<li>released my <a href=\"http:\/\/grumpy-testing.com\">\"write testable PHP applications\" book<\/a> on January 11th<\/li>\n<li>spoke to a near-empty room at CodeMash 2012, they seem to not like PHP there<\/li>\n<li>started working for an online learning company<\/li>\n<li>made plans to attend <a href=\"http:\/\/tek12.phparch.com\">PHP|Tek 2012<\/a><\/li>\n<li>found softball enjoyable this year as I could actually bend over to field balls. Still can't hit<\/li>\n<li>did a live episode of the podcast at PHP|Tek, which was awesome<\/li>\n<li>started mentoring three developers on ways of being grumpy programmers<\/li>\n<li>found the benefits of test-centric development to be ruined by a terrible work environment<\/li>\n<li>Ed and I hit our groove with the podcast in the summer<\/li>\n<li>started looking for another job<\/li>\n<li>taught my PHP testing bootcamp course of the first time, in person though<\/li>\n<li>switched to my third job in 2012<\/li>\n<li>got accepted to speak at a conference in Sweden<\/li>\n<li>helped organize a <a href=\"http:\/\/truenorthphp.ca\">PHP conference<\/a> up here in Kanuckistan<\/li>\n<li>spoke to a near-empty room at the conference in Sweden, guess they don't like PHP there either<\/li>\n<li>got accepted to speak at a PHP conference in Belgium<\/li>\n<li>created an online version of my PHP testing bootcamp course<\/li>\n<li>worked on my <a href=\"http:\/\/grumpy-phpunit.com\">next book<\/a><\/li>\n<li>wondered what the hell happened to everything I wanted to do in 2012.<\/li>\n<\/ul>\n\n<p>Like so many things in life, you can only plan for so much. At the beginning of\n2012 the only thing I knew for sure was (a) I wasn't liking my job and (b) my\nbook was coming out extremely soon. At the same time I was worrying about the\nfact that my ENTIRE FUCKING CAREER is basically built upon the pile of web-enabled\nspaghetti that is PHP. What the hell should I do?<\/p>\n\n<p>So I took some babysteps towards learning server-side Javascript and played around\nwith Node.js. I like it, I think I am understanding how to build applications using \nit in a more idiomatic way.<\/p>\n\n<p>But there is still lots of PHP. Can't escape it, it's all I know. Well, that and\na whole bunch of actual theory on how to build web applications as small modules\nof code that talk to each other.<\/p>\n\n<p>I didn't set any goals for 2012 other than \"sell $10K worth of books\" and I did\nmanage to almost accomplish that. $6,547.25 in royalties for the ebook, $2K\nin licensing fees and some-amount-I-have-not-added-up in paper copies of the book.\nI think I can say that I <em>almost<\/em> made it, and that my next book will do\neven better because of the success of the first one.<\/p>\n\n<p>So what is in store for me in 2013? The plan is to keep pushing the info-products\n(books, courses, screencasts later in the year) while continuing to make solid\ncontributions at the day job. There is no lack of interesting things for me\nto do at the day job, more than enough to keep the gears going.<\/p>\n\n<p>I enter 2013 feeling like I'm stuck in low gear mentally, though. I've clearly\nover-committed myself and I just have to grind through it until March 2013.<\/p>\n\n<p>I will say that I have decided to focus on becoming a better programmer, no\nmatter what languages I tackle. I have a bunch of reading material cued up \nto help me get better at taking real-world problems and figuring out how\nto solve them in the context of programming environments and domain models.<\/p>\n\n<p>That is the last piece that I personally feel is missing from my skill set:\nlearning how to figure out how to turn business objectives into techincal\nsolutions. I'm in a good spot to do it, and I know my <a href=\"https:\/\/twitter.com\/PolarLava\">boss<\/a>\nhas all sorts of \"fun\" things lined up for me to do.<\/p>\n\n<p>So thanks for another year of watching what I do with some interest and I aim\nto provide you with more entertainment and knowledge throughout 2013.<\/p>\n",
        "date": "2012-12-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "2012 Review",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/12\/31\/2012-review\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I often get asked for some advice on how to get started with writing tests\nfor your PHP code. It's a fair question, since I am presenting myself as an\nexpert-ninja-rockstar-sensei-opinionated-egomaniac on the topic.\nI often struggle with coming up with an answer that can fit into the 140\ncharacters available via Twitter, but clearly this is not a good strategy.<\/p>\n\n<p>As an early Christmas 2012 present to all my loyal followers, who put up with\nmy never-ending stream of nonsense and provide a slowly-increasing portion\nof my income, here are my thoughts on how to get started with testing your\nPHP code.<\/p>\n\n<h2 id=\"learn-how-to-recognize-untestable-code\">Learn how to recognize untestable code<\/h2>\n\n<p>The worst feeling in a programmer's world has to be sitting in front of a\npiece of code that you didn't write yourself but is critical to the success\nof your business. You will be told that it's of the utmost importance\nthat you GOD SAKES DON'T BREAK ANYTHING OR ELSE WE ARE DOOMED.<\/p>\n\n<p>While I don't get the same kinds of warnings from my employers, I am familiar\nwith that feeling of trying to figure out not only what the code in front\nof you is supposed to do, but what the developer who came along before you was\neven THINKING ABOUT in that code.<\/p>\n\n<p>When it comes to testing code, there are two principles that you have to \nstrive to aim for:<\/p>\n\n<ul>\n<li>find a way to pass dependencies into your code<\/li>\n<li>find a way to break down your code into the smallest modules possible<\/li>\n<\/ul>\n\n<p>By following this two simple-but-extremely-difficult-to-do ideas, you will\nend up with code where writing tests becomes so easy you will be doing it\nwithout a second thought.<\/p>\n\n<p>No more static method calls. Get rid of those private and protected methods.\nStop creating new objects inside a method. Think about passing data around\ninstead of objects. Work hard to make sure your methods have little-to-no\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Side_effect_(computer_science)\">side effects<\/a>.\nDecouple your data source from the code that manipulates results from it. More\nimportantly, understand why all these things are barriers to having an easily-testable\ncode base.<\/p>\n\n<p>In short: do all the kind of hard work and drudgery that many managers tell\nyou is a waste of time and will not return any value to your employer. I say\nscrew those guys and instead feel awesome about working on building light, nimble systems full\nof tests that let you go home from work on time.<\/p>\n\n<h2 id=\"keep-learning-the-language\">Keep learning the language<\/h2>\n\n<p>Tests are just code. Keep learning how to write better PHP code. Understand why\nso much of what is on <a href=\"http:\/\/phpsadness.com\">PHP Sadness<\/a> is actually trying \nto help us get better. Understand why the array in PHP is awesome. Learn\nthe <a href=\"http:\/\/www.meetup.com\/dallasphp\/events\/59505212\/\">iterator drinking game<\/a>.<\/p>\n\n<p>In short, the more you know about the language the more likely you are to learn\nhow to solve problems using core functionality instead of constantly implementing\nsolutions in code you wrote yourself.<\/p>\n\n<h2 id=\"chain-units-of-code-together-for-greatness\">Chain units of code together for greatness<\/h2>\n\n<p>I've talked about in other places\nabout my thoughts on the UNIX philosophy. For the impatient, it is about creating\nsmall, single-purpose units of code and then chaining them together to \naccomplish awesome things.<\/p>\n\n<p>If you're ever searched online for ways to do things from the command line\nin various flavours of Linux distributions, you will understand what I mean.\n\"Take sed and cat and awk and grep and pipe it through cut and then to sort \nand you will get exactly what you want.\"<\/p>\n\n<p>That sort of stuff is awesome, and fits in rather nicely with the concept of\nwriting small modules of easily-testable code.<\/p>\n\n<h2 id=\"start-asking-%22how-am-i-going-to-test-this%3F%22\">Start asking \"how am I going to test this?\"<\/h2>\n\n<p>This is the first question I ask when I am presented with a problem that I need\nto solve using code. From that one extremely important question all the best\npractices that are associated with building highly-testable code emerge from.<\/p>\n\n<p>If it is not obvious how you are going to be able to create automated tests\nfor a particular set of functionality, it probably means you haven't thought\nhard enough about the problem you are trying to solve.<\/p>\n\n<p>I'm not saying every problem has a testable solution. But any problem where\nyou have expected results based on known input is a scenario that you can\ntest for. Database queries. 3rd party API's. Request routing. Fizz Buzz.\nThese are all things that we can test, by making sure to follow some of\nthose key ideas I advocated above.<\/p>\n\n<p>Test-centric development is about using tools as a way to create API's and\ninterfaces that are simple, easily testable, and easy to modify going \nforward.<\/p>\n\n<p>Adding new features becomes a potentially-simple process consisting of:<\/p>\n\n<ul>\n<li>design new feature<\/li>\n<li>write tests for these new features<\/li>\n<li>write code until the tests pass<\/li>\n<li>go home on time<\/li>\n<\/ul>\n\n<h2 id=\"stop-people-from-pushing-code-without-proof-it%27s-fixed\">Stop people from pushing code without proof it's fixed<\/h2>\n\n<p>Sure, you don't have any tests RIGHT NOW. But I'm sure you've got bugs to fix\nin your code. Write tests to verify that the bug exists. I'm sure you'll find\nyour code isn't as modular or testable as you thought it was.<\/p>\n\n<p>Once you've reproduced the bug, then write some code until the bug GOES AWAY.\nThen push your updated code into production. Rinse and repeat until you have\na very highly-targeted test suite and a bunch of highly-targeted fixes for\nknown mistakes in the application. That is what I call real-world testing.<\/p>\n\n<p>So make sure that nothing that fixes something goes up into production, no\nmatter how desperate the circumstances, without proof that this fix actually\nis a fix instead of a wild guess.<\/p>\n\n<h2 id=\"stop-people-from-doing-things-manually\">Stop people from doing things manually<\/h2>\n\n<p>It's the 2nd year of the 2nd decade of the 21st century. The internet is\nfull of instructions on how to automate just about anything. Spend an afternoon\nstudying that instead of dreaming about an advertising-driven disruptive\nstartup.<\/p>\n\n<p><a href=\"http:\/\/www.opscode.com\/\">Chef<\/a>. <a href=\"http:\/\/puppetlabs.com\">Puppet<\/a>. Shell scripts. <a href=\"http:\/\/jenkins-ci.org\">Jenkins<\/a>. <a href=\"http:\/\/travis-ci.org\">Travis<\/a>. Virtualized servers. Learn these things. Use them. You\nwill thank me. Maybe enough to send me money via PayPal. Automate everything\nthat you keep finding yourself doing manually, and then figure out if there\nare ways to not even do those things. You might be surprised.<\/p>\n\n<h2 id=\"stop-using-tools-without-test-suites\">Stop using tools without test suites<\/h2>\n\n<p>I treat any PHP tool that does not have its own test suite as a black box\nthat cannot be trusted. Tests show that the developer cares about the quality\nof the work they do, and also provides real examples on how to do things.<\/p>\n\n<p>Black boxes are not things you should be relying on when the going gets tough.\nTreat any code that you cannot easily test as being suspicious and likely\nbroken. I feel the same way about code <em>I<\/em> have written, so imagine what\nI must think of other people's stuff.<\/p>\n\n<h2 id=\"always-wonder-if-you%27re-doing-it-right\">Always wonder if you're doing it right<\/h2>\n\n<p>Integration tests are a scam. Unit tests don't fix bugs. Simple enough code\ndoesn't require tests. Pair programming is a cargo-cult practice. PHP sucks.\nMobile applications are the future. Documentation comes after the work is\ndone. Nobody likes a developer who asks too many questions. You work in the\nreal world where results matter. Exit statuses are better than throwing\nexceptions. Asynchronous calls always result in callback hell.<\/p>\n\n<p>Not everything in the above paragraph is true. The only way to find out is\nto get out there and figure out if it is true or not for yourself.<\/p>\n\n<p>Keep on testing. I'm here to help. Merry Christmas everyone.<\/p>\n",
        "date": "2012-12-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So you want to write tests",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/12\/17\/so-you-want-to-write-tests\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It's no secret that I have been pushing my \"grumpy programmer\" brand hard.\nWhy not? It's delivering a non-trivial amount of side income for me and I\nhave been really enjoying it.<\/p>\n\n<p>This past fall I taught an in-person course that I called my \"PHP Testing\nBootcamp\" where I spent about 6 hours showing a bunch of PHP programmers\nhow to twist their code into testable shape. That got me to thinking that\nI want to do more of that, as I found that process enjoyable as well.<\/p>\n\n<p>As I also create more products I need a place for them all to live. I have\nbooks, and now a course I can teach and I am planning on producing\nscreencasts for sale as well. With that in mind, I am happy to announce\nI have created <a href=\"http:\/\/grumpy-learning.com\">Grumpy Learning<\/a>, an umbrella\nsite for all my training and teaching efforts to hang from. While you are\nthere, please join the mailing list via the form I have up there. I promise\nto not give your email address to anyone else and will give you something\nevery two weeks related to testing or share other thoughts I have.<\/p>\n\n<p>As part of this, I will be teaching my \"PHP Testing Bootcamp\" course again\nbut this time doing it online. Check out the <a href=\"http:\/\/phptestingbootcamp.eventbrite.com\/\">site for the course<\/a>\nfor details, but here's the summary:<\/p>\n\n<p>9 tickets available to do the course with me live at $250 per student. Three\nsession (January 3, 10 and 17) running from 9pm until about 11pm Eastern\nStandard Time. I've already sold 3 of the 9, so you might want to hurry up.<\/p>\n\n<p>Then I have up to 50 tickets available to get just the recordings of the\ncourse for $125. If you can't make it due to time zone differences or\nprior commitments, the videos of me teaching the course and answering\nquestions is a great option. I've sold 2 of these, so plenty of them\nleft.<\/p>\n\n<p>Students who participate in the live sessions will also get access to the\nvideos as part of their tickets.<\/p>\n\n<p>If you've ever wondered how someone who takes coding and testing seriously\nworks in a test-centric manner, this is your chance. Give yourself an\nawesome gift for the holiday: a chance to learn how to write testable\ncode and the tools that make it happen.<\/p>\n",
        "date": "2012-12-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The birth of Grumpy Learning",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/12\/02\/the-birth-of-grumpy-learning\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Many months ago I found out about <a href=\"http:\/\/oredev.org\">\u00d8redev 2012<\/a> and submitted\na proposal to give my talk on building testable PHP applications. Much to my\nsurprise it was accepted and plans were hatched to fly me across the Atlantic\nand give my talk.<\/p>\n\n<p>The theme of this year's edition of the conference was \"Viva La Rebellion\". \nI'm guessing that they were hoping by accepting talks that seemed to fall out\nof the mainstream they would inspire people to want to do things differently.<\/p>\n\n<p>In that regard, I think they can declare it a success. The content was\nwidely varied, as you would expect from a conference featuring multiple\nplatforms and multiple programming languages.<\/p>\n\n<p>However, the sad reality is that, in my opinion, it's really only the speakers\nwho were there doing something revolutionary. I ended up spending quite a\nbit of time hanging around with legendary Internet curmudgeon <a href=\"https:\/\/twitter.com\/zedshaw\">Zed Shaw<\/a>.\nHe was generous with his time and his comments, even after he found out that PHP was my bread-and-butter.<\/p>\n\n<p>He gave a lightning talk where he explained his own experiences in rebelling\nfrom inside a large monolithic organization, the US army, in order to prevent\nhimself from doing something he didn't want to do. He also brought up the \npoint that so many people project an aura of rebellion through clothes, or\nprogramming language of choice, but still start each day by sitting down\nin front of a computer and essentially asking their boss \"how can I make\nyou rich today, sir?\"<\/p>\n\n<p>From my own perspective, that's bang on. I joke all the time when on IRC that\nall the perks that employers attempt to provide their employees are really\njust things to distract you from the fact that you are a slave, a digital\nsharecropper. I instead prefer to work from home as a way of making my \nchains fit a little less snug and to not have to hear the constant rattling.<\/p>\n\n<p>I will also be truthful when I say that my current <a href=\"http:\/\/synacor.com\">employer<\/a>\ntreats me very well, allowing me some real freedom in terms of projects I get\nto work on. A shitty job is one where you little to no say in what you get to\ndo. Been there, won't ever do that again.<\/p>\n\n<p>So if you have the fire that is \"in your belly\", that yearning to do something\nmore with your time than just help someone else get rich, you speak at\nconferences. Those are opportunities to teach people about things, to speak\nto other like-minded people, to really take chances and find out whether you\nreally know what you are talking about.<\/p>\n\n<p>More importantly, it provides a way for you to gauge your own knowledge and\nskills compared to those who are your peers in terms of willingness to share\nknowledge. I was pleasantly surprised to find that when I went to talks\nabout technologies I don't use, I was understanding the concepts they were\ntalking about.<\/p>\n\n<p>I'm only a rebel in the sense that I am attempting to popularize an approach\nto writing code that most PHP developers don't use, by using automated tests to \ndrive the design of the code. The real rebels are people who challenge\npre-conceived notions within a community and then share what they've found.\nJust because you use Rails doesn't make you a rebel. More like using PHP\nmakes you one these days.<\/p>\n\n<p>I did attend sessions about 2\/3 of the time, the rest of the time spent\neither working on my PHPUnit book or just relaxing in the super-awesome\nspeakers \"cave\" they set up for us.<\/p>\n\n<p>On Tuesday I only went to a morning workshop given by <a href=\"http:\/\/vimcasts.org\">Drew Neil<\/a>\nabout \"Vim Mastery\". I had ulterior motives to go: I had sponsored an episode\ntwo years ago and I bought a copy of his book <a href=\"http:\/\/pragprog.com\/book\/dnvim\/practical-vim\">\"Practical Vim\"<\/a>.\nAfter I got him to sign it I got 3 hours of good instruction on how to best\nuse Vim by learning how to do things more efficiently. Text objects and figuring\nout repeatable sequences were the two big takeaways for me.<\/p>\n\n<p>After that I hung out with a few of the other speakers and somehow a group of\nus who were supposed to go out on a tour of Malmo missed the bus for the \ntour. Oh well.<\/p>\n\n<p>Wednesday was the first day of the conference proper, with Monday and Tuesday\nbeing just for half-day and day-long tutorials. The keynote speaker was\nDavid Rowan, who is the editor for the UK edition of WIRED magazine. Lots\nof talk about how technology is awesome and how the world has been changed\nby software, and how software will be used to help solve some really tough\nproblems going forward.<\/p>\n\n<p>All I could think of was the future is already kind of looking like <a href=\"http:\/\/zenarchery.com\/full-text-of-the-grim-meathook-future-thing\/\">this<\/a>.<\/p>\n\n<p>I skipped the first set of talks to work on putting the final touches on\nmy own presentation that was later in the day and then watched \/dev\/hell\nguest <a href=\"http:\/\/twitter.com\/searls\">Justin Searls<\/a> give a talk about the\nvalue of mock objects in your tests. Justin is an awesome speaker, despite\nhis protests to the contrary and presented a very compelling set of strategies\nfor using mock objects in your tests.<\/p>\n\n<p>My favourite part of the talk (besides the end, HAHAHAH just kidding) was\nwhere he talked about mocking anti-patterns. Yes, there is such a thing as\nusing mocks incorrectly. You can check out the talk <a href=\"http:\/\/oredev.org\/2012\/sessions\/budgeting-reality-a-new-approach-to-mock-objects\">here<\/a>.<\/p>\n\n<p>After lunch I sequestered myself again to make sure I was ready to give my\ntalk, and then popped up at 3:45pm to give my talk. Yes, it's true, there\nwere only 5 people in the room for my talk. PHP is not popular in Sweden\nand I was also up against some good speakers, including the creator of\n<a href=\"http:\/\/jenkins-ci.org\">Jenkins<\/a>. These things happen, but my talk was\n<a href=\"http:\/\/vimeo.com\/53065670\">recorded<\/a> for anyone who was not there to see.<\/p>\n\n<p>After my talk I stuck around to watch Konstantin Haase from <a href=\"http:\/\/travis-ci.org\">Travis-CI<\/a>\ntalk about what they do at Travis and provide a little bit of insight into the\nchallenges they face in running a Continuous-Integration-As-A-Service application.<\/p>\n\n<p>Finally, at 6pm there was a closing keynote by Jim McCarthy, one of those guys\nwho kept popping up at key points in the history of software development and\nhe talked about his experiences leading the team that ended up building\nVisual C++.<\/p>\n\n<p>He went on to talk about how he and his wife have devoted a number of years\nnow to studying how groups of developers work and on techinques that can be\napplied to help them get more interesting work done. Not that he shared many\nof them as that is how he makes his living.<\/p>\n\n<p>Can't say that I agreed with his statement that the fact that\npeople in China were banned from seeing Facebook and Twitter was \"no big deal\".\nI had expected to hear more stuff about \"culture hacking\", but maybe I just\nhad some preconceived ideas as to what that really meant.<\/p>\n\n<p>Then I had dinner and drinks with some of the other speakers, and went to\nbed happy that I delivered what I thought was a good talk.<\/p>\n\n<p>Thursday's opening keynote was by fellow Canadian <a href=\"https:\/\/twitter.com\/raganwald\">Reg Braithwaite<\/a>\nwhere he really talked about rebellious people, and the 4 most common roles\nwe find within any marketplace of ideas: Leader, Rival, Innovater, Everyone Else.\nFascinating analysis of how people's refusal to understand these four roles\nleads to much unhappiness and even how entities move from one role to another.<\/p>\n\n<p>Again, I highly recommend\n<a href=\"http:\/\/oredev.org\/2012\/sessions\/the-rebellion-imperative\">watching the video<\/a><\/p>\n\n<p>Next I went to Fred George's talk on Micro-service architectures, where\nhe talked about how he led a team that went to extremes while building a \nservice-oriented architecture, by creating services so small (on the order\nof 100 lines of code) that some of the concerns about unit testing and\nversioning just went away due to size.<\/p>\n\n<p>I have my own concerns about how to scale something like this, but it provides\na valuable lesson in really breaking down functionality of services into\nthe smallest pieces possible and then monitoring services to make sure they\nare being used. Sort of like a survival-of-the-fittest contest for services,\ngiving developers the freedom to create multiple versions of services, running\nthem at the same time. Being so small, the cost of rewriting them, even using a \nnew language, was minimal.<\/p>\n\n<p>Next up was a talk on automated testing strategies for databases. It's rare that\nI see a talk that really disappoints me. This was one. Nothing new, nothing\nunconventional, nothing that a few people with more than a couple of years' experience\nusing databases could not have come up with.<\/p>\n\n<p>After lunch I watched a talk about the <a href=\"http:\/\/geteventstore.com\">Event Store<\/a> and \nfelt weirded out by the talk. I wasn't quite sure what it was for, what problem\nit was solving, and the whole talk felt like a very smooth and practiced sales\npitch for a commercial technology. Yes, they had some impressive stats in terms\nof how it performed on the presenters laptop but I came out of that talk not\nreally understanding what it was for. I also was 99.999% certain that one part\nof the demo was completely faked. The presenter entered some data into a \nform for an online chat application built with it, and what was displayed on\nthe screen did not match AT ALL what he had typed in. Very strange.<\/p>\n\n<p>Next was a series of lightning talks. I sat in the set from Hampus Jakobsson\n(talked about learing if you really loved something by doing it every day\nfor a month and then giving it up), Chris Hughes (talked about his experiences\nwith really doing things the way he wanted and not caring about the consequences)\nand then Zed Shaw talked about why none of the attendees to the conference were\nreally rebels.<\/p>\n\n<p>Finally, I watched <a href=\"https:\/\/twitter.com\/steveklabnick\">Steve Klabnik<\/a> talk about\nbuilding Hypermedia API's. I think that anyone who is designing an API they\nreally expect people to use should <a href=\"http:\/\/oredev.org\/2012\/sessions\/designing-hypermedia-apis\">watch the talk<\/a>\nto get a feel for how tough a task it is to really build one.<\/p>\n\n<p>The next talk was \"Why Mud Rules\" by Brian Footer. Brian talked about the\ntendency of code to become a big ball of mud, and why that offends so many\ndevelopers. The money quote in his talk was \"What do you call people who\nship big balls of mud? Millionaires.\" It's a reminder that shipping still\nmatters, even if the code is terrible in quality.<\/p>\n\n<p>I had dinner with Felix Geisend\u00f6rfer and Drew after this talk and spent more time hanging\nout with Felix while he hacked on the code for controlling his drone.<\/p>\n\n<p>On Friday, what could've been an interesting keynote by someone working\nextremely hard to get fibre and high-bandwidth internet connections to homes\naround Sweden was\nwrecked and cut short by the MC, who wasted a lot of time on an audience\nparticipation stunt. Also a diversion into Swedish rape laws was unwelcome.<\/p>\n\n<p>After the keynote I watched Felix give a talk about\nNode.js by demonstrating the library he had written for controlling his\nAR drone quadcopter using Node.js. You have not really been to a conference\nuntil you've watched someone fly a drone using cURL CLI commands that speak\nto a web server RUNNING ON THE DRONE.<\/p>\n\n<p>After that I sat in <a href=\"https:\/\/twitter.com\/denisejacobs\">Denise Jacobs'<\/a> talk\nabout sparking creativity, and some techniques for getting yourself into\nThe Zone, The Flow, whatever you want to call that state where you can be\nreally productive. Lots of good reminders on removing distractions and\nobstacles to being productive at work.<\/p>\n\n<p>Following Denise's talk, I went to Jos\u00e9 Valim's talk about <a href=\"http:\/\/elixir-lang.org\">Elixir<\/a>, which is\na Ruby\/Python style language that sits on top of the Erlang VM. It looked\nvery interesting to me, definitely worth checking out for potential future\nuse in applications where concurrency become an issue. Plus you can drop down\ninto the weirdness that is Erlang when required.<\/p>\n\n<p>After that I just kind of hung out with people in the speaker area, having some\ngreat conversations with all sorts of people, until it was time for Hojun Song's\npresentation about his project to send an open source satellite into orbit.\nI have to admire his persistence, and how he's financing the project by\nselling t-shirts! I was going to buy one, but he was not selling one in my\nsize...<\/p>\n\n<p>Then the conference was over. One last dinner with the speakers I had met\nand then I spent Saturday doing a day trip with Reg Braithwaite to Copenhagen\nto meet with two <a href=\"https:\/\/twitter.com\/jippi\">new<\/a> <a href=\"https:\/\/twitter.com\/jose_zap\">friends<\/a>\nwho are PHP devs working in Copenhagen. Christian and Jose were awesome hosts\nas they led us on a walking tour of the city. I also found out just how expensive\nalcohol really is in Northern Europe. Two Irish coffees with double shots of\nwhiskey: CDN$40. Yikes.<\/p>\n\n<p>All in all, I had an awesome time.<\/p>\n\n<p>Even though I was the only PHP talk at this conference, I realized that\nI understood a lot more about programming than I realized. So much is \ntransferable across languages and platforms. Go to conferences like this\nto broaden your skill set, to check out how users of other languages\nare solving problems, and you cannot stop from becoming a better programmer.<\/p>\n\n<p>\u00d8redev treated me very well, and I would consider going back again to speak\nif my future plans allow me to fit it in.<\/p>\n\n<p>Please, PLEASE check out the <a href=\"http:\/\/oredev.org\/2012\/videos\">recordings of the presentations<\/a> \nthey have made available. Not every presentation is there yet, but they have\nplans to make them all available under a Creative Commons license.<\/p>\n",
        "date": "2012-11-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Not Really Rebels: My \u00d8redev 2012 Experience",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/11\/17\/not-really-rebels\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I promised <a href=\"https:\/\/twitter.com\/everzet\">@everzet<\/a> almost two weeks ago that\nI would take a look at his latest project, <a href=\"http:\/\/www.phpspec.net\">phpspec<\/a>,\nand let him know what I think.<\/p>\n\n<p>I think that we are witnessing the first wave of new testing tools in the PHP\ncommunity that allow developers to wrap their applications in automated tests.<\/p>\n\n<p>I am familiar with the BDD-style that is being promoted in PHPSpec, through\nmy work with <a href=\"http:\/\/behat.org\">Behat<\/a> to create automated user acceptance\ntests. I think if you want a tl;dr version of PHPSpec I would tell you\n\"write hybrid unit\/integration tests using plain language\".<\/p>\n\n<p>The concept that is being promoted is \"SpecBDD\". It means \"writing tests\nto a specification and then writing code until that specification is met.\"\nNot a lot different than writing tests using tools like PHPUnit.<\/p>\n\n<p>Your still going to have to write code that you can test if you want to\nuse phpspec. That means you still need to know about dependency injection\nand other characteristics of testable code. Sorry, no magic testing pixie\ndust here.<\/p>\n\n<p>I was also surprised to see the use of mock objects, which are being \ncalled \"Prophet Objects\", but that means that you can really write specs\nthat test for things in isolation.<\/p>\n\n<p>Mock objects are, in my opinion, the conceptual stumbling block that\ndevelopers need to get over in order to really, deeply understand how\nto write effective tests. I am happy to see phpspec promote this idea\nand provide a fairly simple API to do it.<\/p>\n\n<p>The process is the same as it would be if you were using PHPUnit: write\nthe test \/ spec, and write the damn code until everything passes. Again,\nno magic testing pixie dust.<\/p>\n\n<p>(By the way, if someone makes me a \"magic testing pixie\" t-shirt, men's size\nXXL or larger, I will purchase it YESTERDAY).<\/p>\n\n<p>Keep on cranking out the tools, make them useful for people OTHER than testing\nzealots to use them, and you have yourself an unstoppable wave of automated\ntesting.<\/p>\n",
        "date": "2012-10-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHPSpec and the new wave of testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/10\/18\/phpspec-and-the-new-wave-of-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I've been promising, I wanted to share my thoughts as I am starting to\nbrush up on my JavaScript and learn how to do something non-trivial with\n<a href=\"http:\/\/nodejs.org\">Node.js<\/a>. Of course, I want to use tests to\nhelp me drive my work, and also as a way to keep me focused on small iterations\nof work.<\/p>\n\n<p>I am intending to write some code to act as an API for the <a href=\"http:\/\/www.ibl.org\">site that runs my simulation baseball league<\/a>\nand refactor the existing PHP code to consume that API instead of speaking\nto the database through CakePHP (really OLD CakePHP at that too) models.<\/p>\n\n<p>So, it took me a while to search around and find enough information to create\nmy first integration test. In the end, the stack is <a href=\"http:\/\/visionmedia.github.com\/mocha\/\">Mocha<\/a>\nto do the testing, with <a href=\"https:\/\/github.com\/visionmedia\/supertest\">SuperTest<\/a> to handle\nall the HTTP testing.<\/p>\n\n<p>So, the app itself is built on <a href=\"http:\/\/expressjs.com\/\">Express<\/a> and \ntalking to a Postgres database using <a href=\"https:\/\/github.com\/brianc\/node-postgres\">node-postgres<\/a>.\nIt seemed to me that express was the best solution for a newcomer to Node but\nfamiliar with MVC \/ modern web application paradigms.<\/p>\n\n<p>So, let's take a look at some of the code:<\/p>\n\n<pre><code>\/\/ Front controller for our API\n\nvar application_root = __dirname;\nvar express = require(\"express\");\nvar path = require(\"path\");\nvar pg = require('pg');\nvar app = express();\nvar model = require('.\/transactionmodel');\n\n\/\/ Create our database connection\nvar connectionString = \"pg:\/\/chartjes:@localhost:5432\/ibl_stats\";\n\npg.connect(connectionString, function(err, client) {\n  if (err) {\n    console.log(err);\n  }\n});\nvar client = new pg.Client(connectionString);\nvar tm = new model.TransactionModel(client);\n\n\/\/ Config things we need to get the app going\napp.configure(function() {\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(path.join(application_root, \"public\")));\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n});\n\napp.get('\/transactions\/archived', function(req, res) {\n  var done = function (err, transactions) {\n    if(err) {\n      res.send(\"Error querying transactions\", 500);\n    } else {\n      res.send(transactions);\n    }\n\n  };\n\n  var currentTransactions = tm.getArchived(done);\n});\n\napp.get('\/transactions\/current', function(req, res) {\n  var done = function (err, transactions) {\n    if(err) {\n      res.send(\"Error querying transactions\", 500);\n    } else {\n      res.send(transactions);\n    }\n  };\n\n  var currentTransactions = tm.getCurrent(done);\n});\n\nmodule.exports = app;\n<\/code><\/pre>\n\n<p>I am also using the awesome <a href=\"http:\/\/postgresapp.com\/\">Postgress.app<\/a>\nwhile working on this app on my laptop.<\/p>\n\n<p>One of the things I learned while I started to build my tests was that if I\nwanted to test stuff in isolation, I needed to alter things slightly and\nexport my Express \"app\" as a module instead of including the command \nnecessary to make it run and listen for requests on a specific port.<\/p>\n\n<p>Now, I did find some blog posts about how to write integration tests, but\nthey either wanted to use <a href=\"http:\/\/coffeescript.org\/\">CoffeeScript<\/a>\nor was using custom modifications to the testing tools. I am not familiar\nenough to write stuff like that (not in JavaScript anyway) so out of\nfrustration I looked at the source code of Express since <a href=\"http:\/\/brianstoner.com\/blog\/testing-in-nodejs-with-mocha\/\">this blog post<\/a>\nmentioned how he created a custom version of something used to help in \ntesting.<\/p>\n\n<p>When I looked at the source of Express, the author had replaced a bunch\nof stuff with code that simply imported SuperTest. I think I swore\nreally loudly at myself for not looking sooner.<\/p>\n\n<p>Armed with the knowledge that I had my missing piece for the integration\ntest, I wrote a simple one.<\/p>\n\n<pre><code>var app = require('..\/app');\nvar request = require('supertest');\nvar assert = require('assert');\n\ndescribe('Transaction API', function() {\n  it('GET \/transactions\/current should return 200', function(done) {\n    request(app)\n      .get('\/transactions\/current')\n      .expect('Content-Type', \/json\/)\n      .expect(200, done);\n  });\n});\n<\/code><\/pre>\n\n<p>It worked, which is the first step. How about another test? Let's make\nsure that if we do that call to \/transactions\/current and verify that\nwe are getting back a result we expect<\/p>\n\n<pre><code>it('GET \/transactions\/current should return expected results', function(done) {                                                                    \n    var fs = require('fs');                                                     \n    var currentData = fs.readFile('.\/current', 'utf8', function(err, data) {    \n      if (err) { throw err; }                                                   \n      return data;                                                              \n    });                                                                         \n    request(app)                                                                \n      .get('\/transactions\/current')                                             \n      .expect(currentData, done);                                               \n  });                     \n<\/code><\/pre>\n\n<p>For this test, I am reading in a text file that contains, for a known database,\na JSON representation of that data. Then I do a call to my API call, and\ncompare the result I get back to my fixture. Just like any test I would \nwrite in PHP. Compare the expected to the actual.<\/p>\n\n<p>In <a href=\"http:\/\/devhell.info\/post\/2012-10-06\/the-grace-hopper-rape-whistle\/\">episode 21 of \/dev\/hell<\/a>\nI talked a bit about how I felt that testing skills from one language are\ntransferrable to another. I think the fact that once I figured out that SuperTest\nwas the missing tool, it took me less than 30 minutes to write those two tests.\nThat includes research time reading the documentation for both Mocha and SuperTest.<\/p>\n\n<p>More tests are sure to come, but I think I've found the right set of tools\nfor the time being.<\/p>\n",
        "date": "2012-10-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "First steps in Node testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/10\/15\/first-steps-in-node-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>TL;DR: I've started working on <a href=\"http:\/\/grumpy-phpunit.com\">a new book<\/a>.<\/p>\n\n<p>Having written a book that shows you how to <a href=\"http:\/\/grumpy-testing.com\">write code that is testable<\/a>\nit seemed natural to write a companion book for that, to give people a better\nunderstanding of how to use some of the testing tools.<\/p>\n\n<p>To that end, I've started working on \"The Grumpy Programmer's PHPUnit Cookbook\"\nto be released in early 2013 (I'm thinking end of January \/ beginning of February\nif everything works out).<\/p>\n\n<p>The book will be a collection of tips and tricks on how to use the gold standard\nof PHP unit testing frameworks, the mighty <a href=\"https:\/\/github.com\/sebastianbergmann\/phpunit\/\">PHPUnit<\/a>. If you visit\nthe <a href=\"http:\/\/grumpy-phpunit.com\">website for the book<\/a> you can join a mailing list\nto be notified when the book is ready.<\/p>\n\n<p>By joining that mailing list, you will also receive some goodies along the way \nas the book gets written. No, I'm not going to tell you what they are.<\/p>\n\n<p>The book will be $25. No, I don't know how big it will be. Maybe you will end up paying \n$1 per page, but let's hope not.<\/p>\n\n<p>The book will also be published through <a href=\"http:\/\/leanpub.com\">Leanpub<\/a> as I am\n110% happy with what they have done for me, and I encourage anyone else who wants\nto write their own technical book and keep most of the money from their efforts\nto consider using them.<\/p>\n",
        "date": "2012-10-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's PHPUnit Cookbook",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/10\/12\/grumpy-phpunit\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Contrary to urban legend, I do have the occasional happy thought. You can't\nraise 2 little girls with a tolerant wife unless you are able to get into that\nhappy place almost on demand.<\/p>\n\n<p>I do have friends who appear to be bottomless sources of happiness and good\ncheer, their Twitter feeds full of positive messages to all. That is not my\npath, but not for the reasons you might suspect.<\/p>\n\n<p>I seem to generate a lot more feelings of \"satisfaction\" than outright \n\"happiness\". I also think, that being an agnostic person when it comes to organized religion, that I don't put a \nlot of stock in prayer or \"the power of positive thinking\" and other related\nthings. I also believe that Fate and Destiny plays a big role in people's lives, and\nwhile we are in control of our day-to-day lives, you are moving down a pre-destined\npath in the greater scheme of things.<\/p>\n\n<p>My mother (a retired high-school teacher) always told her students that they\nare \"not losers, but choosers\". When my thread has played out to a point \nwhere it intersects with someone else's, I always have to make a choice. \nSo don't think I am a fatalist who believes all is pre-ordained. I believe\na wise person once said \"luck is the intersection of opportunity and skill.\"<\/p>\n\n<p>Not that I believe I am destined for greatness in any way. My programming skills\nare not in the field of inventing (or reinventing) awesome pieces of technology\nfor the greater good of all. I am more the type that likes to combine things\ntogether and figure out how to make something BETTER come out of all of it.<\/p>\n\n<p>Hence my like for testing, and codified programming practices for a given \nlanguage. How I like to go to conferences, and organize meet-ups, and take\ntime out of my after-work schedule to just shoot the shit over Skype with\npeople who are willing to toss away the grumpy cartoon character I play on\nTwitter to talk to the person underneath it.<\/p>\n\n<p>So, not a lot of happy thoughts come out of me, more like \"man, I am glad\nthis shit worked out in a way I am satisfied with\". Satisfaction IS what I\naim for, because my <a href=\"https:\/\/twitter.com\/internet_widow\">wife<\/a> can tell me\nthat I am my harshest critic, holding myself up to a pretty high standard\nfor whatever tasks I tackle when I am confident I can do a good job.<\/p>\n\n<p>You can be happy. I'll be over here feeling satisfied.<\/p>\n\n<p>Thanks to <a href=\"https:\/\/twitter.com\/CalEvans\">the icon of the PHP community<\/a> for\nthe topic suggestion.<\/p>\n",
        "date": "2012-10-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Happy Thoughts",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/10\/10\/happy-thoughts\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It all started with me thinking \"Let's write a technical book as part of\nNational Novel Writing Month\" and has progressed to me recently signing an \nagreement to license copies of my book to an online tutorial site for\na number that is very close to all sales for the first book I ever wrote on\n<a href=\"http:\/\/www.wjgilmore.com\/books\/read\/refactoring_legacy_applications_using_cakephp\">refactoring PHP applications to use CakePHP<\/a>.<\/p>\n\n<p>Along the way I have learned some valuable lessons about the process, and at\nthe same time have been getting some great insights via Amy Hoy's \"I cannot\nstop telling people who want to build their own things to go plunk the money\ndown for it\" <a href=\"http:\/\/unicornfree.com\/30x500\/\">30x500 course<\/a>.<\/p>\n\n<p>So has my <a href=\"http:\/\/grumpy-testing.com\">book<\/a> been a success? That depends on your point of view. Initially\nI said I would be happy if I doubled the number of sales of my first book.\nThat would mean pulling in almost $5000. I gave myself a year. With this\nlicensing agreement, I have passed that number in 8 months.<\/p>\n\n<p>But I always felt that while I was a pretty decent programmer and also good\nat expressing my ideas to other people, I was missing something. That something\nis MARKETING, folks. I was confident that I could write a book that people\nwould want, I just didn't have the skills to convince people of that.<\/p>\n\n<p>In a way, I was partially right.<\/p>\n\n<p>I built up interest via social media. I promoted the book at least once\na week, almost always resulting in sales within minutes of the messages.\nI gave away copies to user groups, who in turn promoted my book for me\nand that also resulted in cool conversations AND book sales.<\/p>\n\n<p>I don't mind putting in the effort to promote my book this way. How else\nare people going to know about it if I don't share? Yes, making money off of\nit is good. I was more concerned about making sure people knew there were\nways of making their lives as PHP programmers easier. Testing doesn't have\nto suck.<\/p>\n\n<p>It felt good, and money was coming in. While I slept, and it was cool to\nwake up every morning to emails from my <a href=\"http:\/\/leanpub.com\">publisher<\/a> \ntelling me that someone had bought my book.<\/p>\n\n<p>But it wasn't enough. I felt like I could be making more money from my\nefforts. I've been selling copies of my book at a pretty consistent rate since the\nfirst big push when I launched, but that got me hungry for more. More books.\nMore courses. More training. More anything that can convert what I know\ninto money that I can then use to work for myself.<\/p>\n\n<p>That's where Amy's course comes in. If you take it, you WILL LEARN HOW TO\nMAKE IT HAPPEN. Amy shows you how to find audiences and figure out what's\ncausing them pain or what they need to make more money. Amy also has an\nawesome collection of alumni who also step up and share what they learned\nas well.<\/p>\n\n<p>Here's the catch though: you have to do the work yourself. There is no\nmagic. You are going to work, and work hard. But at the end of it you are\ngoing to be armed with the ability to go out there and build stuff that\npeople will be yelling \"SHUT UP AND TAKE MY MONEY!\" at you.<\/p>\n\n<p>Isn't that what you want?<\/p>\n",
        "date": "2012-09-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Biz Lessons Learned",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/09\/21\/biz-lessons-learned\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I created a screencast for you. No really, just for <em>you<\/em>.<\/p>\n\n<script src=\"https:\/\/www.littlehart.net\/atthekeyboard\/javascripts\/flowplayer-3.2.11.min.js\"><\/script>\n\n<p><a \nhref=\"https:\/\/s3.amazonaws.com\/grumpy-testing\/5m-TDD.mp4\" \nstyle=\"display:block;width:800px;height:600px;\"\nid=\"player\">\n<\/a><\/p>\n\n<script language=\"JavaScript\">\nflowplayer(\"player\", \"https:\/\/www.littlehart.net\/atthekeyboard\/assets\/flowplayer-3.2.14.swf\");\n<\/script>\n\n<p>If you can't view the video because you're on a device that doesn't support flash, or you want\nto view it offline later, then\nyou can view it <a href=\"https:\/\/s3.amazonaws.com\/grumpy-testing\/5m-TDD.mp4\">here<\/a><\/p>\n",
        "date": "2012-08-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "5 Minute TDD",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/08\/16\/5-minute-tdd\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<h2 id=\"challenge-0%3A-have-a-computer-around-as-a-kid\">Challenge 0: have a computer around as a kid<\/h2>\n\n<p>I've been programming computers since I was 10 years old. That's 31 years and counting. I had my first paid programming\njob at age 15, when I created a program for my mother's private school to display a salary grid based on numbers they\nentered via the program itself, written in Apple basic. Sadly, there was no testing framework available to me.<\/p>\n\n<p>When I went to community college, it was before the Rise Of The Internet. I had net access and an email account,\nbut there was no graphical web browser I had access to. I remember seeing something called \"Mosaic\" on the desktops\nin the computer labs, but I did not have access to it. So I surfed, hard core style, using Lynx. Yes, I am that\nold.<\/p>\n\n<h2 id=\"challenge-1%3A-get-an-it-job\">Challenge 1: get an IT job<\/h2>\n\n<p>Once I was done with school, I landed a job working for a company that produced fully-licensed CD compilations for\nprofessional DJ's. I was their \"IT guy\" but ended up building my first web app: an online searchable catalog\nthat used MySQL. I wrote code that imported a CSV export from Microsoft Access and then built a form to let\npeople search for stuff. It sort of worked. I didn't know about wild card searches or <a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.5\/en\/string-functions.html#function_soundex\">Soundex<\/a>\nbut I was pretty proud of myself.<\/p>\n\n<ul>\n<li>learned PHP<\/li>\n<li>learned some MySQL<\/li>\n<li>discovered I still liked programming<\/li>\n<\/ul>\n\n<h2 id=\"challenge-2%3A-get-a-programming-only-job\">Challenge 2: get a programming-only job<\/h2>\n\n<p>When that job ended, I found a job with a company that was using <a href=\"http:\/\/metahtml.sourceforge.net\/\">some programming language<\/a>\nI had never seen before, and haven't seen since. I also got to use PHP to build an online shopping store for a \nspecialty retailer.<\/p>\n\n<p>Everything went well...until it didn't, and people who weren't stock holders (it was a publically-traded company)\ngot the boot.<\/p>\n\n<ul>\n<li>learned more PHP<\/li>\n<li>learned to work as part of small team<\/li>\n<li>failed the political office game<\/li>\n<\/ul>\n\n<h2 id=\"challenge-3%3A-get-a-job-on-a-bigger-team\">Challenge 3: Get a job on a bigger team<\/h2>\n\n<p>After that job, I got to sit on my couch with my infant daughter and watch 9\/11 happen in real time on my TV. A few\nmonths later I got a job working for a company that dealt with online adult content and wanted to build a dating\nsite. The company still is around, and it's not hard to google around to figure out who it is. It is a different\nplace now, but when I worked there I committed the first line of code for the project into a CVS repository.<\/p>\n\n<p>It was a great education in what it takes to build a scalable PHP application, but my attitude was terrible while\nI worked there. I was argumentative, belligerent, and basically acted like everything that was done that I disagreed\nwith was the worst decision ever. I learned what it was like to work on a large team, and I learned again that\ngetting along with your co-workers mattered when it was time to do things you really wanted to do.<\/p>\n\n<p>I lost the political game, and lost it hard. My own damn fault, to be sure.<\/p>\n\n<ul>\n<li>learned even more PHP<\/li>\n<li>used my first MVC-style framework (Mojavi!)<\/li>\n<li>first exposed to unit testing<\/li>\n<li>first exposed to virtual envrionments for dev work (BSD jails!)<\/li>\n<li>learned that I needed to pay attention to the political game<\/li>\n<\/ul>\n\n<h2 id=\"challenge-4%3A-go-someplace-you-feel-you%27re-wanted\">Challenge 4: Go someplace you feel you're wanted<\/h2>\n\n<p>After leaving that job, I took a job working for a company that owned a network of online forums for sports and\nauto enthusiasts, along with publishing several auto magazines. Terrible fit, never got to do anything except\nplay with CakePHP and start really blogging more. My blogging while working there led to me getting my next\njob...and every job since.<\/p>\n\n<ul>\n<li>learned how to do technical blogging<\/li>\n<li>learned how to contribute to an open source project (CakePHP)<\/li>\n<li>learned epic trolling skills on a mailing list<\/li>\n<\/ul>\n\n<h2 id=\"challenge-5%3A-work-from-home\">Challenge 5: Work from home<\/h2>\n\n<p>After leaving the forum job, I bounced through two jobs (left one cuz funding was pulled, left the other due\nto severe personality conflict with boss) and landed my first serious telecommuting gig working for a \nsports data integration company. I was sick of the long commute (90 minutes in the morning, two hours home)\nand held out for a job where I could work from home.<\/p>\n\n<p>Loved the job. Lots of freedom to build things the way I saw fit, with a few\nconstraints of language and associated tools (had to be ones we where using already). I also started ramping\nup the blogging, and grew my reputation through speaking at conferences and trying to find people I could \nalways learn things from.<\/p>\n\n<p>I also learned that when you build things for customers, you really should try to talk to those customers\nas much as you can to understand how to build what they want.<\/p>\n\n<ul>\n<li>learned some Python<\/li>\n<li>learned how to work remotely without someone needing to check up on you<\/li>\n<li>learned how to explain technical things to non-techincal people given a proper context<\/li>\n<li>learned how to self-promote on Twitter and build your \"brand\"<\/li>\n<li>learned how to get accepted at conferences<\/li>\n<li>learned how to get mad about getting rejected to speak at conferences<\/li>\n<li>developed ridonkulous levels of confidence in both my own skills and my abilities to find jobs I want to do<\/li>\n<li>started co-organizing a PHP user's group in Toronto<\/li>\n<\/ul>\n\n<h2 id=\"challenge-6%3A-find-a-job-doing-what-you-want-to-do\">Challenge 6: Find a job doing what you want to do<\/h2>\n\n<p>Potential NFL and NBA strikes had me nervous about my awesome-to-work-for employer going under, so I jumped\nship and joined a start-up that was focussing on ecommerce within social media tools and networks. I liked\nthe guys I worked with, but felt out of place: the things I was passionate about (best practices and testing)\nweren't a good fit for the place they were in (OMG WE HAVE TO BUILD THIS THING AND GET IT LAUNCHED) so after\na personally-frustrating year I left to join a place doing the types of things I wanted to do.<\/p>\n\n<ul>\n<li>learned how to wrap tests around reluctant code bases<\/li>\n<li>learned how to write an ebook<\/li>\n<li>learned how to do a podcast about programming issues<\/li>\n<li>started organzing a PHP conference in Toronto<\/li>\n<\/ul>\n\n<h2 id=\"challenge-7%3A-keep-finding-challenges\">Challenge 7: Keep finding challenges<\/h2>\n\n<p>Which of course leads me to the present. I'm now doing the type of coding work I want to do: focusing on \ntesting practices, researching tools to improve our developer work flow, and also branching out in the outside\nworld to helping more developers be aware of just how valuable adding good testing practices to your skill\nset could be.<\/p>\n\n<p>You can see all the challenges I put in front of myself, and how things didn't always end up the way I had hoped.\nIf I can overcome all this stuff, imagine what you can get done! There will never be a better time to get\ninvolved in building stuff for the web. You are spoiled for choice on tools, languages and opportunities.<\/p>\n\n<p>Don't be scared. Be excited. It only gets crazier from here on out!<\/p>\n",
        "date": "2012-08-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How did I end up here?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/08\/08\/how-did-i-end-up-here\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm taking a product research and development course this summer and as \npart of the course I am doing some research into where certain people\nI am interested in hang out. As you know, I'm a big proponent of both\nautomated testing and best practices. I do a lot of very shallow\nresearch via Twitter, but I want to know what places YOU all hang out\nin to find out information about things like how to structure your\ntests or what sort of practices you think could help you and your\nteam get better.<\/p>\n\n<p>Share them in the comments!<\/p>\n",
        "date": "2012-07-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Watering Holes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/07\/31\/watering-holes\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you are in the Greater Toronto Area and can make it out to York University's\ncampus in North York, I will be teaching a <a href=\"http:\/\/phptesting-estw.eventbrite.ca\/\">PHP Application Testing Bootcamp course<\/a>\nover three nights: August 13, 20 and 27th. Come out from 8pm to 10pm and push\nyour PHP and application testing skills to the next level.<\/p>\n\n<p>Space is limited (15 students), so act fast and I hope to see some of you there!<\/p>\n",
        "date": "2012-07-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHP Application Testing Bootcamp",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/07\/27\/php-application-testing-bootcamp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My co-worker <a href=\"http:\/\/jtreminio.com\">Juan Treminio<\/a> brought to my attention this interesting\nblog post by someone advocating <a href=\"http:\/\/antecedent.github.com\/a-time-and-place-for-monkey-patching.html\">monkey-patching strtotime in order to test his code<\/a>.<\/p>\n\n<p>For those not familiar with the term, first I suggest you go read what <a href=\"https:\/\/en.wikipedia.org\/wiki\/Monkey_patch\">Wikipedia says about it<\/a>\nand then try and understand why it is, in 99.999% of cases, a practice best left to \nreal experts at dynamic languages that allow redefinition of methods at run time.\nAnd definitely a terrible practice to recommend for testing purposes.<\/p>\n\n<p>The use of monkey-patching is extremely prevalent in the Ruby community and\nalso to a certain extent in Python usage. I'm not going to go into length\nabout their use of it except to say that it seems quite common and I think\nmost developers are using it as a shortcut to counter what might be poor\ncode architecture decisions. Perhaps some Rubyists could provide me with\nsome good examples of why it is so popular amongst them. I don't hate\nRuby, let's be extremely clear about that.<\/p>\n\n<p>So, our blog post author submits some code that needs testing:<\/p>\n\n<pre><code>function deleteOldPosts()\n{\n    $threshold = strtotime(\"-1 year\");\n    # Fetch all posts older than $threshold from the database\n    $oldPosts = Post::findAll([\"timestamp\" =&gt; [\"&lt;\" =&gt; $threshold]]);\n    foreach ($oldPosts as $oldPost) {\n        $oldPost-&gt;delete();\n    }\n}\n<\/code><\/pre>\n\n<p>Quite correctly he points out that this code would be difficult to test...so he\nthen goes on to explain that using <a href=\"http:\/\/php.net\/manual\/en\/book.runkit.php\">runkit<\/a> to\nmonkey-patch strtotime and what is this I don't even...<\/p>\n\n<p>I will start of by showing a subtle set of refactorings that would make this \ncode testable, and then explode into a rant afterwards.<\/p>\n\n<p>First, the threshold should be injected.<\/p>\n\n<pre><code>function deleteOldPosts($threshold)\n{\n    # Fetch all posts older than $threshold from the database\n    $oldPosts = Post::findAll([\"timestamp\" =&gt; [\"&lt;\" =&gt; $threshold]]);\n    foreach ($oldPosts as $oldPost) {\n        $oldPost-&gt;delete();\n    }\n}\n<\/code><\/pre>\n\n<p>Second, you replace the static method call with an object instantiation\nand a normal method call.<\/p>\n\n<pre><code>function deleteOldPosts($threshold)\n{\n    # Fetch all posts older than $threshold from the database\n    $post = new Post();\n    $oldPosts = $post-&gt;findAll([\"timestamp\" =&gt; [\"&lt;\" =&gt; $threshold]]);\n    foreach ($oldPosts as $oldPost) {\n        $oldPost-&gt;delete();\n    }\n}\n<\/code><\/pre>\n\n<p>Third, you inject your Post object into your function.<\/p>\n\n<pre><code>function deleteOldPosts(Post $post, $threshold)\n{\n    $oldPosts = $post-&gt;findAll([\"timestamp\" =&gt; [\"&lt;\" =&gt; $threshold]]);\n    foreach ($oldPosts as $oldPost) {\n        $oldPost-&gt;delete();\n    }\n}\n<\/code><\/pre>\n\n<p>No runkit. No monkey-patching. No justification for doing stuff like this\ninstead of the correct, long, hard, difficult slog through a legacy code base\nto do things the right way this time instead of compounding the problem.<\/p>\n\n<p>The other day on Twitter I commented that I felt that any blogger who does\na post that contains code in ANY programming language needs to understand\na few things:<\/p>\n\n<ul>\n<li>your code might be wrong<\/li>\n<li>your approach might be wrong<\/li>\n<li>people will take your advice as being canonical or idiomatic<\/li>\n<\/ul>\n\n<p>I am all for people sharing knowledge that they have gained. Hell, it's \nhow I've made my entire career. But don't go advocating solutions to\nproblems when there are much more straight-forward solutions available.<\/p>\n\n<p>The issue with that original method isn't that you need to monkey-patch\nstrtotime(). The issue is the coding decisions that led you to think that\nmonkey-patching ANYTHING was the way to do it.<\/p>\n\n<p>There are no shortcuts to testing things. It's extra work during development \nto save you extra work at deployment. Unless you start off a project doing\nTDD, you will have to refactor your code to make it work. Do not pretend\notherwise, and do not advocate the use of something that should only be\nused in specific, well-understood circumstances as a shortcut for testing\nyour code without modifying it.<\/p>\n",
        "date": "2012-07-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Monkey-patching is for closers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/07\/13\/monkey-patching-is-for-closers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At <a href=\"http:\/\/www.kaplanproffessional.com\">work<\/a> we have started creating a suite of\nautomated user acceptance tests, using <a href=\"http:\/\/behat.org\">Behat<\/a>, <a href=\"http:\/\/mink.behat.org\">Mink<\/a>\nusing selenium <a href=\"http:\/\/zombie.labnotes.org\/\">Zombie.js<\/a> and <a href=\"http:\/\/seleniumhq.org\/\">Selenium<\/a>\nas our browser drivers.<\/p>\n\n<p>I will be honest: I have been less-than-happy with Zombie.js' performance. It has a feel\nof being unfinished and newer versions of it don't work correctly with the Behat + Mink\ncombo. Given that we already had some <a href=\"http:\/\/en.wikipedia.org\/wiki\/Smoke_testing\">smoke tests<\/a>\nthat use Selenium, we decided to have some of our AUAT's use Zombie and some use Selenium.\nAfter a while, I get tired of seeing a test run just fine using Selenium but fail using\nZombie.js.<\/p>\n\n<p>I have been pushing us every-so-slightly towards using VM's for doing our development. Getting\nZombie.js installed and available for running Behat tests isn't a big problem, but given how\nflaky it has been for me and the proven use of Selenium for our tests that require the use\nof Javascript I wanted people to be able to use Selenium even though they are using a \nLinux VM.<\/p>\n\n<p>Enter <a href=\"http:\/\/saucelabs.com\">Sauce Labs<\/a>, a software-as-a-service product that allows you to \nuse Selenium to run tests in browsers that are running on VM's in Sauce Lab's own infrastructure.\nBasically, if you could use Selenium on your local machine you could do the same thing using\nSauce Labs.<\/p>\n\n<p>For us, we're interested in using their Even better is that you can make it work using Behat + Mink \nand the Selenium RC1 drivers. The <a href=\"http:\/\/seleniumhq.org\/docs\/03_webdriver.html\">WebDriver<\/a> stuff for \nSelenium 2 does not work with the Sauce Labs On Demand service. If I've understood correctly what\nthe lead developer being Behat <a href=\"https:\/\/twitter.com\/everzet\">@everzet<\/a> said to me, Sauce Labs is\nworking on a Selenium 2 \/ Webdriver extension for use with Behat. I'm sure I'll be corrected if\nI am wrong.<\/p>\n\n<p>So what did we do in order to get our tests running on Sauce Labs? These instructions already\nassume that you have installed Behat, Mink and any other support libraries and tools you need.\nCheck out <a href=\"http:\/\/sauceio.com\/index.php\/2012\/01\/adding-sauce-to-behat\/\">this blog post from Sauce Labs<\/a>\nfor details on how to get that all sorted out.<\/p>\n\n<h2 id=\"step-1%3A-go-create-an-account-with-sauce-labs\">Step 1: Go create an account with Sauce Labs<\/h2>\n\n<p>I created the free one, contains plenty of testing minutes to allow you to play\nwith it.<\/p>\n\n<p>I'll wait here while you go and do that.<\/p>\n\n<h2 id=\"step-2%3A-go-download-sauce-connect\">Step 2: Go download <a href=\"https:\/\/saucelabs.com\/connect\">Sauce Connect<\/a><\/h2>\n\n<p>From their web site:<\/p>\n\n<blockquote>\n  <p>Sauce Connect securely proxies browser traffic between Sauce Labs' \n  cloud-based VMs and your local servers. Connect uses ports 443 and 80 for \n  communication with Sauce's cloud. Most companies allow this without \n  special exceptions.<\/p>\n<\/blockquote>\n\n<p>As far as I can tell, Sauce Connect sets things up so that when you tell Behat + \nMink to run some tests on a Selenium browser located at 'ondemand.saucelabs.com'\nthat Sauce Lab's infrastructure knows how to connect with the application you're\ntesting. This sort of architecture is incredibly important if you are having to test\nthings (like we do) only exist on a VPN and have no public-facing URLs.<\/p>\n\n<p>Follow the directions on the web site on how to install it, run it, and\nsome tips for troubleshooting. Can't say I agree with their suggested method of monitoring\nand making sure it stays up (c'mon people, just use <a href=\"http:\/\/supervisord.org\/\">Supervisor<\/a>)\nbut otherwise the instructions are easy to follow.<\/p>\n\n<h2 id=\"step-3%3A-modify-your-behat-configuration-files-to-use-sauce-labs-on-demand-service\">Step 3: Modify your Behat configuration files to use Sauce Labs On Demand service<\/h2>\n\n<p>Of course, your behat config file looks different, but here's how ours looked\n(scrubbed to remove any sensitive info)<\/p>\n\n<pre><code>default:\n  paths:\n    features:   %%BEHAT_CONFIG_PATH%%\/features\n    bootstrap:  %%BEHAT_CONFIG_PATH%%\/features\/bootstrap\n  context:\n    parameters:\n      base_url: \"https:\/\/cannot-tell-you.com\"\n      zombie:\n          port: 9124\n          host: localhost\n          auto_server: true\n          node_bin: 'node'\n      selenium:\n          host: ondemand.saucelabs.com\n          port: 80\n          browser: &gt;\n            {\n                \"username\": \"chartjes\",\n                \"access-key\": \"like-i-would-tell-you-bro\",\n                \"browser\": \"iexplore\",\n                \"browser-version\": \"8.\",\n                \"os\": \"Windows 2003\",\n                \"name\": \"Kaplan Behat Selenium Testing\"\n            }\n  formatter:\n    parameters:\n      verbose: true\n      time: true\n      decorated: true\n      language: 'en'\n      output_styles:\n          comment: ['black', 'yellow', ['bold']]\n<\/code><\/pre>\n\n<p>As far as I can tell, we can only run things under Windows 2003 but I do not\nknow if that is a limitation because of the free account I have. It sure would\nsuck to not be able to test things on Windows XP.<\/p>\n\n<h2 id=\"step-4%3A-automate-all-the-things\">Step 4: AUTOMATE ALL THE THINGS<\/h2>\n\n<p>Now we can run all your Behat tests that use Selenium on Sauce Labs infrastructure.\nWhy is that such a big deal? Because Sauce Labs very thoughtfully records videos\nof all your tests, along with screenshots and nice, easy-to-read log of your\ntests.<\/p>\n\n<p>I cannot emphasize how useful having this information is. Why? Because it gives\nyou something to look at when things go wrong, as Behat itself will give you\nsome very terse info when tests fail. The <a href=\"https:\/\/twitter.com\/FreshWillisms\">other test engineer<\/a> and\nI let out a little squee when we saw all those things.<\/p>\n\n<p>If you truly want to build a modern QA department, tools like Sauce Labs are\nthe standard to aim for. It's not enough to just run your automated tests using\nBehat, you need to also be able to record things so you can go back and check\nthem out when things go wrong.<\/p>\n\n<p>I mean, really, it's more important to know why a test failed than to know that\neverything passed. Passing tests are boring, failing tests are a call to action\nto find out why it doesn't work.<\/p>\n\n<p>Anyway, I hope this blog post helps you get your own Behat + Mink environment\nconfigured to use Sauce Labs.<\/p>\n",
        "date": "2012-06-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Yummy sauce on my Behat",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/06\/20\/yummy-sauce-on-my-behat\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>You went through the hard process of finding just the right people to work with\nyou on your awesome idea. You've picked some solid tools that your team\nunderstands how to use and you are all excited to start cranking out the Next\nBig Thing you've opted to work on.<\/p>\n\n<p>So why don't you trust the developers you've hired to do the job without\nsupervision?<\/p>\n\n<p>I've seen a trend where more and more people are claiming it is essential\nfor your team to be located in one spot: eating lunch together, creating things\ntogether...and staying up until the wee hours of the morning fixing the\nstupidly broken bullshit application you've released into the world together.<\/p>\n\n<p>I've been coding for money since 1998. So that makes me a fucking internet \nsenior citizen. Get off my lawn. I have spent roughly half that time either\nworking as the only developer for a company or as a remote developer on a team\nI have encountered NOTHING in my career that\nleads me to believe that having all your developers spending all their\ntime together in an office leads to any better results than a team of\ndistributed developers.<\/p>\n\n<p>One of the alleged benefits of having your team all together in one place\nis the \"creativity and brainstorming\" argument. You know, the one where\nawesome things happen because you can turn to the person next to you and\nsay \"you know, I just thought of something...\" and BOOM GOES THE DYNAMITE,\nyou have an awesome feature for your application.<\/p>\n\n<p>For most of my career, the reality has been that developers sit there in\nan open concept office with music being piped into their ears so that \npeople won't distract them so they can get some fucking work done. Every\nmeeting, every random conversation, every interruption as their boss\ndecides today's the day we start working on his favourite feature is a\nbarrier to getting work done.<\/p>\n\n<p>So why don't you trust the developers you've hired to do the job without supervision?<\/p>\n\n<p>Is it the \"Puritan work ethic\" that accompanied early immigrants to North\nAmerica that causes this? People have decided you are not allowed to have\nfun while working? Being remote means I can create an environment for\nmyself that allows me to be the most productive. This means music playing\nwithout headphones...and a system that notifies me when my co-workers\nneed to communicate with me. It means a nice comfy lounger with cushions\nthat I can sit in in order to think about a tough task...with my laptop\nin my, um, lap while doing so. It means that my comfort while working is more\nimportant than your desire to have me sitting where you can keep an eye\non me.<\/p>\n\n<p>Could I ever create that environment in a cubicle? Not a chance, Open offices AND cubicles \nserve as a reminder that someone is always watching, you cannot be free\nto choose your work environment, and you better stop fucking around and get\nthat work done. To me it all says \"we don't trust you.\"<\/p>\n\n<p>So why don't you trust developers you've hired to do the job without supervision?<\/p>\n\n<p>Again, I understand that people working in startups feel that the chaos\nis a necessary part of the process. I happen to disagree with that sort\nof philosophy because I feel even an application with minimal features should\nbe executed on with 100% effort. If you think you will \"do it right next time\"\nthen I don't know if I want to be around next time you try.<\/p>\n\n<p>A control freak\nwho gives you a nice office, chair, free snacks and a playroom with\nvideo games is still a control freak. They believe that you need to be\nnear them at all times during business hours in order to be trusted to\ndo the job they've asked you to do. All those things are an incentive\nto get you in the office for however long THEY feel you need to be there.\nHow else can you explain it, if you are being rational and honest about it?<\/p>\n\n<p>So why don't you trust your developers you've hired to do the job without\nsupervision?<\/p>\n\n<p>I'd love to hash this out more in the comments, so let me know what you think.<\/p>\n",
        "date": "2012-06-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why Don't You Trust Your Developers?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/06\/18\/why-dont-you-trust-your-developers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>People often ask me what's the one thing they could do for their code base\nRIGHT NOW that will make it easier to test. To me, the answer is simple:\nmake sure you are using <a href=\"http:\/\/en.wikipedia.org\/wiki\/Dependency_injection\">Dependency Injection<\/a>\n(yes the link is long and has code samples in Java, but whatever). Without\nthe ability to \"inject\" your dependencies into your code (whether it is \nclass methods or functions) you will have problems testing modules of\ncode in isolation from each other.<\/p>\n\n<p>In my <a href=\"http:\/\/grumpy-testing.com\">book on buiding testable PHP apps<\/a> I touched upon Dependency Injection\nand I also mention the concept of a <a href=\"http:\/\/martinfowler.com\/articles\/injection.html\">Dependency Injection Container<\/a>\n(sometimes also called Inversion of Control Containers). On the surface it\nsounds like a really useful tool: you put all your dependencies inside the\ncontainer and then inject those dependencies into your classes and functions.<\/p>\n\n<p>The use of DIC's has become a common pattern in PHP frameworks, as it does\noffer you an easier way to access those dependencies. But I encourage people\nto be careful with how they choose to use these containers, because they can\nadd unanticipated dependencies to your application.<\/p>\n\n<p>If you use dependency injection without the container, then you have code that\nlooks like this:<\/p>\n\n<pre><code>&lt;?php\nnamespace Grumpy;\n\nclass Foo\n{\n    protected $_bar;\n    protected $_baz;\n\n    public function __construct(\\Grumpy\\Bar $bar, \\Grumpy\\Baz $baz) {\n        $this-&gt;_bar = $bar;\n        $this-&gt;_baz = $baz;\n    }\n}\n\n\/\/ In our test, using PHPUnit's built-in mock support\n$mockBar = $this-&gt;getMock('\\Grumpy\\Bar');\n$mockBaz = $this-&gt;getMock('\\Grumpy\\Baz');\n\n$testFoo = new \\Grumpy\\Foo($mockBar, $mockBaz);\n\n<\/code><\/pre>\n\n<p>Very straightforward to see the dependencies that we are trying to inject\ninto the class, and you can see exactly what dependencies you will have to\ncreate mock objects for in your tests.<\/p>\n\n<p>If you use a container as a container ONLY then your test setup changes \na bit.<\/p>\n\n<pre><code>&lt;?php\n\n\/**\n * Code for Foo is the sanme but how we get the dependencies is different\n * because we are going to place them in the container first and then\n * explicitly inject them\n *\/\n$container = Context::getDependendencyContainer();\n$container['bar'] = $this-&gt;getMock('\\Grumpy\\Bar');\n$container['baz'] = $this-&gt;getMock('\\Grumpy\\Baz');\n\n$testFoo = new \\Grumpy\\Foo($container['bar'], $container['baz']);\n\n<\/code><\/pre>\n\n<p>The purpose of the DIC is to have all your dependencies in one place\nwhere they are easier to grab. It's a great concept, but it can easily\nmorph into a new dependency with one architectural change.<\/p>\n\n<pre><code>&lt;?php\nnamespace Grumpy;\n\nclass Foo\n{\n    protected $_bar;\n    protected $_baz;\n\n    public function __construct(\\Grumpy\\Container $container) {\n        $this-&gt;_bar = $container['bar'];\n        $this-&gt;_baz = $container['baz'];\n    }\n}\n\n\/\/ In our test, using PHPUnit's built-in mock support\n$mockBar = $this-&gt;getMock('\\Grumpy\\Bar');\n$mockBaz = $this-&gt;getMock('\\Grumpy\\Baz');\n$mockContainer = $this-&gt;getMock('\\Grumpy\\Container');\n$mockContainer['bar'] = $mockBar;\n$mockContainer['baz'] = $mockBaz;\n\n$testFoo = new \\Grumpy\\Foo($mockContainer);\n\n<\/code><\/pre>\n\n<p>So what is so potentially bad about this? Well, now you've introduced a\ndependency into your code such that it relies on the dependency container\ninstead.<\/p>\n\n<p>I've worked with code bases that make heavy use of containers to do more\nthings than just store dependencies to be injected into your code. If \nyou've every used Zend&#95;Registry to store things that you then retrieve\nlater you will know what I am talking about.<\/p>\n\n<p>So what is really the difference between a service locator and a \ndependency injection container? I think the difference is in how you\nuse them. If you are using a container and manually injecting dependencies\ninto your code, then you are using what I guess you could call a \n\"pure\" dependency injection container. Once you start injecting\nthe container itself into your objects, it's no longer just a container.\nIt's a service locator since you will use it to retrieve all sorts of\nthings your application might need.<\/p>\n\n<p>I understand why people use the container that way. It's easy! It's\nconvenient. It's a pain in the ass to test, is what it is.<\/p>\n\n<p>In the end, it's really an architectural choice that you need to make.\nPersonally, I prefer to combine the two: use the container to store\nyou dependencies but \"manually\" inject them into your classes and\nfunctions. I prefer this technique because it makes it easier up front\nto determine the dependencies the code you are testing are going\nto need.<\/p>\n\n<p>Remember kids, the\ngoal is to create code that is easily understood and easily testable, \nor else <a href=\"http:\/\/twitpic.com\/9p5o2x\/full\">this guy<\/a> might come looking\nfor you to \"ask you some questions about your code\".<\/p>\n",
        "date": "2012-06-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "DIC vs. Service Locator",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/06\/06\/dic-vs-service-locator\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've hacked together a little CLI script that I think will be of use to many\npeople who are trying to answer the question \"just what should I do to test\nthis thing anyway?\" as they learn how to write PHPUnit tests to go along with\ntheir code.<\/p>\n\n<p>While I as at php|tek 2012 I had a conversation with <a href=\"https:\/\/twitter.com\/DragonBe\">Michelangelo van Dam<\/a>\nabout an idea I had for a testing tool: something that could look at your code\nand give you suggestions on what you should be testing. In no time flat he\nhooked me up with one of the core guys on the <a href=\"http:\/\/phpdoc.org\">phpDocumentor<\/a> project,\n<a href=\"https:\/\/twitter.com\/mvriel\">Mike van Riel<\/a> and in the course of one short Skype\nchat I knew I had the right tools for the job.<\/p>\n\n<p>I've created something that I am calling <a href=\"https:\/\/github.com\/chartjes\/php-tricorder\/\">PHP-Tricorder<\/a>, a CLI\nutility that can be used in conjunction with phpdoc structure.xml files to make\nsuggestions on testing scenarios. It's at a 0.1 release right now, so I anticipate\nit will grow and add more features as time goes on. I'd like to think right now\nthat it's pretty useful for people who are just beginning down the road of\nwriting tests for their code.<\/p>\n\n<p>Here's some sample output from a run of PHP-Tricorder:<\/p>\n\n<pre><code>chartjes@php-vm:~\/php-tricorder$ php tricorder.php ..\/building-testable-applications\/lib\/IBL\/structure.xml \nReading in phpDocumentor structure file...\n\nFranchiseMapper.php\n\nScanning FranchiseMapper\n\n__construct -- make sure to mock $conn as \\PDO\n\ncreateFranchiseFromRow -- make sure to test $row using an empty array()\n\ndelete -- make sure to mock $franchise as \\IBL\\Franchise\n\nfindAll -- make sure to test method returns \\IBL\\Franchise instances\nfindByConference -- make sure to test $conference using null or empty strings\n\nfindByConferenceDivision -- make sure to test $conference using null or empty strings\n\nfindByNickname -- make sure to test $nickname using null or empty strings\n\nfindById -- make sure to test $id using non-integer values\n\ngenerateMap -- make sure to test $teamsTable using null or empty strings\n\nsave -- make sure to mock $franchise as \\IBL\\Franchise\n\n_insert -- non-public methods are difficult to test in isolation\n_insert -- make sure to mock $franchise as \\IBL\\Franchise\n\n_update -- non-public methods are difficult to test in isolation\n_update -- make sure to mock $franchise as \\IBL\\Franchise\n<\/code><\/pre>\n\n<p>So check the project out on Github, pull requests and patches are welcome\nand I look forward to building this tool out to meet the needs of other\nPHP developers.<\/p>\n",
        "date": "2012-05-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Tricorder: a testing helper for PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/31\/tricorder-a-testing-helper-for-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>So how does the Grumpy Programmer write code, TDD style? It starts with \nusing a set of tools that reduce the amount of friction required.<\/p>\n\n<p>First, I do almost all my work from a terminal. On my Macbook I use\n<a href=\"http:\/\/www.iterm2.com\/#\/section\/home\">iTerm 2<\/a> instead of the stock\nTerminal.app. Until recently you could not get 256 colours without\nsome external hacking and since I like my editor to have purty colours\nI needed a terminal to match it. I might take a look at Terminal.app\nagain, but iTerm 2 fits the bill.<\/p>\n\n<p>Why the terminal? PHPUnit is a CLI application. Yes, many popular\neditors and IDE's can do things like execute PHPUnit for you, but they\nare limited in what flexibility they provide. At Kaplan we have several\ndifferent configurations under which we can run our tests. Again, reduce\nthe friction between the tools and you using them.<\/p>\n\n<p>Then we have the <a href=\"http:\/\/www.vim.org\">One True Editor<\/a>. While I do use\nother editors from time to time (I do like <a href=\"http:\/\/www.sublimetext.com\/2\">Sublime Text 2<\/a> \na lot because it has Vim bindings), I stick with Vim. Why? The plugins.<\/p>\n\n<p>Here's what I use:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-pathogen\">Pathogen<\/a> to make loading other plugins easy<\/li>\n<li><a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=102\">DiffDir<\/a> for making code review and test reviews easier<\/li>\n<li><a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=2423\">Gist.vim<\/a><\/li>\n<li><a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=13\">closetag<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/AndrewRadev\/inline_edit.vim\">inline_edit.vim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/scrooloose\/nerdtree\">nerdtree<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/ervandew\/supertab\">supertab<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/vim-scripts\/surround.vim\">surround.vim<\/a> - it has ruined me for using other editors<\/li>\n<li><a href=\"http:\/\/vimcasts.org\/episodes\/aligning-text-with-tabular-vim\/\">Tabular.vim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/majutsushi\/tagbar\">tagbar<\/a> - INDISPENSABLE<\/li>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-repeat\">vim-repeat<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/thisivan\/vim-taglist\">vim-taglist<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/tpope\/vim-unimpaired\">vim-unimpaired<\/a><\/li>\n<\/ul>\n\n<p>There is nothing specific to doing TDD in these plugins, but what they\ndo for me is allow me to slice and dice text as quickly as possible, along\nwith providing me with easy ways to navigate through the code base. Remember,\nreducing friction is a big thing to me. If the tool makes it tough for me\nto do what I want, it will be the target of grumpy ranting.<\/p>\n\n<p>One of the reasons I like Sublime Text 2 is that you can jump all over the\nplace in the code base in similar ways. If you editor doesn't allow you to\ndo that, you need to get rid of that editor and use something that does.\nNO EXCUSES.<\/p>\n\n<p>A typical coding session has me using two terminal windows. One has Vim running\nin it, the other is used to run PHPUnit or other testing framework of choice as\nI venture in the world of BDD and testing in other languages. Then I do the \nfollowing:<\/p>\n\n<ul>\n<li>figure out HOW to test the code I'm writing<\/li>\n<li>write the tests required<\/li>\n<li>write code until the tests pass<\/li>\n<li>refactor code as required<\/li>\n<li>refactor tests as required.<\/li>\n<\/ul>\n\n<p>That's really all their is to it. The actual work flow of when you are using\nTDD isn't magical. I will admit that experience is the only teacher for how\nto actually write the tests, but luckily I have an awesome <a href=\"https:\/\/twitter.com\/FreshWillisms\">co-worker<\/a>\nwho bellows obscenities at me while guiding me down the path to total testing\nmastery. I know Will, you only hate me because you love me.<\/p>\n\n<p>Every time I make a change to a test or the code, I re-run the tests. I find that\nthis lets me get more done while actually slowing down the pace. You end up\nmore focussed on the bit of code that really needs your attention, instead of\ngetting drawn into blind alleys.<\/p>\n\n<p>I also frequently run code-coverage reports to make sure that I'm getting\nmaximum coverage for my efforts, while ignoring writing tests specifically\nfor methods with very low CRAP indexes. Again, I'm making sure that I am\ntargeting the parts of my code that need to be tested.<\/p>\n\n<p>I know I've written about this before, but when you approach things from a\nTDD perspective, you find that using things like dependency injection\nbecome second nature.<\/p>\n\n<p>If there is a lesson to be learned from this, it's to make sure that every\ntool that you use reduces the friction that is generated when building\nyour application using TDD.<\/p>\n",
        "date": "2012-05-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How The Testing Sausage Gets Made",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/17\/how-the-testing-sausage-gets-made\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was asked on Twitter today for my thoughts on the topic of whether or not\nthere are things you should NOT test. Of course, I think that you should\n<a href=\"https:\/\/www.littlehart.net\/test-all-the-things.jpg\">test all the things<\/a>\nbut let's be honest in what we're trying to do.<\/p>\n\n<p>Let's start out with the premise that every single bit of code in your\napplication. By this I mean we have 100% code coverage for your application.\nThis is difficult but achievable with lots of tests and proper use of\nmock objects.<\/p>\n\n<p>Even with 100% code coverage, it still might not be enough. So much \ndepends on your actual test cases. Have you anticipated edge cases that\ncould cause your code grief? This is the one area of web applications that\nI think leads to the greatest amount of problems: determining edge cases\nwhen your code accepts user-generated content. So even if 100% code coverage\ncan't save you from every problem, what is a good compromise?<\/p>\n\n<p>If you obsessively run PHPUnit code coverage reports like I do, you will be familiar\nwith the <a href=\"http:\/\/www.artima.com\/weblogs\/viewpost.jsp?thread=210575\">CRAP index<\/a> values\nfor your code. Go read the article about it. I'll wait.<\/p>\n\n<p>I think that if you want to do effective testing, you can probably limit\nyour code coverage efforts to class methods or functions that have a CRAP index\nof 5 of more. It's a low enough value that you will end up testing a very large\namount of your application's code base and will be testing non-trivial code.<\/p>\n\n<p>You don't really need to test pass-through methods or functions (functions that are one-liners\nthat return the response from another methods or functions) or getter \/ setter\nfunctions (if you're into that sort of thing). Chances are they will get\ncoverage in tests that call those methods.<\/p>\n\n<p>In essence, don't waste a lot of time writing tests that test the trivial\nor totally expected. You will have a much greater impact on your application\nby writing tests for the complicated parts of your application.<\/p>\n\n<p>Finally, I encourage you to pursue another very impactful testing practice:\nwhenever a bug is reported in your application, write a test to verify \nthe bug. Then fix your application until the bug goes away. By doing things\nthat way, you end up with a collection of tests that reflect the various\nways that the users of your application actually, you know, use your\napplication.<\/p>\n\n<p>Good code coverage results in a feeling that only weird edge cases are going\nto bring your application crashing down. That frees you up to keep on\nbuilding out the application instead of worrying if a minor change is going\nto wreak everything.<\/p>\n\n<p>So the ultimate goal is TEST ALL THE THINGS THAT MATTER. Aim for that, and\nthe rest will all fall into place.<\/p>\n",
        "date": "2012-05-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Test All The Things?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/16\/test-all-the-things\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yesterday on Twitter I got into a nerdfight with a blogger who posted a\nblog entry about <a href=\"http:\/\/odino.org\/use-the-strategy-to-avoid-the-switch-case-antipattern\/\">using the Strategy pattern to avoid switch-case<\/a>.\nAt first glance, I was convinced that he was using <a href=\"http:\/\/ca.php.net\/manual\/en\/language.variables.variable.php\">variable variables<\/a>\nwhich I feel is a big <a href=\"https:\/\/en.wikipedia.org\/wiki\/Code_smell\">code smell<\/a>.<\/p>\n\n<p>So natually I started arguing. I was rude. He was rude, slapping me in the twitter face with a blog link that seemed\nto indicate he thought I had no idea about variables in PHP. To be fair I earned that by not paying attention.\nOnce I realized what he was doing, I realized that the Strategy pattern was applicable in this case...but his\nchosen example was dumb and one that I wouldn't have used to demonstrate things. As expected, he told me to supply\na sample of a better way. I did, telling him that the sample would be better if he didn't mash the logging level\ntogether with the message.<\/p>\n\n<p>Anyway, I'm not going to do that bit of work here. Instead, I want to show that it is not enough to teach an idea\nto someone. You have to show them how to test their idea once it's been refactored to make sure nothing has changed.\nFirst, let's start with a working example of his logging class, using the dreaded switch-case.<\/p>\n\n<pre><code>&lt;?php\n\n\/\/ Sample logger class that uses a switch-case\nrequire_once 'LoggingException.php';\n\nclass LoggerSwitch\n{\n    public function logMessage($message = \"CRITICAL::The system encountered a problem\")\n    {\n        $parts = explode('::', $message);\n        $level = strtolower($parts[0]);\n        $logMessage = $parts[1];\n\n        switch ($level) {\n            case 'notice':\n                return $this-&gt;_writeToLog($level, $logMessage);\n            case 'critical':\n                $this-&gt;_writeToLog($level, $logMessage);\n                return $this-&gt;_emailOps($message);\n            case 'catastrophe':\n                $this-&gt;_writeToLog($level, $logMessage);\n                $this-&gt;_emailOps($logMessage);\n                return $this-&gt;_textCeo($message);\n        }\n\n        throw new LoggingException(\"Unknown logging level {$level}\");\n    }\n\n    protected function _writeToLog($level, $logMessage)\n    {\n        return \"Wrote {$logMessage} to {$level} file\";\n    }\n\n    protected function _emailOps($logMessage)\n    {\n        return \"Sent email to Ops\";\n    }\n\n    protected function _textCeo($message)\n    {\n        return \"Sent text to CEO\";\n    }\n}\n<\/code><\/pre>\n\n<p>Here's the tests for it<\/p>\n\n<pre><code>&lt;?php\n\n\/\/ PHPUnit test for logger-switch.php\n\nrequire '..\/logger-switch.php';\n\nclass LoggerSwitchTest extends PHPUnit_Framework_TestCase\n{\n    public $logger;\n\n    public function setUp()\n    {\n        $this-&gt;logger = new LoggerSwitch();\n    }\n\n    \/**\n     * Data provider for testing our logging object\n     *\/\n    public function loggerTestingScenarios() \n    {\n        return array(\n            array(\n                'NOTICE::test notice message',\n                'Wrote test notice message to notice file'\n            ),\n            array(\n                'CRITICAL::test notice message',\n                'Sent email to Ops'\n            ),\n            array(\n                'CATASTROPHE::test notice message',\n                'Sent text to CEO'\n            ),\n        );\n    }\n\n    \/**\n     * @test\n     * @dataProvider loggerTestingScenarios\n     * @param $message          string\n     * @param $expectedResponse string\n     *\/\n    public function testReturnsExpectedResponseBasedOnMessage(\n        $message,\n        $expectedResponse)\n    {\n        $response = $this-&gt;logger-&gt;logMessage($message);\n        $this-&gt;assertEquals(\n            $expectedResponse,\n            $response,\n            'Did not get expected response'\n        );\n    }\n\n    \/**\n     * @test\n     *\/ \n    public function testThrowsExceptionWhenUnknownLevelSubmitted()\n    {\n        $this-&gt;setExpectedException('LoggingException', 'Unknown logging level test');\n        $response = $this-&gt;logger-&gt;logMessage('TEST:: test message');\n    }\n}\n<\/code><\/pre>\n\n<p>These tests give us 100% test coverage, in case you were wondering.<\/p>\n\n<p>Okay, so the next step is to refactor our incredibly stupid logging class to\nuse the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strategy_pattern\">Strategy pattern<\/a>.<\/p>\n\n<pre><code>&lt;?php\n\n\/\/ Logging class that uses the strategy pattern\nrequire_once 'LoggingException.php';\n\nclass LoggerStrategy\n{\n    public function logMessage($message = \"CRITICAL::The system encountered a problem\")\n    {\n        $parts = explode('::', $message);\n        $level = strtolower($parts[0]);\n        $method = sprintf('_log%sMessage', ucfirst($level));\n\n        if (!method_exists($this, $method)) {\n            throw new LoggingException('Unknown logging level ' . $level);\n        }\n\n        return $this-&gt;$method($parts[1]);\n    }   \n\n    protected function _logNoticeMessage($message)\n    {\n        return $this-&gt;_writeToLog('notice', $message);\n    }\n\n    protected function _logCriticalMessage($message)\n    {\n        $this-&gt;_writeToLog('critical', $message);\n        return $this-&gt;_emailOps($message);  \n    }\n\n    protected function _logCatastropheMessage($message)\n    {\n        $this-&gt;_writeToLog('catastrophe', $message);\n        $this-&gt;_emailOps($message);\n        return $this-&gt;_textCeo($message);\n    }\n\n    protected function _writeToLog($level, $logMessage)\n    {\n        return \"Wrote {$logMessage} to {$level} file\";\n    }\n\n    protected function _emailOps($logMessage)\n    {\n        return \"Sent email to Ops\";\n    }\n\n    protected function _textCeo($message)\n    {\n        return \"Sent text to CEO\";\n    }\n}\n<\/code><\/pre>\n\n<p>The thing that lept out at me was that this refactor worked, but resulted in\nmore code. The good characteristic is all the small methods without lots of\ncode in them. Even better is that we don't have to change any of our tests,\neverything worked the same! All we had to do was change which object we\nwere using for $this->logger.<\/p>\n\n<p>If you want to see the code for this blog post for yourself (it does work\nand run using PHPUnit) you can grab it from <a href=\"https:\/\/github.com\/chartjes\/blog-strategy\">Github<\/a>.\nAlso, feel free to take a look at the <a href=\"http:\/\/www.grumpy-testing.com\/strategy\/tests\/coverage\/\">code coverage report<\/a>\nas proof that I did cover everything I should have.<\/p>\n",
        "date": "2012-05-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Have A 'Strategy'",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/15\/have-a-strategy\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In the run-up to <a href=\"http:\/\/tek.phparch.com\">php|tek 2012<\/a> next week I wanted to\ndo a blog entry every day this week. Since I am supremely lazy I made sure to\nask my followers on Twitter what they would like me to blog about. There were\nsome interesting suggestions but I will start out with one that I think\nexplains a lot about me.<\/p>\n\n<p>I've spent quite a bit of time in the last few years helping to spread the word\nthat having automated test suites and testable applications is a good thing.\nI know it's not easy and I've had conversations with many other developers who\nstill think that writing tests is a waste of time, not appropriate for their\nunique situation, and so on and so forth.<\/p>\n\n<p>If I were to make some sweeping generalizations about those people who feel\nthat test-driven development is a waste of time, I would call them supremely\noverconfident in their own abilities in the face of plenty of evidence that\nsuggests otherwise. Many developers that I respect immensely still seem to\nthink that Getting Shit Done Does Not Include Writing Tests.<\/p>\n\n<p>I will return to that topic later.<\/p>\n\n<p>I don't remember when it was that I exactly discovered <a href=\"http:\/\/simpletest.org\">SimpleTest<\/a> while\nworking at an online dating site. I do remember it was in 2003. If I had to make an educated guess it was\nbecause I had gotten tired of testing everything through a browser. Loading\nthe same pages OVER AND OVER AND OVER again, hoping I had covered all the\nscenarios for the incredibly crummy code I was writing (this was quite early\nin my programming career) in my manual testing. Only to find that I had \nmissed something and it was causing problems on the live site.<\/p>\n\n<p>Once I discovered unit testing, it was like a bit was flipped in my brain.\nI immediately understood the benefits of a test suite that we could run from\nthe browser AND provide proof that all was good. No more manual testing unless \nabsolutely necessary!<\/p>\n\n<p>It took some time and some lobbying but not too long before I left, the\napplication architect they had hired decided that we needed to write a bunch\nof tests using SimpleTest as part of progressing towards a refactoring and\nrewrite of the application itself, since it really was the type of spaghetti\nPHP application the language is derided for encouraging.<\/p>\n\n<p>I don't know what happened to all those tests after I left. I would keep\nrunning into people who I worked with there and new hires and would sometimes\nask what was going on. Never did ask about tests though, as I assumed that\nthey were either still there but not being used, or ripped out under the\nguise of Getting Shit Done Does Not Include Writing Tests.<\/p>\n\n<p>So why am I still in the minority that values testing? I think it's because\nmany people blind themselves to the reality of how much work they are really\ngetting done. Writing tests as part of the development process, in my opinion,\nsimply moves the debugging of your application from after you've written the\ncode to while you are still writing it.<\/p>\n\n<p>Look, it still takes the same amount of time to write code + debug whether you\nuse TDD or GSDDNIWT. Be honest with yourself. Every time you are up until the\nearly hours of the morning trying to fix a problem is an opportunity to be\nreally honest with yourself and say \"how can I avoid this?\" instead of saying\n\"oh well, this is how it really is.\" I believe that having tests will reduce\nthe amount of time you spend trying to understand why things are not working \nthe way that you expect them to.<\/p>\n\n<p>If anything, the rise of startup worship makes the job of people like me\neven tougher. Minimum Viable Product goes hand-in-hand with GSDDNIWT. I cringe\nwhen people forward me conversations with their bosses and co-workers that\nseem to imply that only inexperienced developers really need tests. \"Rockstars\nhave the codebase memorized and can intuitively make changes that won't break\nanything.\" Really?<\/p>\n\n<p>I can only speak for myself, but testing is my way of not having to remember\nthe entire code base. It lets me examine discrete modules of code and see\nclear examples of how they work and how they are supposed to interact with\nother modules. When it's crunch time and something absolutely needs to work,\nmy memory is the last thing I want to be relying on to tell me where to look\nfor the problem.<\/p>\n\n<p>I could write a very long ranty blog post about testing but I will save my\nenergy for those ready to be converted instead of those who have decided to\nrely on their immense programming skills and eidetic memory about their\napplication. Lesser mortals like me will knit themselves a comfy blanket\nusing tests and simplified application models and hopefully be sound asleep\nwhile my rockstar compatriots are up at 2am debugging their application \nafter a painful production launch.<\/p>\n",
        "date": "2012-05-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why I Began Testing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/14\/why-i-began-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Some of you might have a vision of me, the self-described and oft-labeled\nGrumpy Programmer as the type who prefers to work in solitude. Uninterrupted,\nI crank out code while in The Zone.<\/p>\n\n<p>I prefer working in collaborative environments where the entire team gets to\nwork on the entire application. None of this siloing bullshit that I see happen\ntime and time again. \"Borat is the only guy who understand our reporting system.\nWe can't possibly let anyone else work on it!\" That sort of nonsense doesn't\nbelong on any team and also speaks of ridonkulous communication problems.<\/p>\n\n<p>At <a href=\"http:\/\/www.kaplanprofessional.com\">Kaplan Professional<\/a> they've chosen to\nuse <a href=\"http:\/\/en.wikipedia.org\/wiki\/Pair_programming\">pair programming<\/a> as a normal,\neveryday development practice. Our team consists of 3 developers in the main\noffices in La Crosse, 7 remote workers spread across 3 time zones, 2 QA staff, \none testing engineer, and our development manager. Pair programming has worked\nout awesomely and I want to try and explain why.<\/p>\n\n<p>One of the biggest hurdles facing a team with in-house and remote workers is\ncommunication issues. Your classic pair programming setup is two developers\nsitting together at the same desk, one typing while the other helps out with\nsuggestions on how to write the tests we're going to need and how to hand-crafted\nour artisanal code. Sadly we still have people writing the tests AFTER they've\nwritten the code, but grumpiness is not eliminated in one day.<\/p>\n\n<p>At Kaplan we use the dynamic duo of <a href=\"http:\/\/join.me\">Join.me<\/a> and <a href=\"http:\/\/www.teamspeak.com\/\">TeamSpeak<\/a>\nfor pair programming. Whomever is driving will start a join.me session, share the\nlink with their partner and away they go. There is much coding and playful banter\nas Shit Gets Done. I cannot put it any other way.<\/p>\n\n<p>Your partner keeps you honest and focussed on the task you're trying to solve. For\nexample, when I was coding a feature I was not 100% familiar with I was able to \nget my pair to do research on other parts of the code base while I was creating\nthe skeletons for some tests. Many times my pair would suggest \"don't you think we\ncould make that bit of code better by...\", and more often than not we'd have a good\ndiscussion about writing easy-to-understand-yet-efficient code or discuss how what\nwe are doing is out of character with the rest of the code. <a href=\"http:\/\/www.slideshare.net\/rdohms\/bettercode-phpbenelux212alternate\">Object calisthenics<\/a>\nis a favourite topic of mine and has led some of my other fellow developers to rethink\nhow they have been building things.<\/p>\n\n<p>See, people have this idea that pair programming means that one guy codes while the\nother sullenly watches or surfs the internet instead. Or it means two developers\nfucking around instead of working. I cannot speak for other developers, but I don't\nput up with that shit while paired. I am expecting my pair to devote as much attention\nto the task at hand as I am, and I return the favour by being attentive and helpful\ntowards my pair when I am not driving the session.<\/p>\n\n<p>Because developers are taking turns solving problems and implementing solutions,\nthe amount of tribal knowledge (knowledge about the application itself locked up \nin people's brains instead of shared and\/or documented) decreases and everyone's\nunderstanding of the system goes up. This transfer of knowledge can only really\nhappen as one developer shows another just what the hell is going on inside this\napplication. There is no better way I can think of to do this than while paired.<\/p>\n\n<p>Pair programming also has the added good side effect of allowing team members to\nget to know each other. It's only the most anti-social of co-workers who won't end\nup discussing things outside of work while pair programming. I don't see any reason\nto work with robots who only care about how many story points we are cranking out\nevery sprint. We are people first and coders second. Don't forget that.<\/p>\n\n<p>Finally, pair programming results in more than one person understanding how a \nparticular problem was solved and how the solution was implemented. At Kaplan\nwe always have a sprint demo day at the end where we demonstrate the various\nfeatures that were implemented during the sprint. With everyone having used\npair programming, it's much easier for the group as a whole to decide who will\ndemonstrate what. No need for one developer to hog all the glory!<\/p>\n\n<p>This also ends up being a great way for those who already understand the\napplication to teach new hires how things work. Kaplan Professional had \nexpanded its team quite rapidly when I started and I think that without pairing we would\nstill be struggling to meet our sprint commitments. Nothing prompts rage-quitting\nmore than a situation where it is incredibly difficult for new hires to make\npositive contributions to the team within a few days of starting.<\/p>\n\n<p>I understand that not every organization is ready to make a commitment to use\npair programming. Just like not every organization is ready to make a commitment\nto writing tests as part of their normal flow. But don't harbour any misconceptions\nabout what pair programming <em>really<\/em> is: two developers working together towards\nsolving problems, alternating who is mashing keys on a keyboard. Both developers\n<em>are<\/em> working, they are just working <em>together<\/em>.<\/p>\n\n<p>The goal is to solve problems within a unit of time that you have committed to. \nKaplan Professional is no different in that it expects you to honour your commitments.\nPair programming has been a way for problems to get solved faster than if \nindividual programmers had been trying to solve them. Communication is up, non-working\nfeatures are done, and the amount of work actually getting done has increased\nnoticeably in the two months since I started working in pairs.<\/p>\n\n<p>I cannot recommend enough giving pair programming an honest try in your work\nenvironment. You might be surprised to find out that you are Getting More Shit Done\nthan you realize.<\/p>\n",
        "date": "2012-05-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Grumpy Programmers Like Pair Programming",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/05\/09\/grumpy-programmers-like-pair-programming\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I like the idea of using <a href=\"http:\/\/vagrantup.com\">Vagrant<\/a> to create virtual\nmachines for my development work. Doing things this way I think keeps the\nhost machine cleaner and allows you the ability to distribute those VM's\nto other people as well.<\/p>\n\n<p>My old boss Ben Ramsey did a very informative post on <a href=\"http:\/\/benramsey.com\/blog\/2012\/03\/build-php-54-on-centos-62\/\">getting PHP 5.4 configured on CentOS<\/a>\nso I decided to one-up him by taking his instructions and creating a <a href=\"http:\/\/puppetlabs.com\/\">Puppet<\/a>\nmanifest so you could do this using Vagrant or on any server that you can \nprovision using Puppet.<\/p>\n\n<p>First, you will need a CentOS base box to play with. I used <a href=\"http:\/\/www.vagrantbox.es\/37\/\">this box<\/a>\nbut I think any CentOS 6.0 (or above) base box will do. If you are feeling really\nadventurous you could grab an ISO and use <a href=\"https:\/\/github.com\/jedi4ever\/veewee\">Vewee<\/a> \nand follow <a href=\"http:\/\/www.ducea.com\/2011\/08\/15\/building-vagrant-boxes-with-veewee\/\">these instructions<\/a>\nto create your own.<\/p>\n\n<p>Whatever box you choose, the next step is to create the directory where your VM\nwill run and run 'vagrant init' with the name of the box and then edit the Vagrantfile.\nHere's a condensed version of my Vagrantfile<\/p>\n\n<pre><code>Vagrant::Config.run do |config|\n  config.vm.box = \"centos-60-x86_64\"\n\n  config.vm.forward_port 80, 8080\n  config.vm.forward_port 8000, 8000\n\n  config.vm.provision :puppet do |puppet|\n     puppet.manifests_path = \"manifests\"\n     puppet.manifest_file  = \"default.pp\"\n  end\nend\n<\/code><\/pre>\n\n<p>Those port forwards are identical to the ones that Ben suggested using. You\ncan get rid of the one that maps port 8000 if you don't feel like playing\naround with the new built-in web server introducted in PHP 5.4.<\/p>\n\n<p>Now, create the manifests directory inside the directory where you are placing\nthe new VM and add a file called default.pp that looks like this:<\/p>\n\n<pre><code># Puppet manifest for my PHP dev machine\n\nclass httpd {\n  exec { 'yum-update':\n    command =&gt; '\/usr\/bin\/yum -y update'\n  }\n\n  package { \"httpd\":\n    ensure =&gt; present,\n  }\n\n  package { \"httpd-devel\":\n    ensure  =&gt; present,\n  }\n}\n\nclass phpdev {\n  package { \"libxml2-devel\":\n    ensure  =&gt; present,\n  }\n\n\n  package { \"libXpm-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"gmp-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libicu-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"t1lib-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"aspell-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"openssl-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"bzip2-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libcurl-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libjpeg-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libvpx-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libpng-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"freetype-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"readline-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libtidy-devel\":\n    ensure  =&gt; present,\n  }\n\n  package { \"libxslt-devel\":\n    ensure  =&gt; present,\n  }\n}\n\nclass rpmforge {\n  exec {\n    \"\/usr\/bin\/wget http:\/\/packages.sw.be\/rpmforge-release\/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm\":\n      alias   =&gt; \"grab-rpmforge\",\n  }\n\n  exec {\n    \"\/bin\/rpm --import http:\/\/apt.sw.be\/RPM-GPG-KEY.dag.txt\":\n      alias   =&gt; \"import-key\",\n      require =&gt; Exec[\"grab-rpmforge\"],\n  }\n\n  exec {\n    \"\/bin\/rpm -i rpmforge-release-0.5.2-2.el6.rf.*.rpm\":\n      alias   =&gt; \"install-rpmforge\",\n      require =&gt; Exec[\"import-key\"],\n  }\n\n  package { \"libmcrypt-devel\":\n    ensure  =&gt; present,\n    require =&gt; Exec[\"install-rpmforge\"]\n  }\n}\n\ninclude httpd\ninclude phpdev\ninclude rpmforge\n\n<\/code><\/pre>\n\n<p>Now, there <em>appears<\/em> to be a lot of stuff going on in there, but it's actually\nquite simple. I broke things down into 3 distinct groups.<\/p>\n\n<p>The first group (\nwhich I called 'httpd') makes sure that we install Apache 2 and the development\nlibraries and header files that will be needed to compile PHP. Then we open up\nthe firewall to allow access to the VM on those two ports. By default Vagrant\nmaps port 22 on the VM to port 2222 on the VM, so no need to add that in.<\/p>\n\n<p>The next group (phpdev) is installing all the support libraries that Ben recommended \nin his own article.<\/p>\n\n<p>Finally we need to execute a few commands to allows us to also install libmcrypt-devel\nbecause it is not part of the standard CentOS distribution, but is available via\nRPMForge.<\/p>\n\n<p>Save that file (make sure there are no typos either from me or from you!), then type\n'vagrant up' and it will try and it will try to provision your new server with this\nPuppet manifest and add in all your files.<\/p>\n\n<p>Then you can follow the rest of Ben's instructions on how to compile PHP 5.4 (I\ninstalled PHP 5.4.1RC1 just to be living on the edge) and don't forget to verify\nthat your Apache setup is configured to all you to serve up PHP files.<\/p>\n\n<p>I think that you can have a cutting-edge CentOS VM with the latest PHP installed on\nit up and running in under an hour from starting to download your CentOS Vagrant\nbase box to verifying your test file with phpinfo() in it worked.<\/p>\n",
        "date": "2012-04-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Build PHP 5.4 on CentOS with Vagrant",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/04\/15\/build-php-54-on-centos-with-vagrant\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you have a PHP application that makes heavy use of objects (which is probably\n95% of you reading this) then you will have objects with constructor methods\nin them. It is also very likely that there is some stuff going on in those\nconstructors. So how do you test things like this?<\/p>\n\n<p>Here is the constructor method that we are trying to test:<\/p>\n\n<pre><code>&lt;?php\n\nclass Alpha\n{\n    protected $_foo;\n    protected $_bar;\n    protected $_baz;\n\n    public function __construct()\n    {\n        $container = Grumpy_Container::getInstance();\n        $alphaConfig = $container-&gt;alphaConfig();\n        $this-&gt;_foo = $alphaConfig-&gt;foo;\n        $this-&gt;_bar = $alphaConfig-&gt;bar;\n        $this-&gt;_baz = $alphaConfig-&gt;baz;\n    }\n\n    \/\/ the rest of our class is here\n}\n<\/code><\/pre>\n\n<p>In this example, Grumpy&#95;Container is an object that is available via\nautoloading and it is used as a dependency injection container (DIC).<\/p>\n\n<p>Okay, so how do we test that the constructor is doing what it is supposed to?\nWe would want to verify that those protected class attributes have been set\nto values we are expecting.<\/p>\n\n<p>In order to do that we will also need to override the values in our DIC so \nwhen we run the test we have values in there we are expecting.<\/p>\n\n<pre><code>&lt;?php\n\npublic testConstructorAssignsExpectedAttributeValues()\n{\n    $container = Grumpy_Container::getInstance();\n\n    \/\/ Create our mock configuration object\n    $alphaConfig = new stdClass();\n    $alphaConfig-&gt;foo = 'testfoo';\n    $alphaConfig-&gt;bar = 'testbar';\n    $alphaConfig-&gt;baz = 'testbaz';\n\n    \/\/ Place this back in the container to override what we have\n    $container-&gt;alphaConfig = function() use ($alphaConfig) {\n        return $alphaConfig;\n    };\n\n    \/\/ Create our mock object\n    $alphaTest = $this-&gt;getMockBuilder('Alpha')\n        -&gt;disableOriginalConstructor()\n        -&gt;getMock();\n\n    \/\/ Manually run the constructor\n    $alphaTest-&gt;__construct();\n\n    \/\/ Check for values we expect\n    $this-&gt;assertAttributeEquals(\n        $alphaConfig-&gt;foo,\n        '_foo',\n        $alphaTest,\n        'Should set expected foo config value'\n    );\n\n    $this-&gt;assertAttributeEquals(\n        $alphaConfig-&gt;bar,\n        '_bar',\n        $alphaTest,\n        'Should set expected foo config value'\n    );\n\n    $this-&gt;assertAttributeEquals(\n        $alphaConfig-&gt;baz,\n        '_baz',\n        $alphaTest,\n        'Should set expected bar config value'\n    );\n\n}\n\n<\/code><\/pre>\n\n<p>The magic method here is assertAttributeEquals(). It lets you check the value\ninside any protected or private class attributes, which is absolutely a \nrequirement in this example. It is probably better to have some other\npublicly-available methods that can return us the protected (or in some\ncases private because you don't want anyone to manipulate them) attributes.<\/p>\n\n<p>Hope this helps you understand some ways to test your constructors.<\/p>\n",
        "date": "2012-04-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Metatesting: Testing Constructors",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/04\/05\/metatesting-testing-constructors\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the things that I have learned to quickly appreciate about working at\n<a href=\"http:\/\/kaplanprofessional.com\">Kaplan Professional<\/a> is the very large suite\nof unit and integration tests. I believe there are 2000+ tests, and although\nthere has been a dip in code coverage, it is still impressive to see coverage\nlevels for most things in the 65%+ range. We'll get it back up to where it\nbelongs in no time.<\/p>\n\n<p>With such an extensive array of tests, I have received an education in what\nit really means to write unit tests for live, production-ready code that really\ntakes unit testing seriously. I think that the biggest problem that most\ndevelopers face when getting into Test Driven Development is not understanding\nof how to efficiently use mock objects.<\/p>\n\n<p>If you are really writing your unit tests the way you should, each test is\nfocusing on testing one bit of functionality in isolation, which means that\nyou will be heavily relying on mock objects to make things work. I've come\nup with an example scenario that I hope goes a long way to explaining how\nto effectively use mock objects.<\/p>\n\n<p>In these examples I am using PHPUnit's <a href=\"http:\/\/www.phpunit.de\/manual\/3.0\/en\/mock-objects.html\">built-in support<\/a>\nfor mock objects. At Kaplan our testing engineer told me that he had tried to use\n<a href=\"https:\/\/github.com\/padraic\/mockery\">Mockery<\/a> but there were problems getting\nit to play nicely with the dependency injection container that is in use (it's\na customized version of <a href=\"http:\/\/pimple.sensiolabs.org\">Pimple<\/a>). Can't argue\nwith that. Not until I experiment with Mockery myself to see if it gains us\nanything instead of using what comes with PHPUnit.<\/p>\n\n<p>So here is our scenario: we have a class called Alpha, that contains a method\ncalled munge(). We wish to test that method in a unit test. So what does\nthis class look like?<\/p>\n\n<pre><code>&lt;?php\n\nclass Alpha\n{\n    \/\/ Omit code showing constructor...\n\n    public function munge(Foo $foo, Bar $bar)\n    {\n        $fooDetails = $foo-&gt;getDetails();\n        $fooId = $foo-&gt;getId();\n\n        $barStartDate = $bar-&gt;getStartDate();\n        $barEndDate = $bar-&gt;getEndDate();\n\n        $source = \"{$fooId}|{$fooDetails}|{$barStartDate}|{$barEndDate}\";\n\n        return md5('rocksalt' . $source);\n    }\n}\n<\/code><\/pre>\n\n<p>My grumpy tester's eye looks at that and immediately says \"we will need to \nmock those Foo and Bar objects to make this test work.\" First we need to look\nat the Foo object<\/p>\n\n<pre><code>&lt;?php\nclass Foo \n{\n    \/\/ Omit code showing how we construct a Foo object\n\n    public function getId()\n    {\n        return $this-&gt;_id;\n    }\n\n    public function getDetails()\n    {\n        $tree = $this-&gt;_tree;\n        $branch = $this-&gt;_branch;\n\n        return $tree . '-&gt;' . $branch;\n    }\n}\n<\/code><\/pre>\n\n<p>So it looks like this class represents one \"Foo\" object in the system. I omitted\nthe constructor as it's not really important to the lesson I'm trying to teach\nhere. Let's assume we have a way to generate a Foo object via some sort of\nmapper.<\/p>\n\n<p>Our Alpha->munge() method expects to be passed in a Foo object and to retrieve\ninfo via getDetails() and getId() calls. Let's start our test and mock that up.<\/p>\n\n<pre><code>&lt;?php\nclass Test extends PHPUnit_Framework_TestCase\n{\n\n    public function testAlphaMunge()\n    {\n        $mockFoo = $this-&gt;getMockBuilder('Foo')\n            -&gt;disableOriginalConstructor()\n            -&gt;getMock();\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getDetails')\n            -&gt;will($this-&gt;returnValue('1-&gt;2'));\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getId')\n            -&gt;will($this-&gt;returnValue('1'));\n\n        \/\/ More test fun to come\n    }\n}\n<\/code><\/pre>\n\n<p>When you build a mock for use in your test, you generally have to do two things:<\/p>\n\n<ul>\n<li>create a mock of the object itself<\/li>\n<li>tell it what to do when specific methods are called<\/li>\n<\/ul>\n\n<p>What I've done here is pretty standard EXCEPT for the use of that disableOriginalConstructor()\nmethod. Why is it used? Well, sometimes when you are creating a mock of an object\nit will often have a constructor that accepts parameters. I'm not testing to see\nif we can create the object, I merely am trying to simulate some of the methods\nof that object.<\/p>\n\n<p>Once I've created the mock of the object, I then tell it what\nto do when I make certain method calls. Clearly I've just pulled some \narbitrary values out of my ass for this example, but usually you can figure\nout what some reasonable return values are supposed to be by, you know, actually\nlooking at the code you are mocking.<\/p>\n\n<p>So what does our Bar object look like?<\/p>\n\n<pre><code>&lt;?php\nclass Bar\n{\n    \/\/ Same drill, no need to show constructor details\n\n    public function getStartDate()\n    {\n        return $this-&gt;_startDate;\n    }\n\n    public function getEndDate()\n    {\n        return $this-&gt;_endDate;\n    }\n}\n<\/code><\/pre>\n\n<p>Time to add a mock Bar to our test<\/p>\n\n<pre><code>&lt;?php\nclass Test extends PHPUnit_Framework_TestCase\n{\n    public function testAlphaMunge()\n    {\n        $mockFoo = $this-&gt;getMockBuilder('Foo')\n            -&gt;disableOriginalConstructor()\n            -&gt;getMock();\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getDetails')\n            -&gt;will($this-&gt;returnValue('1-&gt;2'));\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getId')\n            -&gt;will($this-&gt;returnValue('1'));\n\n        $mockBar = $this-&gt;getMockBuilder('Bar')\n            -&gt;disableOriginalConstructor()\n            -&gt;getMock();\n        $mockBar-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getStartDate')\n            -&gt;will($this-&gt;returnValue('2012-03-27'));\n        $mockBar-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getEndDate')\n            -&gt;will($this-&gt;returnValue('2012-04-09'));\n\n        \/\/ More test fun to come\n    }\n}\n<\/code><\/pre>\n\n<p>A quick note about $this->atLeastOnce(): when you mock the objects you can tell it\nhow often you expect that method to be called. I had a long discussion about this\nwith our testing engineer Will Parker after I posted the orginal version of this post.<\/p>\n\n<p>We have multiple options<\/p>\n\n<ul>\n<li>$this->once() - should be used only when you REALLY want that method to be called once<\/li>\n<li>$this->atLeastOnce() - should be used when you need to do it once but aren't sure how many times<\/li>\n<li>$this->any() - you really don't care how many times it's called<\/li>\n<\/ul>\n\n<p>If you're lazy, you'll go with $this->any() so you don't have to worry about it.\nAfter a discussion with Will, I have come to like the use of $this->atLeastOnce().\nIt's not a deal-breaker no matter which one you choose, a lot of it comes down\nto personal preferences.<\/p>\n\n<p>So now we have our two objects mocked. Now we can go back to our test and\nadd in the creation of our Alpha class, inject the two mocks into the \nmethod we are testing, and check for expected results.<\/p>\n\n<pre><code>&lt;?php\nclass Test extends PHPUnit_Framework_TestCase\n{\n    public function testAlphaMunge()\n    {\n        $mockFoo = $this-&gt;getMockBuilder('Foo')\n            -&gt;disableOriginalConstructor()\n            -&gt;getMock();\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getDetails')\n            -&gt;will($this-&gt;returnValue('1-&gt;2'));\n        $mockFoo-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getId')\n            -&gt;will($this-&gt;returnValue('1'));\n\n        $mockBar = $this-&gt;getMockBuilder('Bar')\n            -&gt;disableOriginalConstructor()\n            -&gt;getMock();\n        $mockBar-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getStartDate')\n            -&gt;will($this-&gt;returnValue('2012-03-27'));\n        $mockBar-&gt;expects($this-&gt;atLeastOnce())\n            -&gt;method('getEndDate')\n            -&gt;will($this-&gt;returnValue('2012-04-09'));\n\n        $source = \"1|1-&gt;2|2012-03-27|2012-04-09\";\n        $expectedMunge = md5('rocksalt' . $source);\n\n        $testAlpha = new Alpha();\n        $munge = $testAlpha-&gt;getMunge($mockFoo, $mockBar);\n\n        $this-&gt;assertEquals(\n            $expectedMunge,\n            $munge,\n            'Munge value should match expected'\n        );\n    }\n}\n<\/code><\/pre>\n\n<p>And there you have it! A test for a specific method that uses mocks to properly\nisolate functionality that is required for the test to work.<\/p>\n\n<p>I hope this blog post makes things a lot clearer when it comes to understanding\nthe role of mocks when creating unit tests.<\/p>\n",
        "date": "2012-03-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Metatesting: Understanding Mock Objects",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/03\/27\/metatesting-understanding-mock-objects\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After 13 months I've decided to move on from <a href=\"http:\/\/moontoast.com\">Moontoast<\/a>\nand take a position as a senior web developer with <a href=\"http:\/\/kaplanprofessional.com\/\">Kaplan Professional<\/a>\nworking on their platform team and trying to create all sorts of testable\nawesomeness with them. I start on March 12 with two weeks of training in\nLa Crosse, WI, followed by two weeks at home (wanted to be home for my birthday\nand family good times as Easter), followed by 4 weeks in La Crosse and then\nback in my basement lair cranking out the work.<\/p>\n\n<p>With the new position comes more of the stuff I am really passionate about: \ntesting and automation. Which also got me to thinking about the reasons why I\nam so passionate about these things.<\/p>\n\n<p>I thought I would create my own little testing mini-manifesto here. The ideas\nmy <a href=\"http:\/\/devhell.info\">podcasting<\/a> <a href=\"https:\/\/twitter.com\/funkatron\"> partner<\/a> did with his <a href=\"http:\/\/microphp.org\">MicroPHP Manifesto<\/a>\nmade me realize that sometimes it is good to write these things down, as it\nwere.<\/p>\n\n<h2 id=\"i-test-because-the-tools-are-easy-to-use\">I test because the tools are easy to use<\/h2>\n\n<p>I write tests because the tools that exist today to write them are easy to\ninstall and testing techniques are easily taught.<\/p>\n\n<h2 id=\"i-test-because-i-don%27t-like-surprises\">I test because I don't like surprises<\/h2>\n\n<p>I write tests to make sure what I am building behaves the way I am expecting.<\/p>\n\n<h2 id=\"i-test-because-i-want-people-to-understand-what-i%27ve-done\">I test because I want people to understand what I've done<\/h2>\n\n<p>I write tests so they can act as documentation for how to use things that I\nhave built.<\/p>\n\n<h2 id=\"i-test-because-i-want-to-be-able-to-change-things-fearlessly\">I test because I want to be able to change things fearlessly<\/h2>\n\n<p>I write tests so that I can experiment and change things, knowing I have a \nway of telling myself if I've done something wrong.<\/p>\n\n<h2 id=\"i-test-because-automation-is-a-secret-weapon\">I test because automation is a secret weapon<\/h2>\n\n<p>I write tests so I can create an automated developer workflows\nthat will reduce the likelihood that something horribly broken makes it\ninto production.<\/p>\n\n<h2 id=\"i-test-because-it-forces-me-to-focus-on-design\">I test because it forces me to focus on design<\/h2>\n\n<p>I write tests to force me to loosely couple my components and create simple\nsystems that can display complex behaviour.<\/p>\n\n<h2 id=\"i-test-because-to-me-it-is-the-right-thing-to-do\">I test because to me it is the right thing to do<\/h2>\n\n<p>I write tests because applications with a high level of test code coverage\nhave significantly reduced bug-fix cycles and turn production deployments\ninto non-events that happen multiple times a day.<\/p>\n\n<p>I hope my mini-manifesto at least makes you think about where testing fits into\nmodern web application development.<\/p>\n",
        "date": "2012-03-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Moving on, and a Testing Mini-Manifesto",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/03\/09\/moving-on-and-a-testing-mini-manifesto\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've recently started using <a href=\"http:\/\/behat.org\">Behat<\/a> as my testing framework\nof choice. Why? I like the idea of writing tests in a format that is as close\nto English as I can get. This also makes it easier for non-technical people\nto write tests for you as well, making sure they \"have some skin in the game\"\nas you build out your automated test suite.<\/p>\n\n<p>I have been trying to push my JavaScript skills lately by first playing around\nwith Node.js to get a feel for event-driven server-side coding and by trying\nto build something semi-useful using <a href=\"http:\/\/knockout.js\">Knockout<\/a>. Knockout\nis a client-side Model-View-View-Model framework that promotes four really\ngood principles: declarative bindings, automatic UI refreshing, dependency\ntracking and templating. Check out the documentation on the Knockout web site\nfor a great explanation of why those are good thigns.<\/p>\n\n<p>A typical Knockout-out powered site is one where the client-side code talks\nto a server-side API. My experimental site for this is one that uses an \nAPI written in PHP using <a href=\"http:\/\/slimframework.com\">Slim<\/a>. Of course, I cannot\ndo this without writing some tests. My first set of tests are for the calling\nof the API itself.<\/p>\n\n<p>After working with PHPUnit's \"assert that the result matches expectations\" \nphilosophy, switching to using a behavioural approach has changed how I decide\nto approach actually testing something. Let me show you what I mean.<\/p>\n\n<p>Here's a test for an API call to get our \"current\" set of transactions, which\nis hard-coded in the system to be all trades that have occurred in the past\n3 weeks.<\/p>\n\n<pre><code>Feature: transactions API \n\nScenario: \n    Given I call \"\/transactions\/current\"\n    Then I get a response\n    And the response is JSON\n    And the response contains at least one transaction\n    And the first transaction contains a transaction ID\n    And the first transaction contains two teams\n    And the first transaction contains a description\n<\/code><\/pre>\n\n<p>If you read that out loud it sounds like how you would describe to a co-worker\nwhat you were expecting to happen on an API call, albeit a little more stilted\nand formalized.<\/p>\n\n<p>When you first write a feature like this and then ask Behat to run all the\ntests on it, if there is no code to execute a specific step it will give you\nthe skeleton of code to make it happen. Then it is up to you to implement\nthe actual code that will make the tests run.<\/p>\n\n<p>Here's the final product:<\/p>\n\n<pre><code>&lt;?php\n\nuse Behat\\Behat\\Context\\ClosuredContextInterface,\n    Behat\\Behat\\Context\\TranslatedContextInterface,\n    Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\n\n\/\/\n\/\/ Require 3rd-party libraries here:\n\/\/\n\/\/   require_once 'PHPUnit\/Autoload.php';\n\/\/   require_once 'PHPUnit\/Framework\/Assert\/Functions.php';\n\/\/\n\n\/**\n * Features context.\n *\/\nclass FeatureContext extends BehatContext\n{\n    \/**\n     * Initializes context.\n     * Every scenario gets it's own context object.\n     *\n     * @param   array   $parameters     context parameters (set them up through behat.yml)\n     *\/\n    public function __construct(array $parameters)\n    {\n        \/\/ Initialize your context here\n    }\n\n    \/**\n     * @Given \/^I call \"([^\"]*)\"$\/\n     *\/\n    public function iCall($argument1)\n    {\n        $client = new Guzzle\\Service\\Client();\n        $request = $client-&gt;get('http:\/\/local.ibl-delphi' . $argument1)-&gt;send();\n        $this-&gt;response = $request-&gt;getBody(true);\n    }\n\n    \/**\n     * @Then \/^I get a response$\/\n     *\/\n    public function iGetAResponse()\n    {\n        if (empty($this-&gt;response)) {\n            throw new Exception('Did not get a response from the API');\n        }\n    }\n\n    \/**\n     * @Given \/^the response is JSON$\/\n     *\/\n    public function theResponseIsJson()\n    {\n        $data = json_decode($this-&gt;response);\n\n        if (empty($data)) {\n            throw new Exception(\"Response was not JSON\\n\" . $this-&gt;response);\n        }\n    }\n\n    \/**\n     * @Given \/^the response contains at least one transaction$\/\n     *\/\n    public function theResponseContainsAtLeastOneTransaction()\n    {\n        $data = json_decode($this-&gt;response);\n\n        if (count($data) &lt; 1) {\n            throw new Exception(\"Response did not contain at least one transaction\");\n        }\n    }\n\n    \/**\n     * @Given \/^the first transaction contains a transaction ID$\/\n     *\/\n    public function theFirstTransactionContainsATransactionId()\n    {\n        $data = json_decode($this-&gt;response, true);\n        $transaction = $data[0];\n\n        if (!isset($transaction['id'])) {\n            throw new Exception(\"First transaction did not contain a transaction id\");\n        }\n    }\n\n    \/**\n     * @Given \/^the first transaction contains two teams$\/\n     *\/\n    public function theFirstTransactionContainsTwoTeams()\n    {\n        $data = json_decode($this-&gt;response, true);\n        $transaction = $data[0];\n\n        if (!isset($transaction['tradePartner1']) &amp;&amp; !isset($transaction['tradePartner2'])) {\n            throw new Exception(\"First transaction did not contain two teams\");\n        }\n    }\n\n     \/**\n     * @Given \/^the first transaction contains a description$\/\n     *\/\n    public function theFirstTransactionContainsADescription()\n    {\n        $data = json_decode($this-&gt;response, true);\n        $transaction = $data[0];\n\n        if (!isset($transaction['description'])) {\n            throw new Exception(\"First transaction is missing a description\");\n        }\n    }\n}\n<\/code><\/pre>\n\n<p>Notice how Behat uses annotations that describe what type of scenario the\nmethod uses. It also uses regular expressions to extract specific values\nthat you are wishing to test. Those are typically values inside quotes\nin the actual features.<\/p>\n\n<p>If you are wondering what the skeletons (or stubbs depending on what\nterminology you like to use) looked like <em>before<\/em> I wrote code to implement\nthem, you can simply cut-and-paste the scenario file at the top of this\npost into a feature file (don't forget to give a .feature extension) and it\nwill show you all of them.<\/p>\n\n<p>I liked this method because it meant I could easily add more tests and\nBehat would tell me what code woudl be needed to run it.<\/p>\n\n<p>So what does the output look like for the test?<\/p>\n\n<pre><code>-&gt; % bin\/behat\nFeature: transactions API\n\n  Scenario:                                             # features\/transactions.feature:3\n    Given I call \"\/transactions\/current\"                # FeatureContext::iCall()\n    Then I get a response                               # FeatureContext::iGetAResponse()\n    And the response is JSON                            # FeatureContext::theResponseIsJson()\n    And the response contains at least one transaction  # FeatureContext::theResponseContainsAtLeastOneTransaction()\n    And the first transaction contains a transaction ID # FeatureContext::theFirstTransactionContainsATransactionId()\n    And the first transaction contains two teams        # FeatureContext::theFirstTransactionContainsTwoTeams()\n    And the first transaction contains a description    # FeatureContext::theFirstTransactionContainsADescription()\n\n1 scenario (1 passed)\n7 steps (7 passed)\n0m0.362s\n<\/code><\/pre>\n\n<p>I have obviously only scratched the surface of what can be done with Behat.\nI myself have questions about how to prevent the FeatureContext.php file, \nwhich contains all the functionality that drives the tests, from getting\ntoo large. I can also see the lure of endlessly tweaking the scenarios to\nreduce the amount of code required to run them all.<\/p>\n\n<p>What about code-coverage reports? Easily available in PHPUnit but is it\npossible using Behat? It's still early days for some of the alternatives to\nPHPUnit.<\/p>\n\n<p>The example above is only the first of numerous tests that will be written\nfor this side project, as it needs to cover displaying archived transactions\nto be voted on, user authentication, and the voting process itself.<\/p>\n\n<p>I think that the BDD approach maps better to a results-oriented methodology\nwhen it comes to testing: you are using real-life scenarios to make sure that\nyou are getting back the results you are expecting. In the end. that is still\nthe goal of testing.<\/p>\n",
        "date": "2012-02-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Simple API testing using Behat",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/02\/26\/simple-api-testing-with-behat\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I have been asked a few times on Twitter for some advice on how to use\ntesting tools in order to test APIs. It just so happens that I am writing a\nbunch of tests for an API at work so perhaps this is a very timely blog post.\nRather than show you exactly what I did (I'm using <a href=\"http:\/\/behat.org\">Behat<\/a>)\nI wanted to discuss some common strategies I use when contemplating testing\nAPIs.<\/p>\n\n<p>When you are testing an API you main concern is your ability to reproduce\nthe results of a specific API call. If your API is such that repeating a\ncall several times will give you different results, you do have some \nchallenges on your hands.<\/p>\n\n<p>Testing that an API just works is what I would call a functional test. At\nthe highest level you are saying \"will this call actually work\". Since you\nwill be actually making API calls in your tests they can take quite some\ntime to run depending on how many you have. Long-running tests are the\ntype of tests that really should be forming the last line of defense just\nbefore you're about to go into production.<\/p>\n\n<p>Why? Functional tests have a lot of moving parts: HTTP calls, request and\nresponse parsing, and likely communications with some sort of data store.\nNot exactly the types of things that lead you to having a test suite that\ncan run in 10 seconds or less.<\/p>\n\n<p>In my opinion the only way to have really effective functional tests is\nby making sure that the API endpoints you are testing are using a known \ndata source, one that will not be altered by your tests. That\nway it will be easy to verify that a particular call had the expected\nresponse. Remember, at the most basic level testing is about repeatedly\nverifying that your code is returning an expected result.<\/p>\n\n<p>If you are testing someone else's API, I hope there is a test mode or a \nsandbox that you can use. A lot of APIs are rate-limited or only allow a\nlimited number of requests a day (I'm looking at you, Google Analytics). \nThe last thing you want is for your application to longer be able to access an\nAPI because you went nuts testing things. Remember, the goal of functional \ntests in this scenario are to make sure that the API is returning results\nthat you expect, nothing more.<\/p>\n\n<p>Integration tests of APIs are a bit of a tricky thing to do in an effective\nway. Sometimes 3rd party APIs change. Sometimes you are also lucky enough\nto be told ahead of time that it's happening. If your application relies\nheavily on 3rd party APIs then your integration tests are a key line of\ndefense. While tests like these shouldn't be run as much as the unit\ntests for the API, they should be run before a production push. Nobody\nlikes their application to be broken because of an unannounced change to\nan API.<\/p>\n\n<p>Finally, we have tests designed to make sure that your application is \ncorrectly handling the results of API calls. To make these sorts of tests work, \nyou will end up either creating mock\nobjects of the code that will do the calls or data fixtures representing \nresults of API calls. It is also for this reason I always recommend wrapping\nthe calls to an API in code, just so you can mock them for testing purposes.\nSure, it might be easier to cheat and do file&#95;get&#95;contents() on a URL but\nthat approach is pretty difficult to test.<\/p>\n\n<p>Remember, these tests should not even be calling out to an API in order to\nwork. Mocks and data fixtures are supposed to provide that data. All you\nare doing is testing the code that needs results from the API. Again, if\nyou have been building your application with testability in mind your\nsuite of unit tests should be blazing fast.<\/p>\n\n<p>In the end, it doesn't really matter what tools you are using to test either\nyour own APIs or ones that your application depends on. Be clear in your\nmind about what it is you are actually trying to accomplish and don't get\ncreate tests that provide very little value to your application.<\/p>\n",
        "date": "2012-02-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Thoughts on testing APIs",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/02\/22\/thoughts-on-testing-apis\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Influenced by discussion with <a href=\"https:\/\/twitter.com\/funkatron\">Ed<\/a> I have\ndecided to use <a href=\"http:\/\/www.slimframework.com\/\">Slim<\/a> as the framework\nfor a PHP application I am building that is an addition to what is found\non the web site for the <a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a> I\nhave belonged to for 14 seasons. I've never really used a microframework\nin PHP before. I used <a href=\"http:\/\/flask.pocoo.org\">Flask<\/a> for a Python\n<a href=\"https:\/\/github.com\/chartjes\/liesitoldmykids\">project<\/a> that I did to experiment\nwith using Google App Engine. The principles seem to be quite similar \n(although I will admit that having decorators in PHP would be ineresting)\nbut the trade-off with a microframework is that you usually have to figure\nout an application layout for yourself.<\/p>\n\n<p>I decided to use the following things for this app:<\/p>\n\n<ul>\n<li>Slim (using latest stable version, 1.5.0 at this writing)<\/li>\n<li><a href=\"http:\/\/pimple.sensiolabs.org\">Pimple<\/a> as a dependency injection container<\/li>\n<li><a href=\"http:\/\/twig.sensiolabs.org\">Twig<\/a> for a templating engine<\/li>\n<\/ul>\n\n<p>I also decided to use <a href=\"http:\/\/packagist.org\/about-composer\">Composer<\/a> as a way\nto install the above dependencies. Slim is not in <a href=\"http:\/\/packagist.org\">Packagist<\/a>\nso I was forced to do a little reorganizing work after getting some help in\nIRC from <a href=\"https:\/\/twitter.com\/jakefolio\">Jake Smith<\/a>. Here's what I did to get\nall three of those things playing nicely together with Composer's autoloader:<\/p>\n\n<ul>\n<li>moved the directory that contains Slim into the vendor directory<\/li>\n<li>altered vendor\/.composer\/autoload&#95;namespaces.php to look for Slim<\/li>\n<\/ul>\n\n<pre><code>\/\/ autoload_namespace.php generated by Composer\n\n$vendorDir = dirname(__DIR__);\n\nreturn array(\n    'Twig_Extensions_' =&gt; $vendorDir . '\/twig\/extensions\/lib\/',\n    'Twig_' =&gt; $vendorDir . '\/twig\/twig\/lib\/',\n    'Pimple' =&gt; $vendorDir . '\/pimple\/pimple\/lib\/',\n    'Slim' =&gt; $vendorDir .'\/slim\/slim'\n);\n<\/code><\/pre>\n\n<p>I've come to the opinion that if you are using a tool that provides an autoload\nyou are probably better off using the one they provide rather then trying to make\nthose two co-exist. I'm sure I could've used the autoloader from the <a href=\"http:\/\/phix-project.org\">Phix project<\/a>\nbut I didn't feel like screwing around with it. The composer one works and it was\neasy to tell it to use Slim. Once I start creating the models that I will use for \nthis application I will add their location to that file too.<\/p>\n\n<p>With that out of the way, it came time to discuss how to actually organize this\napplication. I have a templates directory for my Twig templates, which totally\nmakes sense. But what to do with the index.php file that Slim relies on. Like\nany front-controller-driven application all our requests, after being folded\nand mutilated by a web server rewrite rule, go through index.php. In the sample\nSlim app they have something like this in their index.php file:<\/p>\n\n<pre><code>$app = new Slim();\n$app-&gt;get('\/hello\/:name', function ($name) {\n    echo \"Hello, $name!\";\n});\n$app-&gt;run();\n<\/code><\/pre>\n\n<p>This might be all Kool and the Gang if you only have a bunch of really small \nactions. This app will be interacting with models a lot, and I'm positive that\ndespite my best efforts to roll with a \"fat models, skinny controllers\" paradigm\nthat some of those actions will end up being lots of code. Smashing all that stuff\ntogether in one file strikes me as an abomination against best coding practices.\nEd told me how the <a href=\"http:\/\/fictivekin.com\/\">FictiveKin<\/a> folks are organizing their\nSlim apps, so I have created something similar to it.<\/p>\n\n<p>All my routes are going to go into a routes directory and then I will\nspecifically include the routes I want via require calls. One route per file and\nI will try and name them something sensible.<\/p>\n\n<pre><code>&lt;?php\n\nrequire '.\/bootstrap.php';\n\n\/\/ Load all our routes\nrequire '.\/routes\/main.php';\nrequire '.\/routes\/hello.php';\n\n$app-&gt;run();\n<\/code><\/pre>\n\n<p>Inside each one of these files will be an app->get|post|whatever call<\/p>\n\n<pre><code>&lt;?php\n\n$app-&gt;get('\/', function() {\n    echo 'MAIN PAGE';\n});\n<\/code><\/pre>\n\n<p>Yes, that default route sucks but getting the structure in place was more \nimportant to me than having something useful stubbed out.<\/p>\n\n<p>I'm sure there is more than one way to organize a Slim application, but this\nis one that I think works best for me.<\/p>\n",
        "date": "2012-02-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Organizing Slim Framework Applications",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/02\/14\/organizing-slim-framework-apps\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In a desire to stay relevant, I have been spending some time taking a look\nat <a href=\"http:\/\/nodejs.org\">Node.js<\/a>. Why? I believe it is always a good idea\nto take a look at whatever the new hawtness is, if only to evaluate it's\nsuitability for use within your own applications. Sometimes it is also\na good idea to see if you can wrap your brain around it.<\/p>\n\n<p>So I went and bought a good <a href=\"http:\/\/leanbundle.com\/b\/node\/\">bundle of ebooks about Node<\/a>\nand started going through the tutorial code. These two seemed like a good\nplace to start: an introductory tutorial and then another book that leaps\nright into things with the aim of really giving you some hands-on work with\nNode.<\/p>\n\n<p>The crowning glory of my early work is this bit of code from a tutorial that\nemits events and then allows you to react to them:<\/p>\n\n<pre><code>var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar Ticker = function(){};\n\nutil.inherits(Ticker, EventEmitter);\n\nTicker.prototype.tick = function() {\n    self = this;\n    interval = setInterval(function() {\n        self.emit('tick');\n    }, 1000);\n};\n\nvar myTicker = new Ticker();\n\nmyTicker.on('tick', function() {\n    console.log('TICK');\n});\n\nmyTicker.tick();\n<\/code><\/pre>\n\n<p>Now I realize that this code sample is something very trivial but I also\nthink it shows what someone who has mostly worked in languages without\ncallbacks is up against when they start using node.<\/p>\n\n<p>As a PHP guy I am used to my code being executed pretty much in the order\nthat you read it when looking at the source code: from top to bottom, with\njumps out to other code as required but always returning to this flow.<\/p>\n\n<p>Once you start getting into callbacks and other evented paradigms it becomes\na lot more difficult to intuitively figure out what's going on. Note that\nI said \"intuitively\" because I'm sure that to anyone past the beginner\nstage with Node would understand what is going on there.<\/p>\n\n<p>There is a lot that looks familiar though. We have the importing of modules\nvia require statements. I also think this a good point to mention the\noutstanding job that <a href=\"http:\/\/npmjs.org\/\">npm<\/a> does in helping to manage\ndependencies. I used to think that the <a href=\"http:\/\/rubygems.org\">Ruby gems<\/a> system\nwas one that should be aspired to. If you're going to ignore <a href=\"http:\/\/www.cpan.org\/\">CPAN<\/a>\nthat is.<\/p>\n\n<p>Then I create what I can only describe as an empty object, and then we\nsay that our Ticket object is going to inherit whatever is in EventEmitter.\nOkay, so far so good in terms of familiar territory.<\/p>\n\n<p>Next we have the block of code that lets us create a tick method for our\noverall Ticker object, and this is done with a callback. We have scoping\nissues to deal with (hence the self = this line) and we are creating something\nthat will emit a 'tick' event once a second (1000ms). That looks a little\nweird if you're not used to callbacks, and we even have an anonymous function\ninside an anonymous function.<\/p>\n\n<p>After that we then grab a Ticker object, tell it that every time there is a\n'tick' event detected we want to log TICK to the console. Finally, we tell\nit to run myTicker.tick() and then it goes on it's way emitting TICK once a second.<\/p>\n\n<p>That's not such a mind bender once you break it down the way I did. But what about\nthis type of thing:<\/p>\n\n<pre><code>var fs = require('fs');\n\nfs.open('.\/a.txt', 'a', function(err, fd) {\n    var writeBuffer = new Buffer('7');\n    var bufferOffset = 0;\n    var bufferLength = writeBuffer.length;\n    var filePosition = 10;\n\n    fs.write(fd, writeBuffer, bufferOffset, bufferLength, filePosition, function(err, written) {\n        if (err) {\n            throw err;\n        }\n\n        console.log('wrote ' + written + ' bytes');\n    });\n});\n<\/code><\/pre>\n\n<p>We all know that it is easy to write spaghetti code in PHP because of the fact\nthat it grew up on the web: it was a templating language with C library \nwrappers. Very easy to just mash everything together. I see the same sort of\nspaghetti possibilities there in Node, with the added bonus of callbacks\nbeing mixed in there to make certain things difficult.<\/p>\n\n<p>I understand what I did there: I am opening a file and then writing to it. The\nway that I got to do it made me scratch my head. Writing to the file happens\nas a callback that is executed as a result of opening up the file for\nappending? Like I said before, that does not strike me as very intuitive\nfor programmers coming to Node with a little understanding of Javascript\nand jQuery, which is probably most programmers' introduction to anonymous\nfunctions.<\/p>\n\n<p>But I do get it. You cannot get non-blocking IO without doing such gyrations\nbut I am concerned that sufficiently large Node applications will be, to put\nit bluntly, a fucking nightmare to debug. Is this something that cannot be\nmoved away from if you choose to write programs using tools that suppoort\nconcurrency and\/or evented concepts?<\/p>\n\n<p>I'd love to hear what sort of best practices people are using in order to\ntame the potential for Node applications degenerating into spaghetti hell.<\/p>\n",
        "date": "2012-02-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Baby Steps with Node.js",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/02\/13\/baby-steps-with-node-js\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Since I hadn't blogged for a bit I thought I would ask my Twitter peeps what\nthey might want to hear my rant about. One of the more interesting suggestions\nI got was from <a href=\"https:\/\/twitter.com\/tnorthcutt\">Travis Northcutt<\/a> who said\nthe following:<\/p>\n\n<blockquote>\n  <p>\"Got it. I have no formal CS background, but I'm trying to learn enough\n  to build (something). I know enough PHP to kind of, sort of get by\n  but am trying to solidify my foundation. So if I'm being selfish, write\n  a post to someone in my position who wants to not suck at building stuff.\"<\/p>\n<\/blockquote>\n\n<p>This is actually a great question. Although the self-centered answer is\nto start off by buying my <a href=\"http:\/\/grumpy-testing.com\">book<\/a>, that isn't\nreally the question that is being asked.<\/p>\n\n<p>I thought about this question for a while and have some thoughts on what it\nreally means to know how to not suck at building things using PHP. In my\nnever even remotely humble opinion I think the key is to understand what\nPHP is really good at.<\/p>\n\n<p>I have spoken at length about my opinion that PHP won the web war because\nit was so tightly coupled with HTML and very early on had support to run\nwith Apache via mod&#95;php. However the world has changed, and the web war\nitself has changed. I think I can say with a smirk that the web war is now\nan asymmetrical one, where the expectations of behaviour by users is totally\ndifferent.<\/p>\n\n<p>But PHP is still in a really good position because of its true nature:\nPHP is glue. It's glue that binds things together in \na way to quickly produce HTML output. There is a reason the LAMP stack (with\nPHP as the \"P\") was so successful: if you had to get data out of a database\nand onto an HTML page there was no easier way.<\/p>\n\n<p>One of the trends that I see in PHP is that the frameworks that sit on top\nof PHP are starting to ask for influence over the development and direction\nof PHP itself. I have mixed feelings about this. On the one hand, it is\ngood that people push for newer features in their chosen programming \nlanguage. I think the PHP core is not necessarily against these suggestions\nbut they move at different pace than the framework people. But my other \nconcern is that we don't end up with a framework driving the language.<\/p>\n\n<p>When you think of Ruby, unless you are in denial or a really old Ruby hacker,\nyou think of Rails. Without Rails Ruby does not get the push that it did\nand continues to get. It's a good language but it would've languished in \nobscurity if not for DHH.<\/p>\n\n<p>So what does this have to do with not sucking at building stuff in PHP? I \nthink it's important to understand that you can build cool stuff without\nrelying on a framework. Heresy, I know. But if you keep thinking of PHP\nas glue it totally makes sense. How many applications are REALLY just PHP?\nThey are <em>really<\/em> web server + data source + Javascript + CSS + HTML. Think \nabout that for a minute. PHP is the glue that binds all that together.<\/p>\n\n<p>The danger for people like Travis who are starting out with PHP is that they\nwill get caught up with a mindset that a framework is the solution to their\nproblems. It is <em>one<\/em> solution to the problem of building a web application,\nbut failing to understand how to write PHP that behaves like glue will lead\nto a lot of problems later. Because when the time comes for you to do something\nthat the framework did not anticipate you will be fucked. And you will be \nincorrect when you blame the framework.<\/p>\n\n<p>So my advice to Travis is that he should worry about learning to use PHP like\nglue and correctly identify the problems he is trying to solve NOW instead of\nworrying about the problems he might have to solve later. There will be time to\nfix your problems. Some of those will be solved by using tools that are not\nwritten in PHP, but PHP can still glue them together. NoSQL data sources.\nDistributed workers. Queuing systems. Real-time document searching capabilities.\nThese are all things that are NOT written in PHP but it is extremely likely\nthat someone has written a library in PHP that can talk to them.<\/p>\n\n<p>Hope that helps you Travis!<\/p>\n",
        "date": "2012-02-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Not To Suck At PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/02\/03\/how-not-to-suck-at-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A while back I ran into a problem on a server where PHPUnit kept <a href=\"http:\/\/stackoverflow.com\/questions\/3065563\/phpunit-reporting-aborted-no-matter-what-tests-are-run\/8898712\">reporting\n\"aborted\" no matter what tests were run<\/a>. \nThat was a pretty annoying bug. I never did find out what the problem was\nas I moved onto other problems and chalked that error up to some undiagnosed\nweirdness on that particular server.<\/p>\n\n<p>From time to time I would get asked on Twitter if I had ever solved the \nproblem. My answer was always \"no, and if <em>you<\/em> do solve it please let\nmet know how you fixed it.\" Today, my friends, was the day.<\/p>\n\n<p>![](\/images\/phpunit-bug.png %)<\/p>\n\n<p>Kudos to <a href=\"https:\/\/twitter.com\/demiankatz\">Damian Katz<\/a> for coming up with a\nsolution. Without digging deeper into it, I would imagine that you could\nalter the phpunit.xml file (if you are using one in your setup) to automatically\nuse the -dzend.enable&#95;gc=0 option every time you run a test.<\/p>\n\n<p>How did he figure it out? He tracked down <a href=\"https:\/\/bugs.php.net\/bug.php?id=53976\">this bug<\/a> that\nseemed to be displaying the exact behaviour that I had reported way back when.\nIt seems odd that garbage collection would cause this problem, but perhaps it\nwas a perfect storm of lots of small tests causing over-active garbage collection\nwhich in turn causes the PHP interpreter to abort whatever it is running.<\/p>\n\n<p>This is another case where I would love someone with knowledge of PHP internals\nto try and explain why it is happening.<\/p>\n",
        "date": "2012-01-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHPUnit aborted fix",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/01\/17\/phpunit-aborted-fix\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Last week I attended <a href=\"http:\/\/codemash.org\">CodeMash 2012<\/a> as a speaker and\ngave my talk on <a href=\"http:\/\/www.slideshare.net\/chartjes\/building-testable-php-applications\">building testable PHP applications<\/a> (don't forget to buy the <a href=\"http:\/\/grumpy-testing.com\">book<\/a> that the talk inspired). Held in Sandusky, Ohio in the\ncold of January it is an interesting conference. Unlike most conferences that\nI attend, it is multi-disciplinary. There were talks on .NET, Java, Ruby, Python,\nand two lonely talks about PHP.<\/p>\n\n<p>For me, this is somewhat uncomfortable. It is only natural that people who use\ncertain tools tend to flock together at a conference. I joked that where were\nonly 3.7 PHP developers (with someone stating that the 0.3 part is part of someone\nthat I cut off for not writing tests) but the fact was that unless you knew\nmembers of multiple communities you were going to have to be content to feel\na little excluded.<\/p>\n\n<p>Anyway, I did have a really good time hanging out with my friends and making\nsome new ones. It's a really good idea to talk to as many people as you can,\neven they are not using the same tools you are using. You can gain some\nperspective.<\/p>\n\n<p>Let's go over the talks I attended and my thoughts on them.<\/p>\n\n<h1 id=\"it%27s-the-little-things-brad-colbow\">It's the Little Things (Brad Colbow)<\/h1>\n\n<p><a href=\"https:\/\/twitter.com\/bradcolbow\">Brad<\/a> is a freelance graphic designer from the Cleveland area. He also does\nan online comic called <a href=\"http:\/\/bradcolbow.com\/archive\/\">The Brads<\/a> so, as expected,\nhis presentation was full of all sorts of awesome visuals. Also, I thought\nthat <em>I<\/em> talked fast, this guy made me look like one of the Ents from Lord of The\nRings.<\/p>\n\n<p>The main take-away I got from his talk was that it never hurts to pay attention\nto the little things. I realized that this holds true from both an UI\/UX perspective\nand in your code. A bunch of bad little things always turn out into one huge\nbad thing.<\/p>\n\n<p>His slides describing the blog posting he made about <a href=\"http:\/\/bradcolbow.com\/archive\/view\/the_brads_why_drm_doesnt_work\/?p=205\">how crazy it was to check out an audio book from his local library<\/a> were awesome.<\/p>\n\n<h1 id=\"vagrant%3A-virtualized-environments-made-simple-matt-stine\">Vagrant: Virtualized Environments Made Simple (Matt Stine)<\/h1>\n\n<p><a href=\"https:\/\/twitter.com\/mstine\">Matt<\/a> took what he said was normally a 3 hour\ntutorial and crammed it into a very informative 1 hour talk. It did help\nthat I had been considering the use of Vagrant anyway, but I got a better\npicture of more practical uses of Vagrant. I did not know about <a href=\"http:\/\/www.ducea.com\/2011\/08\/15\/building-vagrant-boxes-with-veewee\/\">veewee<\/a>\nas a tool to help you create your own Vagrant boxes.<\/p>\n\n<p>This is of interest because I had a hankering to play around with an <a href=\"http:\/\/www.archlinux.org\/\">Arch Linux<\/a>\nVM but found the existing base boxes out there, well, not working with the\nversion of Virtualbox I had installed. I think veewee will let me pursue\nthat further.<\/p>\n\n<h1 id=\"breaking-the-sound-barrier-with-node.js-on-windows-and-azure-glenn-block\">Breaking the Sound Barrier with Node.js on Windows and Azure (Glenn Block)<\/h1>\n\n<p>While sitting in this talk I took a picture and tweeted about how it was time\nto make myself \"personally uncomfortable\" by sitting in a talk involving a\ntechnology that I don't use running on a platform I don't use. What I was hoping\nto find out was some more basic information on Node.js and why it is such a \nbig deal.<\/p>\n\n<p>To be perfectly honest, the more I see Node.js the more I start to understand\nthe allure of it. What really bothers me is that so many people are gambling\ntheir applications on a tool that hasn't even reached 1.0 yet. I understand\nthe power of how Node.js gets things done. Evented + concurrency + JS is a platform that\nhas lots of appeal to people who maybe haven't done that sort of work before.\nNot that I'm including myself in the group that \"gets it\" but at this point\nin time I'm still on the \"I will use Twisted\/Tornado if I need to create event-driven,\nhigh-concurrency web servers.\"<\/p>\n\n<p>Maybe when Node.js gets to 1.0 I will think differently.<\/p>\n\n<p>Azure itself didn't really thrill me that much, but I do see the advantage of\nthat environment to people who have already made a large investment on the \nserver side in Microsoft. What is really admirable is that they are making\nsome great contributions back to the open source community. The SDK for running\nNode.js on Windows is open source, and I must give them credit for that.<\/p>\n\n<h1 id=\"code-kata-and-analysis-jim-weirich\">Code Kata and Analysis (Jim Weirich)<\/h1>\n\n<p>This was a talk that I went into expecting to be surrounding by Ruby hipsterism.\nAfter all, this is the guy who created <a href=\"http:\/\/rake.rubyforge.org\/\">Rake<\/a> and works\nfor a well-known <a href=\"http:\/\/edgecase.com\/\">Ruby consultancy<\/a>. Once I saw him I\nknew I was in for a treat. Older guy. White hair. Unix-style beard. Runs emacs.<\/p>\n\n<p>I was not disappointed.<\/p>\n\n<p>A code kata is a programming exercise that serves a few purposes. You do it\nin order to learn how to implement common algorithms in different languages\nand learn how to solve the easy problems by habit, with the goal of then \nfreeing up your mind to solve hard problems.<\/p>\n\n<p>The code kata this time was to create an arabic number to Roman numerals\nconverter. The language of choice was Ruby (no big surprise there) and I\nwas even happier to see that it was a test-driven kata using <a href=\"http:\/\/rspec.info\/\">Rspec<\/a>.<\/p>\n\n<p>This brings me around to a topic that makes me super uncomfortable. It seems \nto me that testing has become an integral part of the Ruby and Python ecosystems.\nIt does not appear to be common at all in the PHP and .NET communities. I care\nabout this sort of stuff so it does pain me to see such opposition in the form\nof apathy and excuses amongst PHP programmers. I wish I could surround myself\nwith developers who feel like I do about the value of automated testing in\ndelivering solid applications. Maybe in the next life.<\/p>\n\n<p>It was also good to see someone walk you through the whole TDD practice <em>and<\/em>\nrefactor stuff after getting a particular set of tests working. In the end\nwe had two great examples of code: an easy-to-understand converter and tests\nthat are easy to understand.<\/p>\n\n<h1 id=\"dealing-with-information-overload-scott-hanselman\">Dealing with Information Overload (Scott Hanselman)<\/h1>\n\n<p>One of the more dynamic speakers I saw, <a href=\"https:\/\/twitter.com\/shanselman\">Scott<\/a> gave\na talk to a packed room on tips for dealing with information overload. From him\nI learned some new techniques I'm going to be phasing in:<\/p>\n\n<ul>\n<li>No reading email until noon, and then \"office hours\" from a certain time onwards when\nanyone can speak to you<\/li>\n<li><a href=\"http:\/\/www.instapaper.com\/\">Instapaper<\/a> is awesome because I can flag things to read later <em>and<\/em> get them\ndelivered to my Kindle on Friday afternoons for some after-dinner reading<\/li>\n<li><a href=\"http:\/\/www.ifttt.com\/\">If this, then that<\/a> is an extremely interesting tool\nthat can be used to trigger events that help you delegate things into the future<\/li>\n<li>The <a href=\"http:\/\/www.pomodorotechnique.com\/\">Pomodoro Technique<\/a> is a very useful\ntool to help with short-term focus. Cut out the distractions and concentrate\nfor 25 minutes. Even I think I can do that.<\/li>\n<li>Keep your email responses very short (he reccomends <a href=\"http:\/\/five.sentenc.es\/\">Five Sentences<\/a>) and\ninstead write a longer response to that issue and post it somewhere others can\nfind it, whether it is a company wiki or on your own blog. That way, next time\nsomeone asks you that same question you can point them there<\/li>\n<\/ul>\n\n<p>Excellent talk full of lots of excellent ideas. I knew it was gonna be awesome\nwhen he put <a href=\"http:\/\/www.funnyordie.com\/videos\/e685c7e4ff\/literal-video-total-eclipse-of-the-heart\">this video up<\/a>\nto entertain us before his talk.<\/p>\n\n<h1 id=\"a-few-of-my-favorite-python-things-mike-pirnat\">A Few of My Favorite [Python] Things (Mike Pirnat)<\/h1>\n\n<p><a href=\"http:\/\/www.twitter.com\/mpirnat\">Mike<\/a> is a long-time Python programmer who\nshared with us a \"series of lightning talks crammed into one presentation\".\nWhile I have some basic Python knowledge I did see a bunch of really interesting\nlibraries and other tools that I did not know about. He covered so much, so fast\nthat I was glad he was going to post a link to the slides on his blog.<\/p>\n\n<p>It also reminded me how, coming from the PHP world, languages like Ruby and Python\nreally are more terse. You might not think it matters (or even hate significant\nwhitespace) but for some people the elegance that can be found in Ruby and\nPython code often makes it easier for others to understand what you are doing.\nI know that I <em>feel<\/em> like I'm doing more with less when I write Python code.<\/p>\n\n<p>Then I gave my <a href=\"http:\/\/www.slideshare.net\/chartjes\/building-testable-php-applications\">own talk<\/a>.\nI was disappointed that I actually ran out of time(!) for it. In the scheme of\nthings, 90 slides is about 20 too many for a talk on as dense a topic as unit\ntesting tools, strategies for writing code, and complementary tools to make the\nwhole thing easier.<\/p>\n\n<p>I have identified abotu 20 slides that I think I could chop out and turn into\n2 slides of the \"and if you're interested in some tools that I think are\nhelpful\" type.<\/p>\n\n<p>I had a good time (including hanging out at the Kalahari's water park with my\nkids) at CodeMash 2012 and hope to go back for CodeMash 2013.<\/p>\n\n<h1 id=\"why-so-little-php%3F\">Why so little PHP?<\/h1>\n\n<p>I was asked about why I felt that there were so few talks about PHP and what\ncould be done to make it better. Well, when only 7 people even submit PHP\nideas I think there is a problem of visibility.<\/p>\n\n<p>Given that this conference covers a wide variety of technologies I think it\nis safe to say that there was quite a bit of overlap. 31 .NET talks? Really?\nThere is nothing wrong with .NET but do you <em>really<\/em> want to exclude an entire\nsector of the web programming world at your conference?<\/p>\n\n<p>Also, there is the issue of speaker reimbursement I know that the official\npolicy of CodeMash is \"we cannot guarantee speaker reimbursement\". That's cool\nbut that will also stop talented people who are not willing to travel from\nwhere they are to the Cleveland airport and then hitch a ride to the Kalahari.\nMaybe in the PHP world we have gotten spoiled by those who run conferences \nsince they tend to cover a significant portion of the costs a speaker might\nincur to get there.<\/p>\n\n<p>There is no easy answer to how to get more PHP people to submit talks and to\nattend the conference in general. It probably also doesn't help that the \nconference sold 1200 tickets in 20 minutes, making it that much harder to\nget a ticket.<\/p>\n\n<p>I'd love for more PHP folks to come to this conference and get their horizons\nexpanded with a glimpse at what other communities, just as full of energetic\npeople but with different focusses, are doing.<\/p>\n",
        "date": "2012-01-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CodeMash 2012 Review",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/01\/16\/codemash-2012-review\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I am struggling to find a better way to handle a new paradigm in development.\nAt <a href=\"http:\/\/moontoast.com\">Moontoast<\/a> all our servers are up on EC2, which\nincludes the two dev servers (one for each project) that I use every day.<\/p>\n\n<p>I've been playing around with <a href=\"http:\/\/www.sublimetext.com\">Sublime Text<\/a>  (because of the awesome vim bindings)\nand was thinking about why do I always have to be logged into the remote\nserver to do my work. Normally I connect using SSH, then attach to my <a href=\"http:\/\/tmux.sourceforge.net\">tmux<\/a>\nsession and then fire up vim.<\/p>\n\n<p>This is okay but it lacks a certain elegance in it's approach. As a result\nI end up using things like <a href=\"http:\/\/dropbox.com\">Dropbox<\/a> to synchronize my\n.vimrc file so I get a consistent experience across environments. That's ok\nfor now, although I'm having some weirdness due to vim 7.2 vs. vim 7.3 issues\nin one of those environments.<\/p>\n\n<p>I also need to be able to use git to commit changes, create and merge branches, etc.\nI need to be connected to the server to make that happen. But that is starting\nto feel like a limitation to me.<\/p>\n\n<p>What I'm chafing against is having to deal with multiple environments all the time\nto get my work done. I want to use ONE editor, tweaked out exactly the way I want\nto edit code in multiple locations. I want to use ONE tool for handling git work\nin multiple locations.<\/p>\n\n<p>Any thoughts on how to achieve what I want? There are occasions when I do need to\nconnect to a server (say to tail a log while testing a Gearman job) but damnit\nit's the second decade of the 21st century. This should be a SOLVABLE problem.<\/p>\n\n<p>So for now I'm trying out SublimeText2 as my main editor and started using Transmit\n(sorry Expandrive but I am finding Transmit to be a lot more responsive) so the\nmissing piece if for me to be able to commit code changes on a remote server\nWITHOUT being logged into that remote server.<\/p>\n\n<p>In a perfect world I am using virtual machines for my dev work, but I haven't convinced\nour awesome sysadmin to put in the time necessary to make it happen for me.<\/p>\n\n<p>Let me know potential solutions for my desired setup.<\/p>\n",
        "date": "2012-01-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Better Remote Code Development",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/01\/05\/better-remote-code-development\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After the middling success of my first <a href=\"https:\/\/www.littlehart.net\/book\">programming book<\/a>\nI had been thinking about writing another book. When the end of October rolled\naround and <a href=\"https:\/\/en.wikipedia.org\/wiki\/National_Novel_Writing_Month\">National Novel Writing Month<\/a>\nwas about to happen I decided to take the plunge and write something.<\/p>\n\n<p>It didn't turn out to be The Great Canadian Novel but I did collect my thoughts on\nwhat goes into building PHP applications in such a way that they are easily\ntestable. I called it \"The Grumpy Programmer's Guide To Building Testable PHP Applications\".<\/p>\n\n<p>When I wrote my first book I did everything in <a href=\"http:\/\/www.apple.com\/iwork\/pages\/\">Pages<\/a> but\nthat was before the rise of e-readers. This time I wanted to offer my book in\nPDF, epub and mobi formats. So I started up using <a href=\"http:\/\/www.methods.co.nz\/asciidoc\/\">AsciiDoc<\/a>\nsince I felt it gave me the most options for converting the text into other formats\nwith a little bit of programming work. I created a Makefile (old school, baby!)\nthat took the text and turned it into a PDF.<\/p>\n\n<p>I had thought about doing the book directly in <a href=\"http:\/\/docbook.org\/\">Docbook<\/a> as\nit provided the best way for conversion purposes, but I found all the XML to\nbe getting in the way of, you know, actually writing the thing. Plain text\nwith a little bit of mark-up seemed to be the best fit for my brain.<\/p>\n\n<p>As my self-imposed deadline got closer I felt like I was in for a lot of late\nnights fiddling around with layouts to get things to an acceptable level. Lucky\nfor me an alternative came along.<\/p>\n\n<p>I follow Reg Braithwaite (better known as @raganwald) and saw that he had a new\nebook out called <a href=\"http:\/\/leanpub.com\/shippingsoftware\">\"What I've Learned From Failure\"<\/a> which he published with some\nhelp from <a href=\"http:\/\/leanpub.com\">Leanpub<\/a>. The system looked awesome: write your\nbook in Markdown (which I already use for this blog) and then it would create\nebooks in PDF\/epub\/mobi for you, handling all the distribution and payment\ncollection for you. Holy fuck, this is what I wanted.<\/p>\n\n<p>So I took the plunge and signed up for an account. I started tweaking my text\nto use the Markdown-specific formats the system requires and little by little\nthe book is being massaged into it's new shape.<\/p>\n\n<p>I've gotten some great feedback from my technical reviewers and will be\nincorporating those changes into the book as soon as I've converted it over\nto the Leanpub structure. I'm giving a talk on the topic the book covers at\n<a href=\"http:\/\/codemash.org\">Codemash 2012<\/a> and will launch the book while I'm\nthere, offering those who attend my talk a discount as a way of thanking\nthem for travelling to the shores of Lake Erie in the middle of winter.<\/p>\n\n<p>So please visit the <a href=\"http:\/\/leanpub.com\/grumpy-testing\">home of my book online<\/a>\nand until the book is published feel free to add your name to the mailing list.\nAs soon as it's available you will be notified. I'm still tweaking the pricing\nso feel free to suggest to me how much you'd be willing to pay for such a beast.\nIt will probably come in between 40 and 50 pages in length.<\/p>\n",
        "date": "2012-01-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's Guide To Building Testable PHP Applications",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2012\/01\/03\/grumpy-testing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For those who know me outside of the context of my ranty tweets and \noccasionally-lucid blog posts you will know that I am an avid simulation\nbaseball game player. I'm about to start my 15th season in my current\nleague and it has taught me a great many lessons about myself and the importance\nof having a set of skills that turn independent bits into a cohesive team.<\/p>\n\n<p>(If you care the league uses a game that it creates itself using freely-available\ndata from <a href=\"http:\/\/retrosheet.org\">Retrosheet<\/a> and if you've ever come across\n<a href=\"http:\/\/www.strat-o-matic.com\/products\/baseball\">Strat-O-Matic-Baseball<\/a> you might\nhave an idea of how game-play works)<\/p>\n\n<p>I've had middling success in that league: some really crappy seasons where I\nclearly did not know what I was doing along with making the playoffs 3 years\nout of 4 complete with a trip to our league champsionship series. Many times\nI've had teams where the skills of the players (who are merely statistical\nrepresentations within the confines of the game rules) simply aren't a good\nfit.<\/p>\n\n<p>If you have lots of power, a good bullpen, but guys who don't get on-base\nyou will find yourself winning by a lot or losing by a lot because\npower comes and goes. If you have great pitching but a bad offense (similar\nto what I have for our upcoming 2012 season) then you will find yourself\nin many close games but you will probably lose more of them than you win\nbecause your offense will be unable to come through when needed.<\/p>\n\n<p>I've also learned that I am a decent field manager (in terms of playing the\ngames and understanding strategies), lousy at evaluating hitters in our\ndraft (my past 4 first-round picks have been hitters who have been injured\nand\/or underachieved), great at evaluating pitchers, and very impatient\nin the trade market when trying to improve my team.<\/p>\n\n<p>I went through a terrible season last year due to a combination of bad luck\nand impatience in making trades to keep a fringe playoff contender in the\nplayoff hunt in 2010, then crashing to lose almost 120 games in 2011. \nSo I struggle to find ways to build a better team, and better identify the\ncombination of skills I need for my team to achieve success.<\/p>\n\n<p>So what does all this have to do with programming? I feel that my current\nset of skills are a terrible match for today's programming environment and\nit's making me feel a set of emotions I thought I ditched when I left high\nschool: jealousy, fear, angst and regret.<\/p>\n\n<p>I've always prided myself in thinking that I have spotted trends in programming\nbefore everyone else. I first saw the value of frameworks in 2003-2004. About\nthe same time I discovered SimpleTest and thought that it would be a very\nvaluable tool. It's almost 2012 and I still feel the same way, but I feel like\nthe programming community I belong to still doesn't give a shit.<\/p>\n\n<p>In February of this year I jumped on an opportunity to work with some people \nI respect in the PHP community and joined Moontoast. It had been a while\nsince I had done the startup thing and thought it would be a good change for\nme. At my previous employer I had to do everything myself for my projects and\nI looked at Moontoast as an opportunity to work with a team again.<\/p>\n\n<p>Instead I struggled. Struggled to cope with two applications written using \nheavily-modified versions of two frameworks. Struggled to understand the \nbusiness that relied on these applications. Struggled with the idea that\nthe things I felt really, REALLY mattered simply don't matter to the\nbusiness as a whole. It's not a lie when I say it hurt. Hurt a lot to miss\ndeadlines and let down team members. Hurt a lot to struggle to make things\nlike automated testing and simpler product development FUCKING WORK and not\nachieve anything. Struggled while wondering if I was getting honest feedback\nfrom fellow employees who might not want to really say what they feel because\nthey are not an asshole like I often am.<\/p>\n\n<p>On top of that, I felt like the volume of tweets and blog posts I cranked\nout achieved nothing that I could hang my hat on and make my ego stop \nscreaming at me in my head. I still care immensely about best practices,\nautomation, and building applications that can be easily tested. All too often\nI feel like I am the only one who wants it so bad I pound my fists on my\ndesk like a little boy having a fucking temper tantrum.<\/p>\n\n<p>The feedback loop I want just isn't there any more. Perhaps my troll-like\nexistence in my home office is wearing me down and making it more difficult\nfor me to actually get along with people. My ego is getting in the way of\nsuccess in a team setting and I am struggling to find a way to figure out\nhow to change things for the better.<\/p>\n\n<p>PHP is the tool I've been using pretty much non-stop since 1998. It won the\nweb battle. It really did. But things are changing and expectations are \nchanging amongst the next wave of programmers. Elegance in code matters.\nAbility to support concurrency at the code level matters. Perhaps it shouldn't\nbut it does. I think of all the investment I've made in PHP and I find myself\nconstantly asking the question \"did you do the right thing?\"<\/p>\n\n<p>I have found that the PHP community is very supportive of me and my ideas, so\nI'm probably not as terrible a person as I make myself out to be. But the PHP\ncommunity as a whole really seems to think that much of the stuff I consider\nto be important is just a waste of time, getting in the way of getting things\ndone so you can go home after work.<\/p>\n\n<p>The crowd I follow online is a self-selecting one. Most of them care about\nthe same things (except there are those who disagree with me on the importance\nof automated testing as a critical part of development) but what about those\nwho aren't there? How many of them give a shit about clear, concise code? How\nmany of them have actually created an application for their employer that\nhad a complete testing suite (in 14 years I've been able to do that ONCE)\nfor it? How many of them have automated their deployments as a result of\na merge of code in their version control system?<\/p>\n\n<p>It's more likely that I am being selfish and demanding recognition for the\nthings I've done and don't really deserve that recognition. I joke with\nmy wife that I am a \"big deal on the Internet\" and #internetfamous on Twitter,\nbut am I really? Or am I just loud and repeat myself over and over again. \nAm I just being tolerated or are there people for whom my thoughts are\nresonating and they are going out and kicking ass in a way I have been unable\nto?<\/p>\n\n<p>Maybe this old saying is true: those who can, do, and those who can't, teach.<\/p>\n\n<p>2011 was the year of the struggle for me. I don't want 2012 to be like that\nbut I am not sure how because I'm scared that I'm becoming useless and \nirrelevant and that the things I am passionate about have no place in the\nmodern PHP community, the only one I've ever really been a part of.<\/p>\n\n<p>Hope you have a good 2012. I'll be here, struggling.<\/p>\n",
        "date": "2011-12-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Year of the Struggle",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/12\/30\/the-year-of-the-struggle\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I just started up a podcast called <a href=\"http:\/\/devhell.info\">Developer Hell<\/a> with\nmy fellow piss-and-moan-driven-development practitioner <a href=\"http:\/\/funkatron.com\">Ed Finkler<\/a>\n. It basically consists of Ed and I sitting down and just having an open and\nunedited discussion about whatever programming-related topic we feel like\nrambling on and on about. Our first episode covered the always-riveting\ntopic of <a href=\"http:\/\/devhell.info\/post\/2011-12-10\/what-we-hate-about-php\/\">\"What We Hate About PHP\"<\/a>.<\/p>\n\n<p>Now even though it is just us complaining about stuff in PHP that we don't\nlike, regardless of the true merits of our complaints, it sparked a discussion\non Twitter about just what should be done to make handling PUT and DELETE\nrequests better in PHP.<\/p>\n\n<p>$&#95;POST and $&#95;GET are workhorses of the PHP world, used in any application\nthat accepts web requests from somewhere. Sometimes accessing them is wrapped\ninside objects or filtered out using the filter() extension of even <a href=\"https:\/\/github.com\/funkatron\/inspekt\">Inspekt<\/a>\nbut I think this illustrates the problem.<\/p>\n\n<p><a href=\"http:\/\/twitter.com\/lxt\">Laura Thompson<\/a> made the suggestion that PHP should\nlook to port the concept of the Request object that Python uses over to PHP.\nAs a cryptopythonista I think that is an excellent idea. <a href=\"http:\/\/twitter.com.\/auroraeosrose\">Elizabeth Smith<\/a>\ndid ask for some constructive ideas on solving this problem. While my C skills\nare non-existent, I thought I'd delve a bit into more higher-level thoughts\nabout this.<\/p>\n\n<p>I think the fact that we have $&#95;POST and $&#95;GET lulls some of us into the\nfalse sense that we should have $&#95;PUT and $&#95;DELETE objects, since that\nwould map to the commonly-desired set of HTTP verbs that REST likes to use.\nBut what should be inside those things, or should we be moving towards a more\nPythonesque solution where a Request object, as part of core or via a only-really-for-the-brave-\nPECL extension?<\/p>\n\n<p>What I'm really after is for an easy way to detect that a PUT or DELETE\nrequest has been made. Existing solutions for these are not pretty and (\nin my opinion) non-intuitive. With my thoughts that PHP is quickly turning\ninto a tool used for web service API end points that don't require insane\nlevels of concurrency, the idea that there is no native support for figuring\nout if you're been given a PUT or DELETE request is disheartening.<\/p>\n\n<p>The <a href=\"http:\/\/www.php.net\/http\">PECL HTTP extension<\/a> is a step in the correct\ndirection, but it too has some rough edges and would require a lot of\npolishing before it could be moved into the core where it really belongs.<\/p>\n\n<p>Again, what I'm looking for is an easy way for PHP to be able to know what\ntype of request it is dealing with so I can make my PHP applications more\naware of what it being asked of them. It seems that pretty much every\nframework implements their own Request\/Response objects, so that should be an\nindication that this kind of code abstraction is a desired core PHP feature.<\/p>\n\n<p>Share your thoughts with me in the comments.<\/p>\n",
        "date": "2011-12-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Better HTTP Request\/Response in PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/12\/12\/better-http-request-response-in-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For a long time I have been an advocate of the philosophy that organizations\nas a whole, not just the engineering team (if there is such a thing where\nyou work) should be striving towards the goal of treating any deployment\nof your code into production as a non-event. Sadly, there is much work to be\ndone from both ends of the spectrum.<\/p>\n\n<p>When deployments do go wrong the reaction is fairly predictable. It's almost \nlike the five stages of grief, sometimes known as the Kuebler-Ross model. \nYou've probably heard about them: Denial, Anger, Bargaining, Depression, \nand Acceptance.<\/p>\n\n<p>The common thing that happens during those two first stages is that people are \nchewed out for their role in the deployment failure, and in many cases the anger\nis legitimate. If you haven't written code that spectacularly failed in a \nproduction environment I will happily call you a liar.<\/p>\n\n<p>What also then happens is that the non-technical people push for what I call a\nwar-room environment for dealing with deployments. By this I mean that, for\nlack of a better phrase, orders come down from on-high that whenever a \nproduction push is going to be done that everyone needs to stick around and be\nthere \"just in case\" something goes wrong.<\/p>\n\n<p>At the news of the new directive, the engineering staff roll their eyes and\nmumble to each other about how the other side \"doesn't get it\" and how \"this\nwon't solve these problems\".<\/p>\n\n<p>Both sides are right, but only up to a point.<\/p>\n\n<p>I'm sure that some of my readers are familiar with the concept of perception\nvs. reality. When you apply this to deployment failures, the perception\nbecomes that the entire team responsible for building the application\nis to blame and that by making sure that everyone should be there it fixes\nthe problem. In my opinion, the reality is that the failure occurred due to \nthe actions of one or two individuals and making the whole team suffer is \ncounterproductive. I feel this way especially when I am directly responsible\nfor what has happened.<\/p>\n\n<p>Finding bugs in development are magnitudes cheaper to fix than production ones,\nand you will feel less pressure to fix them than if they are discovered in\nproduction. To paraphrase Darth Vader, you know in your heart that this true.\nTherefore the engineering side of the equation really needs to push back hard\non the idea that ALL HANDS ON DECK WE ARE DEPLOYING is not just making the\nproblem worse before it can get better.<\/p>\n\n<p>I've had my fair share of time with war-room driven deployment. I understand\nwhy it is viewed as a solution to the problem of failed deployments. It seems\nvery logical. By having everyone there when it happens you are more likely\nto be able to quickly solve any problems you find. However, I feel like it is\nmasking the true problem in that everything that you find yourself doing when\npracticing war-room driven deployment can be done before you even get to that \npoint.<\/p>\n\n<p>It also becomes an issue of trust. Frequent failed deployments results in the\nengineering side of things to be labeled as sloppy, uncaring, not understanding\nthe cost of lost opportunities. All of those things may or may not be clear, but\nI think forcing everyone to stick around \"just in case\" makes the situation worse.<\/p>\n\n<p>By using war-room driven deployment you are making all stakeholders nervous about\ndeployments. Everyone will be exhorted to think of everything that could go wrong\nwith the deployment and if something does go wrong, the stress level gets cranked\nup to 11 and there is frantic activity to try and solve the problem.<\/p>\n\n<p>It is often hard to explain to non-technical people that they should stay calm\nand understand that the engineering team knows what went wrong and has a real-world\nsolution in mind to fix whatever problem happened to minimize the chances that\nit happens again in the future. I don't have any easy answers on how to solve\nthat problem other than staying calm yourself and offering real-world, practical\nsolutions to the problems.<\/p>\n\n<p>If you put all the effort into making production pushes a non-event, then you will\nnot need war-room driven deployment. All you need is one person to push a button\nand then everyone can go home.<\/p>\n",
        "date": "2011-12-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "War-room Driven Deployment",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/12\/05\/war-room-driven-deployment\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the worst-kept secrets now is that I have started working on a book\nabout some practical techniques for building testable applications. I'd\nsay I'm about half done, and the book will be ready for sale\nwhen I give my talk at <a href=\"http:\/\/codemash.org\">CodeMash 2012<\/a> on the same topic.<\/p>\n\n<p>Why do I care about all this stuff that causes friction for programmers?\nBecause there is so much I want to learn and fragile, untestable applications\nget in the way of me becoming the programmer I want to be. Naturally I am also\nworking on an application that will serve as a companion to the book, a hand-crafted\nweb application that will embody the techniques I describe in the book. It is also\nvery humbling to \"eat your own dogfood\", meaning build you applications using\nthe practices you are espousing.<\/p>\n\n<p>So, I set out to show people in my chapter of the book about decoupling objects\nvia the magic of dependency injection how to use this awesome thing known as a\ndependency injection container. Although they are more suited for very large\ncomplex applications like web application frameworks but I thought \"I could\nsee someone like a younger version of me wanting to mess around with something\nlike this even though it might be totally inappropriate for the application.\nLet's do it!\"<\/p>\n\n<p>For this I am using <a href=\"http:\/\/pimple.sensiolabs.org\">Pimple<\/a>, an incredibly small\nbut effective dependency injection container. Easy to use, simple and effective\ndocumentation, just what I was looking for. I also noticed that Pimple supported\nthe use of closures (or anonymous functions) as a way of storing a dependency.<\/p>\n\n<p>Then things got stupid.<\/p>\n\n<p>I altered the bootstrap file for my application (it's using the <a href=\"http:\/\/toys.lerdorf.com\/archives\/38-The-no-framework-PHP-MVC-framework.html\">no-framework framework approach<\/a>) and set up an instance of Pimple and wrote this cool-looking code that stores\na mapper for one of my models in it:<\/p>\n\n<pre><code>$container = new \\Pimple();\n$container['db_connection'] = function ($c) {\n    return new PDO(\n        'pgsql:host=localhost;dbname=ibl_stats', \n        'login',\n        'pass'\n    );\n};\n$container['franchise_mapper'] = function ($c) {\n    return new IBL\\FranchiseMapper($c['db_connection']);\n};\n<\/code><\/pre>\n\n<p>What you don't see in this snippet is that before this happens, I am using a PSR-0\ncompliant autoloader. Go Google for it, it's hard to explain in a few short words\nand I am also using namespaces to show people just how easy they are to use. I \nlove autoloading. Spares me dealing with 'require&#95;once' and 'include&#95;once' and also worrying\nabout if I've required or included a file somewhere else.<\/p>\n\n<p>I reload my test page and...what the hell? \"Cannot find class IBL\\FranchiseMapper\"<\/p>\n\n<p>That...that...that cannot be! It's RIGHT THERE! I have unit tests that run just fine\nand the autoloader grabs it there too!<\/p>\n\n<p>So I start asking for help on Twitter. \"It must be Pimple causing the problem.\" Pimple's\ncreator <a href=\"https:\/\/twitter.com\/#!\/fabpot\/status\/139706391777648640\">smacks me down<\/a> and\nI look at the code and say \"of course it can't be Pimple. Keep looking!\"<\/p>\n\n<p>Next I figure there is something specific to closures that is causing the problem. I reach\nout for more help, trying things willy-nilly to try and figure it out. I contemplate using\nXdebug to trace what is going on in the autoloader. Not very easy to debug autoloaders. \nFinally I see something (of course I cannot find the link now) that talks about closures\nand scope. That is when I realize how fucking stupid I have been.<\/p>\n\n<p>So, let's talk about scope for a second. Besides being the brand name for a mouthwash, scope\nis a topic that some programmers get tripped up on. Despite my 14 years of PHP experience I often\nfeel like it is 1 year repeated 14 times. Scope deals with variables (and in this case namespaces)\nand where they can be accessed from.<\/p>\n\n<p>You have global scope, meaning that the variable\/object\/function can be accessed from anywhere.\nThen you have the scope of something inside a standalone function. Unless (mind you, this is PHP\nand I cannot speak for other languages) you mark it as global, it can only be accessed from \ninside that function. Now, you can declare a variable\/object\/whatever as being accessible inside\nthat object via the use of (for example) $this->foo but that variable, and you can also slap\npublic\/protected\/private to decide who can see it when you interact with that object.<\/p>\n\n<p>To roll back to me, my problem was not one of variable scope. It was one of namespace scope. With\nthe introduction of namespaces to PHP you now have the concept of the \"global namespace\", which is\nwhere all the existing PHP functions and objects live. If you want to be pedantic (and Wotan knows\nI sometimes enjoy pedant status) you should be prefixing all your calls to things like \nmysql&#95;query() with a backslash. Try it out and see if I'm telling the truth.<\/p>\n\n<p>So I'm scratching my head looking at this code. \"What the hell, dude. I've got nothing to lose\nby adding a backslash in front of IBL.\" Of course it worked. But why did it work?<\/p>\n\n<p>(Grumpy developer's note: I was asked on Twitter to expand a bit on the reasons behind why\nthings work this way. I am not a PHP internals guy so everything I say here is\njust an educated guess)<\/p>\n\n<p>With the introduction of namespaces, PHP has to operate under some assumptions. If\nyou are going to remain backwards-compatible with a lot of code and support namespaces\nthen you have to make some rules too. As far as I can tell, when PHP encounters an object\nor function, it assumes that it is in the global namespace first. This is how you can do\nthings like $query = mysql&#95;query() and have it not complain. No prepended backslash, it\nassumes it is in the global namespace.<\/p>\n\n<p>Now, let's say I am trying to do this:<\/p>\n\n<pre><code>$mapper = new IBL\\FranchiseMapper($container['db\\_connection']);\n<\/code><\/pre>\n\n<p>There is no pre-pended backslash but there <em>is<\/em> a backslash after the IBL, therefore PHP can\nassume that there are namespaces involved. Then (I think) it goes and looks to see if\nthere is currently an 'IBL' namespace that it has been asked to use. Because of the autoloader\nit is aware of that namespace, so then it happily loads it.<\/p>\n\n<p>So why does it behave differently inside closures? I am not 100% sure, but if I had to\nmake an educated guess I would say that when trying to resolve namespaces inside\na closure, the interpretor doesn't assume that it is already inside the global namespace,\nthat it is in a namespace of it's own. Hence the need to explicitly declare that you\nare starting with the global namespace (prepending the backslash) and then working\nyour way down.<\/p>\n\n<p>If any PHP interals contributors read this blog post I would appreciate a follow-up \ncomment to confirm and\/or explain how this works.<\/p>\n\n<p>So, it looks like closures are stricter and was reminding me, via that error message, \nthat I need to be aware\nof the current scope of the namespace (is that even the right way to put it?) \nand prepend that backslash so my autoloader (which is hooked into spl&#95;autoload&#95;register)\ncan, you know, find and create that object for me. So here's how it looks now<\/p>\n\n<pre><code>$container = new \\Pimple();\n$container['db_connection'] = function ($c) {\n    return new \\PDO(\n        'pgsql:host=localhost;dbname=ibl_stats', \n        'login',\n        'pass' \n    );\n};\n$container['franchise_mapper'] = function ($c) {\n    return new \\IBL\\FranchiseMapper($c['db_connection']);\n};\n\n$mapper = $container['franchise_mapper'];\n<\/code><\/pre>\n\n<p>Yay! I can create a mapper via the dependency injection container.<\/p>\n\n<p>I know that a lot of beginning to intermediate javascript programmers &#42;cough&#42;me&#42;cough&#42; have\nto pay attention to variable\/function\/object scope issues as well. Also, don't be like me when\nthere are no tests for your code and start randomly changing things in hopes that it works.<\/p>\n\n<p>It usually doesn't.<\/p>\n",
        "date": "2011-11-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Scope is not a mouthwash",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/11\/25\/scope-is-not-mouthwash\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the interesting side effects of getting involved in your programming\nlanguage community of choice is that you often get access to cool projects\nbeing done by your community buddies before the rest of the riffraff (aka \nthe general public). One such project is <a href=\"http:\/\/gimmebar.com\">Gimme Bar<\/a>,\na \"capture anything you want and read later\" web site. Created by the fine\nfolks at <a href=\"http:\/\/fictivekin.com\/\">Fictive Kin<\/a>, <a href=\"http:\/\/twitter.com\/coates\">Sean Coates<\/a>\nand <a href=\"http:\/\/twitter.com\/funkatron\">Ed Finkler<\/a> were kind enough to not only\ngive me access to their application (My user type apparantly is \"The Betanaut\") but\nalso an early peek at their API.<\/p>\n\n<p>Now, it's changed a bit since their earliest work but now they are starting to promote\nnot only the site but showing how easy it is to use their API to play around with\nnot only your content but other's public-facing content too. I fooled around with\nthe API and tried to write some Python stuff but lots patience when trying to work\nwith OAuth from the command line. Hey, it's not their fault that I couldn't be bothered\nto slog through it all.<\/p>\n\n<p>Funkatron was kind enough to put together a blog post about <a href=\"http:\/\/funkatron.com\/posts\/building-a-tumblelog-with-gimme-bar-and-php.html\">building a Tumblelog with \nGimmer Bar and PHP<\/a>\nso I told him I would write up what I did on my own blog.<\/p>\n\n<p>One of my intents was to use the <a href=\"https:\/\/gimmebar.com\/api\/v0\">Gimme Bar API<\/a> to pull\nin a list of my latest Gimmies for the sidebar on this blog. Ed had posted a very\nsimple example in Javascript (I cannot remember where it is) so I took it and ran with\nit to modify it to work with <a href=\"http:\/\/octopress.org\">the blogging software<\/a> used here.<\/p>\n\n<p>I went and asked some questions in the Freenode IRC channel for Octopress and found out\nthat they recommended the use of JS libraries that are compatible with <a href=\"http:\/\/dustindiaz.com\/ender\">Ender.js<\/a>.\nOkay, so that was no problem. So what to use to make the actual AJAX request call to\nthe API? <a href=\"https:\/\/github.com\/ded\/reqwest\">Reqwest<\/a> was mentioned by some as the best\nfit for using with Ender. Reqwest is an easy-to-use JS AJAX library that the #octopress\nguys suggest I use since jQuery doesn't currently play nice with all the other JS\nlibraries that Octopress is using.<\/p>\n\n<p>Finally, I used <a href=\"https:\/\/github.com\/documentcloud\/underscore\">Underscore<\/a> to \nhelp with templating.<\/p>\n\n<p>Even though I'm not much of a JS whiz, I was able to take Ed's example and very quickly\nmodify it to work exactly the way I wanted it to. Below is the code I used to putt in \nmy 10 latest Gimmes and insert them into the DOM exactly where I wanted them.<\/p>\n\n<pre><code>&lt;section&gt;\n  &lt;h1&gt;My Latest Gimmies&lt;\/h1&gt;\n  &lt;ul id=\"gb_assets\"&gt;&lt;\/ul&gt;\n  &lt;script type=\"text\/javascript\"&gt;\n  reqwest({\n      url: 'https:\/\/gimmebar.com\/api\/v0\/public\/assets\/grumpycanuck.js?jsonp_callback=?',\n      type: 'jsonp',\n      success: function(data){\n          var list_tpl = \"&lt;% _.each(records, function(record) { %&gt; &lt;li&gt;&lt;a href='https:\/\/gimmebar.com\/view\/&lt;%=record.id%&gt;'&gt;&lt;%=record.title%&gt;&lt;\/li&gt;&lt;\/a&gt; &lt;% }); %&gt;\";\n          var list_html = _.template(list_tpl, data);\n          $('#gb_assets').html(list_html);\n      }\n  });\n  &lt;\/script&gt;                                                                                                                                                     \n&lt;\/section&gt;\n<\/code><\/pre>\n\n<p>For those who aren't JS-savvy, I'll explain what goes on here:<\/p>\n\n<ul>\n    <li>Execute an AJAX call that...<\/li>\n    <li>calls the Gimme Bar public API to get the latest 10 public posts...<\/li>\n    <li>and on success generate an unordered list of posts...<\/li>\n    <li>linking to the item on Gimme Bar and show the title...<\/li>\n    <li>and insert it into the DOM where I asked it to<\/li>\n<\/ul>\n\n<p>Easy peasy, lemon squeezy. Ender.js + Reqwest + Underscore + 15 lines of markup and JS\ngives me the latest 10 posts. Hope this inspires you to play with the Gimme Bar API\nyourself.<\/p>\n",
        "date": "2011-11-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building a Gimmebar Sidebar",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/11\/07\/building-a-gimmebar-sidebar\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>You might have come across the term \"technical debt\", used to describe the small\nmistakes that are made in your code base as the application grows and requirements\nchange. You end up with a big tangled mess if you are not very careful about\nhow you make those changes. If you've ever worked on an application where you\nwere afraid to make changes for fear of breaking something, then you have\nrun into technical debt.<\/p>\n\n<p>It's very easy to build up technical debt: you put a quick hack in because you\nfeel like you are under pressure to get a task accomplished. It takes courage\nto push back and say \"no, damnit, I need time to fix this particular problem\ncorrectly!\". I understand, and it's okay. We can hug it out if it will make\nyou feel better.<\/p>\n\n<p>Technical debt can be dealt with via ruthless refactoring and wrapping your\napplication in tests that poke and prod at the edge cases that your application\ndeals with. But there is another type of debt you end up dealing with. One that is\neven more difficult to deal with and change. I call it infrastructure debt.<\/p>\n\n<p>Infrastructure debt is debt that you build up because you have not been paying\nattention to the process of creating the environments your application will exist\nin and have not been paying attention to the process of how your code gets from\ndevelopment into production. In my opinion, infrastructure debt is much more \ndifficult to \"pay off\" than technical debt. Why? It is often very difficult\nfor people to understand that it even exists.<\/p>\n\n<p>Before I go any further, if you are not using a version control system to keep\ntrack of changes to your code, then please stop reading and go and install one.\nHaving versions of your files with extensions like .1 and .old is the worst\nkind of infrastructure debt that you could possibly have. It's the 2nd decade\nof the 21st century. Version control is an almost 40-years-old, well-understood concept.\nNothing I suggest will work if you insist on acting like version control\nis of no use to you. Passing around diff patches is not version control, my\nfriends. It's denial. Don't tell me just because people used to do it in\nthe past that it's okay now given all the available options. People used to\nthink that the earth was flat once too.<\/p>\n\n<p>Let's start with an easy infrastructure debt to pay off: inconsistency in development environments. These\ndays it is pretty easy for someone to create a development environment for their\nlanguage of choice along with associated components like databases. The problem?\nThat it's pretty easy for someone to create the development environment of their\nchoice.<\/p>\n\n<p>You end up with your developers all having environments that are slightly different\ndue to choice of source for packages or preferences on versions of components. I have\nPHP 5.3.8 via a custom Homebrew recipe while one of my co-workers has the stock\nversion of PHP that comes with OS-X Snow Leopard. He has a version of MySQL that is\ntwo versions ahead of mine. See how easy it is to get out of sync?<\/p>\n\n<p>You have two options. The first one is the draconian one, where you force everyone\nto use the same operating system and the same tools to minimize the chances of \nconflicts between development environments. Given how that leads to developer\nunhappiness, I prefer a more sane approach: use tools like <a href=\"http:\/\/www.vmware.com\">VMWare<\/a> or <a href=\"http:\/\/www.virtualbox.org\">VirtualBox<\/a> to\nlet your developers do their work on identical virtual machines while giving\nthem the freedom to use the development and debugging tools of their own choosing.<\/p>\n\n<p>Also, by using a virtual machine you can encourage developers to push the envelope\nand test destructive things like library upgrades or database changes. Messed it up?\nJust fire up a new virtual machine and try again. When you combine it with good\nversion control practices you should be able to recover from your mistakes even\nfaster.<\/p>\n\n<p>Just make sure to take the time to create virtual machines that are as close to\nan exact match as your production systems as you can. Honestly, the only difference\nbetween your development environment and your production environment should be the data\nyour application is manipulating. It's not really that hard to even create\na cluster of virtual machines on your own computer to simulate an architecture\nthat has application servers, a database server and a memcached server.<\/p>\n\n<p>It also helps you to get new developers up to speed quickly. \"Oh, working on \nProject Alpha? I'll email you the link on the wiki where you can download\nthe virtual machine for that project.\"<\/p>\n\n<p>Check out <a href=\"http:\/\/vagrantup.com\">Vagrant<\/a> for a great option for developers\nwishing to do their work in a virtual machine.<\/p>\n\n<p>So, having injected some structure into your development environment there is\nreally one last frontier where infrastructure debt builds up like the\ncredit card bills of a shopaholic: deployment processes.<\/p>\n\n<p>I really think there is one rule: if you cannot do your deployments with one\ncommand then you are DOING IT WRONG. If you can type the commands you are \ndoing into a shell then you can script them so you don't have to type\nthem in again. If you can script deployment, then you can automate\ndeployment. If you can automate deployment then you now have a consistent\nand repeatable process that will behave the same way every single time\nyou deploy.<\/p>\n\n<p>At <a href=\"http:\/\/www.moontoast.com\">Moontoast<\/a> we have automated deployment in place.\nWhen we merge code into our staging and production branches, a version control\nhook triggers our deployment tool. It checks out our code into it's proper\nlocation on the production server. It runs database migrations that need\nto be done. It starts and restarts various services that are used by the\napplication. In short, it does everything that I see far too many of my\ncolleagues doing manually. Stop that. Clean up your infrastructure debt\nby making the process of deploying your code a non-event.<\/p>\n\n<p>If you want to automate your deployment process, examine tools like \n<a href=\"https:\/\/github.com\/capistrano\/capistrano\/wiki\">Capistrano<\/a> or <a href=\"http:\/\/www.phing.info\/trac\/\">Phing<\/a>\nor you could even use a tool like <a href=\"http:\/\/jenkins-ci.org\">Jenkins<\/a> and use\nit's concept of Builds to automate the process of taking your latest code\nchanges into production.<\/p>\n\n<p>Note that I said the PROCESS, because technical debt might mean that your\napplication is fragile enough (doesn't have enough tests and\/or test coverage)\nthat the changes you made might cause it to behave improperly or even crash\nthe system altogether. Not a good feeling, so by investing the time into\nautomating your deployment process you can eliminate at least one headache.<\/p>\n\n<p>I think the main point I am trying to get across with respect to infrastructure\ndebt is that you really need to examine your processes beyond just coding. \nIf you find yourself constantly fighting the \"works on my computer\" battle, \nyou likely have serious infrastructure debt. If you find yourself constantly\nreferring to a checklist whenever you do a deployment, you likely have serious\ninfrastructure debt.<\/p>\n\n<p>Whenever I bring this topic up, I hear many of the same excuses that I hear\nwhen I advocate a commitment to writing tests and automating the execution\nof those tests. What is it that people have against this sort of thing?<\/p>\n\n<p>I have found that people terribly underestimate the amount of manual work they\ndo to accomplish a task. For many, it is a fear of losing control that leads\nthem to conclude that automated deployment cannot be trusted, or that \ndevelopers shouldn't have the freedom to pick the tools that they use to \nbuild their applications.<\/p>\n\n<p>Technical debt is real, make no mistake. But so is infrastructure debt. Just like\nthe cost of finding bugs in production is more than finding them in development,\nthe cost of fixing infrastructure debt gets more and more expensive. Just think\nof the large number of problems solved by eliminating inconsistencies between\ndevelopment environments. Add to that the ability to eliminate user error\nduring manual deployments of your application. Why would you not want to have \nthis?<\/p>\n\n<p>The decision to start paying down your infrastructure debt is not an easy one,\nbecause it will often require many changes to be made by many people. Most\nprogrammers are creatures of habit and dislike change, even when it is \nobviously better. Don't be scared of change, be scared of the debt growing\nin your code base and in your infrastructure. It won't go away and\nthere is no government bailout on the way to fix it.<\/p>\n\n<p>As always, I welcome your thoughts via email, Twitter and comments on this blog. \nWhat sort of infrastructure problems have you come across and how did you fix them?<\/p>\n",
        "date": "2011-11-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Infrastructure Debt",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/11\/03\/infrastructure-debt\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As mentioned in the previous post about remote working, you do have to work a lot harder when you're not in the same office as your co-workers in order to simply get things done. If you took my advice you've got yourself a sweet setup at home, with a comfy chair and a nice desk. But that is only the first battle in the on-going war that is successful telecommuting. In this post I want to talk about some tools that I use that I feel help me Get Shit Done when working from home.<\/p>\n\n<p>First, since you don't have the instant feedback loop of a fellow cubicle dweller or even office-sharing partner, you need tools that can act as a second set of eyes for you before you open what is often an expensive communication channel to your co-workers. Not expensive in terms of money (unless you have to call people long distance and don't either use VOIP at home or Skype) but expensive in terms of time. Making that initial \"communication handshake\" is expensive in time and commitment.<\/p>\n\n<p>So for me, the first set of eyes I use are <a href=\"http:\/\/getfirebug.com\/\">Firebug<\/a> or Chrome's web developer tools, depending on which browser I'm using. Those let me peek at the HTML being generated and debug any Ajax calls your application is making. It used to be my primary tool until <a href=\"http:\/\/twitter.com\/ramsey\">my boss<\/a> asked me why I wasn't using <a href=\"http:\/\/www.charlesproxy.com\/\">Charles<\/a>, an awesome debugging proxy application for OS-X, Windows and Linux.<\/p>\n\n<p>Charles acts like what it says: it's a web debugging proxy. It sits between your browser and your next work connection, monitoring and showing you what connections you are making. Why is this awesome you might ask? I can record an entire series of clicks on a web page and play them back later for testing purposes.\nI like Charles for a few reasons. This is helpful because one of our main applications at Moontoast is a flash-based store and Charles will show me the request that the flash SWF is making <em>and<\/em> I can see the response that is coming back. I am not a flash developer, but I do need to make sure that code I write that is supposed to talk back to the SWF (via AMF) is returning correct values. I like to record Ajax calls and repeat them over and over until I am happy with the response coming back. Please, please, PLEASE check out Charles. It is worth every penny.<\/p>\n\n<p>So now that I have someone else helping me debug my Ajax and AMF calls, what other tools do I find useful. Well, if you don't have your editor already tricked out to reduce the amount of work you have to do <em>outside<\/em> of your editor to get things done then I advise you to actually learn your editor inside and out. As a vim user I spend a lot of time evaluating plugins that can help me out. I use <a href=\"https:\/\/github.com\/scrooloose\/syntastic\">Syntastic<\/a> to run my code through a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Lint_programming_tool\">code linter<\/a> every time I save it. I use <a href=\"https:\/\/github.com\/tpope\/vim-fugitive\">Fugitive<\/a> to work on my Git commits and merges. All in all, it's important that you be as productive as possible using the tool you write your code with day in and day out.<\/p>\n\n<p>Of course, it goes without saying that you should be probably be writing your own tests for your code that you can automate. Don't worry, this is not going to turn into another sales job for automated testing. PHPUnit, PHPSpec, Selenium, please use something that acts as an automated tester for you. I mean, it seems to work for me so maybe it can work for you.<\/p>\n\n<p>So that's really it in terms of tools that I have found that I used more and more as I telecommuted more and more. My criteria for evaluating any tools is this: is it easy to use, can it automate something I don't want to do manually, and does it easily integrate into my existing workflow. Firebug and Charles fit that criteria. Plugins for my editor fit that criteria. CLI test runners fit that criteria.<\/p>\n\n<p>In other words, any tool that can make you more productive in an office setting is even more important when working remotely with a team. Anything that you can do to reduce the testing and integration step benefits you and your team, and helps to convince management that their decision to allow you to continue to work remotely is a good one.<\/p>\n\n<p>I'm interested in hearing other people's experiences telecommuting and tools that they have found to be helpful. Comment in this post, send me some email (chartjes AT this domain) or hit me up on Twitter.<\/p>\n",
        "date": "2011-10-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's Guide To Remote Working, Part 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/10\/24\/grumpy-programmers-guide-to-remote-working-part-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, I couldn't very well call this post <a href=\"https:\/\/twitter.com\/weierophinney\/status\/122317724117516288\">MOAR OFFICE PORN<\/a> as <a href=\"http:\/\/weierophinney.net\/matthew\/\">MWOP<\/a> suggested.<\/p>\n\n<p>I have talked before on this blog about stuff related to what goes into being a successful remote worker. I've been telecommuting for 4-1\/2 years now and it's the best thing that ever happened to my career. It allowed me to grow into the programmer I am today by teaching me the importance of being disciplined, learning how to communicate effectively in a remote environment, and how to not take shit from anyone just because I wasn't in the same office as them. This will be the first article in a series about what I think are some successful strategies for being a good remote worker. Today's lesson is about creating an effective workspace.<\/p>\n\n<p>When I used to do my killer commute to work every day (1-1\/2 hours in, 2 hours out) I had the misfortune of working for employers who did not believe that creative people (yes, that means you mister programmer) needed quiet and private (or at least semi-private) working space in order to get things done. Instead I usually ended up either in the cubicle farm or in that phrase that inspires the most fear for me: the open concept office. Except for the managers of course. They always had offices with doors that could be closed.<\/p>\n\n<p>So now that you work at home, guess what? You can finally create the environment that will allow you to easily get into that state of focussed work that some refer to as The Zone. No working at coffee shops for this grumpy guy. Small tables, crappy chairs, and people staring at you while you're trying to work. I'm not doing top-secret work for the government, I'm just trying to build some rock-solid web applications. Eyes on your own crappy life, please.<\/p>\n\n<p>For me, I started off working in the unfinished basement of my house on a make-shift desk that consisted of an old desktop from a broken desk (well, not really broken but I couldn't find a bunch of lock nuts to put it back together after I moved) on top of two filing cabinets. I bought a decent chair (more on that later) and was okay to work. Until it was winter in my part of Canada. The basement was pretty much unheated so by 2 PM my hands were numb.<\/p>\n\n<p>So at my wife's insistence I moved into the dining room. Almost the same problem as working from the coffee shop, except I had a better chair and no people starting at me. Just the cats, but they never debugged my code properly anyway. Plus she complained about the reproducing paper up the table: bills I paid that hadn't moved down to the filing cabinet in the basement, printouts of instructions and scoresheets for my simulation baseball league. The time came for us to consider trying to use the space in our basement for something productive. So we sank $25K into renovating the basement: laundry room, wreck room for the kids (get the joke?), two storage areas, and a home office for me.<\/p>\n\n<p>So, what is the configuration that allows me to get into the proper frame of mind to program? Well, the first one is a door that I can close. Call me a princess but sometimes I need to block out the noise from the rest of the house in order to get things done. Especially when the kids are home from school during the last two hours of my normal working day. They argue and make lots of noise when watching TV, so the door gets closed. If I get especially grouchy I lock the door too and make them call me via our phone's intercom system.<\/p>\n\n<p>I've never liked the idea of putting on headphones to block out the outside world. I find long-term headphone wearing to be hot and uncomfortable. Yes, I used to wear earbuds during my long commute but I wasn't trying to solve any problem other than mentally cooling down from a long day at work. So an office with a door I can close means I can crank up the tunes if required but also give myself a nice quiet zone when I really need it.<\/p>\n\n<p>Next essential item? Another piece of furniture other than a chair that you can sit on. Until recently all I had was my awesome \"fat man chair\" (big comfy leather chair that can handle up to 350 pounds of weight). Sometimes I wanted to move away from my desk to work out a problem with paper and pen, or even just to lay down for a minute while talking in a meeting. Hey, don't blame me because I work from home. Make it happen for yourself before picking on me!<\/p>\n\n<p>Anyway, we recently pulled up the grotty carpet in our house and had laminate flooring installed. I got the people who did the floor to help me move on part of our three-piece sectional down into my office. Now I have a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Fainting_couch\">fainting couch<\/a> to sit on. Most useful piece of furniture in my office. Do not underestimate the importance of having something else to sit on.<\/p>\n\n<p>Now, more about the desk. I still have my terrible desk, but with my awesome adjustable chair I have comfort while sitting my large frame down. I'm 6'5\", 285 lbs of grumpy programmer. The world is not made for people my size. It was worth the money ($300 at the local office supply place, they had only one in stock) for my chair, so I always recommend people try out several chairs and get the one that the think they could sit in for the longest. Yes, I know that standing desks are all the rage right now, but I think you are trading one set of problems for another. Maybe standings desks work for you.<\/p>\n\n<p>My next home office purchase will be an adjustable desk from Ikea to get the perfect height for working, as I find my current setup to be just a tad too low. Again, having the ability to adjust the height of your desk to an optimal height based on your chair is critical too. I'd love to fork out the $1500 to get one of those awesome adjustable <a href=\"http:\/\/www.geekdesk.com\/\">Geek Desks<\/a> but that will have to wait for me to set aside enough money for purchase and delivery.<\/p>\n\n<p>So, now my actual working setup. I have a 15\" MBP generously purchased for me by my employer. Connected to that I have an Apple keyboard and mouse, and view things via a really nice 23\" LCD monitor. What I really want is one of those Apple Studio Displays, but again that will have to wait until I can set aside enough money for such a purchase. Right now, I'd say that is my optimal configuration. I very rarely refer to the laptop screen, and like the amount of real estate I have now. Perhaps I could move to a two-monitor setup but I need more physical space on my desk to make it happen. Hrm, I will have to measure the new desk to see what will fit...<\/p>\n\n<p>Anyway, in part two I will talk about how my programming style and support tools have changed since I've been working remotely.<\/p>\n",
        "date": "2011-10-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's Guide To Remote Working, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/10\/10\/grumpy-programmers-guide-to-remote-working-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I don't regret moving from a Wordpress-powered blog to one that is created using a static site generator. But I can definitely say that the journey\nto a static site (initially <a href=\"http:\/\/github.com\/mojombo\/jekyll\">Jekyll<\/a> and now using <a href=\"http:\/\/octopress.org\">Octopress<\/a>) is not a path I would recommend\nto anyone who is not comfortable debugging issues from the command line or unable to write conversion tools from scratch depending\non the situation.<\/p>\n\n<p>While I do like how easy Octopress makes it to manage my blog I find the whole setup to be, like so many other tools and web applications I've come across, to be brittle. Too many moving parts. Too much reliance on things being perfect and if they're off by even the tiniest bit everything falls apart. I am by no means innocent of creating brittle applications but I try and go out of my way these days to create things that are as robust as possible in the constraints of the existing system.<\/p>\n\n<p>For me it was <a href=\"https:\/\/rvm.beginrescueend.com\/\">RVM<\/a>, the \"Ruby Version Manager\". I like to call it \"what <a href=\"https:\/\/github.com\/pypa\/virtualenv\">virtualenv<\/a> would look like if Ruby guys got their hands on it\". On the surface it sounds awesome: it sets up an environment containing the Ruby binary you want and the Ruby gems you want, isolating this application from whatever the defaults were on the system. Just like virtualenv. Sounds incredibly useful. But when it breaks, it breaks and there is NO way to tell what the hell has happened.<\/p>\n\n<p>Somehow through deleting the .rvmrc file (the RVM config file) I managed to break my install of Octopress. This happened at the same time I upgraded the Octopress components by pulling from the master. I had no fucking idea what had happened, all I knew was that it wouldn't generate any more blog posts for me and was reporting errors about going too many stack levels deep, mal-formed YAML, and Unicode errors. Funny how none of that seemed to have mattered to Octopress before I updated.<\/p>\n\n<p>In the end, I had to completely remove the install and start it up again from scratch. This is not what I call a successful error-resolution process. In my mind I shouldn't have had to do this at all, but through the removal and re-addition of one file everything was completely messed up. One upside was that in the process of getting things back to \"normal\" I created two scripts that I hope can be of use to people who ran into the same problems I did.<\/p>\n\n<p>I used the stock migration script for Jekyll for Wordpress users who had their posts in a database. The script reads all your posts in and then spits out new posts in the Markdown format that Jekyll expects. The new version of Octopress likes Ruby 1.9.2 which, as far as I can tell, is much less forgiving of mistakes in YAML and Unicode characters. I don't use Ruby so I am not as familiar with these issues. It sure sucked when I was searching for solutions to my problems.<\/p>\n\n<p>So, I had 427 posts that had been converted and there was no way I was going to search through each one by hand to resolve the issues. So I needed two scripts: one to parse all the posts to check for invalid YAML and one to force re-encoding of the content of each post into UTF-8 (because that's how Jekyll and I roll). Being a polygot programming wannabe, the first script for YAML validation was in Python:<\/p>\n\n<pre><code>#!\/usr\/bin\/env python\nimport getopt\nimport os\nimport re\nimport sys\nimport yaml\n\nfrom yaml import load, dump\n\ntry:\n    from yaml import CLoader as Loader, CDumper as Dumper\nexcept ImportError:\n    from yaml import Loader, Dumper\n\nclass Usage(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n\ndef main(argv=None):\n    if argv is None:\n        argv = sys.argv\n\n    try:\n        try:\n            print \"Checking markdown files in the current directory...\"\n\n            #root = \"\/Users\/chartjes\/Documents\/atthekeyboard\/source\/_posts\"\n            for r,d,f in os.walk('.'):\n                for file in f:\n                    fp = open(file, 'r') \n                    contents = fp.read()\n                    marker = \"---\"\n                    a = contents.find(marker)\n                    b = contents.find(marker, a + len(marker))\n                    try:\n                        yaml_to_parse = contents[a:b]\n                        yaml.load(yaml_to_parse)\n                    except:\n                        print \"%s is invalid YAML\" % file\n        except getopt.error.msg:\n            raise Usage(msg)\n    except Usage, err:\n        print &gt;&gt;sys.stderr, err.msg\n        return 2\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n<\/code><\/pre>\n\n<p>It took me a while to find some code to extract just the YAML from the posts, and I am not 100% happy with the result but it did the job and identified a handful of posts that made it through the migration and didn't properly wrap post titles with colons (which YAML thinks is bad) in quotes. With the bad YAML fixed I then had to fix any bad characters in the posts. For that I dragged out my copy of \"Programming Ruby\" (proudly proclaiming on the cover that it was a Second Edition covering Ruby 1.8) and stole some code from a conversion script someone wrote for Wordpress blogs if you dumped the contents as XML.<\/p>\n\n<pre><code>#!\/usr\/bin\/env ruby\nrequire 'fileutils'\n\nmarkdown_files = Dir[\"*.yml\"]\n\nmarkdown_files.each do |m|\n    puts \"Converting #{m}\"\n    f = File.new(m)\n    post_contents = f.read\n    content = post_contents.encode(\"UTF-8\")\n    new_file = File.new(m + \"-new\", \"w+\")\n    new_file.write(content)\n    FileUtils.mv(m + \"-new\", m)\nend\n<\/code><\/pre>\n\n<p>Like I said, I'm happy I switched but the brittleness of the whole setup is something I find annoying. I realize that Octopress probably started it's life as one person's set of tools they were using to manage a Jekyll blog. The process of turning that extraction into a general-purpose tool is a difficult one and I want to say thank you to <a href=\"https:\/\/github.com\/imathis\">Brandon Mathis<\/a> for providing quick and useful information in the #octopress channel on Freenode while I tried to figure out how to fix the problems I was facing.<\/p>\n\n<p>(Edit: On Twitter Octopress' creator felt I was <a href=\"https:\/\/twitter.com\/#!\/imathis\/status\/113991077555474433\">saying that everyone must endure what I went through<\/a>, which isn't the case. My point was that the whole setup seems fragile to me and that one little mistake shouldn't make everything blow up like it did. Now that I know what to look out for, this shouldn't happen again. Cheer up Brandon!)<\/p>\n",
        "date": "2011-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "'Blogging framework for hackers' is the right label",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/09\/14\/blogging-framework-for-hackers-is-the-right-label\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been spending a lot of time lately building APIs for projects at work. One is a SOAP API and the other an RPC API (no, not full REST but it is aware of GET vs. POST for certain RPC calls). One of them was built to support an internal project (server-side component for a JS-powered online store) while the other is to help a 3rd party extract data from our own services for integration into their own. Building both of these led me to the epiphany (maybe obvious to you but not to me) that there are really two sides to an API. They are not necessarily the sides you are expecting.<\/p>\n\n<p>One reason to build an API is to expose data that is in your system. If you're really forward-thinking, you wrote the API first and then your applications follow the form of a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Service-oriented_architecture\">Service-Oriented Architecture<\/a>. That is the sweet spot for a lot of applications and I cannot lie when I say I want to move some of the infrastructure towards that, but I am drifting off topic. This is the most common form of an API -- you select the data you wish to expose to other people. The advanced version of this, which is essential to building an SOA, is to then allow users to do actions via the API that create, update, or delete data in your system.<\/p>\n\n<p>The second reason to build an API is to allow for integration with other services. Sounds a lot like the first reason for making an API, right? The big difference is that instead of the people building the API (meaning you and\/or me) are not in control of what gets exposed. The party doing the integration will be telling you what data they will need exposed. It's a subtle difference but one that I think is important to understand. Under the first scenario, you are in control and (to use a bad cliche) hold the keys to the kingdom, deciding what data gets exposed.<\/p>\n\n<p>In the second scenario you are not in control and are relying on 3rd parties to tell you what data they need. Depending on the actual relationship between you and the 3rd party, you might have a chance to move this scenario back to the first one. Keep this in mind next time you are building an API and adjust your expectations accordingly.<\/p>\n",
        "date": "2011-09-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Two Sides to API Building",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/09\/13\/two-sides-to-api-building\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My apologies for the big mess here. As some of you who follow me on twitter might\nbe away, I accidentally blew away all the source for this blog while trying to fix\na syntax highlighting problem with some older posts. I thought I had a back-up of\nthe source on my external drive but it turns out that I was not telling it to\nback up my home directory, for whatever reason. How awkward.<\/p>\n\n<p>Luckily I sill had the dump of data from my old WordPress blog in a database so\nsince I was still going to use Jekyll, I used one of the provided converters and\ngot back to work. I was still missing 13 posts though. Those were fairly easy to\nrecover thanks to the awesomeness that is <a href=\"https:\/\/github.com\/jgm\/pandoc\">Pandoc<\/a>. What is\nPandoc? It bills itself as a \"universal file converter\" and it does a pretty\ngood job. I used it to convert those old posts in HTML format into Markdown. Now that I had\nall my posts (stretching back to October of 2005) it was time to renovate.<\/p>\n\n<p>I'm not using just Jekyll. I decided to use <a href=\"http:\/\/octopress.org\">Octopress<\/a>, which\nis a suite of tools written in Ruby that sit on top of Jekyll. I edit my posts in Markdown \nas usual, and then it's \"rake generate &amp;&amp; rake deploy\" to make new posts. Of course, it \nwasn't quite that simple but that is the basic version of it.<\/p>\n\n<p>(Edit: I previously had said I was going to drop comments from the blog but because I kept the same URL structure, the Disqus plugin\nfor Octopress was able to easily find them. Another small victory for Octopress)<\/p>\n\n<p>Finally I apologize to people who are reading my feed if I have just blasted them with 800+ posts\ndue to me setting the blog up again.<\/p>\n\n<p>Anyway, I'm back and expect the info to start flowing again.<\/p>\n",
        "date": "2011-09-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Renovating Sucks",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/09\/07\/renovating-sucks\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had jokingly asked on Twitter for topics for blog posts for this\nweek, planning on blogging something last night too, but I ran out\nof time before I headed out to play softball. Let's here it for\ndedication to task! <a href=\"http:\/\/twitter.com\/elazar\">Matthew Turland<\/a>\nhad suggested I talk about the day in the life of your grumpy\nprogrammer at <a href=\"http:\/\/www.moontoast.com\">Moontast<\/a>. Not missing an\nopportunity to be a smartass, I asked Matthew if he really wanted\nto know before <a href=\"http:\/\/twitter.com\/ramsey\">my boss<\/a> piped up that\nit involved lots of \"blood, sweat and swear\". Thanks to\n<a href=\"http:\/\/terrychay.com\/\">Terry Chay<\/a> for that awesome quote.<\/p>\n\n<p>Given that Moontoast is\n<a href=\"http:\/\/www.moontoast.com\/company\/jobs\">currently hiring<\/a> some PHP\ndevelopers (ahem, Server Side Engineers) to either work in our\noffices in Nashville, Boston or remotely in North America, perhaps\nthis is a very timely post. Don't worry, I'm not going to reveal\nany trade secrets or ask you to peer review the code I've written.\nI'll save that punishment for those folks we actually hire.\nInstead, I want to focus a bit on work flow and our\ninfrastructure.<\/p>\n\n<p>With most of the team in Nashville, that means they are on Central\ntime. Since I'm in the Eastern timezone, that gives me the first\nhour of the day to focus on planning my day. Yes, I'm sure you\nshocked that I actually make notes and try to plan ahead of time\nthe things I want to work on that day. Lately I've been working on\na SOAP-powered API. Don't worry, I can hear you snickering while\nyou read that. It's meant to be compatible with\n<a href=\"http:\/\/www.magentocommerce.com\/wiki\/doc\/webservices-api\/api\/\">Magento's<\/a>\nfor strategic business purposes.<\/p>\n\n<p>As part of my tasks I also identify who on the team I need to speak\nto if they are a potential block. Being a remote worker means that\ncommunication is incredibly important, and quick turnaround time is\nessential to avoid me sitting in my basement wasting my time. With\nmy list of potential targets for my anger secured, I connect to the\ndev environment I'll be using and start coding away.<\/p>\n\n<p>At Moontoast all our stuff is up in the cloud. EC2, S3, ELB, MySQL\non RDS and MongoHQ. My two dev environments are up there too, so I\nspend pretty much all day using Vim. I did try using\n<a href=\"http:\/\/expandrive.com\">Expandrive<\/a> to mount remote directories and\nthen edit things via MacVim (as I do prefer it) but I found that it\nwas impossible to use my most essential\n<a href=\"https:\/\/wincent.com\/products\/command-t\">Vim plugin<\/a> to find the\nfiles I needed to work on. So I instead duplicated my Vim setup on\nmy two dev instances and away I go.<\/p>\n\n<p>I end up learning a lot of devops stuff while I build the\napplications. Specifically learning how to make all the different\npieces talk nicely to each other, and then creating configurations\nthat allow me to pull in data for testing purposes from pretty much\nany environment we are using. If you have not learned the power of\ntunnelling database connections over SSH you have missed out on\nsome powerful tools.<\/p>\n\n<p>We also use Git for our version control. It took me a few months to\nget comfortable using it (still run into the odd problem but they\nare fixable with a little research or swearing until someone helps)\nand I think I'm okay with it now. I don't do anything fancy like\ncherry-picking commits to build artisanal pushes that are a thing\nof beauty. We keep things simple and stick to\n<a href=\"http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/\">this workflow<\/a>,\nwith the added change of using a stage branch.<\/p>\n\n<p>Oh, and if that wasn't confusing enough, the two different products\nwe have use two different branching structures. Fixing that AND\ngetting rid of the stage branch are high on the list of system\nintegration tasks I want to do. That and fixing our current\ndeployment system.<\/p>\n\n<p>Right now we use something that is actually quite awesome called\n<a href=\"https:\/\/github.com\/flogic\/whiskey_disk\">Whiskey Disk<\/a>, a tool that\n(almost) delivers on the promise of \"embarrassingly fast\ndeployments\". I do like it but I feel that we're moving to a system\nthat needs to be more tailored to my goals of continuous delivery\nof code. We have a cron job setup that monitors for changes to\nseveral branches, and then triggers a deployment if it notices a\nchange. It <em>is<\/em> cool, but I would prefer some more control.\nSometimes I feel like waiting 10 minutes for changes to show up is\nunacceptable. Some of my objections are also of a philosophical\nnature. They are doing deploys using in-place updates of code\ninstead of copying code into a directory, swapping symlinks, and\nthen flushing the opcode cache. A minor detail to some, but if you\nstart relying on pieces like this you really need to do it right.<\/p>\n\n<p>Magical deployments is cool, but I feel like we are moving towards\na scenario where we need more control of what gets deployed where.\nOne thing I do like is the concept of separate repositories for the\napplication and the config files for the application, allowing for\npushing just config changes out instead of the whole app. I find it\nhandy, but again, I have a desire for more control on what goes\nwhere. My perfect tool is a cross between\n<a href=\"https:\/\/github.com\/rlerdorf\/WePloy\">WePloy<\/a> and the\nrecently-released\n<a href=\"https:\/\/github.com\/etsy\/deployinator\">Deployinator<\/a>. Etsy's tool\nlooks the closest to what I like, but we shall see. Something in\nPHP is more comfortable as Deployinator is a Sinatra app and my\nRuby is WAY out of date.<\/p>\n\n<p>So, when I work I am either doing coding in a 'hotfix' branch to\nfix a bug or a 'feature' branch when creating new things. For\nexample, my SOAP API work is in the 'feature-api' branch. I commit\nmy stuff often, usually after I've tested stuff out (more on that\nlater) and I also push to my branch quite often as well. Mostly\nbecause it provides proof to the team that I am working on stuff as\nall pushes are tracked and a bot emails the dev team AND posts a\nmessage in our IRC channel that code has been pushed.<\/p>\n\n<p>You notice I talked about tests. The amount of tests we have on\nwhat is a fairly complex set of products is appallingly low. I do\nfeel shame, and while building the API I've been using\n<a href=\"http:\/\/www.phpspec.net\/\">PHPSpec<\/a> as the testing tool. While I've\nbeen a big believer in unit testing in the past, it seems to me\nthat a Behaviour Driven Development approach is likely to achieve\nbetter results overall. BDD lets me talk to our product managers\nand very easily convert their criteria for a feature successfully\nworking into tests. I'm in the early days of PHPSpec and BDD so I'm\nsure I'll have more thoughts on this in the future. Either way, the\ntime to commit to tests is now. I've been through the death march\nof watching a team trying to write tests after the fact for a large\napplication. Not pretty.<\/p>\n\n<p>To be perfectly honest, having good tests is like having\n<a href=\"http:\/\/www.wikihow.com\/Get-Six-Pack-Abs\">six-pack abs<\/a> --\neverybody wants them but nobody wants to do the work to get them.\nTests are the first step down the continuous delivery path, because\nif you write tests then you can have the running of those tests\nautomated via continuous integration. I've spoken about CI before,\nso I won't waste any more time on it.<\/p>\n\n<p>So, I have code I'm writing in Git branches and are writing tests\nfor all new features I'm doing. Next step is to figure out how to\ncomplement the work I'm doing with PHPSpec with the use of\n<a href=\"http:\/\/cukes.info\/\">Cucumber<\/a> to let me test the rest of the site.\nThere are some challenges due to the use of Facebook Connect for\nauthentication, and heavy use of Ajax in the applications. They are\ngreat from a user perspective, but a pain in the fucking ass to try\nand write automated tests for. While Cucumber is aimed more at Ruby\nfolks, Cucumber is also able to test non-Ruby apps. Again, it will\nbe an uphill struggle but one that I think will pay off in allowing\nincreased delivery speed.<\/p>\n\n<p>Now, we do have meetings every single day. We are using some\nscrum-like system, but it basically boils down to talking to each\nother for 5 to 10 minutes every day to go over what we're working\non to see if anyone needs help or to tell them if you're done early\nand can tackle another problem. Yes, sometimes I get stuff done\nahead of schedule and then declare my desire to spend time on a\nanother task, usually something related to infrastructure work. Our\nmeetings are usually just before my lunch time, and often they\nresult in my slightly modifying what I'm working on in the day. I\nhave some lunch and then get back to work.<\/p>\n\n<p>So there you have it: a day in my life at Moontoast. There are a\nlot of cool challenges to make the whole infrastructure better, but\nthey are the type of challenges that I think will not kill you but\nreally make you stronger. Wish me luck!<\/p>\n",
        "date": "2011-08-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Day in the Life At Moontoast",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/08\/09\/a-day-in-the-life-at-moontoast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Wow, it's been almost a month since I blogged anything. So I was\ninspired to ask my twitter peeps to suggest some topics:<\/p>\n\n<p>PHP legend Derick Rethans suggested I talk about\n<a href=\"https:\/\/twitter.com\/#!\/derickr\/statuses\/86103879980302336\">food<\/a>,\nspecifically biscuits. Well, I must confess, that I do love a good\nbiscuit. Every time I visit the US I always check to see if the\nrestaurant I'm in serves biscuits and gravy. Mmm, mmm, good.\nBiscuits and gravy is something you just don't see on most Canadian\nmenus.<\/p>\n\n<p>But all joking aside, I wanted to share some thoughts that have\nbeen rattling around in my brain this past month.<\/p>\n\n<p>PHP is undergoing what I think could only be described as a\npersonality crisis. First we had\n<a href=\"http:\/\/www.xarg.org\/2011\/06\/php-hacking\/\">a well-intentioned guy making a bunch of patches he did to PHP available<\/a>.\nThe reaction to this was predictable: the internals team responses\nranged from meh to outright dismissal due to his outsider status.\nPredictably, users of PHP liked a lot of what he proposed. It's no\nsecret to those who have followed PHP internals, even sporadically,\nthat there is some dysfunction there. It's understandable: it's an\nopen source project without a real\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/BDFL\">BDFL<\/a> and the goals and desires\nof the internal PHP core team are very different from those, like\nme, who just use the language and are not in a position to\ncontribute any meaningful changes at the implementation level.<\/p>\n\n<p>Next we had the &#35;phpneeds meme that made the rounds on Twitter,\nculminating in the boys at Orchestra.io putting together a page\n<a href=\"http:\/\/phpneeds.orchestra.io\/\">outlining some of those requests<\/a>.\nAgain, much of what was being said there makes sense but the same\nold friction came up: the people with the ideas they want to see\nimplemented are not in a position where they can implement them. My\nC and C++ skills are non-existent (although I have hopes that Zed\nShaw's proposal to do \"Learn C The Hard Way\" sees the light of day)\nso all I can do is complain about my inability to effect real\nchange to PHP.<\/p>\n\n<p>I even made my own\n<a href=\"http:\/\/twitter.com\/#!\/chartjes\/status\/83945075394088960\">contribution to &#35;phpneeds<\/a>\nthat I thought now correctly puts PHP in the proper light: it is a\nserver-side solution that needs to decide if it wants to be bold or\nmeek. Look, I am not going to hash out all the old arguments here,\nbut I think there are some important issues to discuss. The big one\nthat I think gets ignored is that the core of PHP needs to decide\nif PHP is going to continue to try and stay at the front of the\npack when it comes to it's suitability as a modern solution, or end\nup like (don't hate me for saying this) Perl. By this I mean that\nit's still a really good language, but it's been pushed aside and\nleft to those who either have to support legacy applications or is\nbeing used by people who are strong enough to ignore the catcalls\nfrom everyone else. Perl can still get the job done, but it's no\nlonger a consideration for anyone starting a new project...unless\nthey have many, many years of Perl experience and don't give a shit\nabout how it \"looks\" to be using a particular tool.<\/p>\n\n<p>I'm not immune to this sort of thing either: I wish to branch out\nand build applications using other languages and tools, but PHP is\nthe thing I know the best. I worry about the future: can I build\nwhat I call Web Pi sites (Web 3.14159, get it?) full of real-time\ninformation and distributed across multiple machines (cloud or\notherwise) using PHP as the server-side solution? What changes have\nto occur at the bottom of the stack to keep PHP as a viable choice\nfor building web apps? Can I figure out how all this shit works so\nI can actually build something like this?!?<\/p>\n\n<p>PHP gets the job done, of that there is no doubt. Sometimes I yearn\nfor elegance in the languages I use, but then I realize it makes me\nsound a lot like a whiny douchebag who hasn't shipped anything but\nis quick to criticize other people's choices. I criticize my\nchoices all the time, whenever I find myself fighting the\ncomponents used to build the applications I work on. A good author\nonce said \"write what you know\" and for me that continues to be\nPHP. Perhaps it's time to focus less on the language and more on\nthe problem you're trying to solve. I've taken to heart the concept\nthat the language you use for your application is simply an\nimplementation detail, because you can build shitty apps in any\nnumber of languages. Because at some point it may be another\nlanguage that is the one that I know. Things change fast (says the\nman looking warily at the marshalling forces of Node.js) so be\nready to make a paradigm shift when the time is right.<\/p>\n\n<p>Which brings us back via rambling path to PHP. I think PHP 5.3\nactually represented a large improvement for PHP itself: it\nencouraged people who build things around PHP to re-examine what\nthey were doing and make things better. Witness all the new 5.3+\nframeworks being built. Rather than being annoyed by there being\n100+ PHP framework like I have in the past, I should look at this\nas evidence of progress. I might never use one of those new\nframeworks, but it's evidence that those who guide the future of\nthe language are trying to make things better. It may not be\nhappening at a pace that people are happy with, but it is\nhappening.<\/p>\n\n<p>Now where did I put my copy of \"Creating Web Pi Architectures\"...<\/p>\n",
        "date": "2011-06-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Brain Dump for June 2011",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/06\/29\/brain-dump\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Note: Packt Publishing provided me with a copy of this book in PDF\nand MOBI formats for the purpose of me doing a review)<\/p>\n\n<p>Once again, the fine folks at\n<a href=\"http:\/\/packtpub.com\">Packt Publishing<\/a> have asked me to review a\nbook. I must confess that I had mixed feelings reviewing\n<a href=\"http:\/\/www.packtpub.com\/cakephp-1-3-application-development-cookbook\/book\">CakePHP 1.3 Application Development Cookbook<\/a>.\nFirst, the only CakePHP work I do these days is maintaining an old,\nold CakePHP web site (not even version 1.2) and it's being\nre-written in Python + Django. Second, I know the author personally\nand I like Mariano so I was worried about what would happen if I\nread the book and didn't like it. So I took the approach that most\nfit what my current status with CakePHP is: someone who has used it\nin the past, but hasn't used it for a while and is looking for\npractical examples of how to accomplish specific tasks with the\nframework.<\/p>\n\n<p>I personally find the \"cookbook\" style of books to be the most\nhelpful. They enable me to quickly find answers to the problem\n\"show me how to do something realistic using your tool\". Hello\nWorld doesn't cut it for the tools I need to use. A common workflow\nfor me is finding an example of how to do something, and then start\ntweaking it to meet by particular needs. I certainly cannot be the\nonly one who learns how to do things this way. So Mariano can rest\neasy since I found his book to be exactly the type of guide an\nexperienced programmer who is not familiar with a specific tool can\nuse.<\/p>\n\n<p>Like any well-thought-out book, they cover the main components of\nCakePHP. One of the thing I liked was that you didn't have to\nnecessarily read the book from front-to-back in order to get\nsomething from it. Within each chapter, you will find info on\naccomplishing common generic tasks using framework-specific code. A\nlot of it didn't look too foreign to me, so I'm comfortable that\n1.3 is not a huge leap forward in terms of compatibility. Of\ncourse, your mileage may vary.<\/p>\n\n<p>I was also extremely happy to see a chapter dedicated to showing\npeople how to use the CLI shells available to you via CakePHP. Back\nin the day I wrote a really crappy attempt to create a\nread-eval-print loop for people choosing to use CakePHP. I called\nit \"the testing shell\" and I did a really crappy job of promoting\nit. It never got a lot of traction because of PHP's focus on the\nweb and lack of testing culture. Which dovetails nicely into a\nchapter in this book on writing tests.<\/p>\n\n<p>While it's not great that CakePHP ended up not using PHPUnit to\nbegin with, but having SOME testing is better than NO testing.\nCongrats to Mariano for sticking his neck out and making sure\npeople understand why testing is important and how easy it is to\nadd in tests. Honestly, it's good that you can also see the tests\nwritten for the framework as well. If you tweak things and try to\nextend CakePHP, you have a pretty comprehensive test suite to find\nout if you've broken anything else.<\/p>\n\n<p>So I will recommend \"CakePHP 1.3 Application Development Cookbook\"\nfor the intermediate to advanced programmer who is looking to learn\nhow to accomplish specific tasks using CakePHP 1.3. I think\nbeginning developers are much better off actually learning some PHP\nbefore trying to use a book like this. YOu should not be just\ncut-and-pasting code without being able to understand what the code\nitself is doing.<\/p>\n",
        "date": "2011-05-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review -- CakePHP 1.3 Application Development Cookbook",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/05\/30\/book-review-cakephp-cookbook\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Typing that title made me feel weird, but the truth is that we are\ngetting close enough to ZF2 (at least in Release Candidate form) to\nbe released, so for posterity's sake I will start differentiating\nbetween 1.x and 2. Makes me feel better at either rate.<\/p>\n\n<p>Before I continue, I want to thank Giorgio Sironi for his very\nhelpful blog post about\n<a href=\"http:\/\/giorgiosironi.blogspot.com\/2010\/03\/clever-mock-objects-with-phpunit.html\">clever mock objects<\/a>\nthat showed me the technical details on solving my particular\nproblem, along with <a href=\"http:\/\/twitter.com\/elazar\">@elazar<\/a> and\n<a href=\"http:\/\/twitter.com\/onyxraven\">@onyxraven<\/a> for their suggestions.<\/p>\n\n<p>I needed to test a remote web service for an application at work.\nRight away I knew I wanted to use\n<a href=\"http:\/\/www.phpunit.de\/manual\/3.5\/en\/test-doubles.html\">Test Doubles<\/a>\nto do it. I wanted to create a mock object to represent the web\nservice I needed to speak too, and create some data fixtures\ncontaining known responses to queries so that I could test the code\nwithout speaking to the web service itself. A key feature of a unit\ntest is that it should (unless not avoidable) never connect to a\nweb service or a database. Those sort of things are probably better\nsuited as either components tests or acceptance tests. I'm no\ntesting expert, but that is an approach that seems to resonate with\nme.<\/p>\n\n<p>The problem I ran into was that one of the web service calls would\nreact differently depending on what parameter is was passed into.\nReading the existing PHPUnit documentation did not provide me with\nenough hints on how to solve this particular problem, so while I\ndug around duckduckgoing for a solution I asked Twitter for help.\nOne blog post and 3 tweets later, I had the underpinnings for my\ntest. Check it out <a href=\"http:\/\/gist.github.com\/952286\">here<\/a><\/p>\n\n<p>A walk-through is probably required in order to explain what I did.<\/p>\n\n<p>First, we create a mock object using the Mock Builder interface and\nmap it to the web service object we wanted to use. Then, I loaded\nin the fixture data I wanted to use, and also populated two arrays\nthat are a critical part of determining which response to return\nbased on the parameter passed in. Finally, I create an expectation\nobject for the 'get' method I am trying to test, telling it that I\nam stubbing out 3 request-and-response pairings. Then I pass the\nexcpectation object and the two arrays containing acceptable\nparameters and responses into a different method so that it figures\nout how to handle my request for that method. It took me a while to\nget this model working in my head to the point where I could\nexplain it.<\/p>\n\n<p>To make things even easier to test, I created a Client object that\naccepts an instance of the web service as a parameter, thereby\nusing Dependency Injection \/ Inversion of Control to make it\npossible to actually test this thing. Doing it this way, the Client\nreally has no idea that it is in fact talking to a mock web service\ninstead of a real one. All it does know is that it is getting back\nJSON responses from this \"web service\", and the code takes care of\nthe rest.<\/p>\n",
        "date": "2011-05-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Web Services in Zend Framework 1.x",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/05\/02\/testing-web-services\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had the awesome opportunity to (assist with and) attend the 2011\n<a href=\"http:\/\/www.phpcon.org\">PHP Community Conference<\/a> in Nashville on\nApril 21-22, 2011. I had been hoping to speak, but when I started\nwith with Ben Ramsey at Moontoast, it became a lot easier to attend\nthe conference while spending a few days meeting and working with\nmy new colleagues. Being a good co-worker, I manned the\nregistration table along with\n<a href=\"http:\/\/twitter.com\/jmccree\">Jefferson McCree Jones<\/a> and helped out\nas much as I could. Lucky for me I was on the same level as the\ntops being given \"upstairs\" and got to see a wide variety of\noutstanding talks. Add in the awesome post-talk activities and the\ngreat conversations I had with old friends and new ones, I cannot\nimagine a better time at a technical conference. I even had the fun\nexperience of getting an apology for past behaviour from someone I\nwould never have expected.<\/p>\n\n<p>The theme of this conference seemed to be \"share with us something\nyou did\", which is a great concept. I think you could also have\ncalled it \"Real people building real things\". Part of the reason\nyou want to talk to people when you're at a conference is to find\nout what sort of stuff they have been working on. As cool as some\ntechnical talks are, they get boosted to another level if there is\ntangible evidence to back up what they are talking about. I just\nkept shaking my head at the \"war stories\" told to me about crazy\nsituations. I don't think I will ever forget\n<a href=\"http:\/\/twitter.com\/brianlmoon\">Brian Moon<\/a> tell me about the time\none of their humongous DB servers went down due to a faulty\ncontroller card, and keeping the site up by sending content to\npeople via IM. Check out Brian's\n<a href=\"http:\/\/brian.moonspot.net\/php-frameworks\">thoughts on PHP frameworks<\/a>.<\/p>\n\n<p>I go to conferences to LEARN THINGS. Sure, it's awesome to meet new\npeople and keep renewing older friendships (my career management\nskills always take leaps and bounds every time I talk to\n<a href=\"http:\/\/paul-m-jones.com\/\">Paul Jones<\/a> but I feel like the day I\nstop learning stuff is the day I should get out of programming and\nconsider a career change. Every talk, from Rasmus' keynote advising\nus to pay attention to the performance of our applications to Terry\nChay's closing talk about how frameworks are becoming so\ncommoditized that deployment environments like\n<a href=\"http:\/\/orchestra.io\">Orchestra<\/a> are optimizing things to make\ndeploying applications built with specific frameworks.<\/p>\n\n<p>The PHP environment is such a weird one compared to other languages\nout there. Made for the web, optimized for rapid development, it is\nreally like no other. The only parallel I see today is Javascript.\nProjects like Node.js are trying to make Javascript more viable\noutside of the cozy sandbox of the browser, but running PHP on the\nserver outside the cozy sandbox of the web server usually isn't a\ngood idea. Where is the ecosystem of performance-related tools like\nAPC, <a href=\"https:\/\/github.com\/facebook\/xhprof\">XHProf<\/a> and Memcached in\nthe Ruby and Python worlds? Maybe I'm running in different circles,\nbut I haven't see blog posts of people using tools to profile their\nRails apps to look for bottlenecks and poorly-performing code. I'd\nbe interested in seeing some of them, especially for Python and\nDjango apps as I get further and further into my Django\nexperiences.<\/p>\n\n<p>Hate PHP all you want for it's ease of use (which irritates those\ndevelopers who want to be snobs) and internal function parameter\ninconsistencies, but what cannot be denied is the focus of those\ndevelopers towards the top of the community on performance-related\nissues. These days I think it is less and less possible to promote\nthe idea that developer happiness counts for more than application\nperformance, and I think that despite all the hate out there for\nit, PHP still is at the head of the pack in terms of how easy it is\nto create high-performance applications using lightweight\nframeworks and libraries. This is the concept that I kept hearing\nthroughout the conference. Pay attention to the size of your code!\nProfile your application to find out where things are really slow!\nConsider all the tools in other languages available to you!<\/p>\n\n<p>The web is where PHP started, and the web is where it will stay. I\nused to feel guilty when I started fooling around with Rails and\nmore recently Python. Those tools have their place too, with\nawesome communities surrounding them. Again, it seems the focus for\nPHP is to add in tools that help you create the leanest, tightest,\nfastest web applications that you can. Sure, Facebook has created\nHipHop to turn PHP into C++ executables because they are facing\nissues that boggle the mind. Sure, frustrated programmers who had a\nhard time navigating the spaghetti tendencies of PHP and Java found\nRails more to their liking, soothing their desire for hiding\ncomplexity behind the DSL of a great framework. Sure, I find\ncalmness and zen in the whitespace-driven simplicity of Python and\nthe ability of Django to let you quickly create a site backed with\na powerful and easily-extended admin area.<\/p>\n\n<p>That doesn't mean you can't find real people building real things\nusing PHP. I'm one of those people, and you can be too.<\/p>\n\n<p>(PS -- I was totally brain-dead for not mentioning the awesome job\nthe folks at <a href=\"http:\/\/openevent.tv\">OpenEvent<\/a> did in livecasting\nsome of the talks at the event. I think there is a great need for\nhigh-quality recording of talks at conferences and I wish them luck\ngoing forwards convincing others that they should be an essential\npart of any future conferences)<\/p>\n",
        "date": "2011-04-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHP Community Conference 2011 -- Real People Building Real Things",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/04\/26\/real-people-building-real-things\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Full disclosure: Jason Gilmore publishes my book\n<a href=\"http:\/\/www.wjgilmore.com\/books\/read\/refactoring_legacy_applications_using_cakephp\">Refactoring Legacy Applications Using CakePHP<\/a>\nand also provided me with a free copy of his book (in both PDF and\nMOBI formats) for me to review. While I consider Jason a friend, I\ndo not let my personal friendships interfere with an objective\nreview of a book.)<\/p>\n\n<p>When you are going through the progress from beginner to mastery of\nany web application framework, it is almost impossible to do unless\n(a) you wrote the framework yourself or (b) there is excellent 3rd\nparty documentation available on how to use it. Even if the project\nitself has really good extensive documentation (which Zend\nFramework does) it is still essential that other people have\ndocumented their usage of it in situations beyond the very limited\nones presented in the documentation provided by the project itself.\nWhen you add to this the fact that Zend Framework is very large, is\ncomponent based, and often provides multiple solutions for the same\nproblem, it means that it is even more critical to find out how\nother people are solving problems similar to the ones you are\nfacing.<\/p>\n\n<p>Jason did provide me a copy of the previous version of this book as\nwell (it never hurts to ask people for favours...) and when he told\nme at <a href=\"http:\/\/codemash.org\">CodeMash<\/a> that he was putting the\nfinishing touches on an updated version of the book I said (a) let\nme know what tools you used to build it and (b) I'd be happy to\nreview it when it comes out. So when I saw the announcement that\n<a href=\"http:\/\/www.wjgilmore.com\/books\/read\/easy_php_websites_with_the_zend_framework\">Easy PHP Websites with the Zend Framework<\/a>\nhad been released I reminded Jason about my promise to review it.\nShortly thereafter an electronic copy of the book showed up in my\nemail.<\/p>\n\n<p>At 240 pages I wouldn't say this is the type of book that you can\nreally read cover-to-cover at a rapid pace. I think it is more\nsuited as a very long and expanded HOWTO for building an\napplication from scratch. I was also pleased to see that Jason had\nmade the commitment to pushing Test Driven Development by having\nthe reader write tests for the site they were building as they went\nalong. The more people who come to understand the benefits of\nwriting and automating testing of the applications, the better the\napplications people in the PHP community will produce.<\/p>\n\n<p>In this book Jason guides you from start to finish on the creation\nof GameNomad, a social networking application for console and PC\ngaming enthusiasts. You start with nothing but a skeleton of a\nproject built using ZendTool and end up with an automated\ndeployment system for pushing your changes up into production. Oh,\nyou also end up learning how to integrate\n<a href=\"http:\/\/jquery.org\">jQuery<\/a> into the project as well <em>and<\/em> learning\nhow to use Git, albeit at a very basic level) to keep things\norganized.<\/p>\n\n<p>I know what you're thinking: how could Jason have covered anything\nof substance in 240 pages. I'm going to let you in on one of the\ndirty secrets of the programming profession: a social networking\nsite is not as complicated to build as people think it is. Facebook\nitself is not complicated, what is complicated is how it has\nchanged over time to handle the ridonkulous traffic levels it\nhandles. Trust me when I tell you that Jason shows you how to build\nthe features that are at the core of any decent social networking\nsite where members post items and send messages to each other.<\/p>\n\n<p>In my opinion, this book works well as a resource for beginning and\nintermediate users of Zend Framework. For beginners, it guides them\nfrom creating the application from scratch and promotes some good\npractices. For the intermediate level user, it shows you how to\naccomplish common tasks needed by any website that relies on\nuser-generated content and adding unit testing, code coverage\nreports, and automated deployment skills to your toolkit.<\/p>\n\n<p>I've found this book to be a good resource, even for a grumpy\nveteran PHP programmer like myself. Flipping through the chapters\nquickly I can find some slightly different ways of doing things on\nmy projects, and I really like that Jason is also showing how to\ntake tools outside of the PHP ecosystem and embrace them. Tools\nlike Git and Capistrano are there to help you, why wouldn't you\nwant to use them?<\/p>\n\n<p>Also pay close attention to how Jason shows you the proper places\nto using the various helper and plugin architectures that Zend\nFramework provides you. It has been my belief that any\nwell-designed framework should consist of as small a core as\npossible, and then allow you to extend it through plugins. Zend\nFramework allows you to do exactly that, and I've very quickly\nembraced plugins as an easy way to keep customized code inside a\ncomponent that can be used anywhere in the application, instead of\ndealing with the problem of cutting-and-pasting code all over the\nplace.<\/p>\n\n<p>If you want to get serious about building a real application using\nZend Framework, I would recommend you pick up a copy of Jason's\nbook and take your time to go through it as your building your\nproject. When you've got an application full of tests providing\n100% code coverage <em>and<\/em> can be automatically deployed, you'll be\nable to sleep at night without worrying about the dreaded\nlate-night phone call \"the site is broken and you have to fix it\nRIGHT NOW!!!\"<\/p>\n\n<p>Also check out some of Jason's other books if you're fairly new to\nPHP and are looking to get up to speed faster with things like\nusing MySQL with PHP and integrating PayPal into your web\napplications.<\/p>\n",
        "date": "2011-04-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review -- Easy PHP Websites with the Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/04\/11\/book-review-epwzf\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After posting my thoughts on\n<a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2011\/03\/31\/component-architecture\">component architectures<\/a>\nI asked Stu Herbert to provide me with any comments he had on this\nparticular topic, having been the original inspiration. He was kind\nenough to do so and I have extracted some of his thoughts and\nweaved them into this post along with some other thoughts I've\nhad.<\/p>\n\n<p>First of all, I did a\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Facepalm\">facepalm<\/a> when I realized\nthere were things I wanted to talk about in the original post that\nI had missed. In his presentation at PHP UK Conference Stu pointed\nout that PHP has not made the commitment to reusable components\nlike the other major scripting languages used currently for web\ndevelopment, Ruby and Python. Ruby has it's excellent\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Ruby_gems\">Ruby gems<\/a> system to allow\nthe installation and distribution of components written in Ruby.\nPython has two solutions that I am aware of in\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/EasyInstall\">EasyInstall<\/a> and the\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Python_Package_Index\">Python Package Index<\/a>.\nThey both serve the same purpose: allowing the installation and\ndistribution of 3rd party components. In PHP\n<a href=\"http:\/\/pear.php.net\/\">PEAR<\/a> is the system we should all be using\nfor doing this. The reasons why are interesting, and I'd like to\nshare my thoughts before we see what Stu had to say.<\/p>\n\n<p>It seems to me that the difference between PEAR and the solutions\noffered in Ruby and Python can be thrown into one of two piles:\ncultural and technical. On the cultural side, both Python and Ruby\nhave encouraged developers to use these 3rd party systems as the\nprimary means of distributing code. I think if you look at the\npopular components available in something like Rails, I think you\nwould be hard-pressed to find one that did not exist as a gem. My\nearly experiments with Rails back in 2004 made me think that the\ngem system was the perfect way to handle it. Sure, you can end up\nin dependency hell trying to figure out what gems go with what\nother gems, but I do not think there is ever an easy solution to\nthat problem.<\/p>\n\n<p>When you look at the technical issues, this is where I think PEAR\nbreaks down. As far as I can tell, to make your component available\nto install with PEAR you have to create your own PEAR channel.\nWhat? Really?!? Am I the only one who thinks that this is an\nunnecessary limitation? When I added\n<a href=\"https:\/\/github.com\/chartjes\/djaml\">Djaml<\/a> to PyPi, all I had to do\nwas create two metadata files in a specific format and then push it\nup to PyPi using tools that are provided by the same CLI utility\nyou install other packages with. Bingo presto, my package was now\navailable to anyone who wanted to use it. I didn't have to set up\nmy own channel. To me, this the main reason why PEAR is not the\ndominant installation tool that it should be.<\/p>\n\n<p>In a perfect world I would like to see all the major PHP frameworks\nmake themselves available via PEAR as their main method of\ndistribution. Wishful thinking, I know.<\/p>\n\n<p>Okay, so now time for us to hear from Stu:<\/p>\n\n<blockquote>\n  <p>Your question \"how do you decide what stuff can be extracted out\n  and built into a component?\" merits more than just an email ... I'm\n  sure this is a conference talk \/ tutorial day topic in its own\n  right :) Would you say that most developers could recognise a\n  component if they saw one? &#42; Clearly-defined purpose &#42;\n  Clearly-defined API &#42; Clearly-defined data structures &#42;\n  Separation of concerns &#42; Reusable &#42; Re-installable on multiple\n  computers &#42; Replaceable \/ substitutable<\/p>\n  \n  <p>But seeing one when designing (or refactoring!) software is\n  something fewer PHP developers have had the opportunity to\n  practice?<\/p>\n<\/blockquote>\n\n<p>Stu is, of course, absolutely right. It is impossible to extract\ncode into a reusable component if you don't even know how to\nidentify it. Like many, MANY skills in programming, the ability to\nrefactor and extract code is a skill that needs to be cultivated\nand learned. I myself have run into this many times during a coding\nsession while refactoring. Does this sound familiar?<\/p>\n\n<ul>\n<li>implement some functionality<\/li>\n<li>get a request to add something<\/li>\n<li>realize that the new request is similar to something you've\nalready done<\/li>\n<\/ul>\n\n<p>The trick is realizing that the next step in this chain is not\n\"cut-and-paste the previous functionality because we supposedly\nhave no time\". The next step is to extract that functionality into\nsomething that can be re-used. Usually this in the context of the\napplication itself (ie extracting that code into a helper method if\nyou're using a framework) but it is worth thinking about how to\nmake that a component that can exist OUTSIDE of the application\nitself.<\/p>\n\n<p>More from Stu:<\/p>\n\n<blockquote>\n  <p>I think you hit the nail on the head towards the end of your\n  article, when you started talking about services. A component could\n  be defined as being: &#42; a self-contained set of code &#42; that\n  provides a reusable service &#42; to a larger body of code &#42; by being\n  aggregated into that code<\/p>\n  \n  <p>This differentiates it from a service-oriented architecture in one\n  crucial detail: a component runs as part of your app - same address\n  space, same process ID - whereas a service runs outside your app,\n  and is contacted either locally via IPC or remotely via\n  networking.<\/p>\n  \n  <p>But none of that helps the first-time component writer, I fear!\n  This is big-picture stuff, or perhaps better described as 20\/20\n  hindsight stuff - things that developers can only see after they've\n  learned how to do it :) What they need is their first step to\n  making a component - an additive process that builds on that first\n  step until components are as natural a strategy as factories, DI,\n  and the like. This is very similar to how one teaches martial arts,\n  where we start from the floor (how a fighter stands, how they step)\n  and work upwards.<\/p>\n<\/blockquote>\n\n<p>Stu goes on to share some super sekret info with me surrounding his\nplans in this area and I look forward to seeing them come to\nfruition. Thanks Stu!<\/p>\n",
        "date": "2011-04-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Component Architecture -- Follow-up",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/04\/03\/component-architecture-followup\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Welcome to my last post of the\n<a href=\"http:\/\/shiflett.org\/blog\/2011\/mar\/ideas-of-march\">Ideas of March<\/a>\nseries. It's been awesome stretching out the brain and putting more\nlong-form thoughts in to blogposts. I hope I've spurred other\npeople on into doing more research and thinking about the stuff\nthey do as a developer. It's very easy to fall into a rut and get\ncomfortable, shunning new ideas and new techniques.<\/p>\n\n<p>I discovered an awesome presentation by my new favourite PHP\ndeveloper, <a href=\"http:\/\/blog.stuartherbert.com\/\">Stuart Herbert<\/a>. Pardon\nthe salty language, but how the FUCK did I not know about this guy\nbefore?!? I found out about him from this awesome presentation he\ngave at the PHP UK Conference about\n<a href=\"http:\/\/blog.stuartherbert.com\/php\/2011\/03\/20\/following-up-my-beyond-frameworks-talk\/\">Beyond Frameworks<\/a>.\nTalks about real-world situations always resonate a lot better with\nme than a presentation about out cool some new piece of tech is\nwithout presenting a compelling reason to use it. Not to pick on\nthe NoSQL guys, but please show those of us not as smart as you why\nwe really need it. Here's a good example of what I like to see: a\nblog post from MongoDB-internals-developer-turned-web-developer\nMike Dirolf and his\n<a href=\"http:\/\/dirolf.com\/2011\/03\/28\/new-perspective-on-mongodb.html\">perspective on MongoDB<\/a>\nis a great example of providing reasons behind someone's use of a\nparticular technology. Enough of that, I'm drifting off topic.\nAgain.<\/p>\n\n<p>Stuart's presentation was all kinds of awesome because it examined\na problem that many people have (that their applications end up\nbeing held hostage by their framework choice), showed an example of\na real problem (their own infrastructure as it crept through\nseveral iterations), and then provided a real solution (reduce the\ndependence on the framework itself by creating reusable\ncomponents). By sheer coincidence, this is the sort of things I had\nbeen contemplating doing while still working for\n<a href=\"http:\/\/www.xmlteam.com\">XML Team Solutions<\/a> but in a slightly\ndifferent form. The brilliance was the leveraging of PEAR to be a\nkeep part of it.<\/p>\n\n<p>When do you need to start thinking about a component architecture?\nWhen you find yourself reimplementing the same thing for different\napplications. At XML Team, there were hints that this needed to be\ndone. Requests to allow users of one application be allowed to use\ntheir authentication credentials on another. A desire to refactor a\nweb service plus web GUI in order to simplify the internals because\nwe were mixing up theming with the web service stuff. Add to it a\ndash that I was relying too heavily on framework tools that might\nmake it tough to do things like add an IOS application for clients,\nand I realized that there were some serious architectural changes\non the horizon that some people really wanted to ignore.<\/p>\n\n<p>But here's the really tricky part (and I'd love for Stuart to\nfollow-up on this) about the decision: how do you decide what stuff\ncan be extracted out and built into a component? Without a clear\nmethod for figuring this out, there will be no movement in that\ndirection. The main reason is what I like to call the Precious\nSnowflake Problem. The PSP is a double-edged sword for most\ndevelopers when trying to determine whether or not to write\nsomething from scratch or adapt someone else's code. It is my\nlearn-ed opinion that most developers overestimate the uniqueness\nof their particular set of problems. It's natural that we emphasize\nthe differences and ignore the sameness.<\/p>\n\n<p>But it has also been the genesis of a lot of really\ntechnology-advancing projects. Developer becomes frustrated with\nexisting tool that won't work quite the way they want it to, so\nthey go and create their own version of it. I don't have enough\ntime to list all the successful projects that have come out of\nthis. My intention here is not to slam those who wish to scratch\nthe proverbial itch, but to try and focus attention on how to\ndetermine when some subset of functionality in one application is\nsimilar enough to another that you can extract it and simply build\nin the differences by reacting to a sane number of parameters\npassed in. My personal feeling is that unless you are introducing a\nmajor paradigm shift for a particular technology, you are better\noff building on what others have already done. Let me provide an\nexample.<\/p>\n\n<p>The <a href=\"http:\/\/lithify.me\">Lithium<\/a> project is an example of what I\nwould call introducing a paradigm shift for a particular\ntechnology. It was one of the earliest proponents of making their\nframework compatible with PHP 5.3 and newer. Why? So they could\ntake advantage of closures \/ anonymous functions \/ whatever you\nwish to call them in order to apply some unique features to the\nframework. This would allow for some neat stuff like filters (in my\nopinion a very-underrated feature that I expect to see appearing in\nthe next generation of Zend Framework and Symfony) <em>and<\/em> result in\nless code being written. At the same time, it is code that makes\nsense: creating stuff that gets done at certain, well-defined\npoints in the request cycle. At least I <em>think<\/em> that's what it is\nsupposed to be doing.<\/p>\n\n<p>Let's take a look at my example of the desire to share\nauthentication between multiple applications. If you have\napplications using different frameworks, well, you are going to\nhave to do this from the bottom up and invent a service these apps\ncan talk to. Maybe a web service is the way to go: provide the\ncredentials and shoot back the response because your applications\nlive on different servers. Perhaps a better solution is to make it\nauthenticate at the code level, thereby only having a database call\ninstead of a web service call and the associated database call.\nWhat is good is that you are ACTUALLY THINKING ABOUT HOW TO\nABSTRACT IT OUT. Personally, my plan would've been to create a\ncode-related solution provided via a component because the two\napplications in question lived on the same server, but breaking the\ndatabase-backed information into it's own database to make it\neasier to move somewhere else should the need arise.<\/p>\n\n<p>Decisions like this require courage and resolve. No, it's not a\ncliche. It's the truth. You will encounter resistance towards your\nefforts to make sense of the spaghetti and allow you to move to an\narchitecture where your framework of choice becomes a very thin\nlayer on top of a bunch of reusable, tested components. Who doesn't\nwant to work with a code base like that?<\/p>\n\n<p>My final Idea of March: embrace the power of component\narchitectures and do what you can to move your own applications\n(and company or even framework project) towards it. The best sign\nthat you're there? A very lean core for your application with lots\nof components being called in as you need them, not monolithic full\nstack applications where everything you need and then some is\nalways being included.<\/p>\n\n<p>I hope you've enjoyed my contribution to the Ideas Of March for\n2011, and perhaps I will resurrect it in 2012.<\/p>\n",
        "date": "2011-03-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Component Architecture -- Why Are You Not Doing This?!?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/31\/component-architecture\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I spent some time last night getting\n<a href=\"https:\/\/github.com\/chartjes\/djaml\">Djaml<\/a> into the\n<a href=\"http:\/\/pypi.python.org\/pypi\">Python Package Index<\/a>, otherwise\nknown as PyPi. Now you can install Djaml using 'pip install djaml'.\nMaybe I'm just ultranerdy, but I'm proud of myself for taking that\nnext step.<\/p>\n\n<p>I know I've talked about the project, but I've never shown you what\na Django template looks like that actually has some Haml in it.\nHere's a <a href=\"https:\/\/gist.github.com\/1136080\">sample<\/a>:<\/p>\n",
        "date": "2011-03-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Djaml in PyPi",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/24\/djaml-in-pypi\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(WARNING: POST CONTAINS PROFANITY AND CHRIS' OPINION ON EVENTS AT\nAN OLD JOB. THEY MIGHT NOT MATCH THE REALITY BUT IT'S WHAT I\nREMEMBER. YOU HAVE BEEN WARNED)<\/p>\n\n<p>While it's not a secret to most people who have actually met me or\nspoken with me at length, I worked for an\n<a href=\"http:\/\/sexsearch.com\">adult dating web site<\/a> from January 2002\nuntil December 2005. I committed the first line of code into the\nCVS repository (yes, it was that long ago) and pulled some\nridiculously long hours along with the rest of team (which started\nwith just me and another developer and grew to be 20 by the time I\nleft) to push a first horrible version of it out. It was slow. It\nwas poorly architected. Built in the days before the Rise of The\nFramework, it was big fucking mess. But it made the owners money\nwhen it launched and the focus quickly became \"don't do anything\nthat prevents sign-ups\". It bugged me then. It bugs me now.<\/p>\n\n<p>It was working in that unique environment that I cultivated the\ngrumpy, profanity-laden personality that has in recent years been\ntoned down. I was determined to Make Things Better, Damnit. There\nwere arguments about what bugs we should tackle first. I did a\nlittle research project to see if we could refactor stuff into\nusing the Mojavi Project (which lives on in\n<a href=\"http:\/\/www.agavi.org\/\">Agavi<\/a>). It worked, but further work was\nrejected. I constantly suggested new technologies that would be of\nreal benefit to us, focusing on caching and separating out business\nlogic from presentation logic so it would be easier to make \"white\nlabel\" versions of the site (meaning we could resell the engine to\nother people if they made their own templates). REJECTED.<\/p>\n\n<p>I made a flash designer cry because I told him this\ntemplate-creation tool he had created was a toy and could never be\nused by us internally. I had a superslacker, pot-smoking graphic\nartist convinced I had got him fired because I warned him just\nbefore he got fired that smoking pot during work hours was making\nus all look bad. I didn't know he was going to be fired, but it\ndidn't take a genius to see the link.<\/p>\n\n<p>I learned to not take shit from co-workers and also that the people\nwho own the company usually don't care about anything on the\ntechnical level. They care about making money, and it was\nsurprising to me that I could not make the case to them that \"well,\nif we did things this way then the site is faster and you can sign\nup more people.\" Chalk that up to experience. Now I try to make the\ncase by presenting it as being about costs and on-going\nmaintenance.<\/p>\n\n<p>I left that job when it became obvious I was never going to advance\npast being a code monkey. I had seen a proposal for a reassignment\nof people into new teams and new jobs. The new job that had my name\nto it would've been awesome. I was stoked. It was just the type of\nstuff I wanted to do. When they reassignment happened, that job\ndisappeared and I was shoved even further down the org chart. All\nbecause I was an asshole who wanted to make things at the code\nlevel better.<\/p>\n\n<p>My friend Kevin went through similar experiences but with a\ndifferent company in the same building. With those shared\nexperiences, we have a shorthand label we apply to ourselves\nwhenever we (well, it's usually me) complain about something that\nhappened at work. \"Ruined By Porn\", or &#35;rbp on Twitter.<\/p>\n\n<p>Ruined By Porn means that we worked in an environment where the\nattitude was really \"tough shit, you're doing things our way. If\nyou don't like it you can sit there or you can quit\". It means you\nhave gone through the experience of your managers and other\nsuperiors trying to break you like you break an animal that is\ntrying to remain wild. I wish I could say I was joking, but it felt\nthat way. Psychological warfare in the workplace. Meetings where\nyour every suggestion was dismissed, but they wouldn't get rid of\nyou. It gives you a very low threshold for nonsense from your\nco-workers as you learn to correctly identify threats and obstacles\nthat prevent you from doing the things you want to do.<\/p>\n\n<p>I also learned all about inflexible schedules and learned that\ncrying about it never got it changed. I worked a ton of overtime\nand bought my wife a really nice tennis bracelet with diamonds in\nit as a way of saying \"sorry I wasn't around for two months leading\nup to Christmas, sticking you with our extremely young daughter.\"\nIt taught me that a poorly scoped and poorly managed project is\ndoomed to failure. No amount of applying agile or XP to it is going\nto fix a late project. It matters when you try and do the next\nproject what you choose to use.<\/p>\n\n<p>So what happened to me there? I learned the hardest lesson I had to\nlearn. When you push to make things better, unless you have real\npower in the organization to make things happen you are screwed and\nneed to go and work somewhere else. I left that job because I got\ntired of losing the political battle there. I was being shunted off\nonto crummy jobs because of my personality and I thought that\nnobody gave a damn what I was doing there, and the only reason I\ndidn't get fired or laid off was because they didn't want to pay me\nseverance. You have to be willing to walk away from a job if it's\nnot what you want. You have to be willing to walk away from a job\nif it is never going to turn into what you wanted.<\/p>\n\n<p>So at each job, I made sure I had more and more power to do the\nstuff that I wanted. It has led me to be in positions where I have\na real impact on both the applications I help write and the\nbusiness itself. It has taught me that you need to frame\nconversations about serious change in the way work is done and\nthings are built in terms of money saved. The only way you get to\ndo the things you want is to either have yourself as a boss or\nframe the conversation in a way that the people who pay your salary\ncan understand.<\/p>\n\n<p>So here's another lesson to learn as part of the Ideas of March: be\nprepared to suffer if you wish to promote best-standards until you\nhave enough experience to back those views up with actions. Be\nready to quit for your principles. My wife says that my approach\nhas made me \"semi-successful\", and I think I agree with that.<\/p>\n",
        "date": "2011-03-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Runied by pr0n",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/23\/ruined-by-pr0n\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I haven't done a \"what's in Chris' brain\" posting for a while, so I\nthought as part of the Ideas of March it was as good a time as any\nto resurrect it.<\/p>\n\n<p>I had been a Delicious user and had not used it much except as a\ndump for links I intended to read later. I often didn't come back\nbut it was nice to have those links around for those times when the\ncoding part of my brain wasn't working and I needed to some more\nresearch into topics I had flagged for further study. Then the\ninfamous leaked graphic that showed that Yahoo was planning on\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Application_sunsetting\">sunsetting<\/a>\nDelicious started making the rounds. It got me to thinking about\nthe dangers of relying on a free service for long-term archiving of\ninformation. Delicious could just go POOF one day, taking all the\nstuff I found interesting with it. I decided to move my links to\n<a href=\"http:\/\/pinboard.in\/u:grumpycanuck\">Pinboard<\/a> and have introduced\ntime to go over the links I store once a week into my workflow. I\neven read up a but on their architecture and found their\ndevelopment philosophy refreshing.<\/p>\n\n<p>They are using PHP on the front, Perl in the back, with MySQL and\nS3 as data stores. As they put it, very vanilla. No framework being\nused, and I'm starting to see that perhaps my framework \"obsession\"\nis having a drawback other than me having a mind full of how to do\nthings in 10 different ways. Anyway, feel free to browse through my\nbookmarks: no secrets in there and I'd be glad to discuss anything\nyou come across. I wanted to go over a few things I recently\n\"pinned\" to my brain.<\/p>\n\n<p><a href=\"http:\/\/vimeo.com\/21145583\">Beyond Frameworks<\/a> is a presentation\nthat Stuart Herbert gave at the\n<a href=\"http:\/\/phpconference.co.uk\/\">PHP UK Conference<\/a> this year. He\ntalks about the challenges of trying to prevent the frameworks you\nbuild your applications with from swallowing everything up around\nthem. When is the last time you actually upgraded an application\nwritten in one version of a framework to work with a newer version?\nPersonally, I always like to keep upgrading the framework for my\napplications to the latest stable versions and dealing with errors\nby making sure I have decent test coverage. Others are not so lucky\nto have the kind of control that I am allowed to exert over the\ncode base. Heck, I don't know how much of a task it would be to\nupdate a Zend Framework application I'm using right now at\nMoontoast. Maybe I should go and look.<\/p>\n\n<p>Anyway, I want to take a deeper look at the architecture he\nproposes: keep the framework-specific stuff to a bare minimum and\nwrite as many standalone components that can then be shared by\nother applications in your company. His use of PEAR as the method\nof organization and installation is just genius: why reinvent the\nwheel. I watched the presentation once while distracted by other\nthings, I will take a run through it again. Jason Gilmore is the\npublisher of my CakePHP book, co-founder of the awesome\n<a href=\"http:\/\/codemash.org\">CodeMash<\/a> conference and a pretty prolific\nauthor. He recent blogged about the\n<a href=\"http:\/\/www.wjgilmore.com\/blog\/entry\/why_i_published_easy_php_websites_with_the_zend_framework_using_docboo\">tools he used to write his latest book<\/a>.\nI have a supersekret project I am working on and are using a lot of\nthese same tools at Jason's suggestions. Writing a book was a very\ninteresting project, and I agree that you should not be fighting\nwith the tools you are using. Jason's tool chain has allowed him\nflexibility in the formats he can release his book in. As someone\nwho just bought a Kindle, I can appreciate how important it is to\nhave ebook options.<\/p>\n\n<p>Interested in know what some of the PHP 5.3+ frameworks are shaping\nup to look like? Check out\n<a href=\"http:\/\/www.slideshare.net\/hhamon\/symfony2-introduction-7237021\">Symfony2<\/a>,\n<a href=\"http:\/\/www.slideshare.net\/vlucas\/alloy-hmvc-php-framework\">Alloy HMVC<\/a>\nand what I consider to be the \"first to the post\" PHP 5.3+\nframework <a href=\"http:\/\/lithify.me\/\">Lithium<\/a>. I'm not sure what\nframework I would pick if I was starting a PHP project from\nscratch, but I do know that I would be avoiding using some of the\nprevious full-stack options available to me. Especially if I want\nto move into a layered architecture as proposed by Mr. Herbert.<\/p>\n\n<p>My sister got me an <a href=\"http:\/\/arduino.cc\">Arduino<\/a> starter kit for\nChristmas (still haven't actually received it due to scheduling\nconflicts as she lives 250 miles away) and I can't wait to hack\naround with it. It uses it's own little language called\n<a href=\"http:\/\/wiring.org.co\/\">Wiring<\/a> but I found some info on how to use\nPython to <a href=\"http:\/\/www.pyaler.org\/\">control Arduino devices<\/a>.<\/p>\n\n<p>Finally, I've been working on a new version of the web site for the\n<a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a> I've been a part\nof for 14 seasons and counting and I've been\n<a href=\"https:\/\/github.com\/chartjes\/ibl\">building it<\/a> using Django and a\nfew other things. I'm also using this project to get myself more\nfamiliar with\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Behavior_driven_development\">BDD<\/a> and\nare using an awesome tool called <a href=\"http:\/\/lettuce.it\">Lettuce<\/a> to\nwrite my tests. I have a sneaking suspicion that since I could do\nsome Facebook integration testing using Cucumber (I linked to it in\na previous post) I might be able to use Lettuce along with some\nFacebook libraries in Python to do that too. We'll see, but Lettuce\nhas proven to be easy to get up-and-running with.<\/p>\n\n<p>So, my third Idea of March: share the things you've been\nbookmarking and tagging for later use. You never know what other\npeople will find useful from them.<\/p>\n",
        "date": "2011-03-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris' Pinboard -- March 2011 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/20\/chris-pinboard-march-2011\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Dune is probably my favourite science-fiction novel of all time.\nIt's in a cool settings, with some really well-designed characters,\nand is a sprawling epic in the way that sprawling epics should be.\nIn that book, the main character Paul Atreides learns the ways of\nthe mysterious Bene Gesserit through his mother. One of the things\nhe learns is called the <em>litany against fear<\/em>, something they say\nto themselves whenever they are in danger:<\/p>\n\n<blockquote>\n  <p><em>I must not fear.<\/em> Fear is the mind-killer. Fear is the\n  little-death that brings total obliteration. I will face my fear. I\n  will permit it to pass over me and through me. And when it has gone\n  past I will turn the inner eye to see its path. Where the fear has\n  gone there will be nothing. Only I will remain.<\/p>\n<\/blockquote>\n\n<p>Living on the bleeding edge of technology means you spend a lot of\ntime trying to convince the people around you that this awesome bit\nof technology that you've noticed is worth investigating. I\nremember being mocked and dismissed over my thoughts on\n<a href=\"http:\/\/www.memcached.org\/\">memcached<\/a> in 2003. And being mocked\nand dismissed on my thoughts on how valuable writing automated\ntests could be for an out-of-control code base in 2004. It's now\n2011 and both of those things are considered integral parts of best\npractices for web applications.<\/p>\n\n<p>Some of the problems I faced were due to an abrasive personality\nvery early in my programming career (although some would argue that\nnot much has changed) that resulted in ideas being rejected because\nof who the messenger is. Let's be honest, we've all done that:\ndismissed information because of who was delivering it. I've gotten\nused to facing the uphill battle to get my particular set of\nprogramming practices accepted but it is a battle I'm winning.<\/p>\n\n<p>But there is often another reaction to new technologies. That\nreaction is fear. Fear of working with a set of technologies they\nare not comfortable with. Fear of automated systems deploying code\nthat might not be adequately tested. Fear of putting effort into\nthings that provide very little benefit in the short-term but lots\nof benefits in the long-term. Fear is the mind-killer, the little\nvoice in your head telling you that you are not good enough, that\nyour ideas are crap, that you have no idea what you're talking\nabout.<\/p>\n\n<p>Seth Godin talks about how when a technology has been labeled dead\nthat\n<a href=\"http:\/\/sethgodin.typepad.com\/seths_blog\/2011\/03\/bring-me-stuff-thats-dead-please.html\">the real cool stuff can happen<\/a>\nwith it. PHP has been labeled dead by the \"drive-by technorati\"\nthat Mr. Godin talks about, despite the fact that it still\nwell-positioned as a tool to be used when building web\napplications. At the same time, I can feel that tickle of fear in\nmy brain. \"Don't get left behind\" is whispers to me. \"Drop PHP for\nTechnology X\" it pleads to me. When the voice gets too loud, I\nstart reciting the litany against fear. There is still lots of\ninnovation to be done within PHP itself. Each successive release of\nPHP is getting faster and (quite correctly) implementing features\nthat have made other scripting languages interesting. Exhibit A?\n<a href=\"http:\/\/ca.php.net\/manual\/en\/functions.anonymous.php\">Anonymous functions<\/a>,\nallowing for some very interesting code to be written. It's an\nintegral part of the newest <a href=\"http:\/\/lithify.me\/\">breed<\/a>\n<a href=\"https:\/\/github.com\/symfony\/symfony\">of<\/a>\n<a href=\"https:\/\/github.com\/zendframework\/zf2\">frameworks<\/a>.<\/p>\n\n<p>Don't let fear dictate the technologies you use. Today, I am most\ncomfortable building web applications using PHP with some\nJavascript thrown in to improve the user experience. Tomorrow, it\nwill be a different story. Not literally tomorrow. You know what I\nmean. I've been adding Python,\n<a href=\"https:\/\/github.com\/chartjes\/ibl\">Django<\/a>,\n<a href=\"https:\/\/github.com\/chartjes\/liesitoldmykids\">Flask, and Google App Engine<\/a>\nto the skill set. To be blunt, being a mono-ecosystem (ie PHP only)\nspecialist is a very risky for someone with the \"Jack of all\ntrades\" career path such as mine. Far better to be\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Standing_on_the_shoulders_of_giants\">standing on the shoulders of giants<\/a>\nthan to just stay only where you are comfortable.<\/p>\n\n<p>I guess the point I'm trying to get across is that you can use the\n<em>litany against fear<\/em> as a tool to motivate to truly analyze your\nreactions to situations. For example, I'm having a very hard time\nfiguring out how to get Zend Framework + PHPUnit to adequately test\nthe ability of an application at work to use Facebook Connect. I\njust can't get it to do things with a regular request, for a bunch\nof reasons I'm unable to understand. I can't peer inside the\nrequest to the extent I would like. I foresee having to drop down a\nlevel in the application and admit that I cannot test the request\nitself, but the code that is executed after control is returned to\nthe application.<\/p>\n\n<p>Fear would say \"give up because it's too hard to properly test\nthings\". The reality is that while I cannot test the <em>output<\/em> of\nthe request, I can certainly test what is supposed to be going on\nbehind the scenes. Tests like that are just as valuable as being\nable to capture the response from a request and verify that\nelements exist in the DOM as expected. Perhaps one day there will\nbe better tools in PHP to accomplish this task. I know it can be\ndone\n<a href=\"http:\/\/opensoul.org\/blog\/archives\/2009\/03\/05\/testing-facebook-with-cucumber\/\">using other tools<\/a>\nand I'll be honest here: it makes me bark out a few choice words\nabout the state of PHP testing tools.<\/p>\n\n<p>So, here's my second Idea of March: Fear is the mind-killer for\nyour skill-set.<\/p>\n",
        "date": "2011-03-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Fear is the mind-killer",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/17\/fear-is-the-mind-killer\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Any programming language is only as good as the community leaders\nthat back it up. For every opinionated douchebag (I've been called\nthat) that is being promoted as a \"thought leader\" there are, what,\n1000 people hanging off their every word? I've been involved in the\nPHP community for a long time, and despite my occasional thoughts\nthat I am a D-level celebrity in the PHP ecosystem, I realize that\nas someone who has some sort of name recognition that it's\nimportant to continue to share my thoughts about PHP.<\/p>\n\n<p>The recent move by Twitter to wrest control of how tweets are\npresented by basically telling people \"don't make any new clients\nand we'll shut down any clients that don't show the ads we are\nplanning on introducing\" reminded me of just how much I make use of\nblogs to help me solve problems. I'm sure I've spent man-years\nrummaging through results from search engines trying to find\ninsights into how to solve a particular problem. While I don't\nspend a lot of time analyzing the access logs for my own blog, I am\ncontinually amazed at how often older blog posts of mine are read.\nAlthough I might not use the framework or technology addressed in\nthat blog post any more, I'm happy that others are gaining value\nfrom my experiences.<\/p>\n\n<p>Chris Shiflett has kick-started a trend to\n<a href=\"http:\/\/shiflett.org\/blog\/2011\/mar\/ideas-of-march\">blog your longer thoughts rather than spread them out via Twitter<\/a>\nand I happen to agree with him 100%. Twitter's recent decision to\ngrab control of the presentation of messages sent using their\nservice reminded me that blog posts are still my preferred way of\ngetting across my thoughts on technical issues. If I didn't care so\nmuch about my blog, I wouldn't have put all the effort I did into\nconverting it into a static blog from WordPress. As a result of\nthis, I'm throwing my hat into the Ideas of March concept. My\npledge is to blog something every other day until the end of this\nmonth. It might be short. It might be a long rant if I have the\nenergy once the kids are safely tucked into bed. But it will always\nbe entertaining. My first discussion is a very personal one.<\/p>\n\n<p>My relationship with the PHP community waxes and wanes, depending\non my commitment to learning other things. I look at someone like\n<a href=\"http:\/\/www.travisswicegood.com\/\">Travis Swicegood<\/a> who has shown\nme the path on how to keep multiple feet planted in various\ncommunities. Travis is an old PHP guy, but now slings Python in the\nday job for <a href=\"http:\/\/www.texastribune.org\/\">The Texas Tribune<\/a>. He\nalso wrote what a lot of people consider to be the most practical\nguide to\n<a href=\"http:\/\/www.pragprog.com\/titles\/tsgit\/pragmatic-version-control-using-git\">using Git<\/a>.\nI was honoured that Travis asked me to be an early reviewer of the\nbook, but it shows that you can be a\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Polymath\">polymath<\/a> in more than one\ncommunity.<\/p>\n\n<p>Travis' success (I know you will read this Travis, don't be modest\nabout what you've done) has gotten me to start considering my own\npath. I joke that my career path is pushing me towards \"Jack of all\ntrades, speaker of none\" (owing to my current streak of not being\naccepted to speaking at the major PHP conferences) but it is a path\nthat a lot of people need to consider. Being a well-rounded\ndeveloper is great for whomever is signing my paycheques, it's not\nso great if you are constantly seeking attention for your\naccomplishments. Despite what some people might think, ego\ngratification is not the things that drives me. It's the quest to\nlearn more things. The quest to expand the skills so that when\nsomeone asks you to do something you can say \"I know exactly how to\ndo that\" and also knowing \"I don't know how to do that, but I know\nwhere I can find out.\"<\/p>\n\n<p>Once you expand the horizons, blogs become all that more important.\nWhere else can I found out what BDD tools are available in Python?\nHow are people doing deployment these days in Ruby? What tools\nexist for converting a document written in Docbook into ePub and\nMobi? If I only stay within the Garden of the Elephpant I miss out\non so many other things. I want to write a non-trivial Django\napplication. I want to find a problem for which concurrency is the\nsolution. I want to learn how to read white papers on things like\nDynamo and figure out how to implement those ideas in a programming\nlanguage. I joke with my wife that I'll never retire because there\nis just too much to learn, too much to know, and that furnace that\nburns in my belly to accumulate knowledge never stops needing to be\nstuffed full of fuel.<\/p>\n\n<p>So I wish to raise a virtual toast to the polymaths and that\nbudding polymaths like me. It is because of people like them I am\nable to fill my mind with all sorts of interesting information and\nencourage me to look outside the warm, comfy confines of the\nprogramming community I have been a part of since 1998. Don't be\njust a PHP developer. Become a DEVELOPER.<\/p>\n",
        "date": "2011-03-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Embrace the Ideas of March!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/03\/15\/embrace-the-ideas-of-march\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><em>(I would like to apologize for blasting all my RSS readers with EVERY SINGLE POST on this blog when I set things up. The new template for the feed is different and I guess it forced changes on everyone. I didn't intend to do it that way, and I'm sorry for any problems it causes my readers)<\/em><\/p>\n\n<p>I've been using WordPress for a long time. It's served up 5+ years\nof blog content with very few problems. But with each release of\nWordPress, I find myself asking the question \"is it worth dragging\nall this extra functionality around with me?\" I've come to the\nconclusion that the answer is no.<\/p>\n\n<p>Code generation is a programming technique that I think is both\nunappreciated and under-utilized by programmers. Naturally, when I\nstarted looking into turning my blog into static pages (I feel like\nit's a really good fit for what I'm doing) I looked at solutions in\nboth Python and Ruby. In the end, I settled on\n<a href=\"https:\/\/github.com\/mojombo\/jekyll\">Jekyll<\/a>.<\/p>\n\n<p>Then I headed to my\n<a href=\"http:\/\/duckduckgo.com\">favourite search engine<\/a> and looked for\nexamples of how to convert a WordPress blog into a Jekyll blog. I\nended up finding this\n<a href=\"http:\/\/paulstamatiou.com\/how-to-wordpress-to-jekyll\">awesome blog post by Paul Stamatiou<\/a>\nthat provided me with pretty much all the information I needed. His\n\"here's all the things I wanted to do and how I achieved them\"\nworked out really well for me. I even used his\n<a href=\"https:\/\/github.com\/stammy\/jekyll\">own fork of Jekyll<\/a> to build the\nnew version of this blog. If you follow his instructions and\nadvice, I don't think you can go wrong.<\/p>\n\n<p>Not everything went 100% smoothly of course. I had to tweak things\nbecause I was running my blog out of a subdirectory instead of out\nof the root. That meant I had to pay attention to the value for\nbase&#95;url in the Jekyll configuration file, and I also had to be\ncareful of what I put in my Nginx configuration.<\/p>\n\n<p>The big changes were to the WordPress migration tool that was\nprovided. I hacked it to automatically add a header to the post and\nto also play with the\n<a href=\"http:\/\/wiki.github.com\/mojombo\/jekyll\/yaml-front-matter\">YAML Front Matter<\/a>\ndetails inside each post. I had decided to use\n<a href=\"http:\/\/disqus.com\">Disqus<\/a> for my comments and it took me a while\nto figure out how to provide the proper reference values for the\nDisqus javascript to find the comments since they had originally\nbeen imported via a WordPress plugin.<\/p>\n\n<p>I also had to deal with needing to change how syntax highlighting\nworked. I had been using a plugin that supported\n<a href=\"http:\/\/qbnz.com\/highlighter\/\">GeSHi<\/a> but Jekyll has support\nout-of-the box for using <a href=\"http:\/\/pygments.org\/\">Pygments<\/a>, a\nPython-based syntax highlighter. Armed with a little Perl one-liner\nskills I quickly search-and-replaced all the old syntax\nhighlighting tags with the new pairs that I needed.<\/p>\n\n<p>Now, my blog sits on my laptop and I edit the posts in Vim. When\nI'm ready to check things out, I get jekyll to generate the blog\npages for me and I check them out using the local development\nserver. When I'm happy, I then fire up the deploy shell script that\nI use (which runs jekuyll and then uses rsync to push the files up\nto my blog) and BOOM I'm done.<\/p>\n\n<p>I'll be keeping an eye out for any weirdness with the blog and I\nhope to make some subtle changes going forward. Doing it as a\nstatic site means I can experiment with the layout from\ntime-to-time like\n<a href=\"http:\/\/blog.peepcode.com\/tutorials\/2010\/about-this-blog\">PeepCode has done<\/a>.\nIt's always good to learn new skills, and now I can add \"static\npage generation\" to the toolkit.<\/p>\n",
        "date": "2011-02-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "WordPress to Jekyll -- Adventures in Static Page Generation",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/02\/27\/wordpress-to-jekyll\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As many of my readers know, I've been slowly expanding my Python skills over the last 18 months or so.  First, I fooled around with Django on my laptop, really liking what I saw. Next, I started using it to write scripts for pre-calculating fantasy point totals at my <a href=\"http:\/\/xmlteam.com\">old job<\/a>. Finally, I had been looking at Google App Engine and seeing what it would take to put a very simple Python site up there. I had a few options.\n<\/p>\n\n<p>\nI could use the web application framework Google provided in Python called <a href=\"http:\/\/code.google.com\/appengine\/docs\/python\/gettingstarted\/usingwebapp.html\">webapp<\/a>, but I decided I wanted to learn a framework I could use outside of GAE as well. I really like Django but, until recently, there were a whole bunch of hoops you had to jump through in order to get it to play nicely with GAE. It's easier now, but I started this project a while ago and it's been bitrotting on my laptop. Also, I was frustrated with Django because the application I was trying to build with it just wasn't a good fit and <a href=\"https:\/\/mapalong.com\/hello\">someone beat me to it<\/a>. Not Django's fault, and I would gladly use it again to build something else.\n<\/p>\n\n<p>\nFinally, I decided I wanted to use a very lightweight framework because I felt that my lack of Python expertise meant a lot of the magic going on in Django (like any awesome full-stack framework) was difficult for me to understand as a PHP guy who was trying not to write Python code like a PHP guy. So, after hashing things out via IM with my friend <a href=\"http:\/\/chiggsy.com\/\">Kevin<\/a> I chose <a href=\"http:\/\/flask.pocoo.org\/\">Flask<\/a>, which bills itself as a \"microframework for Python based on Werkzeug, Jinja 2 and good intentions.\".\n<\/p>\n\n<p>\nI found Flask very easy to use, and the documentation helpful to a beginner like me. I could easily start to see where a more advanced developer could create things just the way he wanted. Once I found <a href=\"https:\/\/github.com\/kamalgill\/flask-appengine-template\">an awesome template for running Flask on GAE<\/a> I was off and running.\n<\/p>\n\n<p>\nThe application itself was very straight-forward: collect user submissions about the little white lies parents tell their kids, and show them in a paginated fashion. The twists? I was going to store them in the GAE datastore (so I had to learn their API) and I also wanted to use <a href=\"https:\/\/github.com\/defensio\/defensio-python\">Defensio<\/a> to pre-filter submissions and identify ones that might be spammers trying to get stuff in there. Pro-tip for you developers out there: if the library you want to use has tests, that is the first place you should go to see how to actually use the library.\n<\/p>\n\n<p>\nSo, in bits and pieces over a few months (basically whenever inspiration struck and there was nothing I wanted to watch on TV with the wife) I put the application together.  It's functioning the way I want it to (although I admit I didn't do a ton of testing of the pagination, so maybe I'll hack at that later) but needs some help on the UI side. Feel free to <a href=\"http:\/\/liesitoldmykids.appspot.com\">check it out<\/a> and add your submission.\n<\/p>\n",
        "date": "2011-02-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "\\\"Lies I Told My Kids\\\" -- Python + Flask + GAE",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/02\/17\/lies-i-told-my-kids-python-flask-gae\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I gave a talk on Feb. 7th at the <a href=\"http:\/\/www.meetup.com\/GTA-PHP-User-Group-Toronto\/events\/16167723\/\">GTA PHP User Group meeting<\/a> about my experiences with Zend Framework.  The video is about 30 minutes long, and I answered some questions at the end. You can grab the screencast (me talking and rambling on, but the screencast software was acting all weird with that highlighted pointer thing) <a href=\"http:\/\/www.archive.org\/details\/GrumpyProgrammersGuideToZendFramework\">here<\/a>.\n<\/p>\n",
        "date": "2011-02-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grumpy Programmer's Guide To Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/02\/07\/the-grumpy-programmers-guide-to-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Back before Christmas I received an email from the folks at Pakt Publishing asking me if I was interested in reviewing a copy of <a href=\" https:\/\/www.packtpub.com\/php-create-powerful-dynamic-social-networking-website\/book\">PHP 5 Social Networking<\/a>.  Who am I to turn down a free e-book? \n<\/p>\n\n<p>\nI'm glad I decided to take a look at this book.  It's pretty dense at 450+ pages, but it really does work you through from start to finish how to build a small social networking site in PHP.  Okay, it's about dinosaurs, but let's not quibble.  I'm not into long-depth book reviews, so we can talk about what I liked about this book.\n<\/p>\n\n<p>\nFirst, I admired the consistency in the approach.  While I may not agree with all the decisions that they've made, or the coding style (we all have our own way of wanting to do things), but the author was incredibly consistent in how they're putting things together.  It's all done in OOP, with attention paid on how to build on what you've already done.  I mean, let's be honest here:  most web apps of any significant size (meaning more than 10 lines of code) are very rarely internally consistent.  People learn how to do new things.  They start to hate how they've been implementing certain features in code.  They get bored and decide to try out one of these \"design patterns\" they've read about.\n<\/p>\n\n<p>\nNot here.  I think this is a very valuable lesson to be learned by beginning programmers.  Once you've, you know, actually built a bunch of stuff that people other than your close friends use, you learn to refactor and improve your code.  Your task gets much more difficult if the application itself is internally inconsistent.  Like I said, I dunno if I would've made the same decisions as them, but damn it's slick looking code that looks the same no matter what they are doing.\n<\/p>\n\n<p>\nIt was also refreshing to see some attention paid to the concept of security in a web app.  Not trusting user input, not storing passwords as plaintext (they even mention using a salt for your password), stuff like that.  I still have some issues with there use of using $_SESSION as a totally trusted source, but I can admit there are limits to what you can do.\n<\/p>\n\n<p>\nIt's also rare to find a book that teaches you something while you are actually building something.  If you were to actually sit down and type in every single code example, my guess is that you would have 90% of a completely working site.  Building upon all that stuff you've learned by following the book along, it seems to me it would be easy to get it to 100%.\n<\/p>\n\n<p>\nJust look at the sort of stuff you learn about:\n<ul>\n<li>the Model-View-Controller pattern<\/li>\n<li>creating effective templates<\/li>\n<li>proper use of a registry object<\/li>\n<li>planning of relationships between data (along with use of binded parameters in your DB queries via PDO<\/li>\n<li>post-coding tasks like deployment and figuring out how to get data from development into production<\/li>\n<\/ul>\n<\/p>\n\n<p>But here's the part you were all waiting for: what did Chris not like about this book.  In a word: TESTING.  There are no tests for ANYTHING in here.  Yes, I know the testing vs. not testing flame war is on the same level as vim vs. emacs and mac vs. pc.  But damint, we're 2 years into the 21st century!  Integrating tests into your application isn't difficult any more.  Okay, so places like Facebook are apparently not using unit tests.  You are not Facebook, so don't give me that answer as an excuse.  Facebook is a perfect example of a spaghetti PHP application that grew out of control and they were able to hire some top-notch engineers to untangle it and produce an amazing application.  Slam 'em all you want, I have lots of respect for the people who continue to build and extend Facebook.\n<\/p>\n\n<p>\nSo, in summary, I highly recommend that beginning to intermediate developers check out \"PHP 5 Social Networking\".  It is a good example of a very cohesive application that covers a very large number of scenarios that you are pretty much guaranteed to run into.  Once you've had a chance to build something like this (many functions, cohesive architecture) you can then push your skills to the next level where you learn about refactoring and Demeter's Law and all design patterns.  Until then, use this book as a reference on one way to build stuff.\n<\/p>\n",
        "date": "2011-01-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review: PHP 5 Social Networking",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/01\/31\/book-review-php-5-social-networking\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It's a bit of a bittersweet day here in my basement lair in the frozen wastelands of Kanuckistan.  I put in my two weeks' notice at my job that I'm leaving to go and work with the awesome folks over at <a href=\"http:\/\/moontoast.com\">Moontoast<\/a>, coming on board as Senior PHP Engineer to help them continue to build out their incredibly-awesome social commerce platform.  I will continue to work from home and hopefully get to visit the Moontoast offices in Nashville and Boston. ;)\n<\/p>\n\n<p>\nAs a result of my leaving, there is an opportunity to work as my replacement at XML Team Solutions.  If you're looking for a telecommuting job where you will be dealing with sports data and using PHP, hit me up at chartjes@littlehart.net using the subject \"XML Team Solutions position\" and I will forward them on.  Canadian citizens preferred (for tax credit purposes) but the right candidate is the right candidate regardless of location.\n<\/p>\n",
        "date": "2011-01-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Moving on and shooting for the Moon(toast)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/01\/24\/moving-on-and-shooting-for-the-moontoast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This posting is a lesson on the value of actually looking at the source code of a third-party library when you are trying to figure something out...<\/p>\n\n<p>\nI'm using Doctrine 1.2 for a Zend Framework project (loving the power of DQL) and I'm also big on continuous integration...which relies on being able to automate things.  Consequently, I was using Doctrine's <a href=\"http:\/\/www.doctrine-project.org\/projects\/orm\/1.2\/docs\/manual\/migrations\/en\">migrations<\/a> system to handle making changes to the database.  But I was frustrated.  The solution I had was running <b>each and every migration each time<\/b> and causing a lot of noise in the form of warnings about changes that had already been applied.  Was it hurting anything?  Just my pride and sense of Having Done Things Right.<\/p>\n\n<p>So, I started searching around for solutions.  There seemed to be something missing in everything I found, some sort of smug assumption that the system was smart enough to know which migrations had already been done so you could double check.  Totally frustrated I decided to look at the source code for Doctrine itself...\n<\/p>\n\n<p>\n\"Hrm, this method seems to allow you to write a value to a table in a database...what table is that...goddamn it Chris, you are such a dumb-ass for not seeing this earlier!\"\n<\/p>\n\n<p>I had noticed that there was a table in the database for this project called 'migration_version' but I kept ignoring it, thinking it was an artifact of an earlier attempt by me to implement roll-your-own migrations.  Little did I know that was the actual table I was supposed to use.  After some experimentation, I confirmed that I was indeed a dumb-ass and needed to start using this table properly.<\/p>\n\n<p>\nNext step was then to create a new PHP script to handle the migrations.  Keeping in mind that I'm using Zend Framework, here's what it looks like:\n~~~\n< ?php\ndefine('APPLICATION_PATH', realpath(dirname(__FILE__) . '\/application'));\n\nif (!defined('APPLICATION_ENV')) {\n    define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'testing'));\n}\n\nset_include_path(implode(PATH_SEPARATOR, array(\n    realpath(APPLICATION_PATH . '\/library'),\n    get_include_path(),\n)));\n \nrequire_once 'Zend\/Application.php';\n \n$application = new Zend_Application(\n    APPLICATION_ENV,\n    APPLICATION_PATH . '\/configs\/application.ini'\n);\n \n$application->getBootstrap()->bootstrap('doctrine');\n\nZend_Loader_Autoloader::getInstance()->registerNamespace('Doctrine')->pushAutoloader(array('Doctrine', 'autoload'));  \n$config = new Zend_Config_Ini(APPLICATION_PATH . '\/configs\/application.ini', APPLICATION_ENV);\n$manager = Doctrine_Manager::getInstance();  \n\nforeach ($config->doctrine->attr as $key => $val) {\n    $manager->setAttribute(constant(\"Doctrine::$key\"), $val);  \n}  \n\n$migration = new Doctrine_Migration(APPLICATION_PATH . '\/migrations');\n$latestVersion = $migration->getLatestVersion();\n$currentVersion = $migration->getCurrentVersion();\n\nif ($latestVersion > $currentVersion) {\n    echo \"Migrating from v{$currentVersion} to v{$latestVersion}\\n\";\n\n    try {\n        $nextVersion = $currentVersion + 1;\n        $migration->migrate($nextVersion);\n        $migration->setCurrentVersion($latestVersion);\n    } catch (Exception $e) {\n        echo 'Caught exception: ', $e->getMessage() . \"\\n\";\n    }\n} else {\n    echo \"No migrations were performed\\n\";\n}\n~~~\nI will explain the logic a little bit here\n<\/p>\n\n<p>\nFirst, we have to do a bunch of stuff to load in our Zend Framework application.  I'm using autoloading of modules so I never have to worry about including something so long as I've followed the proper naming conventions.  Next, I create an instance of the Doctrine_Migration object, then determine whether or not we need to actually perform a migration by comparing the value in the 'migration_version' table to what the latest migration class says.\n<\/p>\n\n<p>\nSee, Doctrine is smart enough to look at all the classes you've written to do migrations and figure out which one is the latest.  The easiest way to do this is prefix the name of the file with a number, or if you are dealing with multiple developers you could go with YYYYMMDDHHMM or even a timestamp (if you're feeling l33t) as the prefix.  Anything you can do to make sure that the order of migrations is the way you want is good.  I went with a 4-digit number as the prefix.  We're currently at migration 0016.  I figure that if we get to 9999 migrations then I've probably done something wrong. ;)\n<\/p>\n\n<p>\nArmed with the info about the last migration and the current migration, it's simple to determine if we actually need to run the migrations or not.  Problem solved in an elegant way, and no more unnecessary noise in the output from my continuous integration builds.\n<\/p>\n",
        "date": "2011-01-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Smarter DB Migrations Using Zend Framework and Doctrine 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/01\/19\/smarter-db-migrations-using-zend-framework-and-doctrine-1-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Despite a mini-snowpocalypse turning a 6-1\/2 hour drive into an 8 hour drive, I made it to <a href=\"http:\/\/codemash.org\">CodeMash<\/a> last week at the superamazingfantastic Kalahari Resort in Sandusky, OH.  I had my long-suffering wife and two girls with me and they enjoyed themselves at the water park (okay, I liked it too) and the arcade and the dry-land park.  In the meantime, I got my geek-on at the conference.\n<\/p>\n\n<p>\nCodeMash was probably the largest conference I've ever been at, with between 700 and 1000 people attending based on comments from other people) and I'm also used to conferences that have a pretty narrow focus.  In this case, it appeared to me to be about 50% .Net stuff and 30% Ruby, the rest being things like a smattering of PHP and Python.\n<\/p>\n\n<p>\nOn the Wednesday night, there was a meet-and-greet for the speakers and sponsors in the hotel.  I went, ran into <a href=\"http:\/\/twitter.com\/caseysoftware\">Keith Casey<\/a>, had a few drinks and went back to the room.  Why?  Well, ever been to a party where everybody knew everyone else but you knew nobody?  That's what it felt like to me.  This isn't the fault of the conference organizers, more a reflection on how I like to interact with my fellow speakers.  Noisy bars aren't my favourite place to meet-and-greet people, and not knowing ANYONE there made me pause as I tried to figure out who to speak to etc.\n<\/p>\n\n<p>But once the conference got going, I warmed up to the idea and spent a lot of time speaking to people sitting at the same table as me for breakfast and lunch, as well as those near me in the talks I attended.  Due to the distraction of the kiddies (\"Daddy, come to the water park with us!!!\") I didn't get to see all the talks I wanted to do, but that was the price that had to be paid.  I thoroughly enjoyed Chad Fowler and Scott Chacon's keynotes, which got me thinking about my career and my current employer, and the steps required for happiness in said career.\n<\/p>\n\n<p>\nI attended a talk about 3d printers (it was awesome, wish I had the $2K needed to buy one and all the tools required to keep it up and running), a talk on high-performance javascript (very informative, introduced me to the concept of non-blocking Javascript loading), a talk on the \"modern open source development environment\" (very disappointing, didn't cover anything that I was expecting to see about using Vim + Python|Ruby, more like a criticism of slow-running tests and using GUI editing tools), and I saw about 20 minutes of Keith's unit testing talk before a phone call from wife about car trouble took me away (it was nothing major, car was fine).\n<\/p>\n\n<p>\nMy talk went okay.  I covered all my material, had a good pace...but was about 10 minutes short.  Next time I give the talk I know exactly where I need to add more material.  Not too many questions during the talk itself, but some great questions AFTER the talk.  Again, more content for the talk itself.  For those who couldn't attend, you can find the slides <a href=\"https:\/\/www.littlehart.net\/tdd-ci.pdf\">here<\/a> and for those who don't mind hearing me talk (and drop a few swear-words) you can view a screencast in a wide variety of formats <a href=\"http:\/\/www.archive.org\/details\/BreakItBeforeYouBuyIt\">here<\/a>\n<\/p>\n\n<p>\nI will definitely be submitting again next year and will be making sure to venture out of my comfort zone and view some talks dealing with technology I don't really use much.  Also, I'll be sure to check out some of the ad-hoc open sessions if I don't happen to like the talks being offered being the conventional tracks.  Upon reflection, those would've been a perfect chance to expand my mind.\n<\/p>\n\n<p>\nI want to personally thank <a href=\"http:\/twitter.com\/wjgilmore\">Jason Gilmore<\/a>, one of the organizers of the conference (and the publisher of my CakePHP book) for treating me exceptionally well, and for taking time out of his super-busy schedule to talk about a joint strategy for 2011 for some projects we had been casually talking about.<\/p>\n\n<p>\nIn short, I encourage people to check out CodeMash next year, I don't think you will be disappointed you went.\n<\/p>\n",
        "date": "2011-01-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CodeMash 2011 Round-Up",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2011\/01\/17\/codemash-2011-round-up\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Throughout my career as a programmer I've had moments that I call \"why the hell didn't I see that earlier\" moments when it comes to embracing new technologies and techniques.  The first such moment was when I discovered frameworks.  I mean, how many times did I write PHP apps with page and\/or front controllers.  And all that mixing of business logic and display logic.  It was madness!\n<\/p>\n\n<p>\nThe next such time was when my friend Kevin convinced me to throw away my GUI shackles and learn to use the <a href=\"http:\/\/www.vim.org\">One True Editor<\/a>.  Given how often the advanced features of the never-ending parade of IDE's I used were not being used, vim turned out to be exactly the tool I needed.\n<\/p>\n\n<p>\nWell folks, I've had another one of these moments.  What is it?  Repeat after me:  THOU SHALL BUILD YOUR APPLICATION AS AN API FIRST, AND FRONT END SECOND.  I've been toying with this idea for a while, but a recent side project and these <a href=\"http:\/\/phpadvent.org\/2010\/first-class-apis-by-helgi-%C3%9Eormar-%C3%9Eorbj%C3%B6rnsson\">three<\/a> <a href=\"http:\/\/phpadvent.org\/2010\/the-thing-with-the-two-heads-by-ed-finkler\">awesome<\/a> <a href=\"http:\/\/phpadvent.org\/2010\/building-mobile-apps-with-php-by-jonathan-stark\">articles<\/a> finally convinced me that my instincts were right, and that the extra work involved with API-first development (wow, maybe I've coined a new term) pays off in our new world of multiple devices wanting to slurp up online content.<\/p>\n\n<p>\nSo, here are two tools that I think my readers should know about.  For those working with PHP, I cannot recommend enough the use of <a href=\"http:\/\/getfrapi.com\">FRAPI<\/a> if you have a legacy application that you need to provide an API for.  Now, I will admit that the installation procedure is not for the faint-of-heart (you have to install packages via PEAR, PECL, and perhaps even adding packages for your operating system) but once you have it installed, you now have a tool to allow you to quickly create an API.  \n<\/p>\n\n<p>\nIn a nutshell, FRAPI is a framework for creating a REST API.  Using the admin panel, you define the URL's you want for your API and it generates some code for you.  Then you edit the generated code to provide the actual output from your API, and reaction based on your GET\/POST\/PUT\/DELETE request.   From when I downloaded it, it took me about 30 minutes to get FRAPI installed and create my first API call, including a customized output template.\n<\/p>\n\n<p>The documentation via the wiki isn't that great, but it gives you everything you really need to get started.  Kudos to the boys at <a href=\"http:\/\/twitter.com\/echolibre\">echolibre<\/a> for creating a super-useful tool.<\/p>\n\n<p>\nNow, if you're using Django there is an awesome add-on called <a href=\"https:\/\/github.com\/toastdriven\/django-tastypie\">django-tastypie<\/a> that allows you to quickly create a REST API for your Django models.  Again, from the time I downloaded it, it took me about 30 minutes to create an API for one of my models.  Now, I can create the front-end for the project either in Django or take the leap of faith and create it using Javascript and have it call the API.\n<\/p>\n\n<p>The documentation for django-tastypie is good, and <a href=\"http:\/\/joshbohde.com\/2010\/11\/25\/backbonejs-and-django\/\">this article on JS on the front, scripting language on the back<\/a> shows you a practical use for it.\n<\/p>\n\n<p>\nSo don't be afraid to build your application from the API out, now that there are plenty of tools to allow for easy integration with your application.\n<\/p>\n",
        "date": "2010-12-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Fun with API's -- FRAPI and django-tastypie",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/12\/15\/fun-with-apis-frapi-and-django-tastypie\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks to Vic from the GTA PHP User Group for organizing last night's meeting, and I hope people liked the talk.  Lots of awesome questions both during and after the talk.  If you want to see the slides, you can download them <a href=\"https:\/\/www.littlehart.net\/gtaphp-tdd.pdf\">here<\/a>.\n<\/p>\n",
        "date": "2010-12-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Slides from my \"Pragmatic TDD\" talk",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/12\/07\/slides-from-my-pragmatic-tdd-talk\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI know I'm such a big nerd, but I'm excited because I've created my first open-source project and put it up on github.  I've been fooling around with Django for quite a while, and I was looking at some independent tools that might help speed up development time.  That lead me to take a look at <a href=\"http:\/\/haml-lang.com\">HAML<\/a>, which in turn led me to <a href=\"https:\/\/github.com\/jessemiller\/HamlPy\/\">HamlPy<\/a>, which then led me to say \"Now wouldn't it be cool to use HAML in Django...\"\n<\/p>\n\n<p>\nAfter digging around in the Django docs, and a bunch of DuckDuckGo searches later, I found <a href=\"http:\/\/bitbucket.org\/jiaaro\/django-shpaml-template-loader\">this project<\/a> which showed me how to create my own template loader.  Add a few hours of reading and testing, <a href=\"https:\/\/github.com\/chartjes\/djaml\">djaml<\/a> was born.\n<\/p>\n\n<p>\nSo go check the project out, fork it, use it in your own projects.\n<\/p>\n",
        "date": "2010-12-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "\\\"You've gotten HAML in my Django templates!\\\" -- Introducing djaml",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/12\/04\/youve-gotten-haml-in-my-django-templates-introducing-djaml\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you can read this, I've switched servers from <a href=\"http:\/\/www.slicehost.com\">Slicehost<\/a> to <a href=http:\/\/www.linode.com\">Linode<\/a>.  I'd had enough of dealing with a Gentoo-based system (all that damn compiling!), and since my friend has always said lots of good things about Linode I decided to move over and try them out.  More resources for less money.  Can't beat that.\n<\/p>\n<p>\nIf you decide to switch over, please use the following <a href=\"http:\/\/www.linode.com\/?r=18e3668fcd2cde6529636a6d90874236c7f19581\">URL when signing up.<\/a>\n<\/p>\n<p>Don't forget, I'm giving a talk on December 6th at 7 PM as part of the GTA PHP User Group meeting at <a href=\"http:\/\/www.longbranchcoworking\">Longbranch Co-working<\/a>.\n<\/p>\n",
        "date": "2010-12-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Switched Servers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/12\/03\/switched-servers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Blogger's block is a real thing people -- especially when you feel like you are not accomplishing anything that you can share.  Here are some of the things bouncing around in my brain.<\/p>\n\n<h3>User Groups<\/h3>\n\n<p>\nI'm giving a talk for the GTA PHP User Group on <a href=\"http:\/\/www.meetup.com\/GTA-PHP-User-Group-Toronto\/calendar\/15561375\/\">Test Driven Development using PHP<\/a> on December 6th at <a href=\"http:\/\/www.longbranchcoworking.com\/\">Longbranch Coworking<\/a>.  If you're in the Greater Toronto Area, I'd love to see you come out and watch me talk about how TDD helps restore my sanity.\n<\/p>\n\n<p>No matter what language you use, you should seek out your local user group if one exists.  Nowhere else will you find people who (a) use the language or tools you are interested in and (b) willing to commit the time to meeting people with similar interests.  I got to meet CakePHP lead developer <a href=\"http:\/\/mark-story.com\">Mark Story<\/a> at the last one, so you never know who might show up.\n<\/p>\n\n<h3>CodeMash 2010<\/h3>\n\n<p>\nI'm super-excited to be speaking at <a href=\"http:\/\/codemash.org\">CodeMash 2011<\/a> in January 2011.  Even better, the whole family is coming with me so they can play at the ginormous indoor water park at the resort where the conference is being held while I'm geeking out.  I'll be giving a TDD and Continuous Integration talk (don't know what day or what time yet) and I will try and record the talk as a screencast to share with everyone who couldn't make it.  If you don't already have a ticket, you are out of luck as the conference is completely sold out.  In fact, it sold out in just THREE-AND-A-HALF DAYS.  That's incredible.\n<\/p>\n\n<h3>PHP application deployment<\/h3>\n\n<p>\nI've talked before how I used Phing to deploy stuff at work.  It works just fine, but I always found it annoying that I had to connect to a server via SSH to get things done.  I haven't been able to block off a bunch of time to come up with a better solution, but I think someone else has.  The creator of PHP, Rasmus Lerdorf, has open-sourced a <a href=\"http:\/\/dev.wepay.com\/blog\/2010\/11\/30\/weploy-wepays-deployment-tool\/\">web-based deployment solution he created for use at WePay<\/a>.  All the code is available on GitHub.  It suddenly seems more important to me to set aside some time to fix the current deployment situation at work...\n<\/p>\n\n<h3>Books you should check out<\/h3>\n\n<p>\nDuring my blogging silence I have been reading books and watching presentations and\/or reading slides.  Some fiction (I love my sci-fi and historical fiction) but mostly programming-related.  Here is some stuff you should take a look at:\n<ul>\n<li>\"Designing Social Interfaces\" by Christian Crumlish & Erin Malone<\/li>\n<li>\"Seven Languages in Seven Weeks\" by Bruce Tate<\/li>\n<li>Literally *any* presentation by <a href=\"http:\/\/www.wait-till-i.com\/\">Christian Heillman<\/a>, currently an evangelist at Mozilla.  Looking at his presentations flipped some switch in my brain and I'm looking at things totally differently.<\/li>\n<li>All 6 of the Scott Pilgrim books<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2010-12-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - December 2010 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/12\/01\/whats-in-chris-brain-december-2010-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I thought I'd turn things around a pick and ask my readers for some advice on particular topics.  Today's topic is Development Environments.<\/p>\n\n<p>\nCurrently, I run Zend Server Community edition on my laptop to match what we're using in production (except on the new production games platform server, where I am running Nginx + Apache and not using ZSCE) but have been rethinking this for no reason other then \"try and make it better.\"  One thing I have thought of doing is to use virtual machines on my MacBook to accomplish this.  I have Virtualbox, and I use it to test things once in a blue moon on IE7 and IE8.  Given that it takes up a lot of space I have been thinking to either use it or get rid of it.\n<\/p>\n\n<p>\nDo any of my readers have experience with doing development work using localized virtual servers?  Keep in mind that I am using <a href=\"http:\/\/www.vim.org\">The One True Editor<\/a> so I would have to be able to edit code in the virtual machine from my laptop (best case) or on the virtual machine (worst case).\n<\/p>\n",
        "date": "2010-11-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Ask My Readers: Development Environments",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/11\/02\/ask-my-readers-development-environments\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I haven't done one of these for a while, so I thought I'd share some stuff I've been looking at lately.  Also, I'm not doing anything earth-shattering that needs a blog post. ;)<\/p>\n\n<h3>Stange Loop Conference<\/h3>\n\n<p>\nI found out about this <a href=\"http:\/\/strangeloop2010.com\/\">conference<\/a> via Twitter.  I enjoyed St. Louis immensely when the family drove 17 hours to visit my wife's brother and his wife 3 years ago.  The zoo there is awesome and free!  Anyway, there were a lot of interesting talks given using a wide variety of languages and tools.  Nice to see a conference that was focused on what I call the \"future shock\" technologies:   ones that use paradigms that are very different from the mainstream and trying to show you practical uses for them.  One that stood out was Kyle Simpson's <a href=\"http:\/\/strangeloop2010.com\/talks\/14469\">\"Dude, That's some Strange UI Architecture\"<\/a>.  He did a brief demo of a Javascript-powered framework that used what he called Client-View-Controller, where EVERYTHING is Javascript except the black box that is your data source.  The tl;dr version?  Javascript on the client and the server, use <a href=\"http:\/\/github.com\/leeoniya\/handlebar.js\"> for templating, and make sure your data source can accept and return JSON.  Very interesting, and worth checking out.\n<\/a><\/p>\n\n<h3>Sharding and NoSQL - Be careful!<\/h3>\n\n<p>\nGreat blog post on one of my favourite reads, the High Scalability blog, about the problems Foursquare experienced with MongoDB and <a href=\"http:\/\/highscalability.com\/blog\/2010\/10\/15\/troubles-with-sharding-what-can-we-learn-from-the-foursquare.html\">what can be learned from it.<\/a>  Lesson #1 of superhyped technologies:  make sure the damn thing works for what YOU need it to do.  MySQL and Postgres are also great key-value stores.  It's all about understanding your data, not ditching JOINS because someone else told you to.\n<\/p>\n\n<h3>Make an Infoproduct<\/h3>\n\n<p>\nMy internet-famous sort-of-friend (meaning we've known each other for a while via the internet and have actually met in person, once, in Toronto) <a href=\"http:\/\/twitter.com\/amyhoy\">Amy Hoy<\/a> is hustling her way to piles of cash by sharing the skills she's developed along the way.  Go and read her awesome post on <a href=\"http:\/\/unicornfree.com\/2010\/make-an-infoproduct\/\">making digital goods that you can sell.<\/a>.  Amy catches a lot of flack for her willingness to express her desire to make MONEY from her SKILLS.  Having already done this once myself, to middling success (my <a href=\"https:\/\/www.littlehart.net\/book\">CakePHP book<\/a> has done better than I thought it would, but probably not as good as it really could've) I can tell you that Amy knows what she is talking about.  Don't listen to the haters, go and make something you can charge money for!.\n<\/p>\n",
        "date": "2010-10-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's in Chris' Brain - October 2010 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/10\/18\/whats-in-chris-brain-october-2010-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Man, did I ever blaze through a bunch of anger to figure this stuff out.  Why?  Same thing that bugs me about the Zend Framework in general:  multiple ways to accomplish something, and examples in the documentation that does NOT work as advertised.  Maybe, just maybe, I'm an idiot and did not understand the subtle nuances involved in making these tests work.  I doubt it though.\n<\/p>\n\n<p>\nAs I explained to the small group at the <a href=\"http:\/\/www.meetup.com\/GTA-PHP-User-Group-Toronto\/\">PHP user's group meeting<\/a> I went to, I am not so dogmatic about TDD.  I tend to be pragmatic in that I am using tests and continuous integration to find things that are broken.  When I find something that is broken or not functioning as expected, I write a test for the expected behaviour and codes gets written and\/or mangled until the test pass.\n<\/p>\n\n<p>\nIn this case, I had done a refactoring of the way a model was pulling in stats for running backs and receivers for a fantasy game.  As a result, in production (you suck Chris) you could not see results for those players.  The data was there, I had not properly tested things.  A familiar situation.  So, I fixed the code and wrote my more-specific-than-before unit tests, but I decided I also wanted to make sure that the output on the page itself worked correctly.  This began the descent into madness.<\/p>\n\n<p>\nI found MANY examples on how you allegedly send a POST request to something inside a PHPUnit-powered Zend Framework controller test.  Some said use $this->request.  Some said use $this->getRequest().  Some said to use object chaining (you know, $this->foo->setBar('fizz')->setFoo('buzz').  None of them worked.\n<\/p>\n\n<p>\nCue the sounds of Chris cursing loudly.  Eventually I figured it out.  What did I learn?  Object chaining did not work. And $this->getRequest() was the ticket.  Behold the code!\n<br \/>\n~~~\npublic function testShowRbStatsPage()\n{\n    $this->loginUser('admin@xmlteam.com');\n    $this->getRequest()->setMethod('POST');\n    $this->getRequest()->setPost(array(\n        'range' => '2009-09-10 to 2010-01-01',\n        'position' => 'rb',\n        'leagueName' => 'nflcanada2010'\n    ));\n    $this->dispatch('\/football\/nflcanada2010\/stats');\n    $this->assertQuery('td .rettd', 'Checking we have return TD stats');\n}\n~~~\n[\/php]\n<\/p>\n\n<p>$this->loginUser() is a convenience method I created that authenticates a given user because to access the site you must have a username and password.\n<\/p>\n\n<p>\nSo what did I decide to look for?  I noticed in the templates that every running back, when displayed, would have a table cell that had the style .rettd.  Since that was unique to running backs (and receivers) I felt that was a sufficient check that we were actually displaying running back stats.\n<\/p>\n\n<p>One thing to take back from all this is that choosing a more pragmatic approach to testing can yield some interesting results.  It's my belief that by doing up a test every time something is broken or not behaving as expected makes for a more realistic set of tests.  You'll have tests that reflect how the application is really supposed to work, and you haven't wasted a lot of time on what you could call boilerplate testing, meaning tests that confirm stuff you already knew.  Edge cases are the first killer in any application, and then unexpected behaviour comes right after that.\n<\/p>\n\n<p>\nIf your tests reveal things that you or your users found by actually using the application, I think you are in much better shape than strict adherence to TDD.  Yes, having the tests are good.  Having tests that mean something are even better.\n<\/p>\n",
        "date": "2010-09-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Form Posts in Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/09\/22\/testing-form-posts-in-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks to my loyal followers on The Twitter, who suggested this topic.<\/p>\n\n<p>For those not familiar with the concept of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Continuous_integration\">Continuous Integration<\/a>, I can sum it up with one very glib phrase:  it lets you break your code before you buy it.  By this I mean, when combined with other programming practices like automated deployment and Test Driven Development, you get a chance to see if the code you've written *today* breaks anything you wrote *yesterday*.<\/p>\n\n<p>\nIf I were to design a Continuous Integration (hereafter referred to as CI) system, what would it look like? Setting aside the one I use already (details on that later), I believe there are some key features it requires:\n<ul>\n<li>Ability to integrate with your version control system<\/li>\n<li>Web interface for cross-platform access to results of build<\/li>\n<li>Ability to run your unit test suite and view the results<\/li>\n<li>Ability to deploy code wherever you want<\/li>\n<li>Ability to email results of test builds<\/li>\n<li>Must be able to automate all of this for you<\/li>\n<\/ul>\n<\/p>\n\n<p>This is what I would call a non-trivial set of requirements.<\/p>\n\n<p>\nIt also illustrates what became the biggest realization for me:  you cannot have CI without writing tests (whether they are unit tests or integration tests), and you cannot have CI without the process of creating a \"build\" being triggered without any further action by the developer.  Without a commitment to writing meaningful tests it definitely won't work.  It is my firm feeling that there *is* such a thing as pointless tests, and to me getting to 100% code coverage is often more about programmer ego.\n<\/p>\n\n<p>\nSo, there are a few choices for PHP developers.  You could use <a href=\"http:\/\/phpundercontrol.org\/\">phpUnderControl<\/a>, which is a plugin for <a href=\"http:\/\/cruisecontrol.sourceforge.net\/\">CruiseControl<\/a>, a Java-based tool.  I took a look at it, saw all those XML configuration files and said \"no thanks.\"  If you like screwing around with XML configuration files, then maybe this is the right tool for you.  Me, I like my pointy-clicky interfaces.  Or plain-text configuration files.  Also targeted mostly at Java developers.  My project was using PHP *and* Python, and needed to be able to support Java as well for a non-web project another developer was working on.\n<\/p>\n\n<p>If you prefer the cool ideology of a PHP-powered solution, you could look at <a href=\"http:\/\/code.google.com\/p\/xinc\/\">Xinc<\/a>.  Installs via PEAR (which is always a good idea), but drags a few other PHP components in with it.  I dunno, doing it PHP-only held no special appeal to me.\n<\/p>\n\n<p>In the end, I settled on <a href=\"http:\/\/hudson-ci.org\">Hudson<\/a>.  Much like CruiseControl, it's Java based, but that was no big deal as we already have Java in our infrastructure at work with more little bits being moved to it.  Also, Hudson has the type of architecture I like:  a small, tight core with lots of plugins to add the functionality I wanted.  Using Subversion?  Add the plugin.  Need to run <a href=\"http:\/\/codespeak.net\/py\/dist\/test\/\">py.test<\/a> scripts?  There's a plugin for that.  Want to be able to see the results of your PHPUnit tests?  There's a plugin for that.\n<\/p>\n\n<p>\nSo, not only that, but I could also write a shell script that is run when a build is triggered.  In this case, I was using a post-commit trigger to start builds, but if I wanted to be dogmatic about it I would use a pre-commit trigger, and fail the commit attempt if the tests broke.   I remember how the younger, angrier me flew into a rage at a previous employer when a hook was put into place in our CVS repository (yes, I've been around long enough to have actually used CVS) that ran a syntax checker on any code that got checked in.  Predictably, something was broken because the version of PHP running on the CVS server was *different* from what we were using both in development and production, and a difference in extensions caused a problem.  That is a story for another time.\n<\/p>\n\n<p>\nI also find that using a post-commit hook allows me to look at the code in the staging environment to find bugs that are caused by subtle differences between the development environment and staging.  Today, I fixed one bug by using the new ternary shortcut available in PHP 5.3.  Learn something new every day, is my motto.\n<\/p>\n\n<p>\nSo, how does a build actually work?  Here's how I've set things up:\n<ol>\n<li>A developer commits code to the trunk of the SVN repository.  We don't currently use branches, so I'd have to tweak things if we did work in branches and then merged things into trunk.<\/li>\n<li>Hudson wakes up when it sees a commit, and checks the code out into a workspace.<\/li>\n<li>Hudson then runs a list of shell script commands to do a bunch of things:  run my Doctrine migration scripts, run my PHPUnit tests, run my py.test tests, then copy the code into place on the staging server.<\/li>\n<li>Create a bunch of test reports that can be viewed in Hudson itself<\/li>\n<li>Send out an email to our tech mailing list telling people that a build has been triggered along with the results<\/li>\n<\/ol>\n<\/p>\n\n<p>I have to say there is nothing that puts a smug feeling of satisfaction in my heart like seeing that a build was successful...and nothing that makes me curse quite as much as seeing that a build failed.  But without those tests in place, then I would not find bugs that would've gone into production.  *Any* bug making it into production is BAD, and although I often use gallows humour at work to try and deflect my internal anger at such a thing, it IS possible to production pushes of new code that contain no errors.\n<\/p>\n\n<p>\nAs a follow-up to this idea, I now have a policy that whenever a bug does get found in staging or production, I write a test to recreate the bug, and then put code into place to fix it.  I have found that this has the interesting effect of giving you a bunch of unit *and* integration tests (thank you for the ability to test the output of controllers in Zend_Framework PHPUnit tests) that cover edge cases found by real users.  Besides, you can get really lost going deep into the \"we need to create fixtures so I can test stuff that manipulates dynamically-generated content\" rabbit hole.  I saw a test today that could benefit from the use of fixtures, instead of simply assuming that data will always be there.  Your mileage will vary, but you have to understand that slavish devotion to testing does you no good if you're not accomplishing the goal of producing a working application that meets the goals of the people who are actually, you know, using it.\n<\/p>\n\n<p>\nI hope this post helps you if you're trying to decide whether or not to take the CI plunge.  I have no regrets at the length of time it took me to get things to a happy place in terms of Hudson's configuration.  The benefits of automated builds with the goal of protecting you from yourself more than outweighs a few afternoons of scratching your head and trying to figure out what is going on with Hudson itself.\n<\/p>\n",
        "date": "2010-09-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Twitter Asks:  Continuous Integration Landscape for PHP Developers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/09\/07\/twitter-asks-continuous-integration-landscape-for-php-developers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the more frustrating things about using Zend Framework is that for pretty much any topic, there is always at least 2 ways to accomplish a particular task.   For a beginner with the framework, this is a humungous barrier to overcome.  When I try to implement something, my first question is no longer \"how will I do this\" but \"where the hell should I put this code?\".  In my case, the problem I was attempting to solve was \"how do I implement ACL for one module in my application?\".\n<\/p>\n\n<p>\nI'm using:\n<ol>\n<li>Zend Framework 1.10.5<\/li>\n<li>...and Zend_Application<\/li>\n<li>...and building functionality out using modules<\/li>\n<\/ol>\n<\/p>\n\n<p>\nSo off I go <a href=\"http:\/\/duckduckgo.com\">duck hunting<\/a> and find lots of samples on how to do it.  Except none of them fit how my application is currently built.  Plugins?  Front controllers?  Placing code in preDispatch?  Yikes, this will take some time to sift through all the available info and come up with a solution custom-tailored to my application's structure.\n<\/p>\n\n<p>\nI ended up using info from <a href=\"http:\/\/stackoverflow.com\/questions\/2046608\/practical-zend-acl-zend-auth-implementation-and-best-practices\">here<\/a> and <a href=\"http:\/\/devzone.zend.com\/article\/3510-Zend_Acl-and-MVC-Integration-Part-II-Advanced-Use\">here<\/a> to form my solution.  The first step was to create a plugin to hold all the info about my ACL's and roles. \n~~~\n\n< ?php\n\nclass Xmlteam_Football_Acl extends Zend_Acl\n{\n    protected static $_instance;\n\n    protected function __construct()\n    {\n        $this->addRole(new Zend_Acl_Role('guest'));\n        $this->addRole(new Zend_Acl_Role('admin'));\n        $this->addRole(new Zend_Acl_Role('normal', 'guest'));\n        $this->addRole(new Zend_Acl_Role('photoadmin', 'guest'));\n        $this->addRole(new Zend_Acl_Role('captain', 'normal'));\n\n        $moduleResource = new Zend_Acl_Resource('football');\n        $this->add($moduleResource)\n            ->add(new Zend_Acl_Resource('football:help'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:messages'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:photos'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:standings'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:stats'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:team'), $moduleResource)\n            ->add(new Zend_Acl_Resource('football:transactions'), $moduleResource);\n\n        $this->allow(null, 'football:help');\n        $this->allow(null, 'football:messages');\n        $this->allow(null, 'football:photos', 'view');\n        $this->allow(array('admin', 'photoadmin'), 'football:photos', array('delete', 'manage')); \n        $this->allow(null, 'football:standings');\n        $this->allow(null, 'football:stats');\n        $this->allow(null, 'football:team');\n        $this->allow(null, 'football:transactions', array('closed', 'league'));\n        $this->allow('captain', 'football:transactions', 'request');\n        $this->allow(array('captain', 'normal'), 'football:transactions', 'index');\n\n        return $this;\n    }\n\n    public static function getInstance()\n    {\n        if (self::$_instance === null) {\n            self::$_instance = new self();\n        }\n\n        return self::$_instance;\n    }\n}\n~~~\nThen, I needed a way to actually call this plugin and do something with the results.  I was using a base controller for the 'football' module for my application, and after messing around, I figured out that the code interacting with my ACL plugin needed to go in the init() method of the controller:\n~~~\n \/\/ Now, let's hook up some ACL lovin'\n $acl = Xmlteam_Football_Acl::getInstance();\n $resource = 'football:' . $this->_request->controller;\n\n if ($acl->has($resource) && !$acl->isAllowed($this->userInfo['role'], $resource, $this->_request->action)) {\n       $this->_flashMessenger->addMessage('You do not have the proper access level to view that page');\n       $this->_redirect('\/football\/' . $this->league . '\/standings');\n }\n~~~\nThis used to be a lot more crufty, but I slowly whittled away at the code until it has what I think is the simplest implementation.\n<\/p>\n\n<p>\nOh, I almost forgot.  Here are the tests I wrote for it.  I bet you thought I forgot to write tests, didn't you. ;)\n~~~\nclass FootballAclTest extends PHPUnit_Framework_TestCase \n{\n\n    public function setUp()\n    {\n        $this->bootstrap = new Zend_Application(\n            'testing',\n            APPLICATION_PATH . '\/configs\/application.ini'\n        );\n        parent::setUp();\n        $this->_acl = Xmlteam_Football_Acl::getInstance();\n    }\n\n    public function tearDown()\n    {\n        parent::tearDown();\n    }\n\n    public function testTransactions()\n    {\n        $resource = 'football:transactions';\n        $this->assertTrue($this->_acl->has($resource), 'football:transactions resource exists');\n        $this->assertTrue($this->_acl->isAllowed('captain', $resource, 'request'), 'Team captains can request transactions');\n        $this->assertFalse($this->_acl->isAllowed('normal', $resource, 'request'), 'Normal team users cannot request transactions');\n        $this->assertTrue($this->_acl->isAllowed(null, $resource, 'league'), 'Anyone can view league transactions');\n    }\n\n    public function testPhotos()\n    {\n        $resource = 'football:photos';\n        $this->assertTrue($this->_acl->has($resource));\n        $this->assertTrue($this->_acl->isAllowed(null, $resource, 'view'), 'Anyone can view photos');\n        $this->assertTrue($this->_acl->isAllowed('admin', $resource, 'manage'), 'Admin can manage photos');\n        $this->assertTrue($this->_acl->isAllowed('photoadmin', $resource, 'manage'), 'Photoadmin can manage photos');\n        $this->assertFalse($this->_acl->isAllowed('captain', $resource, 'manage'), 'Captains cannot manage photos');\n        $this->assertFalse($this->_acl->isAllowed('normal', $resource, 'manage'), 'Normal users cannot manage photos');\n        $this->assertFalse($this->_acl->isAllowed('guest', $resource, 'manage'), 'Guests cannot manage photos');\n    }\n}\n~~~<\/p>\n",
        "date": "2010-08-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend_Application and Zend_Acl",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/08\/16\/zend_application-and-zend_acl\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>These days, it's becoming increasingly harder to find web applications that are homogenous in terms of the tools they use to Get Things Done.  The ability to build the web front-end of your site using PHP but a critical part that requires asynchronous processing using <a href=\"http:\/\/nodejs.org\">Node.js<\/a> is something that is both exciting and, well, practical.  Loosely coupled components, passing messages to each other, is great architecture to try and build if you have both the skills and patience to make it work.\n<\/p>\n\n<p>\nFor a project at work, I am using PHP (specifically Zend Framework) for the front-end but are using Python scripts run as a cron-job (and also on-demand when statistical corrections occur) to collect raw stats for a variety of sports, and then generate fantasy point totals for the games we run.  I'm already using <a href=\"http:\/\/phpunit.de\">PHPUnit<\/a> for tests of the front end, and I decided to to use <a href=\"http:\/\/codespeak.net\/py\/dist\/test\/index.html\">py.test<\/a> to test my Python scripts.\n<\/p>\n\n<p>\nSetting up tests in Python was pretty simple.  Here's one of my test scripts:\n~~~\nimport py\nimport baseball_scoring\n\ndef test_batter_empty_data_set():\n    expected_points = 0\n    test_data = dict() \n    test_points = baseball_scoring.batter_points(test_data)\n    assert expected_points == test_points \n\ndef test_batter_simple():\n    test_data = {\n        'hits': 4,\n        'doubles': 1,\n        'triples': 1,\n        'home_runs': 1,\n        'runs_scored': 1,\n        'rbi': 1,\n        'stolen_bases': 1,\n        'league': 'bluejays2010'\n    }\n    expected_points = 11\n    test_points = baseball_scoring.batter_points(test_data)\n    assert expected_points == test_points\n\ndef test_pitcher_empty_data_set():\n    expected_points = 0\n    test_data = dict() \n    test_points = baseball_scoring.pitcher_points(test_data)\n    assert expected_points == test_points \n\ndef test_pitcher_simple():\n    test_data = {\n        'wins': 1,\n        'losses': 0,\n        'saves': 0,\n        'strikeouts': 7,\n        'complete_games': 1,\n        'shutouts': 1,\n        'league': 'bluejays2010'\n    }\n    expected_points = 25 \n    test_points = baseball_scoring.pitcher_points(test_data)\n    assert expected_points == test_points\n~~~\n<\/p>\n\n<p>Very similar to tests with PHPUnit, right?  So now that I had both PHPUnit tests and py.tests tests (hrm, is there are better way to say that?) to run, I had to figure out how to automatically run them.  More specifically, how to get our installation of <a href=\"http:\/\/hudson-ci.org\">Hudson<\/a> to run them.\n<\/p>\n\n<p>\nGetting PHPUnit to play nice with Hudson was relatively easy.  I installed the NUnit plugin for Hudson, made sure I installed phpunit, and then I added it's use to my build scripts.  However, the strength of Hudson is that  with the use of another plugin I could read reports of all those tests.  So when things failed, I would not have to look at the console output to figure things out.  There's a place in the Hudson config where you can configure this:\n<img src=\"http:\/\/cakebook.s3.amazonaws.com\/atthekeyboard\/wp-content\/uploads\/2010\/07\/phpunit-hudson1-300x99.jpg\" alt=\"PHPUnit configuration in Hudson\" title=\"phpunit-hudson\" width=\"300\" height=\"99\" class=\"alignnone size-medium wp-image-755\" \/>\n<br \/>\nNow, I figured that the same thing could be done with py.test.  It had an option so that at run-time you could tell it where to put JUnit-compatible test result files.  After a little tinkering, I got it to work.  First step was adding execution of it to my build script.  Here is the latest-and-greatest version of that script:\n<pre>\nmkdir \/var\/www\/games-hudson\/${BUILD_ID}\ncd ${WORKSPACE}\/games\n\/usr\/local\/zend\/bin\/php doctrine-cli migrate\ncd ${WORKSPACE}\/games\/tests\n\/usr\/local\/zend\/bin\/phpunit --log-junit=${WORKSPACE}\/build\/logs\/phpunit-results.xml\ncd ${WORKSPACE}\/games\/scripts\n\/usr\/bin\/py.test --junitxml=${WORKSPACE}\/build\/logs\/pytest-xmlrunner.xml\ncp -R \/var\/lib\/hudson\/jobs\/${JOB_NAME}\/workspace\/games\/* \/var\/www\/games-hudson\/${BUILD_ID}\nchmod 777 \/var\/www\/games-hudson\/${BUILD_ID}\/tmp\nrm -rf \/var\/www\/games-hudson\/current\nln -sf \/var\/www\/games-hudson\/${BUILD_ID} \/var\/www\/games-hudson\/current\n<\/pre>\n<br \/>\n<\/p>\n\n<p>\nNext, I then told Huson where it could find the JUnit-compatible files generated by py.test:\n<br \/>\n<img src=\"http:\/\/cakebook.s3.amazonaws.com\/atthekeyboard\/wp-content\/uploads\/2010\/07\/pytest-hudson-300x42.jpg\" alt=\"Telling Hudson where to find the py.test output\" title=\"pytest-hudson\" width=\"300\" height=\"42\" class=\"alignnone size-medium wp-image-756\" \/>\n<\/p>\n\n<p>\nSo there you have it.  Now, when I do a commit and trigger a Hudson build, both my PHPUnit and Python tests get run.  And there is output to check, so I don't have to dig through console output to figure things out.\n[topicblocks id=\"\/en\/phpunit\" comment=\"When you publish this post, this WordPress shortcode will display the TopicBlock you created about 'PHPUnit'.\"]\n<\/p>\n",
        "date": "2010-07-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Snakes and Elephants Playing Nice Together: PHPUnit and py.test with Hudson",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/07\/29\/snakes-and-elephants-playing-nice-together-phpunit-and-py-test-with-hudson\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In discussions with my friend <a href=\"http:\/\/chiggsy.com\">Kevin<\/a>, I have come to realize that we have arrived at the same conclusions about the use of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Web_application_framework\">web application frameworks<\/a>.  Much of these conclusions have driven from 12+ years in building applications using them, with various rates of success.  Suffice it to say, only the most l33t programmers out there are using their own frameworks, be it a custom one or contributing to the creation of an open-sourced framework.  Everyone else is like me:  a user of frameworks, and extremely rare contributor back to those frameworks.\n<\/p>\n\n<p>Since Kevin and I are travelling together through the world of <a href=\"http:\/\/python.org\">snake handling<\/a>, we have been looking at the available options for building web applications in that environment.  Our conclusions have been surprising to ourselves, but I think they can be very instructive to others.   These two lessons are applicable to other programming languages as well, so feel free to substitute your favourite language where applicable.\n<\/p>\n\n<h3>Lesson 1: Full-stack gets you in the door, lightweight lets you find your niche<\/h3>\n\n<p>\nIf you want to learn Python for the web, the first place you go is <a href=\"http:\/\/djangoproject.com\">Django<\/a>.  It is a full-stack solution for building things in Python.  Awesome documentation, and with some help from Python's online documentation, you can build an app in a reasonable time frame without knowing a ton of Python.  Awesome tutorials and code samples FTW!  I have built a Django app and briefly made it public.  It was, like so many other things, a piece of crap missing functionality so I am trying to rectify that in my ever-dwindling spare time.   I did not find any serious obstacles to building this app, except for figuring out how to do some dynamic form-field-generating code.  It took me a while to find the right info (amazing how having the correct keywords in your search helps) but I did.\n<\/p>\n\n<p>\nAs an old warrior of frameworks (10 and counting across 3 languages) I found that because I already understood the concepts behind MVC (or MVT in the case of Django) I could concentrate on learning Python first, and then the unique features of the framework after that.\n<\/p>\n\n<p>\nIn many ways, my early experiments with Rails (back in 2004-2005) helped me understand frameworks a lot better.  All frameworks have their own magic methods for doing things, with Rails making heavy use of Ruby's ability to create Domain Specific Languages to make Rails the incredibly useful framework that it is today.  But eventually, your skill with the language and the framework gets to the point where you see the limitations of the conventions and magic methods the framework uses.\n<\/p>\n\n<p>Now that I've gotten my hooks into building stuff with Django, I now recognize the same seductive promises that I found in things like CakePHP:  the full-stack takes you away from actually figuring out how to code things, and instead you find yourself just using all the built-in methods.  Don't get me wrong, the built-in stuff for Django is awesome.  But if I want to push my skills forward so I can say \"I can build stuff for the web using Python\" instead of \"I can build stuff for the web using Django\" I need to use other tools.  What if I want to run my stuff on Google App Engine?  Sure, there are these hacks available for Django that make it \"usable\" on GAE, but that's not what I want.  And what about the use of WSGI instead of relying on mod_python?  Forgive me if this stuff comes across as technobabble.  It was technobabble to me at one time too.\n<\/p>\n\n<p>\nSo now the next step is (after finishing the current Django app) is to build an application using a much more <a href=\"http:\/\/flask.pocoo.org\/\">lightweight framework<\/a>.  Why?  Because it's time to actually learn how to do something instead of relying on magic methods.  Because once I learn to write code to duplicate those magic methods, I'll be able to use Django *and* Flask.  And that, my friends, is how you make yourself useful.  That and the ability to run the app both as a standalone WSGI app or on Google App Engine seems like a bonus to me.\n<\/p>\n\n<p>\nSo now that you've gone from full-stack to lightweight, it's time to look at the next lesson...\n<\/p>\n\n<h3>Lesson 2: Don't use anything made by One Guy<\/h3>\n\n<p>\nThis will undoubtably be a touchy subject for some.  Let me try and explain it.\n<\/p>\n\n<p>\nIn the quest for the lightweight solution, I ran across <a href=\"http:\/\/web2py.com\">web2py.<\/a>  Nice and lightweight, awesome documentation, but it's all driven by ONE GUY.  Experience has taught me that projects driven by ONE GUY end up looking like how the ONE GUY would do it.  Sometimes the ONE GUY is brilliant and it all works out.  That is rare, in my experience.   Open source projects are littered with the wreckage caused by egos and control freaks who were unwilling to accept outside help to solve problems.\n<\/p>\n\n<p>So look for projects where it appears there are solid contributors beyond ONE GUY.  web2py sure has an impressive list of people who contribute, but is Massimo the ONE GUY when it comes to actually making non-trivial code changes?  I sure hope not.\n<\/p>\n\n<h3>There will be no test afterwards<\/h3>\n\n<p>\nWhile I do not expect other people's experiences to be the same as mine, I'm pretty sure I am not the only person who has learned these lessons.  So the next time you are evaluating using a web application framework (in a new language or an existing one) think back on these lessons.\n<\/p>\n",
        "date": "2010-07-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Coding Lessons Learned",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/07\/21\/coding-lessons-learned\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThe other day I had a nice meeting in my basement lair with my co-workers.  We laughed.  We cried.  We had some BBQ'd burgers, and nobody got food poisoning.  As we discussed the implementation of our new fantasy gaming platform, I managed to figure out that one requirement was for an admin to upload a header and footer file for a game.  \"The idea here is to be able to set up a new game for someone without programmer intervention\". <\/p>\n\n<p>\nAfter I got over being insulted that a programmer was not required for every tiny tweak to the site (I'm kidding) I tried to figure out how I was going to accomplish this.  I'm not a big fan of storing actual HTML content in a database.  Call me old-fashioned, but I feel my HTML content belongs on the filesystem, and nowhere else.  Besides, it makes it harder to do deployments of code on multiple servers if all the templates aren't there to begin with.\n<\/p>\n\n<p>\nThe solution was, of course, obvious:  create a custom Zend_View and override stuff until you get it behaving the way you want!  The logic for doing this is actually quite simple:\n<ol>\n<li>Check to see if the script in question exists in the file system<\/li>\n<li>If not, figure out what template we need to pull from the database.<\/li>\n<li>Read in contents of that script from the database<\/li>\n<li>Write contents to the filesystem<\/li>\n<\/ol>\n<\/p>\n\n<p>\n<b>NOTE<\/b>:  I am not sure if this is the most elegant solution for solving this particular problem.  I am open to a different solution so long as it meets the same needs.\n<\/p>\n\n<p>\nSince I've made a commitment to doing TDD for this project, naturally I started out with a test:\n~~~\n\n< ?php\nrequire_once 'PHPUnit\/Framework.php';\nrequire_once 'Zend\/Application.php';\n\n\/\/ Define path to application directory\nif (!defined('APPLICATION_PATH')) {\n    define('APPLICATION_PATH', realpath(dirname(__FILE__) . '\/..\/..\/..\/application'));\n}\n\n\/\/ Define application environment\nif (!defined('APPLICATION_ENV')) {\n    define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'test'));\n}\n\n\/\/ Ensure library\/ is on include_path\nset_include_path(implode(PATH_SEPARATOR, array(\n        realpath(APPLICATION_PATH . '\/..\/library'),\n            get_include_path(),\n        )));\n\nclass Xmlteam_ZFViewTest extends PHPUnit_Framework_TestCase \n{\n\n    public function setUp()\n    {\n        $this->bootstrap = new Zend_Application(\n            'testing',\n            APPLICATION_PATH . '\/configs\/application.ini'\n        );\n        parent::setUp();\n    }\n\n    public function tearDown()\n    {\n        parent::tearDown();\n    }\n\n    \n    public function testRenderView()\n    {\n        $templateData = array(\n            'league_short_name' => 'testing',\n            'type' => 'header',\n            'created_at' => new Doctrine_Expression('NOW()'),\n            'content' => '<div id=\"header\"><b>header<\/b><\/div>'\n        );\n        $testTemplate = new Template();\n        $testTemplate->fromArray($templateData);\n        $testTemplate->save();\n        $testView = new Xmlteam_ZFView(); \n        $testView->setScriptPath('.\/application\/views');\n        $content = $testView->render('testing-header.phtml');\n        $this->assertTrue(file_exists('.\/application\/views\/testing-header.phtml'));\n        $this->assertEquals($content, $templateData['content']);\n        $testTemplate->delete();\n        unlink('.\/application\/views\/testing-header.phtml');\n    }   \n}\n~~~\nFor those wondering, yes all the tests pass. ;)<\/p>\n\n<p>The \"Template\" is a Doctrine (1.2) model that represents the table where I'm storing information about the templates.  Yes, it has unit tests too.  That pass.\n<\/p>\n\n<p>So how do we accomplish this?  First, I hit up my peeps on Twitter and the advice from <a href=\"http:\/\/twitter.com.\/weierophinney\">Matthew Weier-O'Phinney<\/a> himself was to simply create my own Zend_View and override what needed to be overriden.   Also, he was very wise to tell me to look at Zend\/View.php itself for guidance.   That and some helpful messages from exceptions during testing.\n<\/p>\n\n<p>\nHere's the initial implementation, for which all tests pass.\n~~~\n< ?php\n\n\/\/ Custom view that reads in templates from the database and\n\/\/ writes them to the filesystem\n\nclass Xmlteam_ZFView extends Zend_View_Abstract\n{\n    private $_filter = array();\n    private $_file = null;\n\n    public function __construct($config = array())\n    {\n        parent::__construct($config);\n    }\n\n    \/**\n     * Custom method to see if template is in the file system\n     * and then load it into memory, write out to the file system\n     * if it doesn't\n     *\n     * @param string $name The script name to precess\n     * @return string THe script output\n    *\/\n    public function render($name)\n    {\n        $scriptPaths = $this->getScriptPaths();\n        $filename = $scriptPaths[0] . $name;\n        \n        if (!file_exists($filename)) {\n            list($league, $tmp) = explode('-', $name);\n            list($templateType, $extension) = explode('.', $tmp);\n            $q = Doctrine_Query::create()\n                ->select('t.*')\n                ->from('Template t')\n                ->where('t.league_short_name = ?', $league)\n                ->andWhere('t.type = ?', $templateType);\n            $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);\n            $results = $q->execute();\n\n            if (count($results) > 0) {\n                file_put_contents($filename, $results[0]['content']);\n            }\n        }\n        \n        \/\/ find the script file name using the parent private method\n        $this->_file = $this->_script($name);\n        unset($name); \/\/ remove $name from local scope\n\n        ob_start();\n        $this->_run($filename);\n\n        return $this->_filter(ob_get_clean()); \/\/ filter output\n    }\n\n                    \/**\n     * Applies the filter callback to a buffer.\n     *\n     * @param string $buffer The buffer contents.\n     * @return string The filtered buffer.\n     *\/\n    private function _filter($buffer)\n    {\n        \/\/ loop through each filter class\n        foreach ($this->_filter as $name) {\n            \/\/ load and apply the filter class\n            $filter = $this->getFilter($name);\n            $buffer = call_user_func(array($filter, 'filter'), $buffer);\n        }\n\n        \/\/ done!\n        return $buffer;\n    }\n\n    \/**\n     * Includes the view script in a scope with only public $this variables.\n     *\n     * @param string The view script to execute.\n     *\/\n    protected function _run()\n    {\n        if ($this->_useViewStream && $this->useStreamWrapper()) {\n            include 'zend.view:\/\/' . func_get_arg(0);\n        } else {\n            include func_get_arg(0);\n        }\n    }\n}\n~~~\nSo, what did I learn from this process?\n<ol>\n<li>I needed to create my own private _file and _filter variables to match what exists in  so that if I create any custom filters they can be applied to my custom view *and* to keep compatibility with existing code.<\/li>\n<li>Because the _run method is protected AND abstract, I needed to implement my own _run method in my custom view, or else it would spit out errors.  Even if it doesn't do anything special.<\/li>\n<\/ol>\n<\/p>\n\n<p>You can see that the logic in my render method is pretty much as I outlined before.  I realize I will take a slight hit the first time we go to load a particular template.  I'm assuming at some point I will want to run a test to see just how long it does take to pull in the template from the database and write it to the file system.  I'm guessing this will not be a serious performance hit, but you never know.  All those file_exists() calls can't be that good for performance,\n<\/p>\n\n<p>\nI look forward to seeing other potential solutions to this problem\n<\/p>\n",
        "date": "2010-06-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Fun with custom Zend_Views",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/06\/24\/fun-with-custom-zend_views\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>The folks at Packt Publishing asked if I was interested in reviewing their upcoming title <a href=\"https:\/\/www.packtpub.com\/codeigniter-1-7-professional-development\/book\">\"CodeIgniter 1.7: Professional Development\"<\/a> due to my experience with CodeIgniter.  While it is not my favourite framework (for reasons that I have explained on this blog), I still have to work with it going forward.  I was interested to see what direction such a book would take.  After going through it, I was happily surprised.\n<\/p>\n\n<p>\nWhen I read a book about a programming framework, I'm expecting to see that they start off with the basics of using the framework, then keep expanding on the abilities of the framework.  By the end of the book, you should be able to build something OTHER than the example application (if they provide one).  I mean, if I just want a list of functions then I will hit up Google\/Bing\/Duck Duck Go to find the info I want.  This book starts with the basics of the framework, and patiently builds on the concepts you previously learned.  Good, clear examples of how to do things.  \n<\/p>\n\n<p>\nI thought another nice touch was the expanding into concepts like scaling the application, and extending the framework itself.  If there is one thing I've learned building web apps over the years, it's that you (a) inevitably need to worry about scaling the application and (b) you end up having to make your own modifications to the framework itself to meet unique challenges for the application.\n<\/p>\n\n<p>\nAll in all, I recommend this book to anyone who is planning on using CodeIgniter 1.7 (and beyond) to build web apps.  The sections on the first steps towards scaling your app, and extending CodeIgniter itself make this book stand out from the crowd.\n<\/p>\n",
        "date": "2010-06-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review - CodeIgniter 1.7: Professional Development",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/06\/16\/book-review-codeigniter-1-7-professional-development\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Note, this example was using Zend Framework 1.10, so things might change going forwards).<\/p>\n\n<p>As a lapsed tester, I've made the commitment to build out our Zend Framework powered application using tests going forward.  The first two modules for the app *should* have been done with tests, and for that I hang my head with shame.  Now that I've invested the work in creating a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Continuous_integration\">continuous integration<\/a> environment using <a href=\"http:\/\/hudson-ci.org\">Hudson<\/a>, there is no longer an excuse to not write tests.  Especially when I can get tests run automatically every time I commit code.\n<\/p>\n\n<p>\nAnyway, I was asked to implement a new feature for the application:  a list of all transactions for a fantasy baseball league, sorted by date.  What a perfect excuse to write some tests!  The initial problem though was how do I simulate logging in a user so I can see this page, which was protected by authentication using Zend_Auth.  So I started my scouring the internet for answers.\n<\/p>\n\n<p>\nI found quite a few examples on how to test a controller, using the $this->dispatch('\/path\/to\/action') method but found that I wasn't getting redirected properly to the post-login page.  I was passing proper credentials in and everything.  Then finally after deciding to go back to basics and read up on just how to test Zend_Auth.  After some swearing a few face-palms, I realized what I had been doing wrong.\n<\/p>\n\n<p>\nThe tl;dr version:  I was forgetting that the unit test itself needed to manually log in the user by speaking with Zend_Auth directly.  Here's the testing code for that particular controller:\n~~~\n< ?php\n\nrequire_once 'Zend\/Test\/PHPUnit\/ControllerTestCase.php';\nrequire_once 'Zend\/Application.php';\n\n\/\/ Define path to application directory\nif (!defined('APPLICATION_PATH')) {\n    define('APPLICATION_PATH', realpath(dirname(__FILE__) . '\/..\/..\/..\/application'));\n}\n\n\/\/ Define application environment\nif (!defined('APPLICATION_ENV')) {\n    define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'test'));\n}\n\n\/\/ Ensure library\/ is on include_path\nset_include_path(implode(PATH_SEPARATOR, array(\n        realpath(APPLICATION_PATH . '\/..\/library'),\n            get_include_path(),\n        )));\n\nclass TransactionControllerTest extends Zend_Test_PHPUnit_ControllerTestCase \n{\n\n    public function setUp()\n    {\n        $this->bootstrap = new Zend_Application(\n            'testing',\n            APPLICATION_PATH . '\/configs\/application.ini'\n        );\n        parent::setUp();\n    }\n\n    public function loginUser($login, $passwd, $shortLeague)\n    {\n        $authParams = array(\n            'login' => $login,\n            'password' => $passwd,\n            'short_league' => $shortLeague \n        );\n        $adapter = new Xmlteam_Auth($authParams);\n        $auth = Zend_Auth::getInstance();\n        $result = $auth->authenticate($adapter);\n        $this->assertTrue($auth->hasIdentity());\n    }\n\n    public function tearDown()\n    {\n        parent::tearDown();\n    }\n\n    public function testOverallBaseballList()\n    {\n        $this->loginUser('test@test.com', '*****', 'bluejays2010');\n        $this->dispatch('\/baseball\/bluejays2010\/transactions\/list');\n        $this->assertModule('baseball', 'In baseball module');\n        $this->assertController('transactions', 'In the transactions controller');\n        $this->assertQuery('#tblTransactions', 'Transaction table exists');\n    }\n}\n~~~\n<\/p>\n\n<p>\nI'm using a custom authentication adaptor with Zend_Auth, as we need to limit access for a user to a particular league.  Perhaps better to do it with Zend_Acl, and since the platform is likely to expand I will end up using that as well.  But I am drifting off topic here.\n<\/p>\n\n<p>\nThe magic is in that loginUser() method.  What I did not realize at the time was that running a test where I asked it to dispatch users to the login page and passed along what would've been entered in the form was not working.  Perhaps it was creating an authenticated session OUTSIDE the scope of the test environment.  Perhaps it is my sucky code.  Either way, it wasn't working.\n<\/p>\n\n<p>\nSo, by creating a authenticated login Zend_Auth *inside* the test, I could then safely dispatch my testing code to look at pages requiring authentication.  I hope this blog posts helps out others trying to write tests for controllers that are hidden behind Zend_Auth.\n<\/p>\n",
        "date": "2010-06-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Controllers Hiding Behind Zend_Auth",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/06\/03\/testing-controllers-hiding-behind-zend_auth\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Like many old sk00l developers, I like the security blanket a bookshelf full of technical books gives me.  Whenever I have a problem, I check to see if I can figure it out using the reference materials on hand.  Just looking at my shelves.  Since She Who Must Be Obeyed Around Here frowns on boxes constantly showing up at our house from various online book retailers, I usually only purchase books that I think are going to be good additions to the library.<\/p>\n\n<p>\nTaking a quick peek at my bookcase, these are a few of the books that I consider essential reference guides for me:\n<ul>\n<li>The Pragmatic Programmer<\/li>\n<li>Practices of an Agile Developer<\/li>\n<li>Mastering Regular Expressions\n<\/li><li>Beautiful Code \/ Beautiful Architecture<\/li>\n<li>Javascript: The Good Parts<\/li>\n<\/ul>\nI have more books, but those are the ones closest to my desk.\n<\/p>\n\n<p>\nThere is now a new book that has earned a spot on my bookcase, and should be in one of the slots closest to my desk.  I am reading a borrowed copy of it, but I plan on rectifying that soon.  \"Building Scalable Web Sites\" by Cal Henderson (he of Flickr and <a href=\"http:\/\/www.youtube.com\/watch?v=i6Fr65PFqfk\">\"Why I Hate Django<\/a> fame) is that book.\n<\/p>\n\n<p>\nI don't know how I can describe how awesome this book is in this blog.  Just check out the topics in the table of contents:\n<ol>\n<li>Introduction<\/li>\n<li>Web Application Architecture<\/li>\n<li>Development Environment<\/li>\n<li>i18n, L10n, and Unicode<\/li>\n<li>Data Integrity and Security<\/li>\n<li>Email<\/li>\n<li>Remote Services<\/li>\n<li>Bottlenecks<\/li>\n<li>Scaling Web Applications<\/li>\n<li>Statistics, Monitoring, and Alerting<\/li>\n<li>APIs<\/li>\n<\/ol>\n<\/p>\n\n<p>Pardon my vulgarity, but that is pretty much every single fucking thing you need to worry about when building a web site that is going to be used by anyone other than you and your close circle of friends.\n<\/p>\n\n<p>\nThis book is old in internet time:  published in 2006, meaning it was probably written in 2004-2005.  A lot of technology has changed, but the principles themselves have not.  Also, a lot of the code inside uses PHP for it's examples, but I really think this applies to any programming language that is stateless and\/or promotes a \"shared nothing\" architecture.  That means (as far as I'm concerned) PHP, Python and Ruby.  It's very simple:  scaling anything is difficult, but scaling something where there is information that needs to be shared between nodes is extremely difficult.   The best way to use this book is to ignore the specific technologies being mentioned and focus on the ideas and practices that are being promoted.  I mean, let's be brutally honest:  Cal Henderson helped build one of the most massively scaled web sites, using a programming language at it's core that the hipster programmer crowd sneers at.  Ignore his advice at your peril.\n<\/p>\n\n<p>\nGo buy this book.  Right now.  You will not regret it.\n<\/p>\n",
        "date": "2010-05-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Essential Programming Books: \"Building Scalable Web Sites\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/05\/28\/essential-programming-books-building-scalable-web-site\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had an awesome time at <a href=\"http:\/\/tek.phparch.com\/\">Tek-X<\/a> in Chicago last week.  It was worth the 8 hour drive to get to Chicago from my basement lair.  Of course, it helped that the wait at the border was under 10 minutes both times.  There were good talks, but even better *people*.\n<\/p>\n\n<p>\nA programming language is only as good as the community that supports.  By supporting it, I mean willing to get together several times a year for conferences and bust their asses to have people share interesting talks with everyone else.   Look at Python and Ruby.  Awesome languages to work with.  But even more awesome are the conferences that serve as anchors for the community.<\/p>\n\n<p>There seems to be lots of little regional Ruby conferences, which give the language itself a unique flavour in return.  Of course, it helps that Ruby can be used quite easily outside the traditional web application building environment.  I don't see so many regional Python conferences, just PyCon and DjangoCon both in the US and over in Europe.  It could be that I'm not looking hard enough.<\/p>\n\n<p>\nAs for PHP, to be fair, it shows up at pretty much any open source web-related conference.  OS Bridge. OSCON.  Codemash.  I could go on, but I am not in the conference-promotion business.  I mean, why is there no Great Canadian PHP Conference?  I know there was phpworks in Toronto back in the mid 2000's.  It was my first conference I ever went to.  But I'll tell you why there is no Great Canadian PHP Conference:  there is no PHP community in Toronto.\n<\/p>\n\n<p>\nOh sure, there are tons of PHP jobs to be had in Toronto.  Lots of code monkey positions to be filled.  But the Toronto PHP User's group has been dormant since last year.  I sent an email to the organizer telling him I wanted to help out at least 3 days ago.  Haven't heard a damn thing back.  Perhaps it is time to go around such a person and just do it myself.\n<\/p>\n\n<p>\nSee, without the PHP community I do not have a career.  Once I took the plunge, submitted a talk, and got accepted (I gave a talk about what the PHP community could learn from Ruby on Rails) I found I had suddenly joined the PHP *community*.  Instantly I had people asking me questions AND people willing to answer my questions.  Like I was their long-lost buddy.  That was an awesome feeling, let me tell you.  But even more important were the people I met.\n<\/p>\n\n<p>\nAs a result of the community, I have found myself in the awesome position that every time I needed a job, it took less than a week to get one.  It was a combination of my blogging and my work in making those connections in the community that put me in this position, but it is sure a nice feeling to be able to convince your nervous wife that we were not about to face a rough patch while I struggled to find work.  So it's a no-brainer for me to continue to submit talks to conferences and try to attend even when I don't speak.  It's about giving something back to the community that has helped me grow my career.  \n<\/p>\n\n<p>\nSo don't just *use* your language of choice.  Try and become part of that community.  Doesn't matter if it's Python, Ruby, or good-old-solved-the-web-problem-first PHP.  You'd be surprised what doors are opened up by your participation.\n<\/p>\n",
        "date": "2010-05-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It's The Community, Stupid",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/05\/26\/its-the-community-stupid\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Tomorrow (May 18) I throw all my junk in the trunk of my trusty steed (a 2000 Ford Taurus that loves to chew up the highway miles) and hit the road for Chicago for <a href=\"http:\/\/tek.phparch.com\">TEK-X<\/a>, the 10th edition of this conference.  I have spoken at previous editions (is that the correct word?) of this conference and I'll be honest:  I'm a bit bummed that I'm not speaking.\n<\/p>\n\n<p>See, I normally only go to conferences when I speak.  Why?  Being away from the family is tough to arrange when you work from home.  I've got two little girls, and they are used to Daddy being around to help out with stuff.  Like taking them to day care, or picking them up from school.  Making dinner.  Helping with school lunches.  Grocery shopping.  I'm sure you get the picture.  So to abandon the family to go to a conference requires lots of logistical work.<\/p>\n\n<p>\nBut damnit, I hadn't been to a conference since March of last year (the old PHP Quebec conference) I was determined not to get shut out.  Luckily my boss agreed to foot the bill and so off I go.  I'd love to meet any of my readers, and even sign paper copies of my <a href=\"http:\/\/www.litttlehart.net\/book\">book<\/a> if you got a print-on-demand version.  Hell, I don't even have one. ;)  So don't be intimidated by my size, appearance, or lack of knowledge on certain topics.  Come and say hi.  I'll the big, bald, grumpy Canadian with a pot-scrubber on his chin stomping around the conference.\n<\/p>\n\n<p>\nAnyway, I wanted to talk about the sessions I'm looking forward to seeing.  In no particular order, here they are:\n<h3>Building Real-Time Applications with XMPP<\/h3>\n<\/p>\n\n<p>\nI've known <a href=http:\/\/twitter.com\/tswicegood>Travis<\/a> for a while through the PHP community, and never seen him do a presentation.  However, his numerous IM sessions helping me understand decorators in the context of Django and talking me through fixing totally busted Git commits lead me to one conclusion:  he knows his shit so I should pay attention to what he has to say.  The building of our next-gen fantasy sports gaming platform starts when I get back so I'm hoping he imparts some pearls of wisdom.\n<\/p>\n\n<h3>Continuous Inspection and Integration of PHP Projects<\/h3>\n\n<p>\nBeing the only guy working on projects gets frustrating:  nobody to share ideas with and also very hard to make the case for the types of tools and procedures that the TDD\/BDD and continuous integration crowd advocates.  I mean, all this work so Chris stops complaining about bugs slipping through the QA cycle?   Besides, I always have a soft-spot for Ze Germans who are always at the PHP conferences. \n<\/p>\n\n<h3>Graphs, Edges & Nodes: Untangling the Social Web<\/h3>\n\n<p>\nI first met the presenter (Joel Perras) at PHP Quebec last year through the CakePHP community.  Now that he's moved on to the <a href=\"http:\/\/lithify.me\/\">Lithium<\/a> project, I see his ego has grown to the point where he is okay giving presentations.  Don't worry whippersnapper, I'll cut you down to size during this (probably awesome because it deals with stats and nodes and graphs and all this cool stuff I've been reading in \"Programming Collective Intelligence\") talk.\n<\/p>\n\n<p>\nNow, I'm sure that I will be attending other sessions while I'm there.  But those are the main ones I'm looking forward to seeing.  We are spoiled for choice at this conference, and I am definitely looking forward to seeing old friends and making some new ones.\n<\/p>\n",
        "date": "2010-05-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Off to TEK-X",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/05\/17\/off-to-tek-x\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In a previous blog post I showed some very basic techniques for using Phing for doing deployment.  As with any good deployment process, once you let people know that there is a flexible deployment tool other people start asking you to new things.<\/p>\n\n<p>\n\"Hey Chris, can you set things up so that whenever someone runs one of those deployment scripts, we send an email to our support mailbox of all the files that were pushed up since the last deploy?\"  After pausing for a minute to figure out how I would do it (the quick answer was \"no idea\") I said \"Sure, I'll see what I can do.\"\n<\/p>\n\n<p>\nSo I stood in front of my whiteboard and proceeded to sketch out an idea of how I would want to do such a thing.  Luckily I could cheat and look at how Capistrano did it.  Because the way that they do it makes so much sense, so I duplicated it quick-and-dirty style.  A big thanks goes out to my friend <a href=\"http:\/\/www.derekmartin.ca\/\">Derek<\/a> for pointing me in the right direction.\n<\/p>\n\n<p>\nSo, the way to make this happen is as follows:\n<ol>\n<li>Read in a file inside your current deployment that contains the date of your last deployment<\/li>\n<li>Check your code out of your version control system into <app ROOT>\/releases\/<date format><\/date><\/app><\/li>\n<li>Symlink <app ROOT>\/releases\/<date format> to <app ROOT>\/current<\/app><\/date><\/app><\/li>\n<li>Write a file into <app ROOT>\/current that contains the date of the last deploy.\n<\/app><\/li><\/ol>\n<\/p>\n\n<p>Here's what it looks like as a Phing script<\/p>\n\n<pre><code>&lt;?xml version=\"1.0\"?&gt;                                                                               \n&lt;project name=\"build\" default=\"main\"&gt;\n    &lt;property name=\"exportdir\"  value=\"\/var\/www\/app\" \/&gt;\n    &lt;property name=\"svnpath\" value=\"\/usr\/bin\/svn\" \/&gt;\n    &lt;property name=\"repo\" value=\"svn+ssh:\/\/path\/to\/repo\" \/&gt;\n    &lt;tstamp&gt;\n        &lt;format property=\"build.time\" pattern=\"%Y%m%d%H%I%S\" \/&gt;\n        &lt;format property=\"newdeploy.date\" pattern=\"%Y-%m-%d %H:%I:%S\" \/&gt;\n    &lt;\/tstamp&gt;\n    &lt;property file=\"${exportdir}\/current\/deploy.properties\" \/&gt;\n    &lt;target name=\"main\" depends=\"svnexport\"&gt;\n        &lt;exec command=\"rm -f ${exportdir}\/current\" escape=\"false\" \/&gt;\n        &lt;exec command=\"ln -s ${exportdir}\/releases\/${build.time} ${exportdir}\/current\" escape=\"false\" \/&gt;\n        &lt;exec command=\"chmod -R 777 ${exportdir}\/current\/tmp\" escape=\"false\" \/&gt;\n        &lt;exec command=\"chown -R scriptkiddie:company ${exportdir}\/current\" escape=\"false\" \/&gt;\n        &lt;exec command=\"chmod -R ug+rw ${exportdir}\/current\" escape=\"false\" \/&gt;\n        &lt;exec command=\"echo 'deploy.date=${newdeploy.date}' &gt;&gt; ${exportdir}\/current\/deploy.properties\" \/&gt;\n        &lt;exec command=\"svn log -r '{${deploy.date}}':'{${newdeploy.date}}' ${repo} | mail -s 'Deployment Of FizzBuzz in production' support@fizzbuzz\" \/&gt;\n    &lt;\/exec&gt;&lt;\/target&gt;\n    &lt;target name=\"svnexport\"&gt;\n        &lt;svnexport svnpath=\"${svnpath}\"\n            username=\"${username}\"\n            password=\"${password}\"\n            nocache=\"true\"\n            repositoryurl=\"${repo}\"\n            todir=\"${exportdir}\/releases\/${build.time}\"\/&gt;\n    &lt;\/target&gt;\n&lt;\/project&gt;\n<\/code><\/pre>\n\n<p>The key was figuring out the best way to send SVN log information via email.  Leave it to the UNIX way of piping output to provide with the best solution totally within Phing.\n<\/p>\n",
        "date": "2010-04-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "More Awesome Deployment Using Phing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/04\/30\/more-awesome-deployment-using-phing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I have been suffering from a major case of blogger's block, so I reached out to the lucky people who follow me on Twitter to ask them about some topics to talk about on the blog.  Thanks to them I've got at least two blog posts coming.  Credit to this one goes to Neil Crookes (who I met at the first CakeFest conference in Orlando) who suggested I talk about <a href=\"http:\/\/twitter.com\/neilcrookes\/status\/12119140914\">deployment issues<\/a>\n<\/p>\n\n<p>What's that you are saying?  You thought I was using <a href=\"http:\/\/capify.org\">Capistrano<\/a> to do deployments at work?  Gentle reader, things change.  All my work in trying to automate deployments is designed to allow me to do a deployment either from my own laptop or remotely on the server where it's run.  Tools like Capistrano and <a href=\"http:\/\/phing.info\">Phing<\/a> let me do that.  Sure, I could cobble together my own solution using rsync or shell scripts, but my experience telecommuting has taught me that if you want others to use your tools, they have to be tools that can be used by others.\n<\/p>\n\n<p>While Capistrano is certainly up to the task of deploying my own personal projects, I had nothing but problems getting people OTHER than myself to get it up and running.  You wouldn't think that getting Ruby and then assorted gems installed on a non-Windows machine would be that hard.  Apparently it is.  So what was my alternate solution?  Create something that can be run on the server where the code is going to be deployed.\n<\/p>\n\n<p>\nAs a guy who is always up to his neck in the <a href=\"http:\/\/www.jedi.be\/blog\/2010\/02\/12\/what-is-this-devops-thing-anyway\/\">devops environment<\/a> (with a tip of the hat to <a href=\"http:\/\/twitter.com\/brianlmoon\">Brian Moon<\/a> for bringing this term to my attention) I am determined to NOT be the only one who can do deployments.  It's 2010, the year we make contact, and there is no reason that my boss, when he alters some marketing copy on our main web site, should not be able to push those changes himself (with the side-effect being leaving me out of it).  With a little work and some digging, I got Phing to do it for me.\n<\/p>\n\n<p>\nLike many awesome tools with lots of documentation, Phing suffers from a lack of easy-to-find tutorials covering the exact things I wanted to do.  Or sure, I eventually tracked it all down (with the help of the best support group in the world, Twitter) but I'm guessing this a trend that will not go away.\n<\/p>\n\n<p>\nSo, being the lazy sort, I set out to duplicate how Capistrano does their deploys:\n<ol>\n<li>Check out the latest version of code from HEAD on your repo (SVN in this case)<\/li>\n<li>Create a new \"current\" directory<\/li>\n<li>Symlink the latest checkout (which is in release\/yyyymmddhhmmss) to current<\/li>\n<\/ol>\nThere are some other steps in here that I use as well that are specific to my applications but these are the basics.\n<\/p>\n\n<p>Why the symlink method?  Capistrano allows you to also rollback to a previous deployment, but I haven't gotten around to implementing that feature with the new Phing-based setup.  I never make mistakes that need to be rolled back like that.  Yes, I'm kidding.\n<\/p>\n\n<p>So, what would a build script to cover the basics look like?\n~~~\n< ?xml version=\"1.0\"?>                                                                               \n<project name=\"build\" default=\"main\">\n    <property name=\"exportdir\"  value=\"\/var\/www\/foo\" \/>\n    <property name=\"svnpath\" value=\"\/usr\/bin\/svn\" \/>\n    <property name=\"repo\" value=\"REDACTED\" \/>\n    <tstamp>\n        <format property=\"build.time\" pattern=\"%Y%m%d%H%I%S\" \/>\n    <\/tstamp>\n    <target name=\"main\" depends=\"svnexport\">\n        <exec command=\"rm -f ${exportdir}\/current\" escape=\"false\" \/>\n        <exec command=\"ln -s ${exportdir}\/releases\/${build.time} ${exportdir}\/current\" escape=\"false\" \/>\n    <\/target>\n    <target name=\"svnexport\">\n        <svnexport svnpath=\"${svnpath}\"\n            nocache=\"true\"\n            repositoryurl=\"${repo}\"\n            todir=\"${exportdir}\/releases\/${build.time}\"\/>\n    <\/target>\n<\/project>\n~~~ \nI know there are XML haters out there, but that's a readable configuration file right there.  One of the things I did was to remove any user name and password information from the config file.  You never know if you'll get cracked by a script kiddie exploit and someone reads a configuration file full of critical information.  Call me paranoid, butyaneverknow.\n<\/p>\n\n<p>\nSo, after you install Phing then to run things you just need to type 'phing -f <path to deploy file>'.  In our case, I then get prompted for a password, as the user names on the servers are the same as for the SVN repo.\n<\/path><\/p>\n\n<p>So what else do I do when I deploy?  There is always some clean-up work to be done after the fact, so I add a few more actions to the file:\n~~~\n        <exec command=\"chmod -R 777 ${exportdir}\/current\/tmp\" escape=\"false\" \/>\n        <exec command=\"chown -R user:group ${exportdir}\/current\" escape=\"false\" \/>\n        <exec command=\"chmod -R ug+rw ${exportdir}\/current\" escape=\"false\" \/>\n~~~ \nI won't get into the details of what I'm doing there, but you can execute any command you want on the server, so long you have permissions to do so. \n<\/p>\n\n<p>So, sometimes you are lazy and don't want to mess around with symlinks and figuring out how to roll things backwards.  Here's how you could do a deployment using Phing that simply updates a directory that you checked out using SVN already:\n~~~\n< ?xml version=\"1.0\"?>\n<project name=\"build\" default=\"main\">\n        <property name=\"svnpath\" value=\"\/usr\/bin\/svn\" \/>\n        <property name=\"username\" value=\"codemonkey\" \/>\n        <property name=\"exportdir\"  value=\"\/var\/www\/bar\" \/>\n        <target name=\"main\" depends=\"svnupdate\" \/>\n        <target name=\"svnupdate\">\n                <svnupdate svnpath=\"${svnpath}\"\n                        username=\"${username}\"\n                        nocache=\"true\"\n                        todir=\"${exportdir}\"\/>\n        <\/target>\n<\/project>\n~~~ \nAgain, very straight-forward.  Phing is a very powerful tool that can be used for a lot more than just deployments.  Browsing through the documentation gave me some ideas for extending Phing further to meet our deployment needs.  If you deal with PHP all the time, I cannot think of a better tool to help with complex build-and-deploy tasks than Phing.  \n<\/p>\n",
        "date": "2010-04-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "You Asked For It:  Chris' Awesome But Short Guide To Deployment Using Phing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/04\/14\/you-asked-for-it-chris-awesome-but-short-guide-to-deployment-using-phing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the things I (foolishly perhaps) promised myself when I started up a new project at work was that I was going to use Test Driven Development (or TDD for short).  I advocated using a <a href=\"http:\/\/framework.zend.com\">web application framework that supports good testing practices<\/a> and discussed how it would be beneficial when trying to track down and solve bugs to have a set of tests.  I ran through the impact of my horrible decision to use a framework without a good culture of testing in a previous project:  fixing things became tedious as I could not run automated tests to verify that things were working properly.\n<\/p>\n\n<p>But a funny thing has happened while building the new application.  Sadly, there are no automated tests, and the question I've been asking myself is \"other than being lazy as hell, why did you not write tests?\".  The answer I seem to have come up with (or justified is probably the better word) is \"I don't see anything complicated in what I'm doing that I need to write a test for.\"  Before you dismiss my thoughts on this, consider the architecture of what I've built:\n<\/p>\n\n<p>\nWe have a backend consisting of MySQL with two distinct databases on it:  one containing raw stats for sporting events, the other summarized records about fantasy points accumulated by players.  My thought was to make the database do all the work of crunching the numbers for me as a daily cron job and then the web front end only needs to do reads.  With proper indexing of the tables, performance is at an acceptable level with a full season's set of test data.  Sounds like a pretty decent strategy to me.\n<\/p>\n\n<p>\nThe scripts that collect the raw data and pre-calculate fantasy point totals are written in Python.  The web site that displays the fantasy points info was done with Zend Framework.  So what sort of tests should I have written for this.  I've come around to the idea that you should write tests for things that are non-trivial.  Then you get into the problem of deciding what is non-trivial:\n<ul>\n<li>Verify that point totals are being calculated correctly<\/li>\n<li>Verify that when players are assigned to teams in our admin panel they actually end up, you know, being on the proper team<\/li>\n<\/ul>\nEvery else seems to me to be, well, not worth testing.  Make sure teams are sorted in order of total fantasy points?  Database does that for me.  Make sure list of players for a specific team contain expected players for a team?  Um, database does that for me(?).  I can verify that players are properly changing teams in the admin panel by hand.  Of course, I shouldn't be testing things by hand, but I'm wondering if I'm either missing the point or have stumbled upon something here.\n<\/p>\n\n<p>\n<b>Am<\/b> I missing something here?  Am I doing it wrong? I do believe I need some tests, but only for the things that are not super-obvious.  I'd appreciate people's thoughts on this.  Maybe I just need someone else to look at it the app as a whole and say \"we should be testing for the following things\".  The curse of the lone programmer maybe?\n<\/p>\n",
        "date": "2010-03-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Is There A More Practical Approach To TDD?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/30\/is-there-a-more-practical-approach-to-tdd\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><a href=\"http:\/\/framework.zend.com\/manual\/en\/zend.form.html\">Zend_Form<\/a> is a super-powerful, force-of-nature tool.  By force-of-nature I mean it does all this crazy stuff, and you can see it doing it, but I am not alone in admitting that taming it sometimes is very difficult.  When building tools to make form programatically you either severely limit peoples options or make it so flexible that there are multiple ways to get something done.  Given the concept that Zend Framework \"treats you like an adult\" (I cannot find the blog post where I read this) it is not surprising that Zend_Form takes the flexible route.\n<\/p>\n\n<p>\nBefore I go any further, thanks (again) to <a href=\"http:\/\/twitter.com\/elazar\">@elazar<\/a> and to <a href=\"http:\/\/akrabat.com\/\">Rob Allen<\/a> aka <a href=\"http:\/\/twitter.com\/akrabat\">@akrabat<\/a> for helping me solve this particular problem.\n<\/p>\n\n<p>\nOkay, so onto my problem.  I was creating a page for a fantasy baseball draft application to process transaction requests.  You could do one thing, and one thing only:  make a request to add a free agent to your team and what player off your team you wanted to drop.  Since I needed to locate form elements in specific places in the layout, I didn't do the usual < ?= $form ?> in my template, instead I created a bunch of setX methods, with X representing a specific form element.  Then, in my templates I simply did < ?= $form->X ?> where X represents the specific element.  Let me show you what I mean:\n<\/p>\n\n<pre><code>            &lt;form action=\"\/baseball\/&lt;?= $this-&gt;league ?&gt;\/transactions\/process\" method=\"post\"&gt;\n                &lt; ?= $this-&gt;transactionForm-&gt;teamId ?&gt;\n                &lt; ?= $this-&gt;transactionForm-&gt;shortLeagueName ?&gt;\n                &lt;table width=\"100%\"&gt;\n                    &lt;tr&gt;\n                        &lt;th width=\"50%\" align=\"center\"&gt;Players on your Team&lt;\/th&gt;\n                        &lt;th width=\"50%\" align=\"center\"&gt;Players Available&lt;\/th&gt;\n                    &lt;\/tr&gt;\n                    &lt;tr&gt;\n                        &lt;td align=\"center\" valign=\"top\"&gt;\n                            &lt; ?= $this-&gt;transactionForm-&gt;players ?&gt;\n                        &lt;\/td&gt;\n                        &lt;td align=\"center\" valign=\"top\"&gt;\n                            &lt;div id=\"freeAgentList\"&gt;\n                                &lt; ?= $this-&gt;transactionForm-&gt;freeAgents ?&gt;\n                            &lt;\/div&gt;\n                        &lt;\/td&gt;\n                    &lt;\/tr&gt;\n                &lt;\/table&gt;\n                &lt;input type=\"submit\" id=\"transactionFormSubmit\" value=\"Request Selection\"\/&gt;\n            &lt;\/form&gt;\n<\/code><\/pre>\n\n<p>\nI did this figuring it would give me lots of flexibility.  Then, the pain started.\n<\/p>\n\n<p>\nI kept wondering why every time I validated the form, it kept coming back as true.  I had a requirement that to have a successful transaction request, they had to select both a player to drop from their own team AND a free agent to add.  I had put into the form validation that a free agent was required, but it never seemed to be triggered.  Off to <a href=\"http:\/\/stackoverflow.com\">Stack Overflow<\/a> I went to ask for help, along with pleas for help on Twitter.  I had thought I was doing something subtly wrong, and I was right.\n<\/p>\n\n<p>\nHere's the finished, working code.  I will explain what I had been doing wrong.  By the way, if you can think of a better way to do something of the more \"hackish\" stuff in there, I'd appreciate it.\n<\/p>\n\n<p>\n~~~\n    public function indexAction()\n    {\n        $form = new Baseball_Form_Transactions();\n        $options = array(\n            'teamId' => $this->teamId,\n            'position' => 'C',\n            'leagueShortName' => $this->league,\n            'status' => 0\n        );\n\n        $form->setMyPlayers($options);\n        $form->setFreeAgents($options);\n        $form->setTeamId($options);\n        $form->setShortLeagueName($options);\n\n        if ($this->getRequest()->isPost()) {\n            \/\/ This is hack to make sure we pull back the list of free agents for\n            \/\/ the player's position\n            $postData = $this->_request->getPost();\n            $player = Doctrine::getTable('Player')->find($postData['players']);\n            $options['position'] = $player['position'];\n            $form->setFreeAgents($options);\n\n            if ($form->isValid($this->_request->getPost())) {\n                $data = $form->getValues();\n                $leagueInfo = Doctrine::getTable('League')->findOneByShortName($data['shortLeagueName'])->toArray();\n\n                \/\/ Create the request top drop an existing player       \n                $transactionInfo = array(\n                    'league_id' => $leagueInfo['id'],\n                    'team_id' => $data['teamId'],\n                    'player_id' => $data['players'],\n                    'type' => 'drop',\n                    'target_team_id' => 0,\n                    'transaction_date' => date('Y-m-d H:m:s'),\n                    'shortLeagueName' => $data['shortLeagueName'],\n                    'group_id' => uniqid()\n                );\n                $transaction = new Transaction();\n                $transaction->fromArray($transactionInfo);\n                $transaction->save();\n\n                \/\/ Now we do the request to add a player\n                $transactionInfo['team_id'] = 0;\n                $transactionInfo['player_id'] = $data['freeAgents'];\n                $transactionInfo['target_team_id'] = $data['teamId'];\n                $transactionInfo['type'] = 'add';\n                $transaction = new Transaction();\n                $transaction->fromArray($transactionInfo);\n                $transaction->save();\n                $this->_flashMessenger->addMessage('Added transaction');\n            }\n        }\n\n        $this->view->transactionForm = $form;\n        $this->view->messages = $this->_flashMessenger->getMessages();\n        $transaction = new Transaction();\n        $this->view->transactions = $transaction->byTeam($options);\n    }\n~~~\n<\/p>\n\n<p>The big mistake?  I was not setting up all the form elements via my setX calls BEFORE I did the validation.  Because I didn't, those elements didn't exist, and therefore the validation never got called.  See, I told you my mistake was (a) dumb and (b) subtle.\n<\/p>\n\n<p>\nI think I did the right thing with my method of creating the form elements outside of the init() method to give me the ability to layout things where I wanted them.  I'm interested in finding out how other people have solved the same problem.\n<\/p>\n",
        "date": "2010-03-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "\\\"U R Doin It Wrong\\\" - Adventures with flexible forms in Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/19\/u-r-doin-it-wrong-adventures-with-flexible-forms-in-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Out of the ashes of a severe personality clash in an <a href=\"http:\/\/cakephp.org\">open source PHP web application framework project<\/a> rose a new framework proclaiming that it <a href=\"http:\/\/rad-dev.org\/lithium\/wiki\">simply sucks less than all the others<\/a>.  Lithium, otherwise known as li3, is the latest PHP application framework to come onto the scene.  I know what you're saying.  *Yawn*.\n<\/p>\n\n<p>\nAs far as I can tell, Lithium is trying it's hardest to be fast, lightweight, and use all the features that PHP 5.3 has to offer.  I am unable to use it at work for a variety of reasons (not stable, required PHP 5.3 only, <a href=\"http:\/\/twitter.com\/nateabele\">Nate<\/a> is always picking on me via IM) but I am more interested in the ideas that are coming out of it.\n<\/p>\n\n<p>\nIt is using all the newest hawtness in the PHP world:  namespaces, closures, Phar, late static binding.  I could go on, but probably most of these things mean nothing to you until you actually need them.  In the framework world, namespaces are a big deal, an essential tool to avoiding collisions with 3rd party code you might want to integrate into your project.  Closures are very familiar to those who've done work with Ruby or Javascript.  Phar allows for some unarchiving on the fly of code, even potentially distributing your application as an archive that can be run.  Late static binding is something I'm trying to comes to grips with, as I have either never come across a need for it or never realized that I did and have implemented a workaround for it not realizing there is a simpler solution.\n<\/p>\n\n<p>\nNone of these are what I want to talk about.  I want to talk about something that I feel is a very underrated part of Lithium, the ability to define filters.  This is a concept that you find in <a href=\"http:\/\/en.wikipedia.org\/wiki\/Aspect-oriented_programming\">Aspect-oriented programming<\/a>, and one that I imagine most programmers have never considered.  Here's why I think it's a big deal.\n<\/p>\n\n<p>\nMost frameworks are designed around an OOP paradigm.  Yes, some mix them together (I'm looking at *you* CodeIgniter), but by and large you get the job done by extending on a base model \/ controller \/ helper \/ whatever to create new functionality.  Sometimes this is not avoidable.  But what AOP says is that there is another way, a way that Lithium has adopted as well.\n<\/p>\n\n<p>\nHence the creation of \"filters\".  As far as I can tell (and I'm sure I will be jumped upon if I am wrong) the purpose of filters in Lithium is to allow you to add functionality without extending the class itself.  When I saw that I immediately understood why that is so awesome.\n<\/p>\n\n<p>\nThe idea of callbacks is also very similar:  if X happens, run code Y.  A staple of jQuery, Rails and probably other projects I have forgotten to mention.  The idea is still the same though.  In Garrett Woodworth's <a href=\"http:\/\/www.slideshare.net\/gwoo\/li3-ocphp\">presentation about Lithium to the Orange County PHP Users Group<\/a> he goes  over some solid examples of filters including:\n<ul>\n<li>automatic use of the <a href=\"http:\/\/mirror.facebook.net\/facebook\/xhprof\/doc.html\">XHProf<\/a> for code profiling<\/li>\n<li>automatic setting of parameters upon saving a pasted bit of code<\/li>\n<\/ul>\n<\/p>\n\n<p>It's also been used to <a href=\"http:\/\/misja.posterous.com\/playing-with-lithium\">automatically change string record ID's into a MongoDB ID<\/a> and <a href=\"http:\/\/latestatic.com\/integration-testing-or-how-i-learned-to-stop\">graceful failing of an integration test suite when an error occurs<\/a>.\n<\/p>\n\n<p>\nThese filters remind me of behaviors in Rails (and in CakePHP as well) and makes me wonder if signals are the same thing in the Django world.  All in all, this looks to me to be a better way to extend functionality than actually overriding existing methods or hacking at something deep inside a class.  Figure out what functionality you want, figure out where it needs to be called, and add your filter.\n<\/p>\n",
        "date": "2010-03-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Expand your programming mind:  filters in Lithium",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/16\/expand-your-programming-mind-filters-in-lithium\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nSome of my long-time readers have seen me mention a long-festering (I believe that is the correct term at this point) project that I dubbed <a href=\"http:\/\/www.rallyhat.com\">Rallyhat<\/a>.  It first started out as a \"figure out when some baseball teams are in town and buy tickets\" and then morphed into \"a tool for helping people plan road trips by tagging destinations with information\".\n<\/p>\n\n<p>\nWhat it really became was a tool for me to learn how to write a solid web-app using Python and Django.  I'm happy to say I finally have a version that I feel comfortable sharing with the rest of you.  So feel free to check it out.  Pound on it, try and break it and I will also read your feedback and comments.  I'm sure you can figure out my email address...\n<\/p>\n\n<p>\nAlso, I've found it has been easy to pick up not only Python and Django itself.  I'm ready to tackle some other applications using Django, and I have one just in mind.  \n<\/p>\n\n<p>\nYes, I am aware at how spartan it looks right now.  I'm more focussed on functionality than how it looks right now.  I've already gotten some interesting ideas on expanding the app to include adding in images to go with locations, so we'll see how that goes.\n<\/p>\n\n<p>\nFor those who are curious, I built it using the following:\n<ul>\n<li>Python 2.6<\/li>\n<li>Django 1.2 beta 1<\/li>\n<li><a href=\"http:\/\/couchdb.apache.org\/\">CouchDB<\/a> to store the trip plans<\/li>\n<li><a href=\"http:\/\/code.google.com\/p\/couchdb-python\/\">couchdb-python<\/a><\/li>\n<li><a href=\"http:\/\/code.google.com\/p\/geopy\/\">GeoPy<\/a><\/li>\n<li><a href=\"http:\/\/bitbucket.org\/ubernostrum\/django-registration\/\">django-registration<\/a><\/li>\n<li>Google Maps services<\/li>\n<li><a href=\"http:\/\/github.com\/robhudson\/django-debug-toolbar\">Django Debug Toolbar<\/a><\/li>\n<li>deployed using Nginx + <a href=\"http:\/\/github.com\/benoitc\/gunicorn\">Gunicorn<\/a>, configured with the help of <a href=\"http:\/\/twitter.com\/ericlo\">Eric Florenzano's<\/a> awesome Django Advent article about <a href=\"http:\/\/djangoadvent.com\/1.2\/deploying-django-site-using-fastcgi\/\">deploying Django using FastCGI<\/a> because it mentioned how you could use Gunicorn<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2010-03-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat lives!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/12\/rallyhat-lives\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>This is the final in a series of blog posts about programmers who make me feel stupid due to the amazing work they've done and their ability to explain it.  Check out my thoughts on <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/01\/people-who-make-me-feel-stupid-geoffrey-grosenbach\/\">Geoffrey Grosenbach<\/a>, <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/02\/people-who-make-me-feel-stupid-antirez\/\">Antirez<\/a>, <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/03\/people-who-make-me-feel-stupid-rich-hickey\/\">Rich Hickey<\/a> and <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/04\/people-who-make-me-feel-stupid-ezra-zygmuntowicz\/\">Ezra Zygmuntowicz.<\/a><\/i><\/p>\n\n<p>I am, for lack of a better phrase, a framework whore.  I use frameworks to build all my web applications.  Why?  Because I prefer to stand on the shoulder of giants rather than constantly reinvent things.  But in many ways, my addiction to frameworks is counter-productive because I find myself constantly wanting to use a new one.  So I end up churning instead of pushing forwards.   I've been learning Zend Framework, and I'm struggling.  Too many ways to do things, too much documentation that provides me with a tease of what it is I'm trying to do but not the full solution.  Then I have to ask people for help and feel stupid for not being the Rock Star Developer(tm) with all the answers.  \n<\/p>\n\n<p>\nSo, even though I use Zend Framework now (unless I change my mind, get pissed off and go with the <a href=\"http:\/\/toys.lerdorf.com\/archives\/38-The-no-framework-PHP-MVC-framework.html\">no-framework framework<\/a>) I do watch other frameworks.  While I might not agree with some features of <a href=\"http:\/\/www.symfony-project.org\/\">Symfony<\/a>, I am astounded at what <a href=\"http:\/\/fabien.potencier.org\/\">Fabien Potencier<\/a> continues to produce.\n<\/p>\n\n<p>\nCreating a framework is an achievement in itself.  Creating a framework in a language as your first real PHP project, like Fabien did, is nothing short of amazing.  Symfony is a full-stack framework, the kind of comfy and warm blanket I like to use when building an application on a short timeline.  Like many other full-stack frameworks, they also wrote stuff that other people had already written.  It's a common thing, everyone goes through the \"not invented here\" phase.  Sometimes, that's the only way you learn how to do something.\n<\/p>\n\n<p>\nBut as Symfony glides smoothly along towards a 2.0 release, imagine the shock of people when they see Fabien talk about how he is going to use parts of Zend Framework in the 2.0 core and dump existing components like their own unit-testing framework in favour of PHPUnit.\n<\/p>\n\n<p>\nIn the blog post about <a href=\"http:\/\/www.symfony-project.org\/blog\/2010\/03\/04\/symfony-2-0-and-the-php-ecosystem\">decisions about Symfony 2<\/a>, he mentions the logic surrounding what appears to be a new public philosophy from Symfony: \"Use what's out there; realise it sucks; write your own; wait until others suck less; dump your own; use other.\"\n<\/p>\n\n<p>\nThis is a very refreshing stance for the guiding power of a popular web application framework to take.  It reminds me of when Rails and Merb decided to quit fighting and instead become the same project in Rails 3.  The hater in me thinks that it's because Merb was becoming what Rails wanted to be, so kudos to the effort to rework Rails to make it better.  After all, that's the goal -- to produce better, faster software.\n<\/p>\n\n<p>\nSo why does Fabien make me feel stupid:  <b>His constant willingness to do the right thing for his project, even if it means tossing away stuff that spent a long time working on.<\/b>  Again, just like all the others I've talked about here, he does an amazing job of explaining what he did in a way that makes it obvious.  His thoughts on <a href=\"http:\/\/fabien.potencier.org\/article\/11\/what-is-dependency-injection\">dependency injection<\/a> helped me to understand why it's important to consider it when building your applications.  I've written code that uses it and code that does not.  I found it easier to refactor code when I used dependency injection, but that just might be me.\n<\/p>\n\n<p>\nThanks for following this series this week.  I hoped I've exposed you to some people you might not have heard of or known about their work.\n<\/p>\n",
        "date": "2010-03-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Who Make Me Feel Stupid: Fabien Potencier",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/05\/people-who-make-me-feel-stupid-fabien-potencier\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>This is the 4th out of 5 blog posts about programmers who I find make me feel stupid when I read what they write or hear them speak.  Stupid because what they say is so obvious I cannot believe I missed it.  See my thoughts on <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/01\/people-who-make-me-feel-stupid-geoffrey-grosenbach\/\">Geoffrey Grosenbach<\/a>, <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/02\/people-who-make-me-feel-stupid-antirez\/\">Antirez<\/a> and <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/03\/people-who-make-me-feel-stupid-rich-hickey\/\">Rich Hickey<\/a>.<\/i>\n<\/p>\n\n<p>\nNext up is another prominent member of the Ruby community, one that I feel truly deserves the label \"Renaissance Programmer\".  He is <a href=\"http:\/\/brainspl.at\/\">Ezra Zygmuntowicz<\/a>, co-founder of <a href=\"http:\/\/www.engineyard.com\">Engine Yard<\/a>, probably the leader in helping people deploy Rails applications of all shapes and sizes.  Ezra seems to have done it all, from Rails work, to <a href=\"http:\/\/merbivore.com\/\">Merb<\/a>, to the Ruby VM <a href=\"http:\/\/rubini.us\/\">Rubinus<\/a>.\n<\/p>\n\n<p>\nIf I remember correctly, I first encountered Ezra and his work (and his awesome last name) during my Ruby on Rails research.  Realizing that Rails was the dominate framework in that space, I wondered what the alternatives were.  That lead me to Merb.  Unfortunately at the time it was not well-documented, so I drifted into other things (like so many other times, I'm sensing a pattern here).  Then I started hearing about the efforts to create an alternative to the standard Ruby virtual machine, with the goal of creating, I imagine, a faster Ruby environment.\n<\/p>\n\n<p>Much as I cannot imagine writing my own programming language, I could not imagine creating a virtual machine based on running code in an already-established language.  Then I saw <a href=\"http:\/\/www.youtube.com\/watch?v=TcMklv40YMY\">this talk<\/a> Ezra gave about Merb, Rubinus and the stack that Engine Yard uses.  What blew me away was when he started explaining *how* he was going about implementing Rubinus.  It made so much sense.\n<\/p>\n\n<p>\nSee, in the Ruby world you can use what they call Matz' Ruby Interpreter, or CRuby as a reference point.  Since there is no official spec, the MRI is used.  So if you want to create your own Ruby virtual machine, it's as simple as looking at how the MRI implements functionality and then copy it in your own VM.  Repeat until your own virtual machine passes all the tests in the <a href=\"http:\/\/rubyspec.org\/\">RubySpec<\/a> project and bingo!  You have a (hopefully as close to compatible with the MRI) virtual machine for running Ruby.  It seems that <a href=\"http:\/\/en.wikipedia.org\/wiki\/YARV\">YARV<\/a> is a virtual machine (I believe it is a bytecode interpreter) that is included with the latest version of Ruby at this writing, 1.9.\n<\/p>\n\n<p>\nSo why does Ezra make me feel stupid: <b>He has fully immersed himself in the Ruby world from the virtual machine to the language implementation to frameworks that sit on top of it.  Like most of the people I talk about in this series, he also knows how to explain these things to people in such a way that you do not realize what awesome work he is doing.<\/b>\n<\/p>\n\n<p>\nI may not be doing anything with Ruby any more, but how can you not get interested in the nuts-and-bolts of a language and virtual machines in general when someone like Ezra explains it to you?!?  In the PHP world, Facebook recently announced the release and open sourcing of <a href=\"http:\/\/wiki.github.com\/facebook\/hiphop-php\/\">Hip Hop for PHP<\/a>.  This project takes PHP code, parses it and generates C++ executables.  This is a big deal for Facebook, who is the largest user of PHP out there.  It lets them use approximately 50% fewer servers when delivering PHP-results.  They did the same thing I talked about above:  looked at how PHP implemented functions at the lowest level, and then figured out how to do it in C++.  It's a very unique project, and obviously not for everyone.  But again, an awesome case study on creating virtual machines \/ alternate runtimes for an existing programming language.\n<\/p>\n",
        "date": "2010-03-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Who Make Me Feel Stupid: Ezra Zygmuntowicz",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/04\/people-who-make-me-feel-stupid-ezra-zygmuntowicz\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>This is the third in a series of blog posts where I talk about people who's skills as programmers make me feel stupid.  Check out my thoughts on <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/01\/people-who-make-me-feel-stupid-geoffrey-grosenbach\/\">Geoffrey Grosenbach<\/a> and <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2010\/03\/02\/people-who-make-me-feel-stupid-antirez\/\">Antirez<\/a>.<\/i>\n<\/p>\n\n<p>\nAs a person who learned the hard way about how tough it is creating web applications that can handle state and concurrency  issues (if you've ever seen MySQL replication lag times as high as 30 *minutes* you can sympathize), the rise of languages designed from the ground up to support concurrency has caught my eye.  If you've heard of <a href=\"http:\/\/erlang.org\">Erlang<\/a> or <a href=\"http:\/\/www.haskell.org\/\">Haskell<\/a> you are somewhat familiar with the topic.\n<\/p>\n\n<p>\nThen one day I ran across <a href=\"http:\/\/clojure.org\/\">Clojure<\/a>, a language that is a dialect of Lisp but runs on the JVM.  My, my, what in interesting combination.  I've talked about Clojure before, but I have not talked about the amazing person behind it, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Rich_Hickey\">Rich Hickey<\/a>.\n<\/p>\n\n<p>\nThe idea of <a href=\"http:\/\/createyourproglang.com\/\">creating your own programming language<\/a> is one that I find extremely intimidating, not having a formal background in computer science.  I have a vague idea of how you would do it:  write parsers for your code and then compile them into byte code that can be run by something.  Very simplistic, I know.\n<\/p>\n\n<p>\nSo Rich Hickey is a one of these programming gurus who I am sure is a super-nice guy but I would be totally intimidated to have any sort of meaningful programming-related discussion with.  First of all, he's a Lisp hacker.  Some of my friends have described Lisp as \"the cockroach of the programming world, which will be around long after the sun of other languages have dimmed\" and I can't say that I disagree much with that statement.  For someone who learned to program by teaching himself PHP, Lisp's syntax takes a lot of getting used to.  \n<\/p>\n\n<p>But then I think the best trick was making Clojure run on the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Jvm\">JVM<\/a>.  Why do I think this is significant?  It means that if there is a feature or a library that doesn't exist in Clojure, you can always use a Java equivalent (if such a one exists).  In Tim Bray's \"Concur Next\" series he showed an example where he used a Java library in Clojure to help him speed things up.\n<\/p>\n\n<p>\nSo not only does he have a well-designed and well-thought-out programming language, he is also great at explaining programming concepts.  Go and watch this video on the topic of <a href=\"http:\/\/www.infoq.com\/presentations\/Are-We-There-Yet-Rich-Hickey\">basic principles like state, identity, value, time, and many others<\/a> in order to understand how to build concurrent and parallel systems.  Fascinating talk, and I highly recommend seeking out other talks that he's done as well.\n<\/p>\n\n<p>\nAll this stuff is absolutely fascinating to me, because my entire programming career has been spent in the stateless environment of the web.  Oh sure, we can fake state and concurrency using sessions and cookies, but they are really just hacks.  Does a web application need to be stateful and\/or concurrent?  The answer is, of course, it depends. ;)  Online games with multiple participants definitely need to worry about sharing state across multiple clients, and any web application that is taking large amounts of data and processing it (like munging it together based on aggregate conditions) could benefit from being able to crunch the data concurrently, with all jobs reporting stuff as they go.  Any task that would benefit from being broken down into smaller tasks that can be run at once is a candidate for concurrency.\n<\/p>\n\n<p>\nSo, why does Rich Hickey make me feel stupid?  <b>Not only is he also capable of explaining the hows and whys of a concurrent programming language, he is encouraging people to think ahead to the next generation of programming problems and potential solutions to those problems.<\/b>.  It's highly unlikely I will ever create a full-blown, general-purpose programming language.  But Rich Hickey's work has gotten me thinking about programming in event-driven environments, and wondering what tasks that my current applications perform could benefit from concurrency and parallelism.\n<\/p>\n",
        "date": "2010-03-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Who Make Me Feel Stupid: Rich Hickey",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/03\/people-who-make-me-feel-stupid-rich-hickey\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This is the second of a five-part series where I highlight some developers who are doing work or espousing practices that make me feel stupid and realize where I need to push my skills towards.  Today's source of inspiration:  the man know by many online as <a href=\"http:\/\/antirez.com\/\">Antirez<\/a>, Italian software developer Salvatore Sanfilippo.<\/p>\n\n<p>Antirez is the driving force behind <a href=\"http:\/\/code.google.com\/p\/redis\/\">Redis<\/a>, which is described as \"an advanced key-value store\" where it holds your dataset in memory at all times but writes them out to disk in a couple of different ways depending on your choices (either from time-to-time or all the time to an append log, depending on what level of consistency you need from the data).\n<\/p>\n\n<p>When I first started watching the whole <a href=\"http:\/\/en.wikipedia.org\/wiki\/NoSQL\">NoSQL<\/a> movement, I remember seeing Redis in there as an option there.  However, I didn't know much about Redis until I noticed that my friend <a href=\"http:\/\/twitter.com\/jperras\">Joel Perras<\/a> was following this guy with an awesome mop of hair in his Twitter avatar and a cool nickname.  When I also saw he was the creator of Redis I knew this was a guy I had to follow and see what he was up to.\n<\/p>\n\n<p>\nI won't go into the whole rationale behind the NoSQL movement, but what makes me feel stupid is not just the *way* Antirez has chose to implement his key-value storage solution, but the man himself.  He is one really smart dude.\n<\/p>\n\n<p>\nFirst of all, he might be the most prolific hacker I've seen out there who actually lets people know what he's been up to.  His Twitter stream is full of comments about stuff he's been working on in Redis, some of which I understand and some of which goes right over my head (especially the <a href=\"http:\/\/antirez.com\/post\/redis-virtual-memory-story.html\">stuff about the Virtual Memory work he's done with Redis<\/a> just shows me what I missed by not taking computer science courses.  Too busy teaching myself the new and shiny I guess.\n<\/p>\n\n<p>\nSecond, he spits out this volume of information in English.  Which is NOT his first language.  I couldn't imagine translating technical terms into my second fairly proficient language (which is German, and I understand it spoken way better than I speak it, read it or write it).  I have a hard enough time understanding technical terms written in English, never mind translating them in my head from another language.\n<\/p>\n\n<p>\nSo back to Redis now.  So not only is it a high-performance key-value store, using memory (the fastest storage medium) to store your data, but it also suited for use in a master-slave replication setup (claiming very fast replication speeds, and given the torturous bench marks I have seen Antirez talk about on twitter and his blog, I believe him) but can also do something that a lot of post-relational data stores (perhaps that's a better name than NoSQL) can't do:  unions (am I correct in assuming that is the equivalent of JOINS from the SQL world?), set intersections, comparisons between sets, and even generating sorted results.  I could see using Redis as the data store for the web front end of the corporate fantasy draft application at work.  I'm using a lot of key-value pairs in it, so a hybrid approach would probably work the best if I were to try it.\n<\/p>\n\n<p>\nI mean, when you read that Virtual Memory post how can you *not* feel stupid for failing to see why Redis needs such a thing:  if you are storing everything in memory (remember, disk is the new tape) then you need your use of that memory to be as advantageous as possible and not rely on the operating system to do it for you.  For Redis, you want to keep as much memory available for your data so Antirez felt that he needed to find a way to free up the memory being used by the least-frequently accessed data.  A hard problem to solve for sure, but reading about what he did is just so inspiring.  As a bonus, you also learn some computer science skills along the way.  I felt the same way when I listened to a lecture about building virtual machines for Ruby:  awed and wondering if they teach that sort of stuff in computer science courses.\n<\/p>\n\n<p>While Redis might not be a solution I ever use at work (I am trying to keep our stack from adding too many new components just because I feel like playing with them) it's worth the lost hours reading Antirez' blog to understand all that goes on behind the scenes to make a cool piece of technology usable outside some very narrow scenarios.\n<\/p>\n\n<p>So, in the end, why did Antirez make me feel stupid?  <b>It was because he made me realize that you could take a simple idea (the key-value store) and add all sorts of very desirable features onto it without compromising it's main goal<\/b>.\n<\/p>\n",
        "date": "2010-03-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Who Make Me Feel Stupid: Antirez",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/02\/people-who-make-me-feel-stupid-antirez\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For this upcoming week I am going to be doing 5 blog posts about developers who have been doing work that makes me feel stupid as a developer.  The main reason for this is a week spent on introspection as to not only how I am building applications for my employer but also how I build things on the side.  To be blunt, I'm not happy.  This is not to say that the work isn't interesting (building out corporate fantasy sports draft web front-ends and also plans for our next-gen fantasy gaming platform) but rather that my method of choosing what pieces I glue together have been missing the mark.\n<\/p>\n\n<p>Some of this is due to my desire to always push myself to learn new things, so sometimes the joy of discovery tramples the ability to get things done as quickly as I would like.  So I've been looking around at how other people have been solving problems in an attempt to discover blind spots I've developed.  The first person I found that made me say out loud \"boy, does this guy make me feel stupid\" during this process is <a href=\"http:\/\/geoffreygrosenbach.com\/\">Geoffrey Grosenbach.<\/a>\n<\/p>\n\n<p>\nAbout 5 years ago I was looking to get into the Ruby on Rails world.  I had bought the <a href=\"http:\/\/pragprog.com\/titles\/ruby\/programming-ruby\">Pick Axe Book<\/a> and the 1st edition of <a href=\"http:\/\/pragprog.com\/titles\/rails1\/agile-web-development-with-rails-1st-edition\">the Rails book<\/a>.  Through my online digging I discovered the <a href=\"http:\/\/podcast.rubyonrails.org\/\">Ruby on Rails podcast<\/a>, run at the time by the previously-mentioned Geoffrey Grosenbach.  It was all cool and interesting, and he seemed to have a knack for asking the right kind of questions.  Either that or he was really good at the editing. ;)\n<\/p>\n\n<p>\nAlas, things didn't work out.  I built a Rails site, but it had some problems due to my n00bishness with the framework and the language.  Let's just say I wasn't using Ruby best practices.  The final nail in the coffin for my Ruby aspirations was when I turned down a Rails gig to instead take a telecommuting PHP gig (life choices dictated that one) and I drifted off into other things.  But I kept an eye on what Geoffrey was doing anyway and was happy to see him find success with Peepcode along the way.\n<\/p>\n\n<p>\nThen I came across an awesome blog post from him where he talked about <a href=\"http:\/\/blog.peepcode.com\/tutorials\/2010\/about-this-blog\">how he builds the Peepcode Blog<\/a>.  I read it and was totally blown away, and totally humbled by the simplicity of what he has done.  Rather than simply do some link bait and show you everything he used, you can go and look at it\n<\/p>\n\n<p>\nHe explained that his goal was to produce an \"art blog\" for Peepcode, where every blog post would have it's own unique look to it.  In order to do this, he had to think about what goes into building something like this:\n<ul>\n<li>A CSS grid layout system, because it's really too hard to always come up with your own unique layouts.  A grid makes it easier to make interesting content I think.<\/li>\n<li>A very simple application framework for spitting out static images and HTML. (This was the lightbulb-went-on thing for me, as a blog that does not have comments can be totally static)<\/li>\n<li>A modified version of an existing lightweight blogging engine to fit his needs.<\/li>\n<li>Storing blog content in flatfiles on the system.  Again, without dynamic content why bother with the overhead of storing posts in a database (says the guy using WordPress, one of the favourite targets of criticism by PHP developers who like their code clean and modular)<\/li>\n<li>The use of a markup language to reduce the actual HTML he had to write<\/li>\n<li>The use of a CSS framework to again reduce the need to write actual CSS<\/li>\n<li>A sprinkling of Javascript to add unique features to each page<\/li>\n<\/ul>\n<\/p>\n\n<p>I've read that blog post at least a dozen times now, and still marvel at how frickin' obvious it was to do things the way he did.  It's also obvious that he put a lot of thought into what he needed and the best way to couple things together to make it happen.<\/p>\n\n<p>\nCompare his methods to my current set of decisions as to the various tools to build a web front end for a corporate draft\n<ul>\n<li>A glue framework with lots of components that can be legitimately accused of starting to become bloated<\/li>\n<li>Use of an ORM to spare me from writing SQL to pull in dynamic sports data<\/li>\n<li>Table-driven HTML layouts from the previous generation of the application<\/li>\n<\/ul>\nWhen you start to factor in the time to actually learn not only the framework itself (and also heavily relying on a particular module of it to give me the MVC features I wanted) but the ORM itself, I wonder if it was the right decision.\n<\/p>\n\n<p>\nBecause if I were to break it down in a similar fashion to how the Peepcode blog was built, I'd say I need the following\n<ul>\n<li>lightweight scripting language front-end (in this case PHP because that's what all our other client-facing applications use)<\/li>\n<li>a component to handle dynamic routing of requests, although I could really use web server rewrite rules instead of making the front-end code figure it out.  My mod_rewrite skills have gotten a little better in the last year or so.<\/li>\n<li>An RDBMs because the source data is in a database already, and so few NoSQL solutions allow you to do the kind of grouping and aggregate math functions I need to do that MySQL can handle for me.<\/li>\n<li>An authentication component.  I've written enough of these to know it's easier to use someone else's that just works<\/li>\n<li>An access control component.  I've written enough of these to know it's easier to use someone else's that just works too.<\/li>\n<li>Grid-based CSS framework for layouts so we can use as few tables as possible.<\/li>\n<li>An easy-to-use Javascript library to take care of everything else that I cannot do in the scripting language or via CSS.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nMan, I'm starting to think that <a href=\"http:\/\/toys.lerdorf.com\/archives\/38-The-no-framework-PHP-MVC-framework.html\">Rasmus was right<\/a> with apologies to my friend <a href=\"http:\/\/twitter.com\/chiggsy\">Kevin Beckford<\/a>.  Kevin is of the opinion that main reason to use a framework to build something is because unless you will be the only one ever to write and maintain that application, the rules and structure that a framework gives are essential to help your fellow coders stay on track.  It's like having a common language that you both speak, and easy access to a dictionary (the documentation for that framework).\n<\/p>\n\n<p>\nIn my case, I am using PHP + Zend_Framework + Zend_Application + Zend_Auth + Zend_Acl + Doctrine + MySQL (plus Python on the server to do some data munging)  to build this thing out.  Luckily, no Javascript needed at this point.  So what could I strip out to build it the way I put it above?  We could end up with PHP + Apache rewrite rules + Zend_Auth + Zend_Acl + MySQL + Python, with Blueprint CSS thrown in to help me with the layouts.  Not a *whole* lot of difference from before.\n<\/p>\n\n<p>\nBut of course, I was able to quickly build out admin functionality for the front end due to the ability to map out relationships between tables and having Doctrine pull in all that data and return it to me in a ready-to-go package for easy display.  Also, to be realistic, we are too far into the project to rip all that stuff out and quickly refactor it.  I mean, how do I justify stripping out Doctrine and writing all the \"query, process and stick into variables\" code now?  It's a delicate dance, and it's obvious those decisions need to be made before you start, not when you're experiencing some mild <a href=\"http:\/\/en.wikipedia.org\/wiki\/Buyer%27s_remorse\">Buyer's Remorse<\/a>.\n<\/p>\n\n<p>So, in the end, why did Geoffrey Grosenbach make me feel stupid?  <b>It was because he made me realized that I have a tendency to what to overengineer things a bit, wrapping them in framework solutions when perhaps the more direct route is to couple existing modules together to have a more flexible solution<\/b>.\n<\/p>\n\n<p>\nBut I have at least considered that the tools I was using were going to make it easier to build out the behind-the-scenes stuff.  Sure, I could write all the SQL code myself (I've finally understood the power of joins), but once I've learned how Doctrine does things it becomes super simple to build on the existing work.  \n<\/p>\n\n<p>\nLook at the Peepcode blog setup shows that he was using a bunch of tools already in widespread use in the Ruby and Rails communities.  There are not many equivalences for that stuff in the PHP world (HAML and SASS only have incomplete implementations for use with PHP as far as I can tell) but the approach he used is the one to really think about.  I mean, what would this blog look like if I decided to go the minimalist route, but with tools that I am more comfortable with?  Could I do it with <a href=\"http:\/\/werkzeug.pocoo.org\/\">Werkzeug<\/a> + a simple blog engine + <a href=\"http:\/\/en.wikipedia.org\/wiki\/Textile_(markup_language)\">Textile<\/a> + <a href=\"http:\/\/www.blueprintcss.org\/\">Blueprint CSS<\/a> + jQuery?  I have no spare time as it is, what would this type of project do to me?\n<\/p>\n",
        "date": "2010-03-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Who Make Me Feel Stupid: Geoffrey Grosenbach",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/03\/01\/people-who-make-me-feel-stupid-geoffrey-grosenbach\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you follow me on Twitter you've seen me pissing and moaning about not being able to figure stuff out as I build out my first <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> project in a LONG time.  3 years to be exact.  I had two things that I wanted to add to the project:  (1) a new custom controller to base some other controllers off of and (2) create custom routes for it.  Sounds simple, right?\n<\/p>\n\n<p>\nI have stared into the belly of the beast that is the Zend Framework documentation and have discovered the following truth:  there always seems to be two ways to do something.  For someone just starting out learning a framework (never mind their actual level of experience with PHP itself) this is not a good thing.  For example, let's look at creating a new base controller to extend controllers off of.  Via twitter I found the following ways:\n<ul>\n<li>no, don't do that, use custom action helpers<\/li>\n<li>sure, just put it somewhere and use autoloading to find it<\/li>\n<\/ul>\n<\/p>\n\n<p>\nSo I proceeded to start digging around and figure things out.  Hrm, an action helper is not what I need, so let's create that new base controller.  Oh, you mean you can have more than one way to lay out your project, even if you are using Zend_Application?  How come it's not finding the new controller even though I put it in a common place.  Why won't this work?!?  DAMNIT, I AM GOING TO QUIT PROGRAMMING AND RUN A DADDY DAY CARE OUT OF MY HOME.\n<\/p>\n\n<p>Fortunately the custom routing thing was easier to figure out.   Hey, here's an example of adding code to your bootstrap.  Oh wait, I'm using Zend_Application so things are different.  WTF, I am overriding my existing routes and everything is broken?!?  You can put this stuff in XML?!?!  But I am using the .ini format....  Nice, <a href=\"http:\/\/weierophinney.net\/matthew\/\">MWOP<\/a> pointed me in the right direction.  Good thing he's on twitter.\n<\/p>\n\n<p>\nLook, I've talked about this before.  It's awesome to have lots of documentation.  The Zend Framework documentation is awesome...but seems to only have 80% of the solutions I was looking for.  Digging around using Google just seemed to point me at the same 80%-complete documentation.\n<\/p>\n\n<p>\nWriting documentation is a thankless task, so do not interpret my comments as a slam against those who are contributing.  I work best when I see FULL examples on how to do something, and then I can \"extend and embrace\" that to produce the customized solutions I always end up needing.  My complaints are solely my own, which is why I usually blog the solutions when I come up them.  I certainly cannot be the only one having problems sifting through the documentation.\n<\/p>\n\n<p>\nAs someone who had invested a lot of time in another framework, I am painfully aware of how much you take for granted when using a familiar tool, and then try to help people solve a problem.  My own experiences have ranged from \"you are most definitely doing it wrong\" to \"I've never done it that way, and I can see how that will work\".\n<\/p>\n\n<p>\nSpecial thanks to @weierophinney, @elazar and @andriesss for their actual help and offers of help as I stumble around using Zend Framework.\n<\/p>\n",
        "date": "2010-02-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Where In Chris Reads The Documentation...and Does Not Find The Answer",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/02\/19\/where-in-chris-reads-the-documentation-and-does-not-find-the-answer\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI've been building an admin panel for a work project dealing with fantasy sports, and one of the failings of the old version of the overall application was that, well, sometimes it didn't retain the desired display order of players grouped by position.  Sometimes it worked, sometimes it didn't.  A classic case of \"software working by accident\" maybe?  So I've set out to fix that part of it.\n<\/p>\n\n<p>\nI've been using <a href=\"http:\/\/www.doctrine-project.org\">Doctrine<\/a> 1.2 for the project (integrated with <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a>), and I found it quite easy to setup the relationships I needed between my models.  Oh, except for finding out that I really needed a field called 'id' in one table in order to make a relationship work properly.  Sometimes convention triumphs over configuration. ;)\nSo I thought to myself \"I wonder if I can configure things so that when we're pulling in the related results, it is sorted?\"\n<\/p>\n\n<p>\nSo I started digging around via search engine.  Took me about an hour to find the solution.  First, it took me half the time to dive deep enough to find out WHERE I can define the default sort order.  Surprisingly, it was in an area that made total sense but I could not find before.  Weird.  Probably due to me not fulling understanding the API.\n<\/p>\n\n<pre><code>class Team extends Doctrine_Record \n{\n    public function setUp() \n    {\n                ...\n\n        $this-&gt;hasMany('Player as Players', array(\n            'local' =&gt; 'team_id',\n            'foreign' =&gt; 'player_id',\n            'refClass' =&gt; 'PlayersTeams',\n            'orderBy' =&gt; 'FIELD(position, \"C\",\"1B\", \"2B\" ,\"3B\", \"SS\", \"OF\", \"P\")'\n        ));\n    }\n}\n<\/code><\/pre>\n\n<p>\nOh, what's all that other stuff?  That's what took the other half of the hour to figure out.  See, I couldn't use any sort of natural sorting order.  I had a specific order that they needed to be displayed in.  As usual <a href=\"http:\/\/stackoverflow.com\/questions\/134379\/returning-query-results-in-predefined-order\">StackOverflow came to my rescue<\/a>.  I'm pretty sure that what I am doing is MySQL-specific but I imagine you can figure it out for other RDBMS'.\n<\/p>\n\n<p>\nSo now when I pull in info about a Team, I get the associated Player records sorted to my heart's desire.  Awesome.  This does raise a question:  how would you accomplish this sort of trick if you were using a non-relational database like <a href=\"http:\/\/couchdb.apache.org\">CouchDB<\/a>.  Research for another day I guess.\n<\/p>\n",
        "date": "2010-02-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Sorting Relationship Results In Doctrine 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/02\/04\/sorting-relationship-results-in-doctrine-1-2-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>Note: These examples are using Zend Framework 1.9.5, with comes with Zend Server Community Edition 4.0.6 for OS-X<\/i><\/p>\n\n<p>As I begin working on the admin area for a work application being built with <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a>, I've been spending a lot of time starting and stopping on it.  Why?  Chalk it up to the extensibility of Zend Framework, who have clearly taken the \"configuration\" side of the \"configuration vs. convention\" philosophy when it comes to frameworks.  Before you get all worked up, remember that (a) I last used Zend Framework 3 years ago and (b) I got very used to relying on framework conventions to help me speed things up, a tactic used with great success in building <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> and <a href=\"http:\/\/codeigniter.com\">CodeIgniter<\/a> applications.  Alas, those days are behind me and I am getting schooled in the wonders of \"figuring everything out\" and \"object chaining is cool\" and \"why are there always more than one way to do something with this framework?!?\".\n<\/p>\n\n<p>\nSo one of my first tasks is to create a form to allow people to create new leagues for a fantasy sports league.  Need a very simple form with three things in it: league name, sport and scoring period (which is how often we need to compile standings).  Sounds easy right? \n<\/p>\n\n<p>\nAfter searching around online for some examples of building simple forms, I was dismayed to discover there were two different ways of building the form.  I could (a) do it the long way and create specific instances of the form elements using Zend_Form_Element_X or (b) do it the short way and add them to the form by use of <a href=\"http:\/\/framework.zend.com\/apidoc\/1.9\/Zend_Form\/Zend_Form.html#addElement\">Zend_Form::addElement()<\/a> and pass it the type of form element I want via an array.  For reasons I cannot explain initially, I decided to do things the long way.  Later on, I found out that doing it this way saved me from rewriting.\n<\/p>\n\n<p>\nSo, the approach I decided to use was to create a separate file that contains the form I want to use.  Why? Because I wanted to reuse this form for both \"add a new league\" functionality and \"edit an existing league\" functionality.  After figuring out that I needed to create a Bootstrap file for the module that the form was in (otherwise auto loading wouldn't work) here's what I cranked out:\n~~~\nclass Admin_Form_League extends Zend_Form\n{\n    public function __construct($options = null)\n    {\n        parent::__construct($options);\n        $this->setAction($options['action'])->setMethod('post');\n    \n        $name = new Zend_Form_Element_Text('name', array('required' => true));\n        $sport = new Zend_Form_Element_Select(\n            'sport', \n            array(\n                'required' => true,\n                'multiOptions' => array('baseball' => 'Baseball', 'football' => 'Football')\n            )\n        );\n        $scoringPeriod = new Zend_Form_Element_Select(\n            'scoring_period',\n            array(\n                'required' => true,\n                'multiOptions' => array('daily' => 'Daily', 'weekly' => 'Weekly', 'monthly' => 'Monthly')\n            )\n        );\n        $submit = new Zend_Form_Element_Submit('submit', array('label' => $options['submitLabel']));\n\n        if (isset($options['leagueId'])) {\n            $leagueId = new Zend_Form_Element_Hidden('id', array('value' => $options['leagueId']));\n            $this->addElement($leagueId);\n        }\n\n        $this->addElements(array($name, $sport, $scoringPeriod, $submit));\n    }\n}\n~~~\nPerhaps you've noticed something different about this example compared to others you might have seen elsewhere?  Okay, I won't keep you in suspense about it.  I'm using the $options parameter when creating an instantiation of this particular form to pass some dynamic information.  Without this, it would be very difficult to reuse this form.  In this case, I pass in up to three different parameters:  the target for the form, the label I want on the submit button and (in the case where we're editing an existing record) the primary key of that league in the database.\n<\/p>\n\n<p>\nSo, then the next step is to tell my controller I want to use that form.  Ignore the database related stuff as I'm using <a href=\"http:\/\/www.doctrine-project.org\/\">Doctrine<\/a> and my use of that probably deserves it's own blog post down the line.\n~~~\nclass Admin_IndexController extends Zend_Controller_Action\n{\n    protected $_flashMessenger = null;\n\n    public function init()\n    {\n        $this->_flashMessenger = $this->_helper->getHelper('FlashMessenger');\n        $this->initView();\n    }\n\n    public function indexAction()\n    {\n        $leagues = Doctrine::getTable('Leagues');\n        $form = new Admin_Form_League(array(\n            'action' => '\/admin\/index', \n            'submitLabel' => 'Add New League'\n        ));\n\n        if ($this->_request->getPost()) {\n            $formData = $this->_request->getPost();\n\n            if ($form->isValid($formData)) {\n                $newLeague = new Leagues();\n                $newLeague->fromArray($form->getValues(true));\n                $newLeague->save();\n            } else {\n                $form->populate($formData);\n            }\n        }\n\n        $this->view->leagues = $leagues->findAll()->toArray();\n        $this->view->messages = $this->_flashMessenger->getMessages();\n        $this->view->form = $form;\n    }\n\n}\n~~~\n<\/p>\n\n<p>Nice and simple, and effective.  I also have another action that is for the editing or deleting an existing league.  Here's the controller for that\n~~~\nclass Admin_LeaguesController extends Zend_Controller_Action\n{\n    public function init()\n    {\n        $this->_flashMessenger = $this->_helper->getHelper('FlashMessenger');\n        $this->initView();\n    }\n    \n    public function editAction()\n    {\n        $leagueId = $this->_getParam('id', 0);\n        $leagues = Doctrine::getTable('Leagues');\n        \n        if ($this->_request->getPost()) {\n            $formData = $this->_request->getPost();\n            $form = new Admin_Form_League(array(\n                'action' => '\/admin\/leagues\/edit', \n                'submitLabel' => 'Update League',\n                'leagueId' => $formData['id']\n            ));\n            \n            if ($form->isValid($formData)) {\n                $updateLeague = $leagues->find($formData['id']);\n                $updateLeague->name = $formData['name'];\n                $updateLeague->sport = $formData['sport'];\n                $updateLeague->scoring_period = $formData['scoring_period'];\n                $updateLeague->save();\n                $this->_flashMessenger->addMessage('Updated league');\n                $this->_redirect('\/admin');\n                exit();\n            } else {\n                $form->populate($formData);\n            }\n        } else {\n            $leagueId = $this->_getParam('id', 0);\n\n            if ($leagueId == 0) {\n                $this->_redirect('\/admin');\n                exit();\n            } else {\n                $form = new Admin_Form_League(array(\n                    'action' => '\/admin\/leagues\/edit', \n                    'submitLabel' => 'Update League',\n                    'leagueId' => $leagueId\n                ));\n            }\n        }\n        \n        $results = $leagues->findById($leagueId)->toArray();\n        $formData = array(\n            'name' => $results[0]['name'],\n            'sport' => $results[0]['sport'],\n            'scoring_period' => $results[0]['scoring_period']\n        );\n        $form->populate($formData);\n        $this->view->form = $form;\n    }\n\n    public function deleteAction()\n    {\n        $leagueId = $this->_getParam('id', 0);\n\n        if ($leagueId == 0) {\n            $this->_redirect('\/admin');\n            exit();\n        }\n\n        $leagues = Doctrine::getTable('Leagues');\n        $deleteLeague = $leagues->find($leagueId);\n        \n        if ($deleteLeague->delete()) {\n            $deleteMessage = 'Deleted league';\n        } else {\n            $deleteMessage = 'Unable to delete league';\n        }\n\n        $this->_flashMessenger->addMessage($deleteMessage);\n        $this->_redirect('\/admin'); \n        exit();\n    }\n}\n~~~\n<\/p>\n\n<p>Nothing too earth-shattering I would think.  Armed with this, I can now display my form in two different places:\n~~~\n<h1>Admin home<\/h1>\n<h2>Leagues<\/h2>\n< ?php if (count($this->messages) > 0) : ?>\n<ul>\n< ?php foreach ($this->messages as $message) : ?>\n<li>< ?php echo $message ?><\/li>\n< ?php endforeach; ?>\n<\/ul>\n< ?php endif; ?>\n<table border=1>\n    <tr>\n        <th>League Name<\/th>\n        <th>Sport<\/th>\n        <th>Scoring Period<\/th>\n    <\/tr>\n< ?php foreach ($this->leagues as $league) : ?>\n    <tr>\n        <td>< ?php echo $league['name'] ?><\/td>\n        <td>< ?php echo $league['sport'] ?><\/td>\n        <td>< ?php echo $league['scoring_period'] ?><\/td>\n        <td><a href=\"\/admin\/leagues\/edit\/id\/<?php echo $league['id'] ?>\">Edit<\/a> <a href=\"\/admin\/leagues\/delete\/id\/<?php echo $league['id'] ?>\" onClick=\"return confirm('Are you sure you want to delete this league?');\">Delete<\/a><\/td>  \n    <\/tr>\n< ?php endforeach; ?>\n    <tr>\n< ?php echo $this->form ?>\n    <\/tr>\n<\/table>\n~~~\n~~~\n<h1>Edit league<\/h1>\n<\/p>\n\n<p>Use the form below to edit an existing league<\/p>\n\n<table border=1>\n    <tr>\n        <th>League Name<\/th>\n        <th>Sport<\/th>\n        <th>Scoring Period<\/th>\n    <\/tr>\n    <tr>\n< ?php echo $this->form ?>\n    <\/tr>\n<\/table>\n\n<pre><code><br \/>&lt;p&gt;So I do that, and load up the form and...what the?  Damn, the default decorator for these elements is ugly.  I want my form fields to line up nicely inside my table (shut up, I know I should use CSS but this is an admin panel and I am in a hurry) so after finding &lt;a href=\"http:\/\/devzone.zend.com\/article\/3450\"&gt;this article by Zend Framework architect MWOP&lt;\/a&gt; I figured out how to create the exact decorator I wanted.  Here's the final version of my reusable form.\n<\/code><\/pre>\n\n<p>class Admin_Form_League extends Zend_Form\n{\n    public function __construct($options = null)\n    {\n        parent::__construct($options);\n        $this->setAction($options['action'])->setMethod('post');\n        $decoratorOptions = array(\n            'ViewHelper',\n            'Errors',\n            array(array('data' => 'HtmlTag'), array('tag' => 'td', 'class' => 'element')),\n        );<\/p>\n\n<pre><code>    $name = new Zend_Form_Element_Text('name', array('required' =&gt; true));\n    $name-&gt;setDecorators($decoratorOptions);\n\n    $sport = new Zend_Form_Element_Select(\n        'sport', \n        array(\n            'required' =&gt; true,\n            'multiOptions' =&gt; array('baseball' =&gt; 'Baseball', 'football' =&gt; 'Football')\n        )\n    );\n    $sport-&gt;setDecorators($decoratorOptions);\n\n    $scoringPeriod = new Zend_Form_Element_Select(\n        'scoring_period',\n        array(\n            'required' =&gt; true,\n            'multiOptions' =&gt; array('daily' =&gt; 'Daily', 'weekly' =&gt; 'Weekly', 'monthly' =&gt; 'Monthly')\n        )\n    );\n    $scoringPeriod-&gt;setDecorators($decoratorOptions);\n    $submit = new Zend_Form_Element_Submit('submit', array('label' =&gt; $options['submitLabel']));\n    $submit-&gt;setDecorators($decoratorOptions);\n\n    if (isset($options['leagueId'])) {\n        $leagueId = new Zend_Form_Element_Hidden('id', array('value' =&gt; $options['leagueId']));\n        $this-&gt;addElement($leagueId);\n    }\n\n    $this-&gt;addElements(array($name, $sport, $scoringPeriod, $submit));\n}\n<\/code><\/pre>\n\n<p>}\n~~~\n<\/p><\/p>\n\n<p>\nI'm pretty sure that if I dig around some more, I can find info on how to automatically apply that decorator to ALL my form elements if I needed that.  Maybe in the next revision.  Hope you find this example helps you to create your own reusable forms and to tweak the decorators yourself.\n<\/p>\n",
        "date": "2010-01-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Creating Usable Forms With Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/01\/27\/creating-usable-forms-with-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Many thanks to <a href='http:\/\/twitter.com\/janl'>Jan Lehnardt<\/a> for helping me out via IM to understand some concepts that I was having problems wrapping my mind around.<\/p>\n\n<p>\nRallyhat is for the most part a programming experiment for me, designed to learn Python *and* produce an web application that is actually usable by someone other than me.  One of the technologies I'm using is <a href=\"http:\/\/couchdb.apache.org\/\">CouchDB<\/a> to store things.  I was having some problems getting both <a href=\"http:\/\/code.google.com\/p\/couchdb-python\/\">couchdb-python<\/a> working with permanent views (meaning views stored in CouchDB itself) as opposed to temporary views (meaning views generated in the code).\n<\/p>\n\n<p>\nNow, couchdb-python looks to be a nice, simple interface to use.  The problem I found was the documentation is, what's the word I'm looking for?  Lacking.  Since Jan is an amazing teacher, he was patient with me and showed me that I could look at the documentation for couchdb-python via the Python REPL (aka the Python shell).  So, armed with this \"how the hell could I not realize this\" knowledge I figured out how to use it.  Yet another reason why I'm warming up to Python.  \n<\/p>\n\n<p>It was as simple as starting up the Python shell and then doing the following:\n~~~\nimport couchdb\nhelp(couchdb.client)\n~~~\nIn there you will find code examples for each method, and then explanations of the parameters for each method.  All you really need in this case.  So I take back what I said about the documentation for couchdb-python being lacking.  I was just looking in the wrong place.\n<\/p>\n\n<p>\nSo, task #1 was to create the view I needed.  I decided to use Futon, the built-in interface to create my permanent view:\n~~~\n{\n   \"_id\": \"_design\/searches\",\n   \"_rev\": \"3-e7f43cfdd5a8ef62ae338bd1f19b3e95\",\n   \"views\": {\n       \"by_user\": {\n           \"map\": \"function (doc) { emit(doc.user, {'date': doc.date, 'locations': doc.loations});}\"\n       }\n   }\n}\n~~~\n<\/p>\n\n<p>This view would then live at http:\/\/couchdb.server\/\/rallyhat\/_design\/searches\/_view\/by_user is you want to get every doc for every user.  To get just the docs belong to a specific user, you append ?key=<user> to the URL above.  Is that easy to understand or what?  As an aside, I am finding the <a href=\"http:\/\/books.couchdb.org\/relax\/\">online version of CouchDB: The Definitive Guide<\/a> to be an awesome reference guide (once you remember to actually use it, thanks again Jan). With the view then created, the next step was to create the Python code to read in those views.<\/user><\/p>\n\n<p>\n~~~\n     def get_by_user(self, username):\n         my_searches = []\n \n         if username:\n             for row in db.view('searches\/by_user', None, key=username):\n                 info = db.get(row.id)\n                 locations = json.loads(info['locations'])                                                \n                 my_search = {'date': info['date'], 'locations': locations}\n                 my_searches.append({'id': row.id, 'date': info['date'],\n                                     'locations': locations})\n     \n         return my_searches\n~~~          \n<\/p>\n\n<p>\nWith *any* Python library that you use, make sure to see if the author added help files to the package.  You'd be surprised to see what's in there...\n<\/p>\n",
        "date": "2010-01-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat: Playing with CouchDB and Python",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/01\/15\/rallyhat-playing-with-couchdb-and-python\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>So we're at a natural point for reflection.  It's the start of a new year *and* the start of a new decade.  Despite my wife rolling her eyes talking about this, it is an incredibly exciting time to be involved in web development.  Internet time is like dog time, in my opinion: one year online is seven years in the real world.  Of course, this is a gross oversimplification.  But I think it's accurate nonetheless.\n<\/p>\n\n<p>\nSo as we start 2010, and you're a web developer, what is out there for you to play with?  Let's see...\n<ul>\n<li>Mature web application frameworks for the Big 3 open source scripting languages (PHP, Python and Ruby) that can help you, when used properly, rapidly build applications, if you are willing to spend the time understanding the limitations of frameworks.  You might hate frameworks, but you certainly cannot ignore them.  Yes, you could consider WordPress itself to be a framework<\/li>\n<li>Multiple languages that will run on the JVM that can be used for web development, if you are willing to spend the time understanding the JVM and how to get these things talking to Java as well.  Ignore the Java haters, I think this is a good trend.<\/li>\n<li>Multiple actually-usuable-outside-of-small-projects alternatives to RDBMs, if you are willing to spend the time to figure out when you should use them.  The trend is towards having ridiculous amounts of data, and it appears that in the open source world the RDBMs is not up to the task.  Think <a href=\"http:\/\/incubator.apache.org\/cassandra\/\">Cassandra<\/a>, <a href=\"http:\/\/code.google.com\/p\/redis\/\">Redis<\/a> and <a href=\"http:\/\/hadoop.apache.org\/\">Hadoop<\/a> along with <a href=\"http:\/\/hadoop.apache.org\/pig\/\">Pig<\/a>.<\/li>\n<li>multiple mature Javascript libraries that make creating all that awesome Ajax goodness easy, if you are willing to spend the time to pick one with the features you like<\/li>\n<li>multiple mature (or soon-to-be mature) functional programming languages that can be used to build web applications, if you are willing to spend the time to learn functional programming.  I mean, really, how can you not look at <a href=\"http:\/\/clojure.org\/\">Clojure<\/a> and <a href=\"http:\/\/ftp.sunet.se\/pub\/lang\/erlang\/index.html\">Erlang<\/a> and not be impressed?<\/li>\n<\/ul><\/p>\n\n<p>\nBut again, who cares what I think?  If you do care, then you are at the same place as me:  paralysis by analyses.  What framework should I pick?  Do I go document database or key-value store?  If I don't want to learn Java, can I do some stuff with <a href=\"http:\/\/www.scala-lang.org\/\">Scala<\/a> or see if <a href=\"http:\/\/www.jython.org\/\">Jython<\/a> is up to the task?  Can <a href=\"http:\/\/www.jquery.org\">jQuery<\/a> do long-polling \/ comet stuff?  Is functional programming too weird for a web monkey like me to figure out?\n<\/p>\n\n<p>\nCrap, that's a lot of stuff to worry about, isn't it?  Is it any wonder I get stressed out trying to figure out how to build stuff at work?  Or what stuff to dabble with in my spare time?  We are suffering from an embarrassment of riches, which is being hidden by the constant religious wars that developers seem to get embroiled in.  If it's not \"my language is better than your language\", it's \"my editor is better than your editor\".  \"My programming paradigm is better than your programming paradigm.\"  \"If you did interesting work, you'd get accepted to speak at conferences more\".  (Sorry, that was me arguing with myself).\n<\/p>\n\n<p>\nIf anything, I have found that my focus is starting to change.  I've started realizing that what is really happening is that despite there being ridiculous amounts of choices of tools to solve problems, it has become EASIER to solve these problems.  In my planning for a work project I stumbled across the now-infamous <a href=\"http:\/\/toys.lerdorf.com\/archives\/38-The-no-framework-PHP-MVC-framework.html\">Rasmus Lerdorf \"The no-framework PHP MVC framework\" blog post<\/a>.  While Rasmus is a programming god, he is also a very smart guy.  He understands that programming is about solving problems, and he (at least to me) seems to not have the ego that says you must build up your own complicated solutions to problems.\n<\/p>\n\n<p>\nThis has gotten me to consider how I had been approaching problems.  Too often, I have been approaching them from the code out to the display.  Worrying about the technology, instead of how people will use it.  Rasmus proposes an easy problem - a sample Ajax app that uses exactly 4 things: a scripting language, a Javascript library, a data storage source, and a data exchange format.  In his specific example he used (in order) PHP 5, Yahoo YUI,  sqlite and JSON.  You could've done this with Python, JQuery, MySQL and XML.  Or Ruby, Dojo, CouchDB, and JSON.  My point is that we often find ourselves caught up in what we are USING to build something rather than solving the problem.\n<\/p>\n\n<p>I have really dislike the idea of New Year's resolutions, because they are almost always broken.  But in this case, I think a few are warranted:  this year I resolve to do a better job of figuring out the problem I need to solve first and worry about the technology needed second.  Sometimes my desire to feed the part of me that wants the new and shiny takes control and creates a potentially bad solution.  Sure, it would be awesome to get paid to learn a new programming language and a new web application framework to go with it, but if it gets in the way of solving the problem, well, you've suddenly become the problem instead of the solution.  Sounds so cliched, doesn't it?\n<\/p>\n\n<p>\nSo, in the spirit of that, let's look at 3 problems I need to solve in the next little while that I perhaps can also use to feed the Imp of the New and Shiny:\n<ul>\n<li>Analysis of some MySQL slow-query logs are needed at work.  First solution was to play with a tools specifically for analyzing the slow query log.  They provided summaries that were simply not useful to me. Perhaps Pig + Hadoop will give me the high-level solution to collect the information we seek.<\/li>\n<li>I have a very simple idea for collecting absurd stories you've told to your kids.  My first instinct was to create the project using a web application framework.  Upon reflection, perhaps the combination of WordPress and then a custom-written story submission and approval system is the better approach.<\/li>\n<li>Plans are being made to create the next platform our company will use for online fantasy games.  Since we cover multiple sports, I have no desire to create a separate version of the platform for every sport.  Instead, inspired by the realization that Rails is nothing more than a DSL (or Domain Specific Language) on top of Ruby, I have started work on a very simple DSL for defining scoring rules.  Wouldn't it be awesome for the games admin to be able to select a stat category for a sport (say, rushing yards in football) and then use \"(1 point each 10) + (5 at 100 total)\" as the scoring rule?  Parsers are actually pretty easy as long as your DSL is consistent.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nI hope I've made sense here, as I'm trying to show how I wish to change my approach to solving programming problems.  There is no doubt that I will pick up the new and shiny as I find a way to solve these problems.  Some might be written in PHP.  Some will be written in Python.  Some will be written in ScoreRule (to pull a name for my sports DSL out of my ass).  But the real winner is the people who will use these things.  Shhh, don't tell anyone:  I'm thinking about the end user for once instead of the programmer.\n<\/p>\n",
        "date": "2010-01-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Who Cares What I Think?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2010\/01\/08\/who-cares-what-i-think\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>With Christmas quickly approaching, it's time to dump all the junk rattling around in my head and into the blog.  I hope you have a great holiday season.<\/p>\n\n<p>\n<h3>Concurrency is coming, better be ready<\/h3>\n<\/p>\n\n<p><a href=\"http:\/\/intensivesystems.net\/tutorials\/cont_m.html\">The Continuation Mondad in Clojure<\/a>.  Even if you hate Lisp (I'm looking at you, Kevin) or don't give a damn about <a href=\"http:\/\/clojure.org\/\">Clojure<\/a> it is worth reading about to understand how you can write concurrent applications.<\/p>\n\n<h3>Real-time web applications are coming, better be ready<\/h3>\n\n<p>I have a new project I am going to be starting at work, one that can potentially involve real-time information.  Check out this series on <a href=\"http:\/\/thingsilearned.com\/2009\/06\/09\/starting-out-with-comet-orbited-part-1\/\">how to build real-time web applications using Django, Python and a javascript library called Orbited<\/a>.  When you combine this with the you-can-see-it-on-the-horizon-but-not-quite-here-yet concept of <a href=\"http:\/\/armstrongonsoftware.blogspot.com\/2009\/12\/comet-is-dead-long-live-websockets.html\">web sockets<\/a>, I can see some of the concepts of what I called Web Pi (3.14159, get it?  Get it?  Um okay, any way) starting to take shape.<\/p>\n\n<h3>TDD With PHP is already here, where have you been?<\/h3>\n\n<p>Giorgio Sironi has gone and <a href=\"http:\/\/giorgiosironi.blogspot.com\/2009\/12\/practical-php-testing-is-here.html\">written the book I was thiking of writing this winter<\/a>.  If you want to learn more about doing TDD with PHP, go and grab a copy of his e-book.  It's 100% free, but I liked it so much (and admired him for tackling a topic I have interest in) I donated $10 to him.  You should do the same.<\/p>\n\n<h3>Chris should not post links on Twitter that cannot be discussed in 140 characters or less<\/h3>\n\n<p>Finally, on Twitter I posted about <a href=\"http:\/\/devcomponents.com\/blog\/?p=633\">this blog post<\/a> which talked about how it's only people who are financially secure who pound away at the \"only do what you love\" message.  When you don't have to work, that's easy to do.  I got into a long conversation with <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> about this topic, although Twitter is a crappy medium for doing this sort of thing.<\/p>\n\n<p>\nI respect Amy a great deal, so I was kind of bummed when she and I appeared to disagree on some the key points of the blog posting.  Basically, \"do what you love\" is a lie because it is not always possible.  \"Do what you do, with love\" is a better approach to thing.  Not everyone gets to work on exactly what they want to, so perhaps I am showing some signs of neo-puritanism or something when I said \"well, even if you have a crummy job you should be doing it as best as you can.\"  I proceeded to be smacked around by several people who do not share that philosophy.  Amy seemed to feel that the blog article was (to use her words) bullshit and was advocating \"eating a shit sandwich and liking it\" by giving people justification for \"hiding behind the mortgage\" as an excuse for not taking chances.  It will no doubt surprise Amy that I happen to agree with her, but utterly failed to get that across on twitter.  My apologies to Amy for that.  We've all worked crummy jobs, and it has been my personal experience that the best way to get out of a crummy job is to work as hard as you can to build up your skills so you are ready to leap on better opportunities when they come around.  \n<\/p>\n",
        "date": "2009-12-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - Christmas 2009 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/12\/22\/whats-in-chris-brain-christmas-2009-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nNow that I have become a born-again tester, I've started looking at the testing I'm doing at work from more of a high-level point of view.  What are tools like <a href=\"http:\/\/www.simpletest.org\/\">SimpleTest<\/a> and <a href=\"http:\/\/www.phpunit.de\/\">PHPUnit<\/a> *really* doing?  They are providing a mechanism for the automating of running of tests.  Such tools also exist for frameworks like <a href=\"http:\/\/www.djangoproject.com\">Django<\/a> and <a href=\"http:\/\/www.rubyonrails.org\">Ruby on Rails<\/a>.  I cannot speak for Django, but the Rails community has made a very large commitment to testing tools and testing best practices.  But there is also another very powerful testing tool that Ruby and Python make available that PHP does not.\n<\/p>\n\n<p>\nBoth Ruby and Python offer a <a href=\"http:\/\/en.wikipedia.org\/wiki\/REPL\">Read-eval-print loop<\/a> that can be run from the command line to allow people to do the opposite of what conventional testing tools do:  allow you to run interactive tests of your code.  I used the REPL available in Python (you know, just typing 'python' from my command line) to test out how to use various geocoding libraries for a side project.  My <a href=\"http:\/\/gilesbowkett.blogspot.com\/\">favourite Ruby programmer<\/a> (who is offering career consulting that I might find too enticing to pass up even at $100\/month) uses <a href=\"http:\/\/en.wikipedia.org\/wiki\/Interactive_Ruby_Shell\">irb<\/a> all the time to work on stuff.\n<\/p>\n\n<p>So in a way, a REPL is the anti-automated test.  I think that if there was a good REPL available for PHP, testing best-practices might take better hold.  Perhaps there is hope for a good PHP REPL in Alan Pinstein's <a href=\"http:\/\/github.com\/apinstein\/iphp\">iphp<\/a> project.  I remember trying to continue work on the testing console I had created a number of years ago for CakePHP, and quickly realized that what I needed was a REPL.<\/p>\n\n<p>\nSince I did not have the desire to write my own limted PHP parser by messing around with <a href=\"http:\/\/www.php.net\/eval\">eval<\/a> (although, to be honest I did try playing with it and realized I did not know what the hell I was doing), the testing console was dead.  Besides, how many PHP devs really use PHP on the command line?  10%? 1%?  Hard to know, as the group I follow is a self-selecting one and I'm sure most of them have used PHP on the command line.  Hard to become an advanced PHP developer without trying to do stuff on the command line with it.\n<\/p>\n\n<p>\nI was also pleased to find out (after a year of using it, no less) that <a href=\"http:\/\/exist-db.org\/\">eXist<\/a> had it's own REPL for XQuery - they call it the \"sandbox\".  It's awesome because I can take my \"wrote this 6 months ago and can't remember if it still works\" XQuery scripts and test them out.  Sort of like a command line client to your RDBMS.  It even tells me when I've got syntax or formatting errors in them BEFORE I try and execute them.  Talk about saving a developer time.\n<\/p>\n\n<p>\nDo things like this exist for RDBMs like MySQL and Postgres?  Imagine an interactive client that is checking your syntax out <i>while you type it<\/i>.  If such a thing exists, please tell me!\n<\/p>\n\n<p>\nOnce again, I see I have started to diverge.  Back on track again.  \n<\/p>\n\n<p>\nSo, from a testing perspective it's easy to see how shells and sandboxes can become essential tools.  For example, all the good advice I have ever seen about unit testing clearly advocates a sandbox approach.  You create fixtures containing data.  You create mock objects to simulate functionality that might potentially be destructive.  You might even create a separate database for doing test operations on.  Clearly, the goal here is to create an environment that is the same as the one your code will eventually be running in, but separate from the \"real\" one.\n<\/p>\n\n<p>\nA REPL, on the other hand, is a very powerful and very dangerous.  If you're not careful, you could very easily insert data into your current \"working\" environment instead of a \"test\" one.  As with so many other things, power comes with a price.  Sure, I can run some code to figure out how to use, say, <a href=\"http:\/\/www.sqlalchemy.org\/\">SQLAlchemy<\/a> but I better make sure that I am not writing data to my production database.  That would be silly.<\/p>\n\n<p>\nI'm guessing the main reason PHP does not have a easy-to-use REPL is because it grew up on the web first and the command line second.  Ruby and Python started on the command line first, and out to the web second.  It's really that simple I think.  Will PHP ever get a widely-accepted REPL?\n<\/p>\n",
        "date": "2009-12-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Shells and Sandboxes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/12\/15\/shells-and-sandboxes\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Hendrick Daldrup writes:\n<blockquote>I just saw your post regarding topic suggestions on your blog for Dec.\n\nI actually have 2, but the first one might be better suited for a blog post.\nSo, here goes:\n\n1. I started doing some freelance work to boost my portfolio and have been using CakePHP as my framework of choice in several cases.\nI wanted to focus on TDD for the larger projects, thanks to Cake's nice tie in with SimpleTest, but found it impossible to market to clients.\nThe problem is that TDD causes an overhead on development time while reducing the bugs in the code. However, since bug fixes are basically included in the price, for the client it just translates to paying more for work that I would otherwise do for free anyway.\nTDD makes sense for a company with full time developer(s), but those with a small budget\/tight deadline or no technical understanding always translate it to an unnecessary additional cost & time.\nOf course you could just add it to the development time and\/or costs without mentioning it, but I prefer keeping my work transparent and was hoping that you or one of your readers might have been in a similar situation and have a tip on how to justify the use of TDD to a potential client.\n<\/blockquote>\n<\/p>\n\n<p>The first thing that occurs to me when trying to answer this question is this:<i>TDD is not for the client, it is for the developer<\/i>.  In other words, the client should not care that you are using TDD to build this application for them.  They should care that you deliver something on-time, within budget, and meeting their application requirements.\n<\/p>\n\n<p>\nTDD can be a powerful tool, especially if you are going in and reworking an existing application.  With work projects, every time a bug is reported I now create a test to (a) verify that the bug exists and (b) make sure that when I fix that bug, it has not broken anything else.  Scoff at the TDD crowd if you want, but there appears to be lots of evidence that including tests with your application goes a long way towards reducing bugs.  <a href=\"http:\/\/sites.google.com\/site\/yacoset\/Home\/how-to-avoid-writing-bugs\">This article<\/a> speaks anecdotally about the value of TDD:\n<blockquote>\n At first it wasn't clear what the benefits and trade-offs of TDD were, but an empirical study conducted on teams working at Microsoft and IBM2 found that teams practicing TDD could get up to 40% fewer bugs in their released code, but it came at a cost of taking up to 35% longer than a team developing the same software without TDD. It neither absolves TDD nor condemns it, but it can tell a product manager what he could get if he had the time to pay for it.\n<\/blockquote>\n<\/p>\n\n<p>We have started to stray from Hendrik's question.  In my opinion, there is no need to sell the client on TDD.  As far as the client is concerned, TDD is simply part of the whole \"building the application for you\" process.  At this point, I could not imagine building a web application for someone else without including tests to make sure I don't break things.  Those tests are your first line of defence when fixing the bugs you inevitably introduce into an application.  No set of tests can cover everything, but even a limited set of tests are better than nothing.\n<\/p>\n\n<p>\nNow, if someone can tell me how to test CodeIgniter controllers using <a href=\"http:\/\/jamierumbelow.net\/2009\/08\/11\/setting-up-the-perfect-codeigniter-tdd-environment\/\">this type of setup<\/a>, I'll be a much-less grumpier programmer.\n<\/p>\n",
        "date": "2009-12-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Readers Ask Me: TDD and freelancing",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/12\/02\/readers-ask-me-tdd-and-freelancing\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThanks so much for sticking with me during my November blogging experiment.  By my reckoning, I only missed one week-day blog post (it was on a Friday, and I posted something on a Saturday to make up for it.  I will not be keeping up with that pace in the month of December, but I do expect to cover some more interesting topics.\n<\/p>\n\n<p>\nI have contemplated making December \"blog reader month\" where I do some blog posts on topics suggested by my readers.  Feel free to make requests in the comments, email them to me (if you can figure out my email address), or send 'em to me via Twitter.  I promise full attribution.  \n<\/p>\n",
        "date": "2009-11-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So It Ends, Gentle Reader",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/30\/so-it-ends-gentle-reader\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been working on the <a href=\"http:\/\/www.sportsdb.org\/sd\/sportscaster\">open source web service<\/a> that we make available to our clients, trying to get some caching into the application to improve performance.  It got me to thinking:  what would be the best way to get our clients to install this application.\n<\/p>\n\n<p>\nBy best way, I do not mean easiest way.  The easiest way is to say \"here's the tarball, extract it and install it in place\".  That's currently the method we use for distribution.  I must admit that I have been negligent in updating recent builds on the site.  The real solution here is to create an automated build system that I can use to package up newer versions of the code and put them up on the web site.\n<\/p>\n\n<p>\nOthers have suggested that I should examine the use of Pear as a way to distribute this PHP application.  That's fine, but the next time they update it would overwrite any changes they made to things like display templates.  So I guess the current method is the best...\n<\/p>\n",
        "date": "2009-11-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Better Application Deployment",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/27\/better-application-deployment\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI had a few drinks last night with my fellow <a href=\"http:\/\/www.hutchic.com\">Milton-area PHP developer<\/a> and we got to talking about a lot of different topics.  I will summarize a few of them here:\n<\/p>\n\n<p>\n<h3><em>Concurrency is still drawing significant interest from me<\/em><\/h3>\n<\/p>\n\n<p>I recommended my friend check out Tim Bray's <a href=\"http:\/\/www.tbray.org\/ongoing\/When\/200x\/2009\/09\/27\/Concur-dot-next\">Concur.next<\/a> series (yes, I know I'm whipping this topic like a dead hors).  We discussed how when you've done so much work in the stateless environment of the web, made slightly more state-full by hacks like sessions and Ajax, how hard it is to wrap your mind around the idea of concurrency and event-driven models of programming.  Much like Mr. Bray I believe that somewhere out there is what will become the popular toolkit for creating concurrent programs, both on the server and on web sites.<\/p>\n\n<h3><em>What about data stores when coupled with concurrent code<\/em><\/h3>\n\n<p>Say I were to create a stripped-down version of the XML-feed reading program that we sell at work.  Say I write it in, oh, Twisted Python and then have the documents it grabbed get tossed into the XML data store I'm using at work.  I imagine that I would grab my list of files to retrieve and then spin off a thread\/agent\/worker\/whatever to grab each one, do the necessary processing and then insert that document into the database.<\/p>\n\n<p>\nSo, I guess it comes down to the ability of the datastore itself to handle concurrent requests?  I mean, if I was talking to a RDBMS like MySQL or Postgresql, can I count on them to handle concurrent inserts or updates?  That is a question worth doing some research about.\n<\/p>\n\n<h3><em>There is an opportunity to become a domain expert in the NoSQL field<\/em><\/h3>\n\n<p>\nIf you were a freelancer who wants to live on the cutting edge, I would seriously invest time in learning one of <a href=\"http:\/\/couchdb.apache.org\/\">CouchDB<\/a> \/ <a href=\"http:\/\/incubator.apache.org\/cassandra\/\">Cassandra<\/a> \/ <a href=\"http:\/\/www.mongodb.org\/display\/DOCS\/Home\">MongoDB<\/a> and figure out scenarios where these can be used.  Next step?  Profit!!\n<\/p>\n",
        "date": "2009-11-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - Blog Experiment Version",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/26\/whats-in-chris-brain-blog-experiment-version\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI've been playing with <a href=\"http:\/\/www.blueprintcss.org\/\">Blueprint CSS<\/a> until such time that I can create grid layouts in CSS myself.  My friend <a href=\"http:\/\/twitter.com\/chiggsy\">Kevin<\/a> pointed out an Air app called <a href=\"http:\/\/toki-woki.net\/p\/Boks\/\">Boks<\/a> that lets you create your own layouts, complete with inserting HTML along with it too.  The screencasts are awesome and I highly recommend it to hard-core programmers who need some help with layouts.\n<\/p>\n",
        "date": "2009-11-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Useful Tools For Non-Designers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/25\/useful-tools-for-non-designers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThis has been bugging me all day long\n<ul>\n<li>You have a project that is licensed under the GPL<\/li>\n<li>and that project is a front-end to act as a web service<\/li>\n<li>that speaks to a database that is populated<\/li>\n<li>by a proprietary product<\/li>\n<li>and you are the biggest user of this open source project<\/li>\n<li>is it really open source?\n<\/li><\/ul>\n<\/p>\n",
        "date": "2009-11-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Definition of Open Source",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/24\/the-definition-of-open-source\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(The blog experiment continues: 1 post every weekday in November and I think I only skipped one, but made up for it with a Saturday post)<\/p>\n\n<p>\n<i>Node.js is something I want to use, but I do not know what for<\/i><br \/>\nFor those who don't know, <a href=\"http:\/\/nodejs.org\/\">Node<\/a> is a \"toolkit for writing extremely high performance non-blocking event driven network servers in JavaScript\".  In other words, it's for writing server-side Javascript with an emphasis on providing concurrency.  Damn you Tim Bray, I cannot avoid seeing concurrency everywhere since you started your <a href=\"http:\/\/www.tbray.org\/ongoing\/When\/200x\/2009\/09\/27\/Concur-dot-next\">Concur.next<\/a> series on your blog.  It fascinates me, and I don't even do any kind of work where I need to worry about concurrency.  Not yet anyway.\n<\/p>\n\n<p>\nSimon Wilson (someone I follow from the Django community) has a great article explaining why <a href=\"http:\/\/simonwillison.net\/2009\/Nov\/23\/node\/\">Node.js is genuinely exciting<\/a> to him, and my old CakePHP landsmann Felix shows <a href=\"http:\/\/debuggable.com\/posts\/streaming-file-uploads-with-node-js:4ac094b2-b6c8-4a7f-bd07-28accbdd56cb\">how to handling streaming file uploads in node.js<\/a>.  Like so many new technologies, Node.js starts out as a solution looking for a problem but as I become more familiar with concurrency it all becomes a little clearer.\n<\/p>\n\n<p>\n<i>While <a href='http:\/\/www.vim\/org\">Vim<\/a> is awesome, don't put up with any crap from it<\/i><br \/>\nI had been experiencing a problem with Vim.  Well, two problems.  The first big one was weird behaviour involving the <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=1849\">AutoClose<\/a> plugin.  It would spit out brackets and quotes at the weirdest time, and I found myself doing a lot of unnecessary keystrokes (and toggling in and out of insert mode) to get things done.  So I deleted it.  Enough of that crap.  Same goes with my attempts to use the <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=69\">Project plugin<\/a>.  I just could not get it to work properly.  DELETED.\n<\/p>\n\n<p>\nVim's ability to be ultracustomizable ALSO makes it easy to dump stuff when you no longer what to use it.  Heck, I even see some stuff in my .vimrc that I am not using any more.  Mappings I did to accomplish some specific tasks.  Those were deleted too.\n<\/p>\n\n<p>\n<i>Understanding the concept of callbacks opens your mind to all sorts of possibilities<\/i><br \/>\nWhile callbacks are related to my use of Javascript (jQuery uses them to great success) I also find myself digging into the <a href=\"http:\/\/docs.djangoproject.com\/en\/dev\/topics\/signals\/\">documentation in Django on signals<\/a>, which are callbacks by another name:  functionality that is executed when certain events happen.<\/p>\n\n<p>Django uses them all over the place, and CakePHP uses them as well.  When I look at the CodeIgniter code that powers <a href=\"http:\/\/www.sportso.com\">Sportso<\/a>, I often ruminate about what programming techniques or design patterns could help me reduce the amount of code that has actually been written.  CodeIgniter doesn't really support callbacks except in the form of allowing you to define custom functions for validation purposes.  It's a start I get.  I wonder what the code would look like if I could define more code that is triggered when specific events happen?  Any time I find myself typing the same block of code over and over again, it is only natural that I seek to reduce how often I need to do it.  \n<\/p>\n",
        "date": "2009-11-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Thrashed Around In Chris' Brain This Past Weekend",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/23\/what-thrashed-around-in-chris-brain-this-past-weekend\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Once I got a production push out of the way at work, I set about recreating my PHP development environment.  Currently I was running PHP 5.3.0 with Apache2 and Postgresql 8.4, all installed via MacPorts.  Why the time for a change?  Two reasons.  The first one is my desire to constantly tinker and tweak my environment.  The second reason was to test out some things for future work projects.\n<\/p>\n\n<p>\nThose who follow the blog know that I had successfully convinced The Powers That Be at work to use Zend Framework to build out future PHP projects.  I also decided that it would be good to examine if <a href='http:\/\/www.zend.com\/en\/products\/server-ce\/index'>Zend Server Community Issue<\/a> is a viable stack for us.  In order to make that decision, I needed to install it and check it out.<\/p>\n\n<p>\nBeing the cutting-edge guy that I am, I installed the beta version that comes with PHP 5.3.  I remember that I was having problems getting ZSCE working on Snow Leopard, but those problems seem to have disappeared.  Flawless install, and with about 10 minutes of work tweaking Apache configuration files I had my new PHP stack back.\n<\/p>\n\n<p>\nI have to admit that to a jaded \"I am sick of personally compiling my stack\" person that I am acting like these days, the control panel for Zend Server is nice.  Point and click to add whatever extensions I need.  No more recompiling!  Perfect.  After playing with this, next week I will be installing it on our dev server at work.  MySQL is totally busticated for some reason, so wiping things clean and starting over with the Zend-provided version will be a welcome thing.  It will allow me to actually test some things front-to-back on the dev server.  Apathy towards your program's environment is a killer, so this will help me tighten things up.\n<\/p>\n\n<p>\nSo, with that out of the way the next step was figuring out what to do about Postgres.  Luckily this part was *really* easy.  I did a pg_dump of the entire database server and went and installed the version of Postgresql for OS-X that <a href=\"http:\/\/www.enterprisedb.com\/products\/download.do\">EnterpriseDB<\/a> has.  Again, a flawless install and I was up and running in no time.  Created my desired users, and imported my database.  Again, it took about 10 minutes.\n<\/p>\n\n<p>\nOther than the required tweak to my php.ini to declare the timezone for the server (I got this humungous warning in CodeIgniter about it) it was smooth sailing.  So now I had Apache 2, PHP 5.3, MySQL and Postgresql, all detached from MacPorts.  Next step was to remove MacPorts itself and I was good to go.\n<\/p>\n\n<p>\nMacPorts, it was fun, but I've learned to get by without you.\n<\/p>\n",
        "date": "2009-11-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Cleaning Up The Dev Environment",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/20\/cleaning-up-the-dev-environment\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While working away I was listening (okay, and peeking once in a while) at the live stream from the announcement from Google about <a href=\"http:\/\/www.chromium.org\/chromium-os\">Chrome OS<\/a>, an operating system they've been working on.  From what I can tell, it's going to be some stripped-down version of Linux with a window manager that runs one thing:  the Chrome browser.\n<\/p>\n\n<p>\nNow, while I think a netbook is great for someone like my <a href=\"http:\/\/teachersatrisk.com\">mom<\/a>, or my daughter, I cannot imagine myself doing any sort of serious programming work on one.  Or can I?<\/p>\n\n<p>So, first of all it looks like <a href=\"http:\/\/www.vim.org\"> is a non-starter.  That means I would likely have to use something like <\/a><a href=\"https:\/\/mozillalabs.com\/bespin\/\">Mozilla Bespin<\/a> as my editor.  A quick Google search showed me that you can edit remote files using Bespin, so that is a good thing.  But I would miss doing all the system-level things I've grown accustomed too.  Would make it pretty much impossible to do command line testing of code.\n<\/p>\n\n<p>\nAnd what about all my tools for managing databases?  All the web-based database manipulation tools (like <a href=\"http:\/\/phpmyadmin.net\">phpMyAdmin<\/a> or <a href=\"http:\/\/phppgadmin.sourceforge.net\/\">phpPgAdmin<\/a> can probably meet that need.  But then I'm looking at some sort of web-based SSH client to be able to look at things like server configurations or slow query logs.  Again, it's probably doable but is it optimal?\n<\/p>\n\n<p>\nAnyway, it's an interesting thought.  Perhaps I should spend some time trying to see if I could actually be productive using the tools I just mentioned above.\n<\/p>\n",
        "date": "2009-11-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Programming Environment of the Future",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/19\/the-programming-environment-of-the-future\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My <a href=\"http:\/\/www.sportso.com\">work project<\/a> needed an admin area for doing things like changing the key for a league, or changing the email address for someone's account.  You know, typical admin stuff.  In the past I had been *gasp* editing SQL by hand via <a href=\"http:\/\/www.pgadmin.org\/\">pgAdmin<\/a> (and my favourite trick of creating an SSH tunnel to the server the database is on).  Well, I'd had enough of that.  I also wanted to set things up so when my boss wanted changes done, I could tell him \"go do it yourself using this neato-keen admin interface I whipped together\".\n<\/p>\n\n<p>\nSo I got to work creating a <a href=\"http:\/\/www.djangoproject.com\">Django<\/a> project, installed the <a href=\"http:\/\/docs.djangoproject.com\/en\/dev\/ref\/contrib\/admin\/\">django-admin<\/a> application and got to work.\n<\/p>\n\n<p>\nHave I mentioned how I *love* code generation these days?  Can I get \"hell yeah!\" from the lazy programmers out there?  Django comes with this awesome tool that you access via manage.py called <a href=\"http:\/\/docs.djangoproject.com\/en\/dev\/ref\/django-admin\/#inspectdb\">inspectdb<\/a>.  What it does is introspect the database you configured for your Django application and generates the output for your models.py file.  However, keep in mind the following:\n<ul>\n<li>You *will* have to fiddle with the order your classes that represent the models appear in the generated code<\/li>\n<li>You *will* have to go in and alter any field definitions where inspectdb was not able to determine the proper field type and instead guessed.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nSo, after firing off inspectdb, I then issued a 'python manage.py syncdb' to create all the tables needed for django-admin, created a user for the admin site...and then it got hairy.\n<\/p>\n\n<p>\nThe documentation for customizing django-admin is good.  And I was able to create just about everything I wanted by actually, you know, READING the documentation.  But I found a problem that I was not able to solve.  I even <a href=\"http:\/\/stackoverflow.com\/questions\/1758805\/problems-with-updating-records-in-django-admin\">asked my favourite consultants for help<\/a> but I could not get it to work the way I *wanted* it to work.  When I told my buddy via IM that it would be easier to whip up this admin in PHP than slog through learning how to do it the Django way, he was not impressed.  He stopped short of saying \"you're dead to me now\", but I got that vibe.\n<\/p>\n\n<p>\nHere's the problem.  I have these two models:<br \/>\n~~~\nclass Permissions(models.Model):\n    league_key = models.CharField(max_length=15) \n    commissioner_id = models.ForeignKey(Accounts, db_column='commissioner_id',\n                                        to_field='id')\n    status = models.IntegerField()\n    key = models.CharField(max_length=50)\n    publisher_key = models.CharField(max_length=25)\n    publisher_display_name = models.CharField(max_length=50)\n    base_league = models.IntegerField()\n    share = models.IntegerField()\n    default_fixture_key = models.CharField(max_length=50, blank=True)\n    \n    def __unicode__(self):\n        return self.publisher_key + ' \/ ' + self.league_key\n    \n    class Meta:\n        db_table = u'permissions'\n        verbose_name = 'Permissions'\n        verbose_name_plural = 'Permissions'\n\nclass PermissionsAdmin(admin.ModelAdmin):\n    list_display = ('league_key', 'publisher_key', 'commissioner_id', 'status',\n                    'share', 'default_fixture_key')\n    list_display_links = ('league_key',)\n    exclude = ('base_league',)\n~~~\n<\/p>\n\n<p>\nNow, if you look at the definition in there for the base_league field, you will notice that I gave up and called it an IntegerField.  But in reality, it is pointing to another record in the same Permissions table.  We have a concept in Sportso of a \"shared league model\" where you can base a league on another league and import all sorts of properties and data from it.  I was hoping that I could do something like this:\n~~~\nbase_league = models.ForeignKey('self', db_column='base_league', to_field='id')\n~~~\n<\/p>\n\n<p>\nWhenever I did that, I would actually crash Python on my MacBook.  Not a good sign.  If I tried swapping them, I would get an error complaining about violating permissions_pkey, which is the Postgres sequence that was created for the auto-incremented ID for the table.  I did manage to take a look at the SQL it was trying to execute, and it keeps trying to update the 'id' field (which is the primary key) instead of the 'base_league\" field.  So I gave up and will continue building out the other parts of the admin.  I just wish I could figure out WHY this self-referencing foreign key setup was not working.\n<\/p>\n\n<p>\nIf you know what's going on here, let me know via the comments.\n<\/p>\n",
        "date": "2009-11-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Using Django As An Admin Area for a PHP Project, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/18\/using-django-as-an-admin-area-for-a-php-project-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>She Who Must Be Obeyed asked me what I wanted for Christmas, so I'm going to ask for a copy of \"Code Generation In Action\" along with some other programming books.  Make your suggestions in the comments if you please (and feel free to buy me a copy of that Code Generation book just like the awesome <a href=\"http:\/\/twitter.com\/wlkh\">Walker Hamilton<\/a> did when he bought me a copy of Martin Fowler's Refactoring book.  It's on my <a href=\"http:\/\/www.amazon.com\/gp\/registry\/wishlist\/2ZNT96VNHBEQ2\">Amazon Wish List<\/a><\/p>\n\n<p>She asked me to get her a cat because she thinks our remaining cat is lonely and misses his roommate of 8 years.  I agree.<\/p>\n\n<p>Speaking of refactoring, I used the following refactoring patterns today:  Remove Assignments to Parameters, Add Parameter and Inline Temp.  I'm sure I did others but those are the ones I can remember<\/p>\n\n<p><a href=\"http:\/\/addons.mozilla.org\">The Mozilla Add-ons Site<\/a> has decided to <a href=\"http:\/\/micropipes.com\/blog\/2009\/11\/17\/amo-development-changes-in-2010\/\">migrate from CakePHP to Django<\/a>.  AMO was one of THE largest CakePHP sites out there, and I believe they have been quite fair in their reasoning as to why CakePHP no longer fits their own needs.<\/p>\n",
        "date": "2009-11-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain Today",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/17\/whats-in-chris-brain-today\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n<a href=\"http:\/\/terrychay.org\">Terry Chay<\/a>, although he disagrees with me on a whole bunch of different levels, is a smart guy.  Despite all the profanity.  And the troll baiting.  Go watch <a href=\"http:\/\/sfphp.wordpress.com\/2009\/11\/16\/chinese-proverbs-video-nov-5th-2009\/\">this talk he gave at the SF PHP meetup<\/a>.\n<\/p>\n\n<p>\nI struggle with some of the concepts he talks about here.  I've been working with PHP for so long and wondering \"is that all there is to web programming?\".  PHP is still one of the best solutions out there for building web applications.  The haters can suck it, because it's true.  Terry has this awesome quote (I'm probably paraphrasing).:  \"The straightest point between two lines on the web is PHP.\".  There are lots of huge sites out there that use PHP - but PHP *itself* is starting to become the bottleneck.\n<\/p>\n\n<p>\nI won't comment any further as Terry says it better than I could, and to say more would be stealing from his talk.  Go and watch.\n<\/p>\n",
        "date": "2009-11-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rambling on the future of PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/16\/rambling-on-the-future-of-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm off with the family to visit <a href=\"http:\/\/www.bronners.com\/\">the world's largest Christmas store<\/a> and do some cross-border shopping.  See you all on Monday.  I'm sure my mind will be churning about code generation and concurrency all weekend long, much to the dismay of my wife<\/p>\n\n<p>\nI do admire how she has learned to indulge my ramblings about programming when she is not a programmer at all and doesn't really care. ;)\n<\/p>\n",
        "date": "2009-11-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Going To Christmas Town",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/13\/going-to-christmas-town\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nA lot of the reading I have done on the Internet in the last few years has led me to the following conclusions about the future world I will be programming in:\n<ul>\n<li>It will require manipulating exponentially more data than now<\/li>\n<li>It will require you to understand both parallel processing and concurrency (although to this simple programmer's brain they appear to be the same thing<\/li>\n<li>A stateless model of the web looks more and more like something that works against human nature<\/li>\n<\/ul>\n<\/p>\n\n<p>\nI have become fascinated with languages that talk about dealing with concurrency:  <a href=\"http:\/\/ftp.sunet.se\/pub\/lang\/erlang\/index.html\">Erlang<\/a>, Python using <a href=\"http:\/\/twistedmatrix.com\">Twisted<\/a>, <a href=\"http:\/\/clojure.org\">Clojure<\/a>, and the newest kid on the block <a href=\"http:\/\/golang.org\/\">Google Go<\/a>.  I have no idea why these interest me so much.  But I find them all fascinating, and I wonder how anything we do at work on the XML-feed-parsing side could benefit from concurrency (and that gets me into the topic of whether or not concurrency matters if you have to write data to a relational database and dealing with locks etc, god I sound like a programming nerd!).\n<\/p>\n\n<p>\nRich Hickey, the creator of Clojure, gave this <a href=\"http:\/\/www.infoq.com\/presentations\/Are-We-There-Yet-Rich-Hickey\">awesome talk<\/a> about current programming language paradigms and how well suited they are to the highly statefull, concurrent future that I feel we will be facing when building online applications.  Go and watch it and you will find that you knew oh so very little about programming language concepts.\n<\/p>\n\n<p>\nSo not only are we dealing with concurrency, we also need to deal with state.  PHP is stateless.  \"Share-nothing\" was a revelation for it's time, and allowed you to build web applications that could horizontally scale quite well.  But then we started requiring state.  So we use things like sessions, and cookies:  tricks that allow us to let data persist between requests.  You could almost throw databases into that category.\n<\/p>\n\n<p>\nPerhaps this is ignorant rambling.  All these things make it harder and harder for a statefull environment like the web to act like it is actually retaining values between requests.  Maybe something like <a href=\"http:\/\/en.wikipedia.org\/wiki\/Seaside_(software)\">Seaside<\/a> is a model to look at it:  it preserves state across requests using continuations, which is a programming concept that you just don't learn when you teach yourself PHP.\n<\/p>\n\n<p>\nYou could argue that we are on the verge of a major shift in programming language methodologies.  The challenge of programatically handling concurrency and state in a way that programming trolls like me can understand is a huge one.  Tim Bray has been covering this on his blog via his \"so fascinating it makes me understands how stupid I really am\" <a href=\"http:\/\/www.tbray.org\/ongoing\/When\/200x\/2009\/09\/27\/Concur-dot-next\">Concur.next<\/a> series.\n<\/p>\n\n<p>\nWill we ever have a statefull, concurrent language for building web apps.  I'm sure we will.  I just don't think it's been written yet.\n<\/p>\n",
        "date": "2009-11-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Scary Future World I Will Program In",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/12\/the-scary-future-world-i-will-program-in\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI am of German descent.  Both my parents were born there (although my mother moved away when she was 2, so I don't know if that really counts).  Both my grandfathers were in the German Army - one as an infantry solider, the other as a messenger.  My grandfather (and for that matter, my father) never told me anything about their experiences during World War II.  I do know that my father had his house bombed out three times, and he probably still suffers from Post Traumatic Stress Sydrome as a result of it.  Anyway, about 10 years ago when I was visiting my uncle (my father's eldest brother) he told me a story about my grandfather.\n<\/p>\n\n<p>\nMy grandfather was unlucky enough to have been part of the German army during the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Battle_of_Stalingrad\">Battle of Stalingrad.<\/a>  Once the German army had surrendered, all the remaining soldiers were arrested for crimes both real and imagined (according to my uncle, my grandfather was arrested for stealing a loaf of bread) and sent away to labour camps.  My grandfather got sent to Siberia along with a bunch of other prisoners.  They were dumped into a forest, given tools and told to build themselves shelters if they expected to survive.\n<\/p>\n\n<p>\nSo, while in that prison camp my grandfather learned to speak, read and write Russian.  At some point he discovered that once a year, prisoners who had committed certain crimes could apply for clemency and be allowed to go back home.  Eventually he was able to get his case accepted and was put on a train headed to Berlin.  I believe this was 1953 or 1954, I cannot remember.  Every time the train stopped, all the pardoned prisoners were marched out and every tenth man was sent back on a train going the other way to Siberia.\n<\/p>\n\n<p>\nLuckily my grandfather managed to make it all the way back to Berlin and back to his family in Gelsenkirchen.  I cannot being to imagine what his experiences were like, and I can understand why he was probably very reluctant to tell his very young grandson (he died when I was 11) what World War II was like.\n<\/p>\n\n<p>\nSo on this Remembrance Day I will think about my grandfather, Henry Hartjes, and vow to never forget what happened to him.\n<\/p>\n",
        "date": "2009-11-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "On Remembrance Day, remember both sides",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/11\/on-remembrance-day-remember-both-sides\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>(Note, I almost forgot to post about this today as part of my November blogging challenge)<\/i><\/p>\n\n<p>\nI have a serious programmer man-crush on <a href=\"http:\/\/gilesbowkett.blogspot.com\/\">Giles Bowkett<\/a>.  I don't always agree with him, but when he talks about programming he never fails to make me stop and think.  Just like <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> when she talks about design.  In a blog post he mentioned what he considers <a href=\"http:\/\/www.amazon.com\/Code-Generation-Action-Jack-Herrington\/dp\/1930110979\/ref=sr_1_1?ie=UTF8&s=books&qid=1257909776&sr=8-1\">the best book that programmers have never read<\/a>.  I've taken a look at the sample chapters that are available from the publisher.  I was very impressed.  Then I watched the talk that Giles gave about <a href=\"http:\/\/mtnwestrubyconf2008.confreaks.com\/03bowkett.html\">code generation and why you should be aware of it.<\/a>\n<\/p>\n\n<p>\nI've probably had more experience with code generation than most programmers, being an early proponent and user of CakePHP's \"bake\" system (even writing my own test shell for it, which I'm sure was abandoned and not used by anyone else).  When I tell people about what you could do with 'bake', a lot of times I got blank stares.  They didn't understand why I was so excited by it.  That's okay, sometimes I get excited about things that other people could care less about.\n<\/p>\n\n<p>\nBut you read things like \"to generate these 1050 files by hand would take 3 man-years on the project, and we could create a generator to do it in 2 man-months\", well, if that doesn't pique your interest then I think you're in programming for the money, not for the challenge of solving problems.\n<\/p>\n\n<p>\nWhich is why I think I need to set aside some time at work to examine a tool that I hope I can lean heavily on for upcoming PHP projects, <a href=\"http:\/\/framework.zend.com\/manual\/en\/zend.tool.framework.html\">Zend_Tool_Framework<\/a>.  If I'm right, and Zend_Tool_Framework is nice and tight and generates code that was of as high quality as \"bake\" did, then it will help speed up development.\n<\/p>\n\n<p>\nRails leans very heavily on code generation to provide it with the structure that it has, which in  term allows you to get down to the job of solving the problem you are faced with, instead of creating code from scratch.  A well-written code generator can save you immense amounts of time.  I do not see much evidence of a culture of code generation in PHP, but the Rails people *get* it.  \n<\/p>\n\n<p>\nSo, do the following:\n<ul>\n<li>Watch Giles' presentation.  He is smart AND funny<\/li>\n<li>Either buy \"Code Generation In Action\" or at least <a href=\"http:\/\/www.manning.com\/herrington\/\">check out the sample chapters you can download<\/a><\/li>\n<li>Buy me a copy of this book.  It's on my Amazon.com <a href=\"http:\/\/www.amazon.com\/wishlist\/2ZNT96VNHBEQ2\/ref=reg_hu-wl_goto-registry?_encoding=UTF8&sort=date-added\">wishlist!<\/a><\/li>\n<\/ul>\n<\/p>\n",
        "date": "2009-11-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Code Generation For Fun And Profit",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/10\/code-generation-for-fun-and-profit\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI was engaged in a lively discussion on Twitter this morning sparked by someone grumbling that people should not be writing frameworks that target PHP 4.  In the course of that discussion, I offered my opinion on a couple of things:\n<ul>\n<li><a href=\"http:\/\/codeigniter.com\">My least favourite framework<\/a> suffers from having code that detects whether or not you are using PHP 4<\/li>\n<li>PHP 5 has been out long enough that pandering (I do not know if there is a better word for that) to the crowd that does not want to update to it is counter-productive.<\/li>\n<\/ul>\n<\/p>\n\n<p>It was pointed out to me that CodeIgniter has 23 lines of code in it dedicated to detecting what version of PHP you are running.  In my opinion, that is 23 too many.  \n<\/p>\n\n<p>\nOf course, it isn't as simple as that.  If you have customers who are paying you for your application and they are running PHP 4, well, you have a tough decision:  keep supporting them and your application becomes more and more convoluted as the language changes or be bold and tell them \"from this point forward new versions of my application will be PHP 5 only.\"  I think the truth is that very few people are willing to make that sort of stand, and that's okay.  In the end, you really should use whatever tools you are comfortable with.  But it's important to understand why those tools are, in the big picture, substandard.\n<\/p>\n\n<p>\nMy personal opinion is that PHP 5 has enough new features that either replace existing functionality in PHP 4 or give you features that were not available before, only sheer apathy prevents you from creating a PHP 5-specific version of your application.  Not to mention that PHP 5 itself runs faster than PHP 4. If you have to turn on E_STRICT so your application stops spitting out errors all over the place, you are doing it wrong.\n<\/p>\n\n<p>\nWhat I think would be very interesting is to see how <a href=\"http:\/\/www.rubyonrails.org\">Ruby on Rails<\/a> and <a href=\"http:\/\/www.djangoproject.com\">Django<\/a> handle this problem:  what sort of contortions do they go through when Ruby and Python (respectively) make changes and perhaps break backwards compatibility.  Is PHP the only programming language for the web where the people running older versions hold onto it kicking and screaming, despite gobs of evidence that newer stable versions of the language have fixed bugs, perform better, and offer new useful features?  Enquiring minds want to know!\n<\/p>\n",
        "date": "2009-11-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why I Don't Want To Use Tools Written For PHP 4",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/09\/why-i-dont-want-to-use-tools-written-for-php-4\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(This is another problem I solved with the help of <a href=\"http:\/\/stackoverflow.com\"<\/a>Stack Overflow<\/a> and some <a href=\"http:\/\/en.wikipedia.org\/wiki\/Rubber_duck_debugging\">rubber duck debugging<\/a>)\n<\/p>\n\n<p>\nWhile cleaning up some code I noticed a function that was sending data via an HTTP-PUT had stopped working.  A classic example of code \"accidentally working\".  So, this was the perfect opportunity to (a) write a test to verify that it worked and (b) clean up the code so that it was doing the job properly.  It had been using cURL, but I was using PHP streams elsewhere so I decided to be consistent.\n<\/p>\n\n<p>\nSo here's what we had to do:\n<ul>\n<li>Pass the code a URL of where the file was going to end up on the eXist DB server<\/li>\n<li>Pass the name of the temporary file that contained the info<\/li>\n<li>Send the file via HTTP-PUT to eXist, along with the username and password it requires.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThe old code was sending the username and password as part of the URL, but that simply was not working any more.  Why it stopped working isn't all that important except to say that passing the username and password the *proper* way, which is via the HTTP header in the request, is the correct way to go.\n<\/p>\n\n<p>\nSo, I googled around, looked at my existing code (including an <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2008\/01\/11\/how-to-http-put-a-file-somewhere-using-php\/\">old blog post<\/a>) I tried a few things and just couldn't get it to work.  The problem?  I kept getting a \"401 Authorization denied\" message.  I was positive I was sending the header in the correct format.  So, I asked Stack Overflow to help me while I looked at the code with my trusty stuffed Grumpy Dwarf doll (you know, from the Disney Movie) in my lap looking at the screen while I went over the code.\n<\/p>\n\n<p>\nYou know, I never figured that \"rubber duck debugging\" worked, but in this instance by explaining what I'm doing I figured out a few things:\n<ul>\n<li>Don't blindly trust code examples you find on the internet<\/li>\n<li>Sometimes taking the time to explain how something is supposed to work someone actually makes it easier for you to figure it out.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nLo and behold, I <a href=\"http:\/\/stackoverflow.com\/questions\/1691530\/sending-a-file-via-http-put-in-php\">figured it out<\/a>.  I'll repost the code here too:\n<br \/>\n~~~\n$params = array(\n    'http' => array(\n        'method' => 'PUT',\n        'header' => \"Authorization: Basic \" . base64_encode($this->ci->config->item('ws_login') . ':' . $this->ci->config->item('ws_passwd')) . \"\\r\\nContent-type: text\/xml\\r\\n\",\n        'content' => file_get_contents($tmpFile)\n             )\n         );\n$ctx = stream_context_create($params);\n$response = @file_get_contents($url, false, $ctx);\n\nreturn ($response == '');\n~~~\n<\/p>\n\n<p>\nMy mistake?  For some reason unbeknownst to me I was passing an array of values as the header.  Dunno why I did it, must've got it from an example somewhere.  Now I have code that successfully sends my file to eXist via HTTP-PUT.  The only thing I do not like is that I have to suppress the output of file_get_contents() because it throws a warning while also reporting the successful 201 HTTP response code.  Perhaps there is another way to do it, but I know with 100% certainty that this code does work.\n<\/p>\n",
        "date": "2009-11-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Sending data via HTTP-PUT using Basic Authentication",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/07\/sending-data-via-http-put-using-basic-authentication\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>We are contemplating the next generation of our <a href=\"http:\/\/www.xmlteam.com\/feedfetcher.php\">XML feed processing applicatioin<\/a> and discussing what technologies we want to use.  Personally, I was pushing for <a href=\"http:\/\/twistedmatrix.com\">Twisted<\/a> because of it's support for concurrency and, well, it's Python.  The main dev on the project (it is currently a Perl application) likes Java, as does our sysadmin (who also updated some existing infrastructure to use Java).  At one time I thought that we could replace some existing Ruby code in our system with some <a href=\"http:\/\/www.jython.org\/\">Jython<\/a> code, but like many things I have not been able to free up the time to work on it.\n<\/p>\n\n<p>Since we seemed determined to use Java, I decided to see if I could pique the Java boyz interests and suggested that we take a look at <a href=\"http:\/\/www.scala-lang.org\/\">Scala<\/a>.  It's terse, totally object-oriented and has full interoperability with Java itself.  Which, hopefully, means that some of the libraries available for Java that would be of use to our project could be used within Scala as well.\n<\/p>\n\n<p>\nSee, I'm stuck between a rock and a hard place here:  I'd love to be involved in this project because Scala seems cool, and I've never done any work with Java before.  But will I ever get the chance, being the main web-app guy at work now?  *sigh*\n<\/p>\n\n<p>\nI guess I could always go into stealth mode and see if I could whip together a quick prototype using Twisted, just to see if it could connect to our systems and pull down documents.  Hrm...HRM....MUAHAHAHAHAHAHAHAHAHAH.  Time to see if all the comments people made in my Twisted (web) vs. Tornado post are true, and that Twisted is a viable option for pulling in XML documents and parsing them so they fit into a relational database, like our existing product.  It could also be a good excuse to stretch out the use of <a href=\"http:\/\/exist.sourceforge.net\">eXist<\/a> and store documents in that.\n<\/p>\n",
        "date": "2009-11-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Next-Gen Work Projects",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/05\/next-gen-work-projects\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For those who follow me on Twitter, I'm pretty sure it was obvious I was having a very rough day today.  I'm in the process of making some pretty invasive changes to an application and work, and I approached it with much trepidation because of an extreme lack of tests.  I managed to get part one of these changes done, and refactored some stuff to get away from constantly passing parameters around like messages.  Instead I decided to place these values inside class variables.  Chortling to myself at how much better it was than passing the same values around all the time, I wrote some unit tests and all systems were green.  Awesome.<\/p>\n\n<p>\nThen I noticed the application itself didn't work properly now.  \"How can this be, o seasoned veteran of 12+ years of web application experience?!?!\" I can hear you saying.  Alas, forgive me for I have committed the sin of being too cute with my refactoring.\n<\/p>\n\n<p>\nWell, actually, the problem is that I did not write enough tests to cover the code I was refactoring and simply <a href=\"http:\/\/en.wikipedia.org\/wiki\/Cowboy_coding\">cowboy coded<\/a> my way through it today to get it to work.  Well, it's *sort* of working and there are many refactorings still to do.  But for sure I have to step back and examine my test coverage to make sure I am testing EVERYTHING I'm fixing.  The mistakes I made were SO obvious once I took the time to trace what I call the \"call flow\", which is tracking what gets executed and in what order.  If I had written tests for everything I encountered in this \"call flow\" I think I would've been a lot better off, instead of yelling obscenities targeted at myself while trying to figure it out.\n<\/p>\n\n<p>\nLooking back at my choices in refactoring, well, I could've gone either way:  passing messages around in the form of parameters is a pretty safe way of doing things, but I'm determined to cut things down to the least amount of code possible while still achieving the desired results.  I'm not talking about non-intuitive code hacks, or using trinary expressions whenever possible.  If I'm using objects, I might as well use class variables to store values that need to persist throughout the request. \n<\/p>\n\n<p>\nSo when I fire up <a href=\"http:\/\/www.vim.org\">the one-true editor<\/a> tomorrow morning to keep going, I will say to myself out loud \"don't get too cute with your refactoring, Chris.\".  Oh yeah, and I'll make sure to write my tests as I go along.\n<\/p>\n",
        "date": "2009-11-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Don't Get Too Cute With Your Refactoring",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/04\/dont-get-too-cute-with-your-refactoring\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the sites I find myself visiting more and more often is <a href=\"http:\/\/stackoverflow.com\">Stack Overflow<\/a>.  The idea is so simple:  create a web site where people can ask questions and then allow other users to answer them.  Stack Overflow has spawned some other sites (most notably <a href=\"http:\/\/serverfault.com\">Server Fault<\/a>, which helps sysadmins answer tougher questions) but I find it's origins much more interesting.\n<\/p>\n\n<p>\nIf I remember correctly, <a href=\"http:\/\/www.codinghorror.com\/blog\/\">Jeff Atwood<\/a> and <a href=\"http:\/\/www.joelonsoftware.com\/\">Joel Spolsky<\/a> started up Stackoverflow to provide a freely-available alternative to Experts Exchange.  I have lost track of the number of times I was searching for an answer on the web, only to be led to Experts Exchange and their requirement that you pay for access to an answer.  Jeff and Joel weren't having *any* of that, and thus Stackoverflow was born.  I'm sure it doesn't hurt that they have figured out how to make money off the site (they've started doing <a href=\"http:\/\/jobs.stackoverflow.com\">job listings<\/a>, but it doesn't cost someone like *me* anything to make use of this amazing resource.\n<\/p>\n\n<p>\nFor example, this week I'm doing a refactoring of an application to rework many URL's to now include a publisher key along with a league key.  I discovered I needed to add a new field to a database table as part of the process, and long with that I also needed a migration script to go with it.  I didn't want to write a one-off script, so I started googling around to find an answer to the question \"how to do a Postgres update script with multiple sub-selects\".  After digging around for a while I suddenly realized I should ask an expert.  So off I went to Stack Overflow and asked for some help.  Then I went off to try a new sushi place in town for lunch.\n<\/p>\n\n<p>By the time I came back <a href=\"http:\/\/stackoverflow.com\/questions\/1668721\/updating-records-in-postgres-using-nested-sub-selects\">I had my answer<\/a>.  A well-thought-out, correct answer.  I tested it, worked just fine and I added it to the list of migration scripts for the upcoming code push when these changes go live.\n<\/p>\n\n<p>\nI cannot recommend enough that you check out Stack Overflow next time you have a programming-related question that needs answering.  Also, be a good contributor and see if you can't help out some other users of the site by providing them with an answer for *their* question.  No, DIE IN A FIRE is not an appropriate response.\n<\/p>\n",
        "date": "2009-11-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why I Love Stack Overflow",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/03\/why-i-love-stack-overflow\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><i>For the month of November I am going to be trying out an experiment.  I'm going to post Monday to Friday all November long.  The posts might be small.  They might be verbose.  They might cover topics you had no idea I was interested in.  But be ready.<\/i>\n<\/p>\n\n<p>\nMy friend <a href='http:\/\/twitter.com\/chiggsy'>Kevin<\/a> is the one who introduced me to the world of <a href=\"http:\/\/www.vim.org\">vim<\/a> and his ability to get paid to build things using <a href=\"http:\/\/www.python.org\">my new favourite language<\/a> fills me with envy.  He has also gone on (at length) to me in IM about why I should also be investigating <a href=\"http:\/\/www.gnu.org\/software\/screen\/\">GNU screen<\/a> to use as part of my toolkit.\n<\/p>\n\n<p>\nSee, I have this annoying habit of opening up multiple Terminal\/Iterm sessions when I am doing things.  Most of the time, it's to quickly open up a session to a remote server.  I figure if I am going to do that sort of thing all the time, I should probably just bite the bullet and use screen's awesome ability to start up a session on a remote machine and then simply detach it.  Then, when I need access to that server again, just resume the session.  So simple, so of course it never occurred to me.\n<\/p>\n\n<p>\nGiven that I work in the shell so much (between vim and other CLI tools) it has become obvious to me that screen is a tool I should've been using for a long time, and only ignorance (or is it pride in doing things the wrong way ;) ) prevented me from investigating it.\n<\/p>\n",
        "date": "2009-11-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "November Blogging Challenge - Day 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/11\/02\/november-blogging-challenge-day-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><img src='https:\/\/www.littlehart.net\/quenton-rip.jpg'\/><\/p>\n\n<p>I had to say goodbye today to an old and dear friend.<\/p>\n\n<p>\nThis morning at 6:45AM my wife went downstairs to give our two cats their morning treats.  We could not find our oldest cat Quenton.  My wife went into the basement to see if he was down there and found him laying in the litter box, unable to get up and walk.  We had no idea what was wrong, but I got dressed as quick as I could, called the 24 hour animal hospital to get directions and took him there.\n<\/p>\n\n<p>\nA blood clot had led to Quenton having a stroke.  He had likely been in pain for several hours before we discovered him.  He did not complain at all until my wife had found him, and then it was obvious he was in pain.  His chances for recovery where nil, so we had him put to sleep.  I was there at the end with him, telling him he was such a wonderful pet and I would miss him dearly.\n<\/p>\n\n<p>\nWe got Quenton 6 days after we got married.  The first date above is when we adopted him.  We have no idea how old he really was, probably 13 or 14.  It was my first cat (I had dogs when I was younger) and we adopted him from a cat rescue program in Toronto.  He had bounced around to 7 different shelters before we adopted him and saved him.  He was a beautiful black and white cat, very large but lean and super friendly towards people.  He would act like a bully at times towards our younger cat we got afterwards, but that's the dominance game for you.\n<\/p>\n\n<p>\nI know people might think I'm a bit of dick the way I talk to people at times.  But I loved this damn cat.  He was my companion during the times when I was out of work and looking after my oldest daughter when she was a baby.  He would jump up into my lap and sit with me when I was working on the computer, but stopped doing it when I started working in the basement 4 years ago.\n<\/p>\n\n<p>\nHe was my wife's constant companion after dinner, climbing up into her lap while she was watching TV.  He'd stand next to me at the dinner table, not begging for scraps (because he knew I wouldn't give him any) but just because he wanted me to pet him.\n<\/p>\n\n<p>\nI can't believe he's gone.  I can't believe he had to suffer in such a horrible way.  I will never forget you Quenton.  You can call me a softie for caring so much about a pet, but I don't care.   I can always get another pet, but I will never be able to replace you.\n<\/p>\n\n<p>\nI'm going to miss your deep rumbling purr any time one of us got near you.  I'm going to miss how you would always be so excited that I picked you up for a cuddle that you would drool on me and only me.  I'm going to miss so many things about you that I simply cannot put into words.\n<\/p>\n\n<p>\nI know you're in a better place now Quenton.  Thanks for 11 years of wonderful memories.  I'm so sorry I had to put you to sleep.  I don't know if I can ever get over it.\n<\/p>\n",
        "date": "2009-10-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "RIP - Quenton 08\/21\/98 to 10\/28\/09",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/10\/28\/rip-quenton-082198-to-102809\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWhile looking around for conferences to speak at that were within a decent drive of my home, I managed to come into contact with <a href=\"http:\/\/twitter.com\/wjgilmore\">Jason Gilmore<\/a>, who also sells PHP books via <a href=\"http:\/\/www.easyphpwebsites.com\/\">EasyPHPWebsites<\/a>.  He saw that I had written this book and offered to put it up for sale via his site.  As a result, the price of the book has gone up by $3 to handle some of the new costs, but I'm much happier with the marketing effort that will be accompanying the book.   Jason makes his living doing this sort of thing, so I'm happy to have a mentor for this process.  I have plans for future books, some of them not even in PHP. ;)\n<\/p>\n\n<p>\nBundled with the PDF will be access to some PHP-related screencasts.  Unfortunately I will not be able to offer videos to existing customers, only for new purchasers of the book.\n<\/p>\n\n<p>\nThe cost of the print-on-demand copy hasn't changed, and sometime later today I will be uploading a version of the book with the hot new cover.  I don't think the price will be changing at all.\n<\/p>\n",
        "date": "2009-10-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New Site for \"Refactoring Legacy Applications using CakePHP\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/10\/27\/new-site-for-refactoring-legacy-applications-using-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>The fall and winter are really the time of year when I can sink my virtual teeth into side projects.  During the summer I'm too busy playing softball or games in my <a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a>, so now that both seasons are done or winding down I can take a look at a side project that's been percolating in my brain for several years.  Late last night I pushed an extremely rough and not-completely-finished version of my application, which I call <a href=\"http:\/\/www.rallyhat.com\">Rallyhat<\/a>.<\/p>\n\n<p>\nIt's build using the latest official version of <a href=\"http:\/\/www.djangoproject.com\">Django<\/a> (which is 1.1.1 as of this writing) and originally I thought of putting up on <a href=\"http:\/\/code.google.com\/appengine\/\">Google App Engine<\/a> long-term.  I did, and it was a hacked-up version of the app without the proper registration links working.  When you add in that I was using a patched version of Django in order to just run on there, I decided it would be smarter if I used regular Django.  You know, learn how the damn thing actually works.  And run it on an environment close to what I would expect, which is Apache using mod_python.  I will probably tinker with it to get to work with <a href=\"http:\/\/code.google.com\/p\/modwsgi\/\">mod_wsgi<\/a> as a next step.\n<\/p>\n\n<p>\nSo, in order to stop procrastinating I decided to put what I actually had working up onto the web for people to see.  Warts and all.\n<\/p>\n\n<p>\nThe idea for the site is allow people to plan activities that involve them going from one place to another.  Think baseball road trip.  Think pub crawl.  Think anything where you need to go to a bunch of places in sequential order.  Your membership in the site will allow you to save those searches to review later.  I've been toying with allowing members to look at ALL searches made by people, but there might be some privacy issues related to doing that.  You might not want people to know what you're planning. ;)\n<\/p>\n\n<p>\nThe resulting interface will be slicker, better annotation on the points you've selected, etc.  It's really rough right now so don't think this is the final version or anything. ;)\n<\/p>\n\n<p>\nSo check it out and play with it.  Don't worry if you break something, hopefully I can learn enough to fix it. ;)\n<\/p>\n\n<p>\nIn my next post I will share some of the code I was using, sort of mini code-review if you will to make sure I am on the way to writing idiomatic Python (or Javascript in some cases).\n<\/p>\n",
        "date": "2009-10-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building Rallyhat: Out of the cloud and onto a slice",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/10\/23\/building-rallyhat-out-of-the-cloud-and-onto-a-slice\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Personal note: wow, 2 weeks since I blogged something.  Can you tell I've been in refactoring mode, not writing new code for work projects and finishing off my <a href=\"http:\/\/www.ibl.org\">simball league season<\/a>. (Go MAD!))<\/p>\n\n<p>\nThe intertubes have been all clogged-up with news about Google opening up limited access to <a href=\"http:\/\/wave.google.com\/\">Google Wave<\/a>, and I am not too proud to admit that I attempted to get an invite by following certain people on Twitter.  They never came through with that invite though.  Oh well.\n<\/p>\n\n<p>\nAs cool as Google Wave appears to be, at it's very core I believe that it is a solution look for a problem.  The solution as far as I can tell is a real-time mailing list where you can imbed all sorts of things into it.   I imagine the technology behind it is very impressive (even noticed my friend <a href=\"http:\/\/marcgrabanski.com\/\">Marc Grabanski<\/a> commenting on Twitter that it appears to be using some of his open-sourced jQuery code) but I can't help but wonder what problem is this solving?\n<\/p>\n\n<p>\nIs it a competitor for things like IRC or <a href=\"http:\/\/campfirenow.com\/\">Campfire<\/a>.  I look at Google Wave and think to myself \"wait until the spammers figure out how to exploit this\".  Perhaps a very cynical view, but I think it's a realistic one.  But most of all, what problem is this solving that already exists?\n<\/p>\n\n<p>\nAs software developers, we all have lots of ego.  It's what allows us to ignore mountains of code that provides solutions to the problems we face and instead plow ahead recreating those solutions because we are convinced that our problem is unique and existing solutions are unsuited for the task.  Sometimes this is even true, and I tip my hat to those developers who create these kind of solutions.  What category Wave belongs in depends on factors that are totally out of Google's control.\n<\/p>\n\n<p>\nBefore you get all \"you are nothing but a hater, you old curmudgeon\" I understand that technologies spring forth that end up being revolutionary.  They often solve existing problems in very subtle ways and then some sort of tipping-point-event happens that shows how useful it is.  Twitter is like that, having become a microblogging service that many people have figured out how to take advantage off (including myself).  Until I can figure out the tipping-point-event for Wave, I remain convinced that it is a solution looking for a problem to solve.   With any broadcast method on the net, the spammers WILL figure out a way to exploit it unless you can prevent people from having to hear their messages.  Twitter is great for that because you can just ignore the spammers (which a lot of them don't seem to understand or even care about).\n<\/p>\n\n<p>\nGoogle Wave reminds me of IRC with a prettier wrapper around it via a web-based interface.  Is that really that earth-shattering?  Not to me it isn't, but I am thinking that I am not the person that Google Wave is being aimed at.\n<\/p>\n\n<p>\nIf you care to, let me know in the comments why I should take a second look at Google Wave.\n<\/p>\n",
        "date": "2009-10-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Solutions Looking For A Problem",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/10\/09\/solutions-looking-for-a-problem\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Can you tell I have nothing earth-shattering to talk about?  Here are the two things taken up processing space in my brain<\/p>\n\n<h3>I won't use frameworks without built-in testing support any more<\/h3>\n\n<p>\nI'm doing some very hairy refactoring of code at work to support a new concept of ownership of content generated by the application.  If I had been honest with myself and started the project with TDD practices, I'd be in much better shape.  While <a href=\"http:\/\/codeigniter.com\">the framework that it was built with<\/a> is all the things it talks about, it is a non-trivial task to add a testing harness to it.  I'm trying to setup <a href=\"http:\/\/jamierumbelow.net\/2009\/08\/11\/setting-up-the-perfect-codeigniter-tdd-environment\/\">this environment<\/a> but I've run into a problem with being too stupid to figure out the changes to my Apache .htaccess file to make it work (UPDATE:  Thanks to <a href=\"http:\/\/twitter.com\/spooons\">@spooons<\/a> for helping me out to get it working).<\/p>\n\n<p>\nSo you can take your lightweight frameworks and chuck them out the window if I have to waste more than 15 minutes of my time figuring out how to write tests for it.  TDD is an essential tool when you get to the maintenance phase of a project. \n<\/p>\n\n<h3>Django Applications are doing things right<\/h3>\n\n<p>\nIf you use Django, you can find lots of third-party applications that you can literally drop into place into your existing one and start using it.  Can you imagine doing this with your favourite PHP framework?  Being ignorant, I have no idea how easy it would be to create something like <a href=\"http:\/\/uswaretech.com\/blog\/2009\/08\/django-socialauth-login-via-twitter-facebook-openid-yahoo-google\/\">Django-Socialauth<\/a> for Zend Framework, where you can drop it into your application and it comes with templates and models and controllers for handling all these things.   I was astounded by both the foresight that went into Django that allows people, as long as they follow specific conventions, to create standalone applications that you can use in pretty much any Django application.  As long as you haven't hacked Django itself too much.\n<\/p>\n",
        "date": "2009-09-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris' Brain - Almost October 2009 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/09\/24\/chris-brain-almost-october-2009-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I think I can give you an executive summary of this blog post:  if the documentation for an open source project sucks, nobody but the most hardcore developers will use it.<\/p>\n\n<p>\nWhat has prompted this incredibly brilliant stating-of-the-obvious?  The reaction by those in the <a href=\"http:\/\/twistedmatrix.com\/trac\/\">Twisted<\/a> community over Facebook's pre-emptive strike in the non-blocking Python-based web server space by open sourcing a framework they are using internally called <a href=\"http:\/\/www.tornadoweb.org\">Tornado<\/a>.  Why are the Twisted folks getting all twisted (look how funny I am!) up about this?  Like any good Open Source project for people who are interested in Getting Things Done, Tornado is dissing Twisted by basically saying \"yeah, we thought about using Twisted but it wasn't easy enough for us to use and we think it sucks\".  I'm pretty sure I'm paraphrasing here, but you get the idea.\n<\/p>\n\n<p>\nNow, I have looked at Twisted and have come to the following conclusions:\n<ul>\n<li>It looks awesome<\/li>\n<li>It is built for people who are supposed to understand what they are doing<\/li>\n<li>The documentation sucks<\/li>\n<li>The examples on how to build anything of any significance are, to this developer, non-existant and\/or difficult to find without shelling out for a possibly very-outdated book<\/li>\n<\/ul>\nContrast this with Tornado.  I've looked at Tornado and have come to the following conclusions:\n<ul>\n<li>It looks awesome<\/li>\n<li>It is built for people who are supposed to understand what they are doing<\/li>\n<li>The documentation is inside the comments on the code which sucks only if you're not into reading the code<\/li>\n<li>It includes a sample application so you can see something other than Hello World<\/li>\n<\/ul>\n<\/p>\n\n<p>\nAm I biased towards Tornado?  You bet.  Why?  Because as hard as I tried, I could not find USEFUL documentation on how to build things using Twisted.  Maybe I didn't use the right search terms.  Maybe I didn't dig down enough links deep on the Twisted site.  Maybe I didn't fully understand the terminology or architecture of Twisted and how they different components speak to each other.\n<\/p>\n\n<p>\nI'll tell you this though:  I am not having any such problems with Tornado.  This is coming across as a criticism aimed towards Twisted, and I suppose that's fair.  I've noticed complaints from the Twisted community which really amount to whining.  I understand that attitude totally.  I've been there, when faced with competition that just might be doing a better job then I am doing.  But complaining that Facebook should've simply fixed up Twisted instead of writing their own is not productive.  Productive is understanding that Facebook looking at Twisted and said \"this is not for us because *we* don't find it easy enough to use\" is a sign that something serious is wrong with Twisted's documentation.   You could have the most awesome non-blocking web server available, but if people with who WANT to use it can't figure out HOW to use it, well, what can you say to that?  Only the most dedicated open source contributors would've done that.  Most will say \"meh, I want to do this myself so I understand it\" and then Twisted will die an obscure death while Tornado plunges forward gaining mindshare amongst people interested in the type of applications you can build with this technology.  In my opinion, it's all because of the lack of clear, freely available documentation for Twisted.\n<\/p>\n\n<p>\nIf there is an online source BETTER than the Twisted site, please share the link love in the comments so I can try and do a better comparison of the two at a documentation level.  For someone like me, who is new to Python but old to the idea of web frameworks, I think that would be the fairest comparison.\n<\/p>\n",
        "date": "2009-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Open Source Is Really About Documentation - Twisted vs. Tornado",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/09\/14\/open-source-is-really-about-documentation\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Normally I don't ask for time-sensitive help on my blog, but since my readers are such gracious bunch I thought I could count on them to help me out.<\/p>\n\n<p>\nI have a <a href='http:\/\/www.agatedepot.com'>site for work<\/a> that uses frames.  Oh yeah, it's <a href='http:\/\/www.cakephp.org'>CakePHP<\/a> application.  Frames are not my favourite thing in the world, but they are part of this particular site.  Now here is my problem:\n<ol>\n<li>Users must be authenticated to use the site, and when they log in from the front page a bunch of frames are loaded.  Then they can click around doing stuff.<\/li>\n<li>When their session times out, meaning they need to get logged back in, I need for the frames to disappear and send them back to front page of the site.<\/li>\n<\/ol>\n<\/p>\n\n<p>\nSo far, I have not been able to figure out how to do this.  I've been told by reliable sources on Twitter that I probably need some Javascript code that does something like this:\n\n~~~\n<script type=\"text\/javascript\"> \nif (top !== self) top.location.replace(self.location.href); \n<\/script>\n~~~\n\nbut I cannot determine *where* to put that code.  Please help this frames n00b figure it out!\n<\/p>\n",
        "date": "2009-09-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Lazyweb Help: Busting out of frames",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/09\/10\/lazyweb-help-busting-out-of-frames\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been feeling a little blogged-out lately, as work is ramping up on a project with some critical milestones to be met, and the stress of getting my basement lair all renovated for occupation after Labour Day.  But the mind never stops working.  Here's two big things that have been occupying my thoughts:\n<\/p>\n\n<p>\n<h3>The arrival of PHP 5.3 and it's impact on frameworks<\/h3>\n<\/p>\n\n<p>\nWhen I upgraded my MacBook to Snow Leopard I noticed that it comes with PHP 5.3 as part of the standard install.  After I got finished fixing my <a href=\"http:\/\/www.macports.org\">MacPorts<\/a> install that I somehow butchered while following two different sets of instructions (way to go Chris), I was not at all surprised to find out that the <a href=\"http:\/\/codeigniter.com\">framework I shall not say out loud<\/a> did not like running with PHP 5.3.  Tons of deprecation warnings abounded, and I had lost my enthusiasm for figuring out how to make them go away.  If anyone cares to tell me, feel free to add it to the comments as I would prefer to run 5.3 on my laptop.<\/p>\n\n<p>\nAs far as I can tell, <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> is the only framework that is claiming <a href=\"http:\/\/www.zend.com\/en\/company\/news\/Press\/zend-framework-features-php-readiness-and-new-professional-components\">that it will run just fine in PHP 5.3.<\/a>.  Although I cut my teeth so-to-speak with <a href=\"http:\/\/www.cakephp.org\">another framework<\/a> that has been good to me (hey, <a href=\"https:\/\/www.littlehart.net\/book\">buy my book to see why<\/a>, I cannot but remain impressed that a production-ready framework is ready to go with PHP 5.3.\n<\/p>\n\n<h3>Finally figuring out Design Patterns and how they relate to refactoring<\/h3>\n\n<p>\nIn <a href=\"http:\/\/www.codersatwork.com\">Coders At Work<\/a> Brandon Eich talks about how Peter Norvig once said (I'm paraphrasing here) \"a design pattern shows a flaw in your programming language\".  As I'm expanding functionality for <a href=\"http:\/\/www.sportso.com\">a project at work<\/a>, I am starting to wonder if it's maybe time I really looked at them closely.  I see myself doing certain things in my code and wondering if there is an easier way to do them.  You know, the same sort of if-the-else comparisons, having to do the same thing but slightly differently inside a method.  Some of these are <a href=\"http:\/\/en.wikipedia.org\/wiki\/Code_smell\">code smells<\/a>, but I am wondering about what's the best way to approach refactoring them.\n<\/p>\n\n<p>\nOf course, you always have to consider the environment in which your code lives.  Since I'm using a framework, there are rules I have to follow.  Most of the time, these rules are okay.  Other times I find myself fighting against them a tiny bit, which shows that maybe I need to go and buy the <a href=\"http:\/\/www.amazon.com\/Refactoring-Improving-Design-Existing-Code\/dp\/0201485672\/ref=sr_1_1?ie=UTF8&s=books&qid=1252100204&sr=8-1\">seminal classic on refactoring<\/a> and read it.  Maybe one of my generous readers would send me a copy?\n<\/p>\n",
        "date": "2009-09-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - September 2009 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/09\/04\/whats-in-chris-brain-september-2009-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was fortunate enough to get a sneak peek at Peter Seibel's <a href=\"http:\/\/www.codersatwork.com\/\">Coders At Work<\/a>, where he interviewed 15 programmers, many of whom are considered legends in programming, to get their thoughts on a wide variety of topics related to programming.  These range from Brad Fitzpatrick (Live Journal and memcached to name some of his well-known projects) to Simon Peyton Jones (one of the creators of Haskell). Although I have not finished the book yet (it's 454 pages and I'm about 200 pages in) it has already left quite an impression on me.<\/p>\n\n<p>\nMr. Seibel has also previously written an award-winning book about Lisp called \"Practical Common Lisp\".  With a pedigree like that, how could I ignore a book like this, despite my suspicion that those who understand Lisp are aliens from another planet?\n<\/p>\n\n<p>\nWhile I read a lot of technical books and web sites, I have grown more-and-more to like books that get into the minds of the people behind the technology.  It's not that I'm expecting to find the perfect process for creating awesome projects, because that seems to be the residue of great skill and timing.  I'm interested in reading about the personalities that created these things.  Maybe I'm indulging in a little hero worship, but I can't imagine a better teacher than those who've climbed to the top and also are willing to share their failures along the way.\n<\/p>\n\n<p>\nMore importantly, Peter Seibel seems to have found the right mix of questions and follow-ups to coax information from his interview subjects.  When you read about this larger-than-life people who've built projects that you understand were an huge undertaking have been a success, it's, what word am I looking for, reassuring to find that they are human beings with their own unique personalities, but all driven to succeed.  \n<\/p>\n\n<p>The range of topics covered is just astounding.  I could write a book just summarizing them, another tribute to Mr. Seibel's ability to get his subjects to open up and go into detail.  Not that most techies have a hard time speaking volumes on the topics they are interested in.  I've read thoughts on college CS education, virtual machines, pair programming, learning the value of interfaces to meld wildly different technologies...all things that I am interested in or want to learn more about it.  Perhaps I'm the perfect target audience for a book like this.  Reading these people's thoughts on them makes me realize where I actually have an in-depth understanding and where I have just scratched the surface of the available knowledge.\n<\/p>\n\n<p>\nI highly recommend this book if you're interested in finding out what makes some of the people who have helped to build and expand the amazing world-wide computer network we call the Internet tick.  If anything, it will show just how much thought goes into the planning and execution of projects that we sometimes don't give enough credit.\n<\/p>\n",
        "date": "2009-08-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review -- Coders At Work",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/08\/22\/book-review-coders-at-work\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(This is the 4th part in series about my experiences as a telecommuting developer.  For more info, check out <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2009\/08\/08\/so-you-want-to-telecommute-part-3-collaboration\/\">part 3, <\/a><a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2009\/08\/01\/so-you-want-to-telecommute-part-2-accountability\/\">part 2<\/a>, and <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2009\/07\/29\/so-you-want-to-telecommute-part-1-building-trust\/\">part 1<\/a>)<\/p>\n\n<p>\nIf you really want to set of a flame war on the internet, start talking about what you use as (a) your programming language and (b) what editor \/ IDE you use.  Thankfully, this posting is not about either one of those things.  After all, who can argue with using <a href=\"http:\/\/www.vim.org>the One True Editor<\/a>.  Here, I want to share my thoughts on the type of tools you are likely to need as a telecommuting developer.\n<\/p>\n<p>\nSo now that you've gotten the trust of your employer, and you have tools in place to provide accountability, and have a system in place to collaborate with your fellow employees (hah, tied those all together nicely!) we now have to talk about what you are going to use to get the job done.  \n<\/p>\n<p>\nChances are that if you are telecommuting, you are working for a small company.  Which also means that it is very likely that you will doing a lot more than just writing your code and handing it off to someone else for deployment into production.  When you also take into account that response times for your fellow telecommuters is likely slower than if you were in the same office, you almost needs to put into place practices that are defensive in nature.\n<\/p>\n<p>\nThe importance of a reliable set of development tools is something I've touched upon both in previous posts on this blog and in talks I've given.   This toolset becomes even more important when you're responsible for getting your code into a state where you can deploy it with confidence.  There is a reason that the amount of information available about unit testing, continuous deployment, and tools for automating other parts of the development process has exploded lately:  they are all things that can help you get error-free code deployed faster.\n<\/p>\n<p>\nMany do not believe in the Cult of Unit Testing, and that's okay.  There are lots of other testing that can be done.  Even something as simple as testing things out in a browser can become a critical part of your programming toolkit.  I'm sure it comes as no shock to people how many bugs slip through the development process and into production that could've been detected with a simple check of the application via a web browser.  We are all guilty of this kind of thing.  These days thanks to things like <a href=\"http:\/\/seleniumhq.org\/\">Selenium<\/a> and <a href=\"http:\/\/www.getwindmill.com\/\">Windmill<\/a> it is easier than ever to create scripted web browser sessions for testing purposed.  \n<\/p>\n<p>\nSure, it will take time to learn to use these tools but it's hard to argue that it is anything other than (a) laziness or (b) fear of the unknown in the form of other languages or environments that stops people from implementing tools that will give you such a huge return on the investment made into setting them up.  I have been guilty of this in the past too, so I'm familiar with the anxiety that accompanies the attempt to automate parts of your testing.\n<\/p>\n<p>\nSo with some sort of testing in place, the next step is to get into place automated deployment tools.  Readers of my blog know my fondness for <a href=\"http:\/\/www.capify.org\/index.php\/Capistrano\">Capistrano<\/a>, and it's use has become an integral part of my toolkit.  Why?   It allows me to do automated *repeatable* deployments to both my staging and production environments.  I work very hard to eliminate the idea that \"we need to do things differently in production\", because you can pretty much guarantee that you will end up with bugs that only exist in production and are difficult, if not impossible, to duplicate in your development environment.\n<\/p>\n<p>\nI am not aware of any tools like Capistrano that exist for those who use Windows as their production stack.  If you know of some, let me know in the comments.  For my friends who use PHP and cannot use Ruby, I highly recommend investigating the use of <a href=\"http:\/\/phing.info\/trac\/\">Phing<\/a> as a substitute.  I've also been playing around with <a href=\"http:\/\/www.nongnu.org\/fab\/\">Fabric<\/a> as an alternative to Capistrano.  Much as with testing, there is no shortage of tools available to you.  Heck, even something as simple as shell scripts that check out your code from version control and copy it into a desired location are a step up from manual deployment of code.  Sure, it's easy to do 'svn update' in a directory, but that will only be easy until you have to start doing things like database changes at the same time.\n<\/p>\n<p>\nI guess what I'm really trying to say is that you should be using tools that make deploying error-free code into production *easier*, because chances are you will be the one doing the deployment.  Where I work, each developer is responsible for deploying their own code so it was in my best interest to create something that was \"fire and forget\" when it came to pushing up changes.  Need to copy new scripts in place for pulling data from our XML db?  No problem.  Need to update the schema for the database?  No problem, got it totally covered.\n<\/p>\n<p>\nA lot of these issues are something I've covered <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2008\/04\/17\/deployment-is-not-a-4-letter-word-the-screencast\/\">before<\/a>.  Instead I will focus on a final thought on tools -- they need to be as easy to use as possible.\n<\/p>\n\n<p>\nWhen you telecommute, one of the biggest problems is response time.  Since you're not in the same office (or even same city) as your co-workers, when something goes wrong it is likely that you will have to be the one that fixes it without help from others.  Building a tool kit like the one I've suggested will go a long way towards helping you when things go wrong.  Which they will.  By automating as much of this as possible, it becomes quite simple to fix any problems.\n<\/p>\n\n<p>\nIf you have to fight against your tools, then I think you're doing it all wrong.  Surround yourself with tools that you are comfortable using, and understand just how essential they really are.  When I think of how I used to program when I started 12 years ago, I have no idea how I got anything substantial done.  With my tool set in place, I'm ready to tackle just about anything I need to do at work.  My ability to customize the tools I use means I can do my job from anywhere I can get a reliable internet connection.  And that is really the key to successful telecommuting:  getting things done so they won't ever ask you to come into the office again.\n<\/p>\n\n<p>\nThanks so much for reading this series on telecommuting.  If you have any questions about anything I've discussed here, feel free to add them to the comments.\n<\/p>\n",
        "date": "2009-08-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So You Want To Telecommute? Part 4 -- Programming Tools",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/08\/15\/so-you-want-to-telecommute-part-4-%e2%80%93-programming-tools\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(This is part 3 of an ongoing series about my experiences with telecommuting and the tools and practices I feel help make it work)<\/p>\n\n<p>This post has a little bit of crossover with <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2009\/08\/01\/so-you-want-to-telecommute-part-2-accountability\/\">second post<\/a> in this series, so you'll have to forgive me if you see something I talked about before.  Now that's we've identified the issues of trust and accountability, the next big issue a telecommuter faces is one of collaboration.\n<\/p>\n\n<p>\nSo now that you've gotten an environment created where you are being trusted to do your work as assigned (despite what people think, just doing a good job isn't always enough in the minds of those who manage programmers and designers), and you have a way to be held accountable for the stuff you are working on, we are on to the sticky issue of collaboration.\n<\/p>\n\n<p>\nAs an aside, it is important to understand that if your company creates things that other people use, there is a big difference between how you communicate with your customers and how you communicate with your co-workers.  You might consider me cynical, but your communications with your customers need to be in such a way that you have control over the channels.  Otherwise you open yourself to chaos and miscommunication.  Although we do have email addresses used for support, we are consistent in our messages to our customers that we need them to use the ticketing system.  Otherwise they run the risk of having their problems not dealt with in a timely manner.\n<\/p>\n\n<p>\nInternally, our main method of collaboration is <a href=\"http:\/\/en.wikipedia.org\/wiki\/Irc\">IRC<\/a>.  We have our own server, and we use IRC as the second line of support for our clients, encouraging them to log in and join us in IRC for problem solving sessions that just can't be done via email.  We all stay logged into our main company channel and usually logged in to the main support channel.  By having one central location where we hang out online, it allows us to (a) log all conversations for later review and (b) allow digging find solutions we talked about earlier but never turned into internal tickets.\n<\/p>\n\n<p>\nHowever, I do find that the nature of IRC at work is much like instant messaging: it creates an air of perpetual interruption.   Luckily, there are easy ways to deal with the problem.  My <a href=\"http:\/\/conceitedsoftware.com\/products\/linkinus\">IRC client<\/a> lets me set alerts for messages.  I have it chirp out very loudly whenever someone in IRC types my name in a message.  That way, I can concentrate on coding and then shift over to IRC when my attention is required.  Otherwise, you would be forever checking the chat window to see if I need to deal with anything.\n<\/p>\n\n<p>\nIf we didn't already use IRC (it was being used before I got here) I would recommend using something like <a href=\"http:\/\/campfirenow.com\/\">Campfire<\/a>.  It's a good mix between IRC and instant messaging, and you can find some <a href=\"http:\/\/www.karppinen.fi\/pyro\/\">interesting<\/a> <a href=\"http:\/\/propaneapp.com\/\">clients<\/a> for it if you don't want to use a web-based interface.  I imagine the only bad thing is that someone else is storing logs of your conversations.  Personally, I don't worry about that sort of thing since it's very unlikely anyone who really cares about what you're doing will see those conversations.  Plus, it is not free but I think the service is worth it.\n<\/p>\n\n<p>\nWhat you use isn't really important, so long as you're using something that allows everyone to be in one location and that you can log what's been talked about.  The ability to easily share ideas and links is critical.  To me, email lacks the immediacy that a telecommuter who has to collaborate with his workers on a regular basis needs.  Plus, emails are way too easy to ignore.  How many times has a colleague who you suspected didn't want to do something for you claimed \"I never got that email.\"\n<\/p>\n\n<p>\nSo typically we will discuss things in IRC, then follow-up with either internal tickets or emails that draw in people outside the company if required.  There is the odd conference call for myself, but my co-workers seem to have more of them than I do.  Our weekly meetings are done in IRC as well, eliminating the need for what would likely be a time-wasting 7-person conference call full of stops and starts and dropped calls.  IRC for the win!\n<\/p>\n\n<p>\nI'm sure I've only scratched the surface of collaboration for remote workers, but I think if you make it an early priority to have a communications method where all workers can hang out without giving it their constant 100% attention, then you will find a more natural workflow will emerge.  For telecommuters, it's all about the work flow.\n<\/p>\n\n<p><\/p>\n",
        "date": "2009-08-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So You Want To Telecommute? Part 3 - Collaboration",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/08\/08\/so-you-want-to-telecommute-part-3-collaboration\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In <a href=\"http\/\/www.littlehart.net\/atthekeyboard\/2009\/07\/29\/so-you-want-to-telecommute-part-1-building-trust\">part one<\/a> of this series, I talked about the integral role that trust plays in telecommuting.  Next up we need to talk about the tools you're going to need in order to show accountability while telecommuting.<\/p>\n\n<p>\nWhen I accepted my telecommuting position, the first thing that happened was that I immediately felt less-stressed because I no longer had my 90 minutes in \/ 120 minutes out commute to deal with.  For many, that is the number one reason they want to work from home.  Then, I realized that I would also be in an environment where I would be able to control the distractions.  In previous jobs, it was that inability to shut out the distractions when I needed to was the problem. \n<\/p>\n\n<p>In your typical developer cube-farm, there is zero chance that you can find some quiet and solitude when you need it.  All I ever wanted was an office where I could close the damn door when I needed to Get Things Done.  C'mon, you think putting on your headphones is enough to drown out the world around you.  Perhaps it's because I am a grumpy old man, but that just won't cut it.\n<\/p>\n\n<p>\nHowever, you cannot work in isolation when telecommuting for a company, as opposed to freelancing.  There are fellow employees that you will need to speak with, probably on a regular basis.  Telecommuting is not for <a href=\"http:\/\/en.wikipedia.org\/wiki\/Misanthropy\">misanthropes<\/a> who dream of long stretches of uninterrupted work.  You *will* be asked to prove that you're working, not sitting on the couch playing video games when you're supposed to be debugging that new Ajax-powered user interface.  Just pushing your code into production isn't enough.\n<\/p>\n\n<p>We have our own home-brewed ticketing system that started out as a way for clients to inform us of issues they are having, or requests for changes to the services we deliver to them.  Since I have been here (some of it at my prompting), it has also branched out into bug and feature tracking for our various internal projects.<\/p>\n\n<p>\nAlso, another reason for it is accountability.  While our clients (obviously) cannot see the tickets for internal projects, we can see each other's tickets.  Clients are also able to see every entry in the tickets system related to their issues.  During our weekly staff meeting (more on the format for that in the next installment) we discuss \"dangling tickets\", which are issues that have not been resolved in a timeframe that we are comfortable.  Without a transparent issue-tracking system, it would be too easy to try and deny accountability when stuff isn't getting done.\n<\/p>\n\n<p>\nJust using email for this sort of thing is, in my opinion, a mistake.  It's too easy to say \"I didn't get that email\" or \"I must've missed that email\".  If you're not tracking your outstanding issues in a way that others can't see, you're asking for trouble as a telecommuter.  Sure, not everything we do goes into that issue tracking system.  But anything that's critical to your ability to get your assigned tasks done, you have to let other people know what you're doing.  Otherwise you have no justification for asking for help, or even re-prioritizing your tasks.\n<\/p>\n\n<p>\nSo, with your issue-tracking system in place you can now start delving deeper into fine-tuning your work flow.  If your issue-tracking system can keep track of the dates when issues were generated and then resolved, you can get an idea of your velocity on tasks.  Then the next time you need to do something very similar, you can tell your boss with confidence how long it will take you next time.  Now you can get back to playing vid...I mean, get back to planning your next task.\n<\/p>\n\n<p>Also, knowing how long things will take to do, with a good level of accuracy, lets you give your boss surprising bits of information like \"Hrm, ticket 3478 is like an older ticket I did a few months back.  I should be able to get that finished 2 days ahead of the current schedule, so I've got time to tweak that automated deployment task that's flagged as low personal priority.  Okay if I get that working today and Friday?\"\n<\/p>\n\n<p>\nYes, things like this can and do happen.  In fact, I try to make sure that I keep an eye on lower-priority tasks that can be pushed up in priority if I happen to get something done ahead of schedule.  Not every task in my list is labeled \"high priority\", which is something I blame  my boss for :)\n<\/p>\n\n<p>\nNext up, I will share my experiences with staying in touch with your fellow workers while maintaining sanity in your work flow.<\/p>\n",
        "date": "2009-08-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So You Want To Telecommute? Part 2 - Accountability",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/08\/01\/so-you-want-to-telecommute-part-2-accountability\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had been planning for a while to write a series of articles about my experiences with telecommuting.  Prompted by <a href=\"http:\/\/blog.calevans.com\/2009\/07\/29\/remote-developers\/\">Cal Evans blog post about remote developers<\/a> I decided it was time.<\/p>\n\n<p>\n<\/p>\n\n<p>My current position as a \"software engineer\" for <a href=\"http:\/\/www.xmlteam.com\">XML Team Solutions<\/a> is a 100% telecommuting job.  In fact, all of us telecommute:  \n<ul>\n<li>I'm in Milton (about 40 minutes or so west of Toronto)<\/li>\n<li>two in Toronto<\/li>\n<li>one in <a href=\"http:\/\/www.saublebeach.com\">Sauble Beach, Ontario, Canada<\/a> (a small town on the eastern shores of Lake Huron)<\/li>\n<li>one in Victoria, British Columbia, Canada<\/li>\n<li>one in Beverly Hills, California, USA<\/li>\n<li>one Connecticut, USA<\/li>\n<\/ul>\n<\/p>\n\n<p>Now, when you have a company where none of your fellow employees works in the same city, let alone the same country, you quickly find out what the key issue really is: trust.  If you don't trust that the people who work with are professional enough to GET SHIT DONE then telecommuting will not work.  It really is that simple.  I've met my boss in person a grand total of 3 times.  Sure, there have been some video chats and phone calls but we've only actually been together on three occasions:  our corporate retreat just after I got hired, once to attend a trade show in Florida, and once just recently to attend a trade show in Pittsburgh.  Unlike a lot of people, I do not dread meeting my boss. ;)\n<\/p>\n\n<p>\nLook, I know that some people who manage developers are convinced that if they were to allow telecommuting on a regular basis that people would instead spend time screwing around instead of getting work done.  This attitude is unfortunately very common.  Even more disappointing are the people who *do* screw around when telecommuting instead of actually working.  I guess they don't realize how it's hurting their chances of doing it going forward.\n<\/p>\n\n<p>The \"command-and-control\" management style that seems to be applied at some software companies creates an adversarial relationship between employees and employer.  By forcing you to come into an office to work every day, it is a not-so-subtle message that you are not trusted to get things done without supervision.  I've been through this in my own professional career, and sometimes this attitude is warranted.  If you've had the misfortune of having (or working with) a group of employees more interested in goofing off than doing the job that the business requires, then you know what I'm talking about here.  However, I'm more interested in the idea of the value of trust in telecommuting and hiring employees that you can trust to get work done.\n<\/p>\n\n<p>\nNow before you start dismissing what I'm saying here, I understand that there is usually a really good reason to have all your developers in one place other than you want to keep an eye on them:  meetings.  But then again, don't people have conference calls all the time?  Or is there something about collaborative developer work that people think does not work with telecommuters?  In my next installment I will talk about what I think are the critical tools for managing collaboration amongst telecommuting developers.\n<\/p>\n",
        "date": "2009-07-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "So You Want To Telecommute? Part 1 - Building Trust",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/07\/29\/so-you-want-to-telecommute-part-1-building-trust\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Now normally I stay far away from discussing politics on my blog, or anything not related to programming.  However, the debate going on in the US right now over plans to implement some sort of government-funded health care plan in one I find fascinating.  I have many American friends that I follow via Twitter and some of the things I have read have made me decide that a blog post from someone familiar with the Canadian health care system might help clear things up.<\/p>\n\n<p>I must also provide this disclaimer:  I am not a doctor, no-one in my immediate family is a doctor, but I do know people who work as doctors and nurses have spoken with them about these issues in the past.<\/p>\n\n<p>\nLet's start by looking at my understanding of the US health care system as it stands right now.  The US spends more per person than any other country to provide health care, yet it appears that the vast majority of people are unable to benefit from this.  I have read \/ heard anecdotal evidence that suggests that huge medical bills are the cause for the financial ruin of many families, and a leading cause of bankruptcies.  This is a tragedy that no-one should have to go through.<\/p>\n\n<p>\nOn the flip side, the US is the source of many medical breakthroughs.  But I would hazard a guess that the quality of health care a system delivers is in no way related to the ability of that system to develop new procedures or new drugs.  I see them as two different systems, that interact with each other at the end of discovery.  I hope that makes sense.\n<\/p>\n\n<p>\nSo, let's take a look at how the health care system works in my home province of Ontario.  I was born in Ontario and have lived my entire life here.  My only exposure to what some people would call \"critical\" surgery was when I was two years old.  I had eye surgery on my left eye to correct a lazy eye that would've left me cross-eyed (and a circus-show freak as my wife often reminds me).  That's been it.  However, various family members of mine have been in the position of needing surgery of the \"non-optional\" variety, so I think I'm somewhat qualified to discuss this.\n<\/p>\n\n<p>\nNow, those who oppose the government getting involved in being the ones who fund the health care system seem to have a few objections.  This is by no means a comprehensive list, but some of these objections are:\n<ul>\n<li>it will cost more than what is being spent on it by now<\/li>\n<li>people have to wait for vital surgery<\/li>\n<li>people will not have any choice as to what doctor they get to see<\/li>\n<li>it will stop innovation in the field of drug research<\/li>\n<\/ul>\n<\/p>\n\n<p>I think those 4 are enough for me to start with.  Let's look at them one at a time.<\/p>\n\n<h3>It will cost more than what is being spent on it now<\/h3>\n\n<p>\nYeah, I don't see how this is possible.  If you replace insurance companies with the government, despite the government's well-earned reputation for mismanagement it will cost less because the government won't be looking to turn a profit.  Canada's costs-per-capita are significantly lower than the US.  So I think it's safe to say this objection is not true.\n<\/p>\n\n<h3>People will have to wait for vital surgery<\/h3>\n\n<p>\nThis is something that both Americans and Canadians like to throw around, especially those who would like to think that by spending some of their own money they can get the health care they need RIGHT NOW.   See, this issue is a case of perception vs. reality.  I will use my father as an example.  My father has had surgery on both eyes, one knee and his shoulder in the last two years.  From the time he went to see the doctor to say \"I need this fixed\" until the surgery in question happened, I would estimate no more than three months elapsed in every case.\n<\/p>\n\n<p>\nNow, if he had needed to get this stuff done right away he could've gotten it in less than a week.  If you have a life-threatening problem, they get you what you need incredibly fast.  The problem is that one person's life-threatening problem sometimes appears to be a minor inconvenience in the eyes of the health care system.  A bum knee that you can still walk on is not going to get you to jump to the front of the line.  As I have told many of my American friends, if you have a life-threatening problem you will get the care you need right away.  If you are not in immediate danger or disabled, well, you're just going to have to wait.  Since I have not run into this in the US, I don't know what to say to people about this.  Sorry that paying for it yourself won't let you jump to the front of the line?  That's somewhat tongue-in-cheek, but wait times for minor procedures are common in the US too, aren't they?  \n<\/p>\n\n<p>Also, I wish to tell people that the Canadian health-care system DOES NOT PAY FOR EVERYTHING.  It pays for basic medical care and life-saving surgeries for it's citizens.  I still have to pay for dental care, optical care and prescription drugs out of my own pocket.  Many Canadian employers offer supplemental insurance to their employees to cover this.  My wife's company does, my own does not.  But if I break my leg playing softball, I know I won't be given a bill as I limp out of hospital.  I will have to pay for the painkillers, that's for sure.\n<\/p>\n\n<p>So, in our system I'm willing to accept that waiting for non-critical surgery is ok.  I think I have presented evidence that makes this objection not valid.<\/p>\n\n<h3>People will not have any choice as to what doctor they get to see<\/h3>\n\n<p>\nThis is totally false.  The government does not tell me who I can and cannot see to receive health care from.  I am allowed to pick and choose my own family doctor, and I am limited to the choice of any specialist for a particular procedure based only on the availability of that doctor within Ontario to see me.  Yes, there are times when the government pays for out-of-province procedures (yes, including going to Buffalo for an MRI if needed) so that option sometimes exists.  But that is in extreme circumstances only.  So please, don't believe it when an opponent of government-funded health care talks about people only dying waiting for procedures in a government-funded system.  It happens in the US too.<\/p>\n\n<p>I think it's also a good time to give a little insight into how the government actually pays doctors.  See, the doctor tell the government what services they have provided for their patients.  The government then says \"okay, we will give you X amount of money for what you've done according to the following rules\" and that is that.  Doctors cannot charge above government rates for procedures that the government pays doctors for.  That does not mean that doctors are unable to charge what they want for procedures the government health care system does not pay for.  My mother had minor cosmetic surgery to remove some moles and skin tags near her eyes and I spit my drink out when she told me how much it cost her.  I'm guessing that is the normal reaction in the US.\n<\/p>\n\n<h3>It Will Stop Innovation In The Field Of Drug Research<\/h3>\n\n<p>I'm not qualified to speak to this, but I will say the following: it will certainly reduce the *profits* pharmaceutical companies make.  An American friend of mine tried to explain to me why this was such a bad thing, and that if a company decided to not sell a life-saving drug to the government-run system that it would be a bad thing for patients.  I agreed with him, and also agreed that the government shouldn't force pharma to sell them the drugs.  Will this cause problems?  Probably.  Maybe it just opens up a way for a competitor to sell a similar drug to the government instead.  But if the pharma industry can't make huge amounts of money, I'm guessing they are reluctant to invest it in R&D, although I think the massive amount of money they would not have to spend on marketing might offset that.  So I am okay with saying that this statement *might* be true, unless the government agrees to buy the pills for something resembling a fair return on pharma investment.\n<\/p>\n\n<p>\nSo there you have a small and hopefully-informative look at the Canadian health care system.  Is it perfect?  No.  But it delivers a level of service that should be causing Americans to want to emulate it, not demonize it.  Basic health care is a right that should be given to all citizens as it benefits society as a whole.  You can call me a socialist if you want, but I've seen the benefits of our health care system up close and personal.  \n<\/p>\n\n<p>\nIf you have something to add in the comments, please be aware that I will delete any comments that I find objectionable.  Keep it clean and reasonable.\n<\/p>\n",
        "date": "2009-07-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Some Clarity About Canadian Health Care",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/07\/22\/some-clarity-about-canadian-health-care\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At <a href=\"http:\/\/www.xmlteam.com\">work<\/a>, one of the projects I work on is an <a href=\"http:\/\/www.sportsstandards.org\/sd\/sportscaster\">open source web service front end<\/a> for our Perl-based main application.  It has a front-end for it that uses Javascript to dynamically build a query to the web service.  I didn't write it, but I think it's kind of neat.  One of the things I was asked to do was create some code that allow users to define a series of default values for the (\/me goes to count) 7 different forms that are in the front-end.  There had been some pre-existing code, but I decided it needed to be refactored to be a lot more simpler than the previous system.  After all, I was not writing this code for myself but for our clients.  They would definitely not be as familiar with the system as I would be, so simple is always better.\n<\/p>\n\n<p>\nSo, the trick was to figure out what pieces I was going to use to build this.  Since I am a <a href=\"http:\/\/jquery.com\">jQuery<\/a> fan, I started searching for plugins to make it all work nice.  My research dug up the perfect tool: the <a href=\"http:\/\/www.keyframesandcode.com\/resources\/javascript\/jQuery\/demos\/populate-demo.html\">jQuery Form Population<\/a> plugin.  I know you'll follow the link and read it, but as a quick summary it is a plugin for allowing you to populate values in a form on the client side, meaning in Javascript, instead of the server side, which in this case would be everyone's favourite online whipping-boy PHP.<\/p>\n\n<p>\nOnce I played around with the plugin (and actually read the documentation) I realized that the simple solution I wanted was at hand.  Let me show you what I did:\n~~~\nfunction clearAllDefaults() {\n    $('#searchDocumentsForm').clearForm();\n    $('#searchDocumentsForm').populate(\n        {\n            'revision-control':'all',\n            'priorities':'all',\n            'content-returned':'metadata-only',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            }, \n        {'reset-form':false, 'identifier':'name'}\n        );\n\n    $('#getDocumentsForm').clearForm();\n    $('#getDocumentsForm').populate(\n        {\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            }, \n        {'reset-form':false, 'identifier':'name'}\n        );\n\n    $('#searchEventsForm').clearForm();\n    $('#searchEventsForm').populate(\n        {\n            'date-offset':0,\n            'date-offset-span':1,\n            'date-offset-midnight':1600,\n            'sort-order':'asc',\n            'content-returned':'metadata-and-scores',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            }, \n        {'reset-form':false, 'identifier':'name'}\n        );\n\n    $('#getEventsForm').clearForm();\n    $('#getEventsForm').populate(\n        {\n            'content-returned':'metadata-and-scores',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            }, \n        {'reset-form':false, 'identifier':'name'}\n        );\n}\n\nfunction setDefaults(defaultId) {\n    for (var formId in defaults[defaultId]) {\n        $('#' + formId).populate(defaults[defaultId][formId], {'reset-form':false, 'identifier':'name'});\n    }   \n}\n\nfunction outputDefaultChoices() {\n    document.write('<table width=\"200\"><tr valign=\"top\"><td width=\"100\" nowrap><b>Default Selections:<\/b><\/td>');\n    document.write('<td nowrap><input type=\"radio\" name=\"defaultSet\" value=\"none\" checked onChange=\"clearAllDefaults();\"\/> none<br \/>');\n    \n    for (var myDefault in defaults) {\n        document.write('<input type=\"radio\" name=\"defaultSet\" value=\"' + myDefault + '\" onChange=\"clearAllDefaults();setDefaults(\\'' + myDefault + '\\');\"\/> ' + myDefault + '<br \/>');\n    }\n\n    document.write('<\/td><\/tr><\/table>');\n}\n~~~\nThis is load-defaults.js.  It contains functions that I want to use to set the defaults.  I think it's pretty self-explanatory.  I would like a less-ugly way of implementing what I did in outputDefaultChoices(), so let me know if there is a better way.  \n<\/p>\n\n<p>\nUp at the top of that code is where we are setting a bunch of defaults for when the form front-end is initially loaded.  The populate plugin accepts JSON containing not only the key-value pairs of form field name and value respectively, but also accepts a bunch of very useful options.  'reset-form':false tells the plugin to not simple reset the form when populating (we might not want to overwrite some existing values). 'identifier':'name' is a cool feature of the plugin that allows you to specify *how* you want the plugin to figure out how to map the field names you sent it already to the form itself.  Default is 'id' but much of the existing form did not have id fields for the form fields, so I figured it was less work for me to make the plugin figure it out. ;)\n<\/p>\n\n<pre><code>\/**\n * In order to create a set of defaults, you simply have to create\n * a JSON array of options in the following format\n *\n * defaults[&lt;set name&gt;] = {'&lt;formid&gt;':{&lt;json pairs of fields and values&gt;}}\n * \n * defaults['favorites'] = {'searchDocumentsForm':{'team-keys':'l.mlb.com-t.18', 'fixture-keys':'general-news', 'date-window':'2400'}};\n * \n * Adding in defaults for multiple forms is easy.  Here's an example\n * of setting the team-keys in both the searchDocuments and searchEvents forms\n *\n * defaults['multiple'] = {\n *  'searchDocumentsForm':{'team-keys':'l.mlb.com-t.17'},\n *  'searchEventsForm':{'team-keys':'l.mlb.com-t.17'}\n * }\n *\/\n\nvar defaults = new Array();\n\ndefaults['favorites'] = {\n        'searchDocumentsForm':{\n            'league-keys':'l.mlb.com', \n            'fixture-keys':'general-news', \n            'date-window':'2400',\n            'publisher-keys':'sportsnetwork.com',\n            'max-result-count':'5',\n            'revision-control':'all',\n            'priorities':'all',\n            'content-returned':'metadata-only',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            },\n\n        'getDocumentsForm':{\n            'doc-ids':'xt.9569941-recap', \n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':''\n            },\n\n        'searchEventsForm':{\n            'league-keys':'l.mlb.com', \n            'publisher-keys':'sportsnetwork.com',\n            'max-result-count':'200',\n            'date-offset':0,\n            'date-offset-span':1,\n            'date-offset-midnight':1600,\n            'sort-order':'asc',\n            'content-returned':'metadata-and-scores',\n            'rendering-engine':'mvc-view',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':'events'\n            },\n\n        'getEventsForm':{\n            'event-keys':'l.mlb.com-2009-e.24850',\n            'publisher-keys':'sportsnetwork.com',\n            'content-returned':'metadata-and-scores',\n            'rendering-engine':'mvc-view',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':'events'\n            }\n        };\n\ndefaults['team-news'] = {\n        'searchDocumentsForm':{\n            'team-keys':'l.mlb.com-t.18', \n            'fixture-keys':'general-news,post-event-coverage,pre-event-coverage', \n            'date-window':'9600',\n            'publisher-keys':'sportsnetwork.com',\n            'max-result-count':'5',\n            'revision-control':'latest-only',\n            'priorities':'all',\n            'content-returned':'metadata-only',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':'sportsml2html-listing'\n            }\n        };\n\ndefaults['standings'] = {\n        'searchDocumentsForm':{\n            'league-keys':'l.mlb.com', \n            'fixture-keys':'standings-by-division', \n            'date-window':4800,\n            'max-result-count':1,\n            'revision-control':'all',\n            'priorities':'all',\n            'content-returned':'all-content',\n            'rendering-engine':'xslt',\n            'query-debug':'false',\n            'gateway-theme':'default',\n            'stylesheet':'sportsmlt'\n            }\n        };\n<\/code><\/pre>\n\n<p>\nThis is the sample configuration file that we distribute with the application to show people how to use it.  Look, I even provided instructions at the top on how to use it!\n<\/p>\n\n<p>\nAnyway, if you've been looking for a way to create multiple sets of defaults for your forms, switchable with the click of a button, I hope this code is useful to you.\n<\/p>\n\n<p><\/json><\/formid><\/set><\/p>\n",
        "date": "2009-07-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Multiple Form Defaults Using jQuery",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/07\/07\/multiple-form-defaults-using-jquery\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Happy Canada Day to all my Canadian friends and readers!<\/p>\n\n<p>\nFor a project at work I've been working a lot with web services, creating a new one and tweaking an existing one.  That work got me to thinking that not only can you have brittle code, but you can have brittle web services as well.  Things like:\n<ul>\n<li>Dependencies on 3rd-party tools that might force you to send parameters in a certain order (I'm looking at *you*, XSLT tools)<\/li>\n<li>Non-intuitive parameters<\/li>\n<li>Misleading error responses<\/li>\n<li>Poor permission schemes that allow you to access data you shouldn't<\/li>\n<\/ul>\nI could go on and on, but a lot of the things that make web services \"brittle\" are the same things that make regular code \"brittle\" as well.  C'mon people, it's not so hard!\n<\/p>\n\n<p>\nI've worked very hard to adhere to a set of standards when building these web services:\n<ul>\n<li>All services must be authenticated against using login and password<\/li>\n<li>You pass in a parameter indicating how you want the response back (in this case XML, HTML made pretty using XSLT, or JSON<\/li>\n<li>Standardized the parameters being passed in across all internal web services<\/li>\n<li>Cache everything you can using read-through caching strategies.  I would've loved to use write-through caching but it's just not possible at this time.<\/li>\n<\/ul>\n<\/p>\n\n<p>The main reason for all this pedantry is for maintenance reasons.  When (not if) I go back to work on it, I want to know that I will not have to remember any weird exceptions made in the code in the pursuit of Getting Things Done, Damnit.  When you're the only developer working on it, it's easy to fall into the trap of the quick fix or the non-intuitive block of code.  \n<\/p>\n\n<p>\nShare your tips for building solid web services with me in the comments.\n<\/p>\n",
        "date": "2009-07-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Brittle Web Services",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/07\/01\/brittle-web-services\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I talked briefly on Twitter about me getting a new phone to replace my beat-up Blackberry.  Instead of a new iPhone 3GS, I decided to get the HTC Dream, more commonly known as the G-1 to my American readers.  My carrier is Rogers Wireless, so no switching required *or* extending of my term.  I had to talk to the right people in customer support, but I got it for the same price that someone who was just signing up for 3 years would get it.<\/p>\n\n<p>\nSo why one of those and not an iPhone.  Well, reason number one is that I tend to be a contrarian at times.  Everyone has an iPhone, not many people have an Android phone.  That makes me a unique little snowflake, and sometimes we all need to feel like that.  Secondly, I have noticed a very disturbing trend with the whole acceptance process for the App store.  Some really arbitrary decisions, conflicting decisions.  Not that I want to be a phone app maker but the idea that I could make an app exactly the way I want, and have it rejected for very flimsy reasons sort of irks me.  I should ask <a href=\"http:\/\/mtabini.blogspot.com\/\">Marco Tabini<\/a> for a more inside look at the whole iPhone-app-building process.<\/p>\n\n<p>\nI'm not sure what the Android app development process is like though. But it appears to be a little bit more entrepreneurial that Apple's \"we are the gatekeepers of the app world\" routine.  Not that I blame Apple in the least, as it is their right to do it that way.\n<\/p>\n\n<p>\nNow, as much as this might irk some of my friends but the fact that Android runs Java means that I will start getting some experience with stuff that runs on the JVM.  In my tinkering with Python I've looked at <a href=\"http:\/\/www.jython.org\/\">Jython<\/a>, and I have seen that you can get Jython running on an Android phone.  Definitely something to look into.\n<\/p>\n\n<p>\nNow, the phone itself.  It has a slide-out keyboard, so no need for me to monkey around with any on-screen keyboards.  Having used the Blackberry for a while, I'm used to the thumbtapping needed to type text messages.  Oddly enough, the HTC Magic, which has no keyboard, was the same price.  I find the keyboard just fine for me, but I have heard others complaining about the keyboard.  YMMV.\n<\/p>\n\n<p>\nApps on the phone are pretty decent, once you learn how to navigate your way through the menu system, and how to put apps into the background so I can run other ones. I know there's complaints about how you can run apps in the background on the iPhone, but Apple lets their own apps run in the background.  Really, a minor detail.\n<\/p>\n\n<p>\nThe games I've played are good and addictive (Abduction is so simple to learn but difficult to beat at the higher levels) and some of the various apps I've tried out have been easy to use as well.  Twitdroid and the Meebo client are just slick and easy to use.\n<\/p>\n\n<p>\nMy only gripe is that I cannot *buy* any apps through the <a href=\"http:\/\/www.android.com\/market\/\">Android Market<\/a> because, according to some digging around on Google, <a href=\"http:\/\/www.google.com\/support\/androidmarket\/bin\/answer.py?hl=en&answer=138294\">Google won't let people in Canada buy apps<\/a>.  Again more of an annoyance.\n<\/p>\n\n<p>\nSo far I'm impressed with the phone and look forward to getting some time to fool around with maybe writing a simple app, or seeing about getting Jython up and running on it.\n<\/p>\n",
        "date": "2009-06-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Do Androids Dream Of Googlephones?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/06\/19\/do-androids-dream-of-googlephones\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I talked about this briefly on Twitter but I am wondering if we are at the edge of an upcoming \"singularity\" for technologies dealing with really large data sets.  Things like <a href=\"http:\/\/couchdb.apache.org\">CouchDB<\/a>, <a href=\"http:\/\/tokyocabinet.sourceforge.net\/\">Tokyo Cabinet<\/a>, <a href=\"http:\/\/incubator.apache.org\/cassandra\/\">Cassandra<\/a> and some other non-RDBM's datastores that I'm sure I'm forgetting about are starting to filter down from the experimental level to the usable-by-developers-like-me level.  We all dream of working on a project that has to deal with highly scalable data sources, because that means the project has been an awesome success.<\/p>\n\n<p>\nI just wonder if use of these types of technology for a site that you have no idea whether or not it will be wildly successful is a case of premature optimization.  I mean, it's cool that I can use CouchDB for a little side project that is more an exercise in learning CouchDB and Python.  But could I use something like this at work?\n<\/p>\n\n<p>(Warning, this is where I start talking about some of the things I do at <a href=\"http:\/\/www.xmlteam.com\">my day job<\/a>.) Our systems accepts tens of thousands of XML documents per day from different sources, and then a lot of them get translated from source XML into <a href=\"http:\/\/en.wikipedia.org\/wiki\/SportsML\">SportsML<\/a>.  Now, granted, some of these things are updates of previous information, but we still have to process them.  One of our products queries our servers, pulls down the SportsML documents and then parses them to stick the results in a RDBMS.  Customers can then build their own products on top of this system, writing SQL to pull out the info they want.\n<\/p>\n\n<p>\nBut what if instead of parsing them, we drop them into a document datastore?  I've been using <a href=\"http:\/\/exist.sourceforge.net\">eXist<\/a> for a work-related project and after some initial struggles (mostly learning to use <a href=\"http:\/\/www.w3.org\/TR\/xquery\/\">XQuery 1.0<\/a>) it's the perfect datastore for a project where you need to deal with XML.<\/p>\n\n<p>\nI work on a web service front-end for all these stats, which we both give to our customers (it's open-sourced under the GPL) to run themselves *and* use it internally (eating our own dog food!).  I've often wondered if we switched to using eXist as the back-end instead of a more traditional RDBMS, would our customers be able to handle it?  Finding a developer who knows SQL or a DBA who can tweak the queries is probably easier than finding someone who is familiar with XQuery \/ Xpath and eXist.<\/p>\n\n<p>So while switching to something like eXist would make sense on a certain level (skips the intermediate step of parsing the XML, we have in-house knowledge of writing XQuery scripts to pull data out) it definitely does not make sense for us from a customer support perspective.  Definitely a research project for when the company makes enough money to hire some minions for me to boss around.\n<\/p>\n\n<p>\nMaybe I'm wrong, but much like the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Magic_8-Ball\">Magic 8-ball<\/a> says: all signs point to yes.  Non-RDBMS datastores are getting right up into our faces, and it's only a matter of time before a high-profile project uses one of these and then everyone jumps on board.  Keep your eyes open and read up what you can about these things.  You never know when you might get the opportunity to use one in a serious way.\n<\/p>\n",
        "date": "2009-06-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Upcoming Scalable Datastore Singularity",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/06\/12\/the-upcoming-scalable-datastore-singularity\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nYes, my waffling continues.  But this time it is NOT with respect to what editor to use, as <a href=\"http:\/\/www.vim.org\">the one true editor<\/a> has been configured in such a way to make my life easier.  I have a personal project that I have been waffling about building in Python (first as a Django app, now maybe as a web2py app) or in CakePHP, since I would probably be most productive building out something quickly using it.\n<\/p>\n\n<p>\nSince I'm in a CakePHP phase right now, I decided to start building out some of the components I would need to make the side project work.  One of those components is the use of <a href=\"http:\/\/couchdb.apache.org\">CouchDB<\/a> as the database.  Since non-relational databases are all the hawtness right now (and <a href=\"http:\/\/twitter.com\/janl\">Jan Lehnardt<\/a> is such an awesome guy) I decided the best way to learn it's use is to store search results by users to my site (no hints on what I'm doing).  I figured the best way to do this was to create a CouchDB datasource, add it to my application, and then create models that would use the datasource.  \n<\/p>\n\n<p>\nWhile I suggest that you visit the CouchDB website for more info on what it is and how to use it, here's a quick summary:  CouchDB is a non-relational datastore that you communicate with using views written in Javascript, and it returns any records that match your view as JSON-formatted data.  Very simple when you think of it, but also very powerful.\n<\/p>\n\n<p>\nI must emphasize that the code is very raw and not fully tested.  Written using PHP 5.2.9 and Cake 1.2.bleeding.edge. First, the data source:\n~~~\n< ?php\n\n\/**\n * Datasource for connecting to CouchDB\n *\n * @author Chris Hartjes\n *\/\nclass CouchDbSource extends DataSource {\n    public $description = 'CouchDB Data Source';\n    public $host = 'localhost';\n    public $port = 5984;\n    public $error_number = null;\n    public $error_message = null;\n    public $headers = null;\n    public $body = null;\n\n    public function __construct($config) {\n        parent::__construct($config);   \n\n        if (!empty($this->config['host'])) {\n            $this->host = $this->config['host'];    \n        }\n\n        if (!empty($this->config['port'])) {\n            $this->post = $this->config['port'];\n        }\n    }\n\n    public function fullTableName() {\n        return false;\n    }\n    \n    \/**\n     * Method that sends data to the CouchDB server\n     *\n     * @param $method string GET, POST, PUT or DELETE\n     * @param $url string URL you are trying to send to\n     * @param $post_data string optional data to be posted\n     * @return string\n     *\/\n    public function send($method, $url, $post_data = NULL) {\n        $s = fsockopen($this->host, $this->port, $this->error_number, $this->error_message);\n\n        if (!$s) {\n            return false;\n        }\n\n        $request = \"{$method} {$url} HTTP\/1.0\\r\\nHost: {$this->host}\\r\\n\";\n\n        if ($post_data) {\n            $request .= \"Content-Length: \" . strlen($post_data) . \"\\r\\n\\r\\n\";   \n            $request .= \"{$post_data}\\r\\n\";\n        } else {\n            $request .= \"\\r\\n\"; \n        }\n\n        fwrite($s, $request);\n\n        $response = \"\";\n\n        while (!feof($s)) {\n            $response .= fgets($s); \n        }\n\n        list($this->headers, $this->body) = explode(\"\\r\\n\\r\\n\", $response);\n\n        return $this->body;\n    }\n}\n?>\n~~~\nI warned you that it was very simple.\n<\/p>\n\n<p>\nSo, if you want to use the datasource, the first thing to do is add an entry to your APP\/config\/database.php file with all the pertinent configuration info:\n~~~\n< ?php\nclass DATABASE_CONFIG {\n\n    var $couchdb = array(\n        'datasource' => 'couchdb',\n        'host' => 'localhost',\n        'port' => 5984\n    );\n}\n?>\n~~~\n<br \/>\nCouchDB by default runs on port 5984, but like most flexible applications it lets you change that port if you need to.  That's really all the configuration info you'll need.\n<\/p>\n\n<p>\nSo next up is configuring a model to use it. \n~~~\n< ?php\n\nclass Search extends AppModel {\n    public $name = 'Search';\n    public $useDbConfig = 'couchdb';    \n    public $useTable = null;\n\n    public function send($method, $url, $post_data = NULL) {\n        return $this->getDataSource()->send($method, $url, $post_data); \n    }\n}\n\n?>\n~~~\nThanks to <a href=\"http:\/\/twitter.com\/jperras\">Joel Perras<\/a> for helping me dig through the CakePHP internals in order to figure out the best way to get my model to speak to the datasource.  And pointing out my stupid mistake that caused CakePHP's automodel magic to bite me in the ass.\n<\/p>\n\n<p>\nSo how do you actually use this thing.  Here's an example of asking CouchDB to give you a listing of all documents available on the server:\n~~~\nAPP\/controllers\/searches_controller.php\n< ?php\n\nclass SearchesController extends AppController {\n    public function show_all() {\n        $this->layout = 'ajax';\n        $response = $this->Search->send('GET', '\/searches\/_all_docs');\n        $this->set(compact('response'));\n    }\n}\n\n?>\n\nAPP\/views\/searches\/show_all.ctp\n\n< ?= $response ?>\n~~~\n<\/p>\n\n<p>\nIn my case, the view spit out a nice string that looked like this:\n~~~\n{\"total_rows\":1,\"offset\":0,\"rows\":[ {\"id\":\"e2ffaae4df81b66c3d8386b75be71aa3\",\"key\":\"e2ffaae4df81b66c3d8386b75be71aa3\",\"value\":{\"rev\":\"1-71594714\"}} ]}\n~~~\n<\/p>\n\n<p>\nSo there you have it.  If you want to do more work with this datasource, I suggest you take a look at <a href=\"http:\/\/wiki.apache.org\/couchdb\/Getting_started_with_PHP\">this link on the CouchDB wiki<\/a> about using PHP with CakePHP.   It could use some work to add in convenience methods for adding, deleting and finding specific records but it's a good start I think.\n<\/p>\n",
        "date": "2009-06-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Simple CouchDB Datasource",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/06\/05\/a-simple-couchdb-datasource\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I received an email this evening that you can now purchase my book through Amazon.com's Marketplace!  Awesome news. Check out the link <a href=\"http:\/\/tinyurl.com\/p5o79u\">http:\/\/tinyurl.com\/p5o79u<\/a> and be sure to add your feedback to the page if you've bought a copy.<\/p>\n\n<p>(Edit: hrm, link doesn't show up on front page but shows up if you click on the link to this posting...)<\/p>\n",
        "date": "2009-05-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Now Available On Amazon!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/05\/26\/book-now-available-on-amazon\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Joel Moss (a fellow member of the CakePHP community) has been acting like a bit of a Rails (and Ruby) fanboi as of late.  He's doing a series of blog posts proclaiming his <a href=\"http:\/\/developingwithstyle.com\/2009\/05\/20\/10-reasons-why-ruby-is-better-than-php-reason-1\/\">love for Ruby<\/a>.  Personally, I loved Rails when I first encountered it.  Played around with it.  Wrote a web site for my simulation baseball league in it.  Then started disliking *some* of the people in the community and are now pretty much ambivalent about Ruby and Rails in general.  Great tool, not for me.  Python seems to be a better fit for me at least.<\/p>\n\n<p>\nI think a lot of what he says is nonsense and can be summarized with \"I don't like PHP's syntax.\"  Hell, I don't even like it myself.  PHP's big problem has been consistency with parameter order and a less-than-stellar object implementation.  Yes, things have improved in terms of OOP (closures and traits!) but PHP clings hard to it's procedural roots and that is not necessarily a bad thing.  Slamming PHP for it's OO implementation is like picking at a scab so it never goes away.  Pointless.  \"PHP sucks because of bad syntax\" is an argument I'd expect from my 9 year-old daughter, not a good programmer like Joel.  Kind of disappointing.  Never mind all the awesome built-in functions or wealth of high-quality third-party libraries out there for PHP.  Sure, those things exist for Ruby too but often you only have one or two choices.  PHP is absolutely rich in choices of third-party libraries.  Sure, a lot of them are not top quality but it never takes long to figure that out.  Okay, I'm drifting.  On to the rest of my point.\n<\/p>\n\n<p>\n I think where Joel starts to go off the rails was a follow-up in Twitter that said \"Hands up if you're a lazy developer. [I proudly hold both my hands up high in the sky] Laziness makes me a better coder http:\/\/bit.ly\/MKFQe\".   Once and for all, we need to stamp out the \"laziness makes me a better coder\" meme that is picking up steam.  There is a HUGE difference between laziness defined as \"I want to write less code\" and laziness defined as \"I don't want to have to figure shit out.\".  The first one is called efficiency, not laziness.  The second one is the type of trait that a programmer should be ashamed to have.\n<\/p>\n\n<p>\nI realize now that reliance on the use of frameworks for your applications is the type of laziness that is straying from efficiency to pure laziness.  Before you get all riled up, hear (read?) me out.  When you use a framework, you are accepting that it will be abstracting a lot of functionality away.  Functionality that you might not even understand correctly.  Which is great for quickly building something, but bad when you run into an error being generated by the framework itself.  Or behaviour that is unexpected. I like to call this \"fighting against the conventions\", and I believe that is the #1 reason why people end up not using a particular framework.  They cannot or are unwilling to follow the conventions and as a result, nothing will work.<\/p>\n\n<p>\nSo, if you use a framework all the time, you might find that certain skills or bits of knowledge start to erode.  Use an ORM all the time?  You forget how to make finely tuned SQL queries.  Rely on built-in form validation?  You start to forget what POST requests look like.  Use the Ajax helper that comes with the framework?  You forget how to make tight, customized Javascript code.  I think you're starting to get the point.\n<\/p>\n\n<p>\nJoel is 100% correct when he talks about that there are features in Ruby that allow you to be more EFFICIENT with your code than in PHP.  That is not laziness.  Usually when a developer calls themselves lazy, it is a self-deprecating statement.  I have called myself \"lazy\" because I strive to write as little code as possible to accomplish a task.  That's not laziness, that's efficiency.\n<\/p>\n\n<p>\nThe use of the term \"laziness in terms of coding\" is just a bad one to use.  Use the proper term, which is \"efficiency in terms of coding\".  \"Laziness in terms of coding\" is cut-and-pasting code all over the place, or blind use of code examples you find on the web without understanding what they really do.\n<\/p>\n\n<p>\nJoel, I'm happy that you are loving Ruby.  Python gives me the same fuzzy glow on those occasions when I play around with it.  But please put things in the proper prospective.  To paraphrase the Princess Bride:  \"You keep using that word. I do not think it means what you think it means.\"\n<\/p>\n",
        "date": "2009-05-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Laziness vs. Efficiency",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/05\/21\/laziness-vs-efficiency\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Okay, so since the first book has been a pretty good success for me, I've been thinking about writing a second book.  Will be the same format:  PDF, under 100 pages, selling for between $10 and $20.  So that got me to thinking \"what topic could I go on and on about like an idiot in regards to programming and CakePHP in general?\"<\/p>\n\n<p>\nI've become a believer in Test Driven Development and TATFT practices (thanks to <a href=\"http:\/\/gilesbowkett.blogspot.com\/2009\/05\/one-way-to-escape-cargo-cult.html\">Giles Bowkett<\/a> for his blog posts espousing the concept.  So why not combine that with my knowledge (no jokes from Nate allowed) of CakePHP and produce another inexpensive book.  Thus, the seeds of \"Test Driven Development Using CakePHP\" have been planted in my mind.\n<\/p>\n\n<p>\nOf course, the book will be made easier by the fact that I have a CakePHP project on the go at work where I am using TDD, so once again I will be producing a book with code examples and comments about what I was doing.  So, I am asking *you* what sort of things would you like to see in this book about TDD and CakePHP?\n<\/p>\n",
        "date": "2009-05-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My Next Book",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/05\/14\/my-next-book\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Although I never got into the habit of using online bookmarking services like Delicious (never really understood how\/why to use them) I do tend to bookmark a lot of stuff.  So as a change of pace I thought I'd go through my programming bookmarks and show you some of the stuff I found interesting enough to save:\n<\/p>\n\n<h3><a href=\"http:\/\/github.com\/sofadesign\/limonade\/tree\/master\">Limonade, a PHP microframework<\/a><\/h3>\n\n<p>I am Mr. Framework (Rails, ZF, CakePHP, Code Igniter, Django, I've tried a ton of 'em) so I found this project to be very interesting.  I think it's only really missing easy-to-do URL rewriting.  I could *probably* figure it out using whatever the web server for that project uses, but I am spoiled by the easy routing stuff in most frameworks.<\/p>\n\n<h3><a href=\"http:\/\/marcgrabanski.com\/article\/jquery-google-maps-tutorial-ajax-php-mysql\">jQuery and Google Maps<\/a><\/h3>\n\n<p>\nMarc Grabanski is a guy I met at the original <a href=\"http:\/\/cakefest.org\">CakeFest<\/a> in Orlando, and he does so much amazing front-end work that I find myself going back to his site over and over again.  This is the second tutorial he has up there on using jQuery with Google Maps.  So well written, and so easy to implement with your own stuff.\n<\/p>\n\n<h3><a href=\"http:\/\/misko.hevery.com\/\">The Testability Explorer Blog<\/a><\/h3>\n\n<p>Misko Hevery has this amazing blog where he talks about great testing practices.  For the love Murphy, please go read his blog and start testing your code.  I mean it!<\/p>\n\n<h3><a href=\"http:\/\/venturehacks.com\/articles\/five-whys\">The startup immune system<\/a><\/h3>\n\n<p>\nGreat article on some recommended practices for making your company's handling of defects in the software they produce better.\n<\/p>\n\n<h3><a href=\"http:\/\/ivanidris.net\/wordpress\/index.php\/2009\/02\/03\/sharpen-the-vim-saw\">Sharpen the Vim Saw<\/a><\/h3>\n\n<p>\nWhat?  You don't use <a href=\"http:\/\/www.vim.org\">Vim<\/a>?!?!  That's okay, what Ivan Idris talks about here is finding inefficiencies in the way you use your editor-of-choice and eliminate them.<\/p>\n\n<h3><a href=\"http:\/\/www.eecs.harvard.edu\/~cduan\/technical\/git\/\">Understanding Git Conceptually<\/a><\/h3>\n\n<p>\nWant to know what the big deal about Git is?  Why are all the cool kids using it?  Well, many of *them* don't even know why Git is so awesome.  This site explains HOW Git works so you can understand WHY you should be using it.\n<\/p>\n\n<h3><a href=\"http:\/\/jeffcroft.com\/blog\/2006\/jul\/14\/django-admin-your-php-app\/\">Django admin for your PHP app?<\/a><\/h3>\n\n<p>\nA quick guide to how to sneak Django into your PHP project as the rock-solid start of an admin area.  I have done this with a project at work at the prototype level (no code committed yet) and it just makes so much sense.<\/p>\n\n<h3><a href=\"http:\/\/blog.johngoulah.com\/2009\/01\/mysql-sandbox\/\">Quick DB Setups with MySQL Sandbox<\/a><\/h3>\n\n<p>\nAlthough I am lucky that I do not need to test my work code against different versions of MySQL, the techniques described here show how to do that exactly that in a way that is so simple I thought to myself \"Why did nobody ever tell me you could do this?!?\"<\/p>\n\n<h3><a href=\"http:\/\/www.databaseanswers.org\/data_models\/index.htm\">Library of Free Data Models<\/a><\/h3>\n\n<p>\nThis site is awesome in a very subtle way.  It shows you all sorts of samples of building relationships between things in a data model.  Want an example of how to link agents and leads together for a recruiting company? They have one. Ever wanted to see how a hotel would handle booking reservations?  They got one.\n<\/p>\n\n<p>Okay, last one.  I promise<\/p>\n\n<h3><a href=\"http:\/\/rope.sourceforge.net\/\">Rope, a python refactoring library<\/a><\/h3>\n\n<p>\nI'm starting to get into the world of refactoring tools as I dig into Python.  Rope is a tool to let you go through your Python code and identify things that need to be refactored, like duplicate code blocks that can be combined into one.  I so wish tools like this existed for PHP, as I would use them all the time.  Add in the fact that it can be integrated into Vim, well, I've got a tool that will become an essential part of my Python toolkit going forward.\n<\/p>\n\n<p>\nSo there you have it.  What hidden gems do you have to share?\n<\/p>\n",
        "date": "2009-05-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Digging Through The Bookmarks",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/05\/08\/digging-through-the-bookmarks\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<h2>Book Update<\/h2>\n\n<p>\nFor those not following along on Twitter, the first month of sales of my <a href=\"https:\/\/littlehart.net\/book\">CakePHP book<\/a> have been a success:  70 PDF's and 5 print-on-demand copies via <a href=\"http:\/\/www.lulu.com\/content\/paperback-book\/refactoring-legacy-applications-using-cakephp\/6626981\">Lulu.com<\/a>.  A big thanks to everyone who has purchased a copy.  My next thought has been a book about doing Test Driven Development using CakePHP, but perhaps that is just wishcasting.\n<\/p>\n\n<h2>Deployment Thoughts<\/h2>\n\n<p>\nAt work I've been tweaking the deployment process for an <a href=\"http:\/\/www.sportsdb.org\/sd\/sportscaster\">open source project<\/a> that talks to our infrastructure and came upon an interesting problem.  Like many projects, we have some configuration files that would be different from environment to environment (i.e. different database access credentials, paths to archived files) so we've chosen to instead create sample versions of those configuration files and include them in the  application when you either download it (as external clients of ours do) or update from SVN (like we do).  \n<\/p>\n\n<p>\nSince I like to use <a href=\"http:\/\/capify.org\">Capistrano<\/a> to do deployment, I needed a way to make sure that the configuration files that are currently being used by the application get copied into the proper place.  Lucky for me, it was easy enough to add this in as a task in my Capfile:\n~~~\n  # Do nothing (To restart apache, run 'cap deploy:apache:restart')\n  task :restart do\n    run \"cp \/var\/www\/settings\/sportscaster\/gateway\/php\/config.php #{deploy_to}\/current\/gateway\/php\"\n    run \"cp \/var\/www\/settings\/sportscaster\/gateway\/php_ci\/config\/gateway.config.php #{deploy_to}\/current\/gateway\/php_ci\/config\"\n    run \"cp \/var\/www\/settings\/sportscaster\/engine\/_application\/config\/database.php #{deploy_to}\/current\/engine\/_application\/config\"\n    run \"cp \/var\/www\/settings\/sportscaster\/engine\/_application\/config\/config.php #{deploy_to}\/current\/engine\/_application\/config\"\n  end\n~~~\nAs you can see, I've placed the configuration files in their own directory (off the web root I know, might make more sense to put them some place else but they can live there for now) and then simply copy them in place once I've deployed the latest code.  I'd be interested in seeing how other people handle this issue.\n<\/p>\n\n<h2>Getting paid to do open source work<\/h2>\n\n<p>\nI feel like I'm very fortunate to have an employer who (mostly for business reasons) has decided to make some of their projects open source so that others can use it without cost.  Sure, some of it is niche software to be sure (a web service that only works with our pay-to-use infrastructure) but still, d00d, I'm getting paid to write open source code!  We also have another project in the works, helping <a href=\"http:\/\/www.phpffl.com\">these guys<\/a> create a newer, more generic version of their fantasy league management application that has hooks to allow users to pull in data from our own web services.  Sure, it's helping to drive our business but isn't that the point?  I create something that helps my company make money, and in exchange I get to share it with everyone else.  Sounds like a pretty good deal to me.\n<\/p>\n",
        "date": "2009-05-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris' Brain - May 2009 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/05\/01\/chris-brain-may-2009-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Holy moley, has it been almost a year since I <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2008\/05\/16\/cakephp-application-deployment-rfc\">blogged about a potential CakePHP deployment task<\/a>.  Since a few people have hit me up in Twitter and in the comments for that blog post, I thought I would share my progress on this task.  To be blunt, I decided it was a waste of time to do it.<\/p>\n\n<p>\nWhy?  Well, there plenty of options out there to help you with application deployment already.  I talked about many of them in the talk I gave at PHPQuebec back in March.  In the end, there is no reason to NOT use an existing tool to handle this other than you cannot (or in some cases will not) use one of these tools.  I picked <a href=\"http:\/\/www.capify.org\">Capistrano<\/a> because:\n<ul>\n<li>it is command-line based and therefore it's use could be easily automated in my development and production environments<\/li>\n<li>deployment instructions are written in code, not XML.  Sure it's Ruby but don't be like that and sneer at me.  I work with XML all day long and know when it's good to use it and when it's not good to use it.  In my opinion, using it as a configuration file to tell you where to deploy your stuff is a misuse of it.  Why not do it in JSON then?  Hrm, there's an idea what will rattle around in my brain for a while.<\/li>\n<li>it doesn't care what you are trying to deploy, which I think is such an understated feature of Capistrano that I tell it to EVERYONE who asks me about it.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nSure, being able to type 'cake deploy' would be nice for those people who are using Cake and have things setup completely according to the default configuration, but one little change and the whole thing might just blow up.  Capistrano and <a href=\"http:\/\/phing.info\/trac\/\">Phing<\/a> are the two tools I would recommend to any PHP devs trying to work out automated deployment.\n<\/p>\n\n<p>Given the number of permutations that can be part of an install, I am not confident that 'cake deploy' would be up to the task.  When I think about all the stuff I have to deploy that is not just PHP code at work, I can't imagine making it all work in a CakePHP task.  That's not to say that someone smarter than me can't figure it out.\n<\/p>\n",
        "date": "2009-04-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Application RFC Follow-Up",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/04\/23\/cakephp-application-rfc-follow-up\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Those of you who are loyal readers and follow my blog do know that I am starting to learn Python, with an angle towards making it the language that earns me my paycheque.  But that is a story for another day (and full of unrequited whining by me).  So, I've been doing some Python stuff here and there at work and since I had to update the schedule for my <a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a> for the upcoming season, I figured that I should create a tool using Python.\n<\/p>\n\n<p>\nI did the following:\n<ul>\n<li>Decided to use <a href=\"http:\/\/www.sqlalchemy.org\">SQLAlchemy<\/a> to talk to the database<\/li>\n<li>Learned a ton about manipulating <a href=\"http:\/\/docs.python.org\/tutorial\/datastructures.html#dictionaries\">Python dictionaries<\/a><\/li>\n<\/ul>\n<\/p>\n\n<p>\nI figured I would create a dictionary for each week of the schedule containing each of the series for that particular week.  Python handles associative arrays a little differently than PHP does in terms of syntax, but the concept is still the same.  Once I had those dictionaries in place, I would then iterate through each one and save a record in the schedule database.  After a few stops and starts, I got to work properly.\n~~~\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass Schedule(Base):\n    __tablename__ = 'sched2009'\n    week = Column(Integer, primary_key=True)\n    home = Column(String, primary_key=True)\n    away = Column(String, primary_key=True)\n    status = Column(Integer)\n\n    def __init__(self, week, home, away, status):\n        self.week = week\n        self.home = home\n        self.away = away\n        self.status = status\n\n    def __repr__(self):\n        return \"<schedule (%i, '%s', '%s', %i)>\" %  (self.week, self.home, self.away, self.status)\n\nengine = create_engine('postgres:\/\/user:pass@localhost:3333\/ibl_stats')\nSession = sessionmaker(bind=engine)\nsession = Session()\nseries = {}\n\nseries[1] = {'05':'01', '08':'02', '07':'03', '06':'04', '09':'05', '12':'06', '11':'07', '10':'08', '01':'09', '04':'10', '03':'11', '02':'12'}\nseries[2] = {'06':'01', '05':'02', '08':'03', '07':'04', '10':'05', '09':'06', '12':'07', '11':'08', '02':'09', '01':'10', '04':'11', '03':'12'}\nseries[3] = {'07':'01', '06':'02', '05':'03', '08':'04', '11':'05', '10':'06', '09':'07', '12':'08', '03':'09', '02':'10', '01':'11', '04':'12'}\nseries[4] = {'08':'01', '07':'02', '06':'03', '05':'04', '12':'05', '11':'06', '10':'07', '09':'08', '04':'09', '03':'10', '02':'11', '01':'12'}\n\nseries[8] = {'08':'01', '05':'02', '06':'03', '07':'04', '12':'05', '09':'06', '10':'07', '11':'08', '04':'09', '01':'10', '02':'11', '03':'12'}\nseries[9] = {'07':'01', '08':'02', '05':'03', '06':'04', '11':'05', '12':'06', '09':'07', '10':'08', '03':'09', '04':'10', '01':'11', '02':'12'}\nseries[10] = {'06':'01', '07':'02', '08':'03', '05':'04', '10':'05', '11':'06', '12':'07', '09':'08', '02':'09', '03':'10', '04':'11', '01':'12'}\nseries[11] = {'05':'01', '06':'02', '07':'03', '08':'04', '09':'05', '10':'06', '11':'07', '12':'08', '01':'09', '02':'10', '03':'11', '04':'12'}\n\nseries[17] = {'09':'01', '12':'02', '11':'03', '10':'04', '01':'05', '04':'06', '03':'07', '02':'08', '05':'09', '08':'10', '07':'11', '06':'12'}\nseries[18] = {'10':'01', '09':'02', '12':'03', '11':'04', '02':'05', '01':'06', '04':'07', '03':'08', '06':'09', '05':'10', '08':'11', '07':'12'}\nseries[19] = {'11':'01', '10':'02', '09':'03', '12':'04', '03':'05', '02':'06', '01':'07', '04':'08', '07':'09', '06':'10', '05':'11', '08':'12'}\nseries[20] = {'12':'01', '11':'02', '10':'03', '09':'04', '04':'05', '03':'06', '02':'07', '01':'08', '08':'09', '07':'10', '06':'11', '05':'12'}\n\nseries[21] = {'12':'01', '09':'02', '10':'03', '11':'04', '04':'05', '01':'06', '02':'07', '03':'08', '07':'09', '06':'10', '05':'11', '08':'12'}\nseries[22] = {'11':'01', '12':'02', '09':'03', '10':'04', '03':'05', '04':'06', '01':'07', '02':'08', '06':'09', '05':'10', '08':'11', '07':'12'}\nseries[23] = {'10':'01', '11':'02', '12':'03', '09':'04', '02':'05', '03':'06', '04':'07', '01':'08', '05':'09', '08':'10', '07':'11', '06':'12'}\nseries[24] = {'09':'01', '10':'02', '11':'03', '12':'04', '01':'05', '02':'06', '03':'07', '04':'08', '08':'09', '07':'10', '06':'11', '05':'12'}\n\nseries[5] = {'04':'01', '01':'02', '02':'03', '03':'04', '08':'05', '05':'06', '06':'07', '07':'08', '12':'09', '09':'10', '10':'11', '11':'12'}\nseries[6] = {'03':'01', '04':'02', '01':'03', '02':'04', '07':'05', '08':'06', '05':'07', '06':'08', '11':'09', '12':'10', '09':'11', '10':'12'}\nseries[7] = {'02':'01', '03':'02', '04':'03', '01':'04', '06':'05', '07':'06', '08':'07', '05':'08', '10':'09', '11':'10', '12':'11', '09':'12'}\n\nseries[14] = {'03':'01', '04':'02', '02':'03', '01':'04', '07':'05', '08':'06', '06':'07', '05':'08', '11':'09', '12':'10', '10':'11', '09':'12'}\nseries[15] = {'02':'01', '01':'02', '04':'03', '03':'04', '06':'05', '05':'06', '08':'07', '07':'08', '10':'09', '09':'10', '12':'11', '11':'12'}\nseries[16] = {'04':'01', '03':'02', '01':'03', '02':'04', '08':'05', '07':'06', '05':'07', '06':'08', '12':'09', '11':'10', '09':'11', '10':'12'}\n\nseries[25] = {'02':'01', '01':'02', '04':'03', '03':'04', '06':'05', '05':'06', '08':'07', '07':'08', '10':'09', '09':'10', '12':'11', '11':'12'}\nseries[26] = {'04':'01', '03':'02', '02':'03', '01':'04', '08':'05', '07':'06', '06':'07', '05':'08', '12':'09', '11':'10', '10':'11', '09':'12'}\nseries[27] = {'03':'01', '04':'02', '01':'03', '02':'04', '07':'05', '08':'06', '05':'07', '06':'08', '11':'09', '12':'10', '09':'11', '10':'12'}\n\nfor w, games in series.iteritems():\n    for a, h in games.iteritems():\n        for conf in 'n', 'a':\n            home_team = conf + h\n            away_team = conf + a\n            new_series = Schedule(week=w, home=home_team, away=away_team, status=0)\n            session.add(new_series)\n            session.commit()\n            print 'Added wk' + str(w) + ' ' + away_team + ' @ ' + home_team\n\n# Now, let's do the interleague games\nseries = {}\nseries[12] = {'a08':'n08', 'a04':'n04', 'n03':'a04', 'a02':'n02', 'a12':'n12', 'a11':'n11', 'n02':'a03', 'a01':'n01', 'n01':'a02', 'n05':'a06', 'a10':'n10', 'n10':'a11', 'n08':'a05', 'n12':'a09', 'a07':'n07', 'n04':'a01', 'n06':'a07', 'a05':'n05', 'n11':'a12', 'a06':'n06', 'a03':'n03', 'n09':'a10', 'a09':'n09', 'n07':'a08'}\nseries[13] = {'a01':'n03', 'n02':'a01', 'a11':'n09', 'n09':'a12', 'a04':'n02', 'a07':'n05', 'n10':'a09', 'a10':'n12', 'a02':'n04', 'n05':'a08', 'n11':'a10', 'a05':'n07', 'a03':'n01', 'n04':'a03', 'n06':'a05', 'a08':'n06', 'a12':'n10', 'n08':'a07', 'n03':'a02', 'n01':'a04', 'a06':'n08', 'n12':'a11', 'a09':'n11', 'n07':'a06'}\n\nfor w, games in series.iteritems():\n    for a, h in games.iteritems():\n        new_series = Schedule(week=w, home=h, away=a, status=0)\n        session.add(new_series)\n        session.commit()\n        print 'Added wk' + str(w) + ' ' + a + ' @ ' + h\n~~~\n<\/schedule><\/p>\n\n<p>\nThe code looks straightforward, but my only concern is am I writing idiomatic Python code, or does it still look like \"Python written by a PHP guy\".  I'd appreciate any feedback from pythonistas.\n<\/p>\n",
        "date": "2009-04-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Adventures In Snake Handling, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/04\/16\/adventures-in-snake-handling-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>The book is doing quite well, thanks.  42 copies sold as I type this.  I am going to give away one of my \"Framework Apocalypse\" t-shirts to one lucky random customer when I get to 100.  Feedback has been great, so spread the word about the book!  As <a href=\"http:\/\/www.psuedocoder.com\">Matt Curry<\/a> pointed out in his <a href=\"http:\/\/www.pseudocoder.com\/archives\/2009\/04\/08\/review-refactoring-legacy-applications-using-cakephp\/\">review of my book<\/a>, don't let the name fool you.  It could've been subtitled \"how to think like a CakePHP developer\".\n<\/p>\n\n<p>\nSo, I have a few questions for the lazyweb (aka my awesome readers).  I'm hoping they can point me in the right direction.:\n<ul>\n<li>At work, my boss is wondering if there is a way for us to determine *ahead* of time if queries being generated by our web service are going to really churn the database and lock things up.  Since the queries are very dynamic, I can only do so much in the caching department.  Application is PHP-based, built using Code Igniter<\/li>\n<li>Inspired by <a href=\"http:\/\/twitter.com\/jperras\">my friend Joel<\/a> feel free to share your essential <a href=\"http:\/\/www.vim.org\">VIM<\/a> plugins.  Mine are <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=1075\">netrw<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=2009\">autoclose<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=2507\">0scan<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=39\">matchit<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=2602\">paster<\/a> (I use it all the time at work), <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=1697\">surround<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=273\">taglist<\/a>, <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=90\">vcscommand<\/a> (although I have started using a git plugin that I can't find the download page for, and then a bunch of syntax highlighting plugins for <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=1487\">Django<\/a>, Git, PHP (can't remember which one), Python (can't remember which one) and <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=803\">Xquery<\/a>.<\/li>\n<\/ul>\n<li>Tools for refactoring in other languages look awesome (<a href=\"http:\/\/gilesbowkett.blogspot.com\/2008\/09\/towelie-keeps-your-code-dry.html\">Towelie<\/a> for Ruby, <a href=\"http:\/\/rope.sourceforge.net\/\">Rope<\/a> for Python.  What tools are out there for PHP?\n<\/li>\n\n<\/p>\n\n<p>\nLet me know via the comments what you know or find out.  Thanks and enjoy the Easter \/ Passover break!\n<\/p>\n",
        "date": "2009-04-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Lazyweb Questions - April 2009",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/04\/09\/lazyweb-questions-april-2009\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Can you believe it?  My book is done and available for you to purchase.  Visit the <a href=\"https:\/\/www.littlehart.net\/book\">site for the book<\/a> for more details.<\/p>\n\n<p>\nWhen I started working on this book I did have an idea of how much, you know, WORK it was actually going to be.  With some help from a few CakePHP gurus I got all my code tight and working the way it was supposed to.  I guess it's only natural that I should be happy with the way things have turned out, but I'm also happy with how my initial concept seems to have played out.\n<\/p>\n\n<p>\nGuides on how to apply CakePHP (or any framework for that matter) to a real-world problem are few and far between.  That's why I was so sure that a book that showed how to turn an old PHP app into a CakePHP powered one would be a desirable thing.\n<\/p>\n\n<p>\nI hope you enjoy the book and feel free to send me your feedback.  I may not agree with what you have to say, but I do read every comment and email sent to me.\n<\/p>\n",
        "date": "2009-03-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "\\\"Refactoring Legacy Applications Using CakePHP\\\" is now available!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/31\/refactoring-legacy-applications-using-cakephp-is-now-available\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had no idea that I shared a birthday with one of the true pioneers of the computer industry, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Ada_lovelace\">Ada Lovelace<\/a>.  A few months ago a petition to draw attention to women who are excelling in technology via blogging was making the rounds.  Realizing what a great opportunity this would be to recognize many of the talented women who work in IT, I immediately signed a pledge to talk about a woman who's work in technology I admired.  That woman is <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a>, Javascript and UI goddess.<\/p>\n\n<p>\nI'm going to share a very embarrassing story with you.  I first ran into Amy during a time when I was looking at Ruby on Rails as my next step after PHP.  Somehow I put two and two together between Amy presenting at a PHP conference I went to and her presence on Rails mailing lists and the Rails channels on IRC.  I wrangled her IM address and started talking to her.  Of course, I said the wrong thing to her.  I made a joke in very poor taste about why don't all female programmers look like Angelina Jolie in Hackers.  As soon as I said it, I realized what a fucking moron I was.  It is a testament to Amy's character that she accepted my apology and even had dinner with me and a bunch of other developers while at the conference.  We still talk occasionally and I'd like to think that Amy doesn't just answer my questions to get me to stop bugging her on IM.\n<\/p>\n\n<p>\nSo why did I pick Amy?  First, she's awesome at what she does.  If you read her blog and really take a look at what she talks about, her knowledge of the domain of UI just shines through.  Plus, she really cares.  I mean, REALLY, REALLY CARES.  Cares so much she wants to grab you and shake you and tell you not only that you're doing it WRONG but here's how to do it RIGHT.  She and her husband (Thomas Fuchs, the creator of <a href=\"http:\/\/www.prototypejs.org\/\">the Prototype Javascript framework<\/a>) have this awesome consultancy going and I wish I had the money to hire them to whip up a UI for a side project of mine.  I am of the opinion that they are worth every penny they charge their clients.<\/p>\n\n<p>\nSecondly, Amy is a strong believer in that you shouldn't care that she is a woman.  You should care that she is a person who knows what they are talking about.  I've found places (stop it, I'm not stalking her via Google) on the internet where she has been involved in discussions about how women in the IT field should stop complaining about being looked down-upon because they are women and rise above it all.  Are women given a rough time by the sausage factory that is IT?  They sure are.  But Amy says \"you're above all that shit, just go out there and do your thing.\"  I've mentioned Amy to my oldest daughter as a woman who's been successful in the field of computer programming, and that she would be hard pressed to find a better role model.\n<\/p>\n\n<p>So here's to Amy Hoy, Javascript\/UI Goddess and all around character.  Enjoy Ada Lovelace Day!<\/p>\n",
        "date": "2009-03-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Ada Lovelace Day - Celebrating Women In Technology",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/24\/ada-lovelace-day-celebrating-women-in-technology\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nApril 1st is the date when my book will FINALLY be available.  $10 for the PDF, $20 for a print-on-demand copy via Lulu.  Go to the <a href=\"https:\/\/www.littlehart.net\/book\">website for the book<\/a> for more information and how to be notified when the book is ready.\n<\/p>\n\n<p>\nI'm excited to see this project finally see the light of day and I hope it helps other people learn what a great tool CakePHP really is to get real-world work done.\n<\/p>\n",
        "date": "2009-03-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Countdown to \"Refactoring Legacy Applications Using CakePHP\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/21\/countdown-to-refactoring-legacy-applications-using-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThis week has been kicking my ass in terms of work.  I've started a project at work which is a bit of a rush job (my boss forgot I was at PHP Quebec last week when taking into account the schedule) and I decided that there was no time like the present to start doing things right and start practicing Test Driven Development, or Behaviour Driven Development.\n<\/p>\n\n<p>\nSee, this is much harder to do if you inherit some legacy code.  Also, as I've discovered, Code Igniter is making it difficult to actually write some useful unit tests.  The built-in testing tools are terrible (this is not the first time nor the last time I've said this) so I am unsure how to approach this.  Let me know in the comments of tools you've used to help with this in the PHP world.\n<\/p>\n\n<p>\nThis new app I'm building using CakePHP, because (a) I'm more familiar with is given the time constraints for the project and (b) it allows me the granular caching that I want.  I did consider using Zend Framework for this but time was the enemy.  CakePHP is a project that has a culture of testing, and I've been using Cake's <a href=\"http:\/\/debuggable.com\/posts\/running-tests-from-the-commandline-in-cakephp:4821f908-da38-4987-909a-25c74834cda3\">CLI test runner<\/a>.  Yes, I know that Zend Framework has the testing culture too, as I remember all the fun I had writing tests for Zend_Service_Audioscrobbler.  If you take one thing from this blog post, it's this:  DO NOT USE A FRAMEWORK WITHOUT A CULTURE OF TESTING.  You will regret it when you are spending tons of time fixing bugs you should've found through unit and functional testing.\n<\/p>\n\n<p>\nIn my first week of doing TDD I've noticed a subtle change.  I'm planning things more.  Deciding the output of functions before I actually write them.  I'm only creating the functionality I need instead of stubbing out all the functionality I think I'm going to need.  I'm looking for ways to run my tests from inside the One True Editor.  All of this must be good, right?\n<\/p>\n\n<p>\nPHP does not have a culture of testing at it's core like Ruby and Python do.  I point you at <a href=\"http:\/\/gilesbowkett.blogspot.com\/\">Giles Bowkett<\/a> and some of the awesome blog posts he's done about TDD and Ruby.   Search that blog and READ THOSE POSTS.  You will not regret it.Python has the same culture of testing (<a href=\"http:\/\/docs.python.org\/library\/doctest.html\">doctest<\/a> is one tool for that), and I don't know how PHP can get there.  Maybe it will never get there because I hazard a guess that most people who use PHP couldn't give two flying fucks about writing tests.  Until that changes (meaning all the cool kids of PHP start writing tests) then TDD will continue to simply result in blank stares in the PHP community.\n<\/p>\n\n<p>\nSo I think what TDD is really supposed to do is NOT find bugs.  Finding bugs is a side-effect of the process.  What it does (at least it did for me) is force you to build you code in such a way that it can be modular and testable.  I found myself adding in switches to put functionality into test mode, so that I could load test fixtures instead of hitting a webservice to get my data.  You tell me:  is that good or bad?\n<\/p>\n\n<p>\nNow I know I haven't been doing TDD long enough to call myself an expert, but I feel I really need to give it the time and effort that it deserves.  This project is the perfect (pardon the pun) testing ground for putting some TDD principles into practice.<\/p>\n",
        "date": "2009-03-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Got That Olde Thyme TDD Religion",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/13\/got-that-olde-thyme-tdd-religion\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I swear, every time I give this talk I do it faster.  This time it took me 40 minutes, when I had 75 minutes in total to talk.  Here's the link to download it: <a href=\"http:\/\/chartjes-slides.s3.amazonaws.com\/PHP Quebec 2009 - Deployment talk.pdf\" class=\"s3-link\">\"Deployment Is Not A 4 Letter Word\"<\/a><\/p>\n\n<p>\nOverall I had a great time at the conference and definitely want to go back next year.  Here's my thoughts on the presentations I saw:\n<ul>\n<li>\"Practical Zend Framework Jutsu with Dojo\" -- Matthew did a good job in a short time of showing how much work they've done trying to integrate that toolkit with Zend Framework.  There's just so much that's part of it you can't cover it in an hour.<\/li>\n<li>\"Building RIA Application in PHP\" -- I can sum it up as this:  developing in Flex is hard and not for the faint of heart.  The PHP stuff is easy though.<\/li>\n<li>\"Of Lambda Functions, Closures and Traits\" -- those new functions are cool but it would've helped if there were some examples of when traits are a good idea<\/li>\n<li>\"Stupid Browser Tricks\" -- Firebug is becoming an essential tool for debugging Ajax-powered applications, and Selenium is an underused testingtool<\/li><li>\n<\/li><li>\"Deployment Is Not A 4 Letter Word\" - my own talk was well received, got great feedback from the audience:  \"Very knowledgeable.  Dynamic speaker.  Funny\".  Presentation skillz FTW!<\/li>\n<li>\"Beyond the Browser\" -- while I don't agree that we're at the end of the road for the browser, the concept of making sure your site is powered by an API usable by others is one to embrace<\/li>\n<li>\"VIM for (PHP) Programmers\" -- it's always good to learn at the feet of a master like Andrei<\/li>\n<li>\"Building applications with Yahoo! Pipes\" - Pipes sure looks good but the presenter needs to brush up on his technique to get more people interested<\/li>\n<li>\"K.I.S.S. (Keep It Simple, Stupid)\" -- common sense PHP stuff never gets boring to me, really<\/li>\n<li>\"Andrei's Regex Clinic\" -- my regex fu is weak and those slides are an awesome collection of tips<\/li>\n<li>\"Framework Comparison\" -- man, no sparks or arguing at all between those three guys.<\/li>\n<\/ul>\n<\/p>\n\n<p>Thanks to all those I hung out with at the conference for showing me a good time.<\/p>\n",
        "date": "2009-03-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Slides from PHP Quebec 2009 talk",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/07\/slides-from-php-quebec-2009-talk\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Before I talk about <a href=\"http:\/\/conf.phpquebec.com\">PHP Quebec 2009<\/a> I wanted to let people know that my book will be out March 9th.  $10 for the PDF, $20 for a print copy via the folks at Lulu.  Site for the book should be up sometime before Friday.<\/p>\n\n<p>\nLater today I'll be boarding a train and traveling in style from Toronto to Montreal to attend PHP Quebec 2009, giving an updated version of my \"Deployment is not a 4 Letter Word\" presentation.  I'm excited as I think I've really cut it down to the essential points AND have made it funny at the same time.  I thought I'd also talk about what sessions I'm planning on attending for sure.  Of course, this may change for a variety of reasons but it's a good map of where I will be if you are trying to hunt me down and lay a beating on me or something.<\/p>\n\n<p>\n<h3>Wednesday<\/h3>\n<ul>\n<li>\"Practical Zend Framework Jutsu with Dojo\".  I've wondered what Dojo is, so hopefully MWOP can tell me<\/li>\n<li>\"Building RIA Applications in PHP\". John Coggeshall seems to be doing lots of work with (something not PHP) talking to PHP, so it will be interesting to get his thoughts on building RIA's<\/li>\n<li>\"Stupid Browser Tricks\".  I'm interested in seeing how Sean Coates uses <a href=\"http:\/\/www.activestate.com\/komodo\/\">Komodo<\/a> and Firebug<\/li>\n<\/ul><\/p>\n\n<p>\n<h3>Thursday<\/h3>\n<ul>\n<li>My own talk is at 9:55, so I will probably be chilling out until then<\/li>\n<li>I want to see Andrei Zmievski's \"VIM for (PHP) Progammers\" talk to pick up a few more hints that can make my own use of the One True Editor better<\/li>\n<\/ul>\n<ul>\n<h3>Friday<\/h3>\n<\/ul><ul>\n<li>\"Building PHP Powered Android Applications\".  I want an Android phone, as soon as I can get an unlocked one in Canada for a price that does not make me swear.<\/li>\n<li>\"eZ Components' Mvc Tools\".  Derick Rethans is a goddamned superstar programmer, so I want to see  what he's been up to with eZ Components.  You never know, it might be a great fit for work since I grow weary of Code Igniter's DIY tendencies.<\/li>\n<li>I'm going to sit in on the \"Framework Comparison\" session, but I dunno if I will get dragged into it to try and fight the good fight for CakePHP.<\/li>\n<li>I will catch Chris Shifflet's closing talk and then it will be time for me to head back to Toronto on the train.<\/li>\n<\/ul><\/p>\n\n<p>\nIf you're going to be there, don't hesitate to come up to me and introduce yourself.  I don't bite, I'm usually decent company, and enjoy an alcoholic beverage or two...\n<\/p>\n",
        "date": "2009-03-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What I'll Be Doing At PHP Quebec",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/03\/03\/what-ill-be-doing-at-php-quebec\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n\"But Chris, I thought you were a PHP guy?\"  Yes, in my day-to-day work I use a lot of PHP.  However, I am branching out as required by my desire to learn new things.  One of those new things is <a href=\"http:\/\/www.python.org\">Python<\/a>, both on the web and the server side.  I thought I would share with you a tool I whipped together to do some testing of webservices at work built using <a href=\"http:\/\/www.sportsdb.org\/sd\/sportscaster\">an application front-end that we have released under the GPL<\/a>.  Of course, you need to be using our non-free sports data feed fetching software, but that's not the point.\n<\/p>\n\n<p>\nSo, as of March 1 we are turning off an old server that uses an older, Perl-using-CGI web service and redirecting those customers using it to one built using PHP (Code Igniter specifically.  Again, this decision was made before I started at that job.)  As the lead engineer on the project (okay, the only one) I had to make sure that all the old queries would work on the new server.  When my boss told me to \"manually check them\" I scoffed and said \"manual checking is for suckers, I'm going to write a script to do it.\".\n<\/p>\n\n<p>\nThe methodology is as follows:\n<ol>\n<li>Make sure that calls to the old web service return properly formed XML *or* HTML with a certain string  in it when we are doing XSLT transforms<\/li>\n<li>Do the same thing with the new web service<\/li>\n<li>Tell me when something isn't right<\/li>\n<\/ol>\n<\/p>\n\n<p>\nI could do more work in this script, to do things like look for certain tags in the XML document to be populated but we can skip that for now.  The new web service has been tested quite well and we are getting back results as expected via some other tests I've written using PHPUnit.<\/p>\n\n<p>\nWith help from online Python resources like <a href=\"https:\/\/comparite.ch\/python-cs\">this Python cheat-sheet<\/a> and some judicious online searching, I came up with this script.  As far as I can tell, the only outside dependency was me using <a href=\"http:\/\/www.crummy.com\/software\/BeautifulSoup\/\">Beautiful Soup<\/a> to read in the HTML output.  Maybe I could've used Beautiful Soup for both the XML and HTML, but this still works just fine.\n<\/p>\n\n<pre><code>#!\/usr\/bin\/python \n\nimport urllib2\nfrom xml.dom import minidom\nimport fileinput\nfrom BeautifulSoup import BeautifulSoup\n\nhost = 'http:\/\/w04.foo.com';\nhost2 = 'http:\/\/w05.foo.com';\nusers = [\"foo\", \"bar\", \"baz\", \"alpha\", \"omega\"] \npasswords = ['xxxxx', 'xxxxxx', 'xxxxxx', 'xxxxx', \"xxxxx\"]\nkey = 0\n\nfor username in users:\n    print \"Doing check for \" + username\n    password = passwords[key]\n    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n    password_mgr.add_password(None, host, username, password)\n    handler = urllib2.HTTPBasicAuthHandler(password_mgr)\n    opener = urllib2.build_opener(handler)\n    urllib2.install_opener(opener)\n    password_mgr.add_password(None, host2, username, password)\n    handler = urllib2.HTTPBasicAuthHandler(password_mgr)\n    opener2 = urllib2.build_opener(handler)\n    urllib2.install_opener(opener2)\n\n    for line in fileinput.input(username + \"_url.txt\"):\n        try:\n            data = urllib2.urlopen(line)\n\n            try:\n                xmldoc1 = minidom.parse(data)\n            except:\n                html = urllib2.urlopen(line).read()\n                soup = BeautifulSoup(html)\n\n                if not soup.find(text=\"XML Team Solutions\"):\n                    print \"Bad XML+HTML:\" + line\n\n        except:\n            print \"Could not load \" + line\n\n    key = key + 1\n<\/code><\/pre>\n\n<p>\nURL's that I wished to test were stored in text files that this script then read in.  Using a little grep + awk magic I was able to extract URL's from our web server access log in order to test.  I'd appreciate any tips from Pythonistas out there on how to make this code conform more to the \"Python way\" if there is such a thing.\n<\/p>\n",
        "date": "2009-02-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Ad-hoc Web Testing using Python",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/02\/25\/ad-hoc-web-testing-using-python\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n<i>Book is getting close<\/i><br \/>\nCircle March 9 on your calendar, as that is the day my book \"Refactoring Legacy Applications Using CakePHP\" as the day it will be released.  I will be offering a PDF version and a print-on-demand version via Lulu.com.  It looks like the PDF with be $10 or less, with the price of the POD version being at least double that.  More details once I get the site for this up-and-running.\n<\/p>\n\n<p>\n<i>Book Review On The Run<\/i><br \/>\nOn the recommendation of <a href=\"http:\/\/twitter.com\/lstrojny\">someone I follow on Twitter<\/a> I ordered a copy of \"Beautiful Architecture\", a collection of essays and articles published by O'Reilly and edited by Diomidis Spinellis & George Gousios.  It's all about software architecture and so far it's been an awesome read.  For anyone who's ever been in a position to have a say about not just WHAT they are building but HOW they build it, it's a great read.  I'm about halfway through.\n<\/p>\n\n<p>\n<i>Frameworks expand to fill available space<\/i><br \/>\nI was thinking about this the other day.  All frameworks start out being lightweight, unless your original design calls for you to be full-stack and bundle everything including a small web server for testing.  Then, as the project matures you keep adding things to it and before you know it you are just as big and close to being full-stack as everyone else.   So to those that call certain frameworks bloated, reconsider your position and take into account what YOU add to an application built with that framework that is not already in there.\n<\/p>\n\n<p>\n<i>7 Habits for Effective Text Editing 2.0<\/i><br \/>\nEven if you don't use <a href=\"http:\/\/www.vim.org\">the One True Editor<\/a>, check out this video with the creator of Vim as he talks about <a href=\"http:\/\/video.google.com\/videoplay?docid=2538831956647446078\">being more efficient when working with text.<\/a>  The strategies he talks about work with ANY editor \/ IDE and that's really the point.\n<\/p>\n",
        "date": "2009-02-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris' Brain - 2009-02-18",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/02\/18\/chris-brain-2009-02-18\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I get closer to giving my deployment talk at the <a href=\"http:\/\/conf.phpquebec.com\/en\/\">2009 PHP Quebec Conference<\/a> (you're going, right?) I've been paying close attention to what sort of things people have been doing in terms of best practices and actual application deployment.  Looking at some of these things, I realize how lax I've gotten lately.  Is it the crushing ennui of ongoing, incremental programming by a lone developer for his employer?  I'm being sarcastic (obviously) but the more I think about HOW I've been doing the development work the more I realize that I need to refocus.  \n<\/p>\n\n<p>\nSo, my programming environment appears somewhat sane to me.  I write my code using <a href=\"http:\/\/www.vim.org\">the One True Editor(tm)<\/a> on my laptop, where I've installed PHP, Python and Perl.  Since I work with both MySQL and Postgres, they are both on my laptop as well.  Is it any wonder I've crammed my MacBook with 4 GB of RAM?  I typically have a few Terminal.app instances running and a couple of <a href=\"http:\/\/code.google.com\/p\/mavcim\">MacVim<\/a> instances.  I find that I use <a href=\"http:\/\/www.sequelpro.com\/\">Sequel Pro<\/a> and <a href=\"http:\/\/www.pgadmin.org\/\">pgAdmin III<\/a> a lot, as all that work with sports data requires large queries that I have to tweak little by little.\n<\/p>\n\n<p>\nI also have found a powerful tool that I always ignored, but has been a godsend for development work.  What do you do when you have a large data set that your application needs to work against and it is totally impractical to copy it locally?  SSH tunneling to the rescue! \n<pre>\nssh -fNg -L3308:localhost:3306 notchris@rangers.xmlteam.com\n<\/pre>\nThat creates a tunnel to the MySQL server on one of our production machines (we name them after NHL teams), which I then can access by making a MySQL connection on port 3308.   Very simple and VERY effective.  I can't believe I had forgotten about this.  This technique works well when using something like Sequel Pro, and we had an SQL consultant in who connected the same way.\n<\/p>\n\n<p>\nBut now we're onto the toughest part of tearing down and rebuilding.  As our products (both the web ones and our main project, a Perl-based data-fetching-and-parse-into-a-db application) get more complicated it becomes obvious to me that my suspicions about there not being enough testing in place are unfortunately coming true.  So now is the time where this lone developer has to start thinking like he is part of a team and push forward with a new strategy, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Test_driven_development\">TDD<\/a>.\n<\/p>\n\n<p>\nI'm positive I've talked about this before on this very blog.  Code Igniter's testing absolutely sucks out of the box.  Luckily I have my CI-to-<a href=\"http:\/\/www.phpunit.de\/\">PHPUnit<\/a> bridge.  <a href=\"http:\/\/sebastian-bergmann.de\/\">Sebastian<\/a>, I owe you a bunch of alcoholic-beverages-of-your-choice when I run into you in Montreal in March for all you've done with PHPUnit.  So now I begin the incredibly daunting task of shoehorning in tests for an application that doesn't have any.  But that's not where the problem starts.\n<\/p>\n\n<p>\nSee, I'm having problems deciding WHAT to test.  Let's take a look at one project for example.  We have <a href=\"http:\/\/www.sportsdb.org\/sd\/sportscaster\">self-hosted web service<\/a> that we released under the  GPL that we not only use ourselves for some clients but also use it to troubleshoot things as well.  In terms of writing tests, I believe the best way to approach this is to write tests that speak directly to the Sportscaster \"engine\" using a known set of parameters and ensure that the output we get back matches what we expect.  Is unit testing overkill for this?  Very hard to say because we have an HTML front end that talks to a \"gateway\" that talks to an \"engine\".  I'm not the one who architected this, but I do have to make sure that it works properly.  In this case I believe that  \"your tests should verify your application is outputting what you expect it to\" is the best approach.  Comments about this are totally welcome.\n<\/p>\n\n<p>\nFor another project, I tried something that <a href=\"http:\/\/sebastian-bergmann.de\/archives\/631-Integrating-PHPUnit-with-Selenium.html\">integrated Selenium with PHPUnit<\/a>, but it was so slow as to be totally useless.  <a href=\"http:\/\/www.sportso.com\">Sportso<\/a> is a very visual application, one that is written in PHP an talks to an <a href=\"http:\/\/exist.sourceforge.net\">XML database<\/a>, but presentation is really the key here.  Sure, we need to make sure that we're placing the right data into our XML documents but that part of the application is solid.  In this case, I wish to have tests that simulate a user clicking around the application and using it.  Then I can compare output again and make sure that things are showing up when and where I expect them to.  I'm thinking the PHPUnit-Selenium bridge is a bad idea, and that I should instead just focus on Selenium.  Again, comments on how to best approach this are also welcome.  I cannot believe that Selenium is really this slow, so there must be something I am doing wrong.\n<\/p>\n\n<p>\nAlso, I've thought about continuous integration.  This <a href=\"http:\/\/timothyfitz.wordpress.com\/2009\/02\/10\/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day\/\">incredibly inspiring post about continuous deployment<\/a> has me really thinking hard about how my changes actually get pushed up out of dev to production.  We don't have the resources to use a cluster of machines that IMVU appears to have, but when you think of the infrastructure and (more importantly) the practices in place, you just have to be in awe of it all.  Just the *scale* of it is inspiring.  If they can do this, I can certainly implement a very effective subset of this.  There is really no reason other than laziness on my part to not do it.  Harsh reality, to be sure.\n<\/p>\n\n<p>\nBut the real problem is the political game that you inevitably end up fighting over bring in what is usually a very radical concept:  a commitment to testing as part of the development process.  Especially when the developers are severely outnumbered.  A lot of people seem to have a pathological fear of automated testing, saying things like \"we can just quickly test it by hand\".  Then when you see the errors being reported by users of your products, you can't help but wonder \"could we have caught this earlier?\"  Unless it's a very obscure error involving a race condition or something, of course the answer is YES.\n<\/p>\n\n<p>\nI read a post from one of the main developers at justin.tv talking about why he felt <a href=\"http:\/\/abstractstuff.livejournal.com\/60388.html\">unit testing is useless<\/a>.  While he is entitled to his opinion  I can't help but think that he really is doing TDD, but he just refuses to acknowledge it.  Yes, ultimately, your users are the only ones who can tell you if your application is spitting out errors.  But if you aren't doing any rigourous testing of stuff BEFORE your users see it, I think you are taking chances with your business.  My company is small (just 7 of us) so I'm so close to most aspects of the business I can really see the impact of certain decisions on the bottom line of the company.  It's not about finding bugs, which is what is being claimed by the justin.tv folks never happens with unit testing.  It's about making sure those bugs never happen in the first place.\n<\/p>\n\n<p>\nI have to say that I've never really delved into the world of post-deployment monitoring, so maybe I should start asking a few more questions of people who deal with that sort of thing.  Again, the key is to make it automated and have it report when it finds things that are wrong.  We have a very good nagios infrastructure at work that alerts us to problems with not only servers being down, but stale and\/or missing data for our customers.  I guess the next logical step is figuring out ways to look at those mountain of server logs and making sense of the errors?  Definitely something to think about the next time I get stuck on some programming problem at work and need a change of pace.\n<\/p>\n\n<p>\nI know I've been rambling a bit here, so let me pull some of this stuff back together to make it more cohesive:\n<ul>\n<li>SSH tunneling to access resources that you cannot easily put a snapshot of into your work environment.  I recommend read-only access if you can do it, because if you need to do updates or deletes you should always work off a local copy<\/li>\n<li>TDD is a powerful yet still controversial tool that too many developers are still ignoring (including me, but it's not too late to save myself!)<\/li>\n<li>Automation is the key to really taking advantage of what you gain by going with TDD<\/li>\n<li>You need tools in place after deployment to see if your changes have had the desired effect<\/li>\n<\/ul>\n<\/p>\n\n<p>\nAs always, bombard me in the comments with your thoughts and experiences with these types of scenarios.  I hope I don't get too many <a href=\"http:\/\/www.urbandictionary.com\/define.php?term=tl%3Bdr\">tl;dr<\/a> responses.\n<\/p>\n",
        "date": "2009-02-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rebuilding Your Programming And Deployment Environments",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/02\/10\/rebuilding-your-programming-and-deployment-environments\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm about halfway through my book, with my own self-imposed deadline of Feb. 23rd rapidly approaching.  That's so I have a week to actually create the site to *sell* the book.  I posted on Twitter earlier today that I thought that using CakePHP to create the site to sell a book about CakePHP is overkill, but Nate Abele from the CakePHP project <a href=\"http:\/\/twitter.com\/nateabele\/status\/1176654887\">seems to think otherwise.<\/a>\n<\/p>\n\n<p>\nSo I thought I'd talk a bit about the actual process of writing this book.  First, I've been writing it in MacVim (The One True Editor(tm)) using <a href=\"http:\/\/docutils.sourceforge.net\/rst.html\">reStructuredText<\/a> with the goal of converting the code to PDF with some CLI utilities.  So far I am very happy with how it is looking, but I have some concerns about the way <a href=\"http:\/\/code.google.com\/p\/rst2pdf\/\">rst2pdf<\/a> implements syntax highlighting, so that is something I will have to look at before publishing.\n<\/p>\n\n<p>\nFor those wondering about how the book is going to look, I've stuck with a very simple process:\n<ol>\n<li>Show existing code<\/li>\n<li>Show refactored code using CakePHP<\/li>\n<li>Explain my decisions when things look non-intuitive.  In other words, explain the things I had to look up on Google before writing it. ;) <\/li>\n<\/ol>\nExpect copious code samples along with my own unique writing style.  Now, it's not too late for me to add things into the book so feel free to mention things you would like to see in the book in the comments section.  I cannot promise anything but I do read each comment.\n<\/p>\n\n<p>\nOne thing to keep in mind is that I've targeted the book at developers who already have some understanding of how to use CakePHP.  There are already two books out there that will get people up-and-running with CakePHP, plus the awesome <a href=\"http:\/\/book.cakephp.org\">cookbook<\/a>.  What has been missing is actual examples of more intermediate-to-advanced use of CakePHP.  While I am not an expert in it's use (blame that on not using it at work) I have ported several old applications over to using CakePHP.  I'm hoping that I can help out people who actually need to use CakePHP and make some money for myself.  Not such a lofty goal, is it?\n<\/p>\n",
        "date": "2009-02-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Update",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/02\/04\/book-update\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI was asking around for a plugin \/ library \/ component \/ *something* that can help me to easily integrate the use of PayPal into the CakePHP application I'm building to be the web site for my upcoming book.  One of the movers and shakers in the CakePHP community, (you know, those people who actually contribute some code) John Anderson (aka psychic, the lead on the CakePHP Cookbook project) mentioned that he had a plugin I could use.  He also provided a link to an experimental <a href=\"http:\/\/plugins.thoughtglade.com\/\">CakePHP plugin server<\/a> he's setup and asked people to play around with.  That PayPal plugin was one of the ones being offered.\n<\/p>\n\n<p>\nBasically, you download a CakePHP console application that John wrote which speaks to the plugin server, and then it allows you to install any of the plugins that are on the server.  Perhaps the first steps towards a number of plugin servers?\n<\/p>\n",
        "date": "2009-01-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Plugins Server",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/29\/cakephp-plugins-server\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In a previous post I had talked about how to configure CakePHP to work with <a href=\"http:\/\/nginx.net\/\">Nginx<\/a>, a lightweight, high-performance HTTP server.  I'm in the process of creating the website for my upcoming book *and* had recently switched back from using Apache to using Nginx again, so I thought it might be time to roll up my sleeves and figure out how to make it work in a subdirectory.  After much gnashing of teeth and pissing and moaning, I figured it out.\n<\/p>\n\n<p>\nIn this example, let's assume that we are going to be running our application out of \/foo, and that we already have PHP applications running with Nginx already.  There are plenty of examples out there that you can google for.  So, what took me forever to do was to figure out how to properly make the second part of the rewrite rule.\n<\/p>\n\n<pre>\n# configure Cake app to run in a sub-directory\n# Cake install is not in root, but elsewhere and configured\n# in APP\/webroot\/index.php\nlocation \/foo\/ {\n    index index.php;\n\n    if (!-e $request_filename) {\n        rewrite ^\/foo\/(.+)$ \/foo\/webroot\/$1 last;\n        break;\n    }\n}\n\nlocation \/foo\/webroot\/ {\n    index index.php;\n\n    if (!-e $request_filename) {\n        rewrite ^\/foo\/webroot\/(.+)$ \/foo\/webroot\/index.php?url=$1 last;\n        break;\n    }\n}\n<\/pre>\n\n<p>\nAs stated before, I am not an Nginx expert so I will simply tell you what I *think* this configuration is doing.  First, it looks at any request that comes into \/foo and if it can't find it right away, it then rewrites the request to go over to \/foo\/webroot.  Then, any requests that come in for \/foo\/webroot, it checks to see if it can serve the file directly, like if it was in the css or js directories.  If it can't, it then strips out everything *after* \/foo\/webroot in the request and passes it over to APP\/webroot\/index.php.<\/p>\n\n<p>It was that second part that gave me the toughest time.  Once it finally dawned on me that I needed to remove '\/foo\/webroot' from the request, everything worked perfectly.\n<\/p>\n\n<p>\nIf there are any Nginx experts who can tweak this to work better, let me know.\n<\/p>\n",
        "date": "2009-01-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP + Nginx Configuration Update",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/25\/cakephp-nginx-configuration-update\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of my favourite sayings I tell my daughter when she whines \"I wish ...\" (usually in response to something I've asked her to do around the house) I remind her that \"if wishes were fishes, the sea would be full.\"  Sure, not exactly the type of advice she wants to hear but very true nonetheless.<\/p>\n\n<p>\nAs I prepare for the <a href=\"http:\/\/www.printfection.com\/atthekeyboard\">upcoming framework apocalypse<\/a> I started wondering not just what it was about all these frameworks that I have tried that I liked, but what was it about them that I did *not* like.  So, in the interest of fairness I thought I'd look at the 3 frameworks I've actually been paid to write code using and what features I'd like to see in them.\n<\/p>\n\n<h3>Wish #1: CakePHP to abandon PHP 4<\/h3>\n\n<p>\nThere, I said it.  I think it's time that <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> stop supporting PHP 4 and get on with the task of being a PHP 5-only framework.  Last I heard this was the plan for Cake 2.0 but I do not know the timeframe for that.  I know that a lot of people think that since 1.2 took so long to go final, my kids will be in college before CakePHP 2.0 comes out.  However, knowing how driven Nate, Garrett, and the new superstar on the block Mark Story are, I have faith that a PHP 5-only version of Cake is coming in short order.  Please tell me that's true, Nate!  Please?\n<\/p>\n\n<p>\nBefore you start complaining in the comments, please be aware that I know you can write CakePHP applications using PHP 5.  But until the core itself is taking advantage of PHP 5 (via things like autoloading and some of the more advanced OOP magic you can do) I think it's going to continue to suffer performance problems.  I love Cake and it's my PHP framework of choice, but that doesn't mean that the wizards on the core dev team can't make it better by leveraging what PHP 5 has to offer).\n<\/p>\n\n<h3>Wish #2: Code Igniter to abandon PHP 4<\/h3>\n\n<p>\n<a href=\"http:\/\/codeigniter.com\">Code Igniter<\/a> is an example of what happens when a company, and the company alone, is the sole driver of development for a framework.  At least that is my impression.  Code Igniter continually scores well in all those ridiculous \"hello world\" framework competitions, so you know that it is not dragging a lot of overhead around when doing things.  Again, Code Igniter does not use anything available in PHP 5 to its advantage.  I know that <a href=\"http:\/\/kohanaphp.com\/\">Kohana<\/a> is a fork of Code Igniter that is PHP 5 only, and one of our existing applications at work uses it, so those who like Code Igniter's style but want something that is PHP 5 only might want to take a look at it.\n<\/p>\n\n<h3>Wish #3: Zend Framework gets a good ORM \/ ADM module<\/h3>\n\n<p>\nI've been thinking about this a lot lately, and I am starting to like <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> for PHP 5-only projects that aren't database-driven.  In fact, if I have to start a new PHP project from scratch at work I'm likely to pick Zend Framework due to it's PHP 5-only pedigree and modular approach to building an application.  You literally only have to include what you need beyond a few core libraries.  Similar to Code Igniter in that respect but just a little heavier.  That's not so bad.<\/p>\n\n<p>\nBut the reason I still like Cake is that the associative data mapping that they use for database work is flexible and easy to use.  Zend Framework needs something like this.  If there is one, let me know in the comments.\n<\/p>\n\n<h3>Wish #4: For the love of god, no more XML configuration files in frameworks!<\/h3>\n\n<p>\nOne of the advantages to Cake is that there is very little you have to do in the way of configuration in order to get started.  Code Igniter has even less.  Zend Framework?  I was taking a look at Zend_Tool, which is their attempt at a CLI code generation tool, and noticed that there are XML configuration files all over the place to get it to work?  And <a href=\"http:\/\/www.symfony-project.org\/\">Symfony<\/a> has the same thing.\n<\/p>\n\n<p>\nLook, I deal with XML all day at my day job.  It's called XMLTeam Solutions for a reason.  But we use it for one thing, and one thing only:  presentation of data.  We use XSL files to reformat the XML output generated by our application.  That is where the use of XML remains.\n<\/p>\n\n<p>Configuration files for our main product, a Perl application, are text.  The authorization system for our clients is text-based.  Our PHP applications use (isn't that strange) PHP files to store the configuration information in them.  The handful of Python-based utilities I've written use...text files for configuration.  Noticing a trend?  Use XML as a way to pass data from one system to another, which is really want it was designed for.  Maybe someone can explain to me why configuration files being XML is a good idea, because I just don't see it.\n<\/p>\n\n<h3>Wish #5: Please buy a copy of my book when it comes out at the beginning of March<\/h3>\n\n<p>\nI'm getting my basement renovated so I actually have a nice office to work in, instead of working in my cold basement (or from the dining room table due to the current deep freeze in Ontario).  Buy my t-shirts too!<\/p>\n",
        "date": "2009-01-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "If Wishes Were Fishes, The Sea Would Be Full",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/23\/if-wishes-were-fishes-the-sea-would-be-full\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks for all the feedback about the preview for my upcoming e-book \"Refactoring Legacy Applications Using CakePHP\".  My plan is to have the book done and the web site for it created just before I go to Montreal to talk at the <a href=\"http:\/\/conf.phpquebec.com\/en\">2009 PHP Quebec<\/a> conference.  Let's see if I can hit that mark.<\/p>\n\n<p>\nI've decided to rev back up the posting frequency on ye olde blog, so I will often be doing posts that are just quick links, or brain dumps so I don't forget things I've been working, discussing with my various online friends or trying to understand better.  So, here are some of those things:\n<\/p>\n\n<p>\n<i>Programming vs. screwing around with HTML<\/i><br \/>\nGiles Bowkett, who I follow via Twitter and his blog and I think is one of the better programmers out there at communicating his ideas, has a very interesting post about <a href=\"http:\/\/gilesbowkett.blogspot.com\/2009\/01\/haml-brings-seaside-awesome-to-ruby.html\">markup in Ruby and Seaside<\/a>.  He compares using <a href=\"http:\/\/haml.hamptoncatlin.com\/\">HAML<\/a> in Ruby to the tradition ERB templating system.  While I might disagree with some of what Giles thinks about people who <a href=\"http:\/\/gilesbowkett.blogspot.com\/2009\/01\/why-hacker-news-thinks-php-won.html\">code in PHP for a living<\/a>, HAML vs. ERB vs. Seaside is food for thought on programming vs. screwing around with HTML.\n<\/p>\n\n<p>\n<i>Writing books in text is best<\/i><br \/>\nWhile I'm certainly not the first to suggest this (Cory Doctorow has been saying this for a long time, it became obvious to me quite quickly that the best way to approach writing my book was to write it as close to the \"bare iron\" of text, and then rely on third-party tools to convert the output to whatever format I wanted.  So, I chose to use <a href=\"http:\/\/commandline.org.uk\/python\/introduction-restructuredtext\/\">ReStructuredText<\/a> and then installed <a href=\"http:\/\/code.google.com\/p\/rst2pdf\/\">rst2pdf<\/a> to have it generate PDF versions whenver I feel like it.\n<\/p>\n",
        "date": "2009-01-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris's Brain - 2009-01-20",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/20\/chriss-brain-2009-01-20\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Some of you may know that I have started writing a e-book about CakePHP.  I'm planning on publishing it myself for the low, low price of $7.  I thought I'd let people take a sneak peek at how it looks so far by publishing the first two chapters in very rough form.\n<\/p>\n\n<p>\n<a href=\"http:\/\/cakebook.s3.amazonaws.com\/cakephp_book.pdf\" class=\"s3-link\">Preview of \"Refactoring Legacy Applications Using CakePHP<\/a> \n<\/p>\n\n<p>\nAs always, give me your feedback on what you see and I will try and make it the best little book on using CakePHP that I can.\n<\/p>\n",
        "date": "2009-01-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Preview of \"Refactoring Legacy Applications using CakePHP\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/16\/preview-of-refactoring-legacy-applications-using-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Being one of the lucky few who telecommutes full time.  You can drag my cold, lifeless body into an offirce, thanks very much.  So, the big issue that you face when telecommuting is how to talk to all your fellow co-workers.  Where I work, we use our own IRC server to not only talk to each other (we're spread across three time zones) but as front-line support for our customers as well.  This actually works out quite well, so I've been thinking about what other tools are helpful for this.<\/p>\n\n<p>\nIn terms of just talking amongst yourselves, it seems that <a href=\"http:\/\/www.campfirenow.com\">Campfire<\/a> has a lot to offer.  In fact, I would consider using it at work if we weren't running our own IRC server.  Via <a href=\"http:\/\/gilesbowkett.blogspot.com\/\">Giles Bowkett<\/a> I found out about <a href=\"http:\/\/propaneapp.com\/\">Propane<\/a>, a desktop client for connecting to Campfire.  Really cool stuff, and it makes me wonder what other options are out there.\n<\/p>\n\n<p>\nAn oft-neglected category of communication tools is messages about what has been worked on by the developers.  Me, I can't stand having someone coming around all the time asking me when I've finished what I'm working on.  As a result I decided to be proactive and configured post-commit hooks for our company SVN repositories.  So now any of us who do coding work commits something, we all get a nice email about it.  Since I've done that, we've been a lot more proactive about testing things because, well, you can no longer hide when you've made a change. ;)\n<\/p>\n\n<p>\nAs for bug and ticket tracking, well, we've got a homebrewed system (created before I got there) that I don't really like.  However, it is not going away so if I want to make any changes I will have to make them myself.  First thing I was thinking about was adding something to the post-commit hooks that will add a comment to the thread for particular ticket indicating you checked in some code that dealt with the ticket.  A common feature in things like trac I'm sure, but one I'd like to see in our own system.\n<\/p>\n\n<p>\nLet me know in the comments what type of tools you use at your company.\n<\/p>\n",
        "date": "2009-01-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Communication Tools for Teams",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/13\/communication-tools-for-teams\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I ran across an article <a href=\"http:\/\/www.isolani.co.uk\/blog\/web\/PhpFrameworksComparingCakePhpAndSymfony\">comparing CakePHP and Symfony<\/a> and found that the writer had a number of preconceived ideas about CakePHP.  These same ideas keep popping up everywhere, used by people looking to get their hate on about CakePHP.  I sent a very well-reasoned email to the writer clearing up some of those misconceptions, and (to his credit) he replied to me saying:\n\n<blockquote>\"Thanks for a brilliant email reply to my blog post about CakePHP and\nsymfony - and taking the time out to send it. Thanks so much for the\npointers and corrections.\"<\/blockquote>\nSo, in the interest of clarifying things about CakePHP I thought I would share that email, slightly rewritten for this blog posting, but the content is roughly the same.\n<\/p>\n\n<h3>Lack of Documentation<\/h3>\n\n<p>\nMan, this one will just not die.  One complaint seems to be the lack of documentation similar to what Symfony has.  I think that's totally fair in that there are very few *detailed* books out there explaining how to use Cake.  However, I feel that there is more than enough information on people's blogs on how to build things using CakePHP.  So, perhaps it requires time to search around via Google or your other favourite search engine, so I can understand how people are unable to find one unified source for this info.  I don't think you could ever have one definitive source for info about Cake, and the majority of contributors to Cake blog about it.  If I had to pick what I would call the definitive source out of the crowd, it would be <a href=\"http:\/\/book.cakephp.org\">the CakePHP Cookbook<\/a>.\n<\/p>\n\n<h3>Scaffolding<\/h3>\n\n<p>While I think scaffolding is a great idea to show off the strength of CakePHP, it is a toy and I have never used the scaffolding to build anything other than a throw-away prototype.  I use 'cake bake' to generate the \"scaffolding\"  for my application and then edit those files.  In fact, I'd say that 'cake bake' is the essential tool that anyone who uses CakePHP needs to start using RIGHT NOW if they are not already.\n<\/p>\n\n<p>It is my personal opinion that showing people the scaffolding stuff that Cake uses by default is counter-productive and a waste of time.  It just confuses them and leads to frustration, which is clearly what has happened to you here.  So if you want to use CakePHP, just don't use the scaffolding at all.<\/p>\n\n<h3>Models are tied to controllers in a 1:1 relationship<\/h3>\n\n<p>Nothing could be further from the truth.  Here's a sample of some code from a project I was working on that shows this<\/p>\n\n<pre><code>class CalendarController extends AppController {\n    var $name = 'Calendar';\n    var $uses = array('UserClient', 'CalendarPending', 'LegalCase');\n\n    function admin_index() {\n        $results = $this-&gt;UserClient-&gt;Location-&gt;findByLocationId($this-&gt;Auth-&gt;user('location_id'));\n        $pending_depositions = $this-&gt;CalendarPending-&gt;find('all', array('conditions' =&gt; array('location' =&gt; $results['Location']['name'])));\n        $cases = $this-&gt;LegalCase-&gt;groupByDepositionType();\n\n        $this-&gt;set('pending_depositions', $pending_depositions);\n        $this-&gt;set('cases', $cases);\n    }\n<\/code><\/pre>\n\n<p>For those keeping score at home, that's one controller interacting with 4 different models.  You can have controllers that don't have any associated models.  You can also have controllers that don't talk to any model at all by default by setting the uses array to equal null.  So the idea of  Cake only being for simple \"one table = one view\" is simply wrong.  Again, I'd like to find a way to get rid of this idea that you can only have one model per controller.<\/p>\n\n<h3>Cake's Ajax and Javascript helpers do not support graceful degradation<\/h3>\n\n<p>I don't use the Ajax helper but a quick look at the online documentation shows that this myth might actually be true.  Core contributor Mark Story has a post showing you an example<a href=\"http:\/\/mark-story.com\/posts\/view\/providing-contextual-form-help-with-mootools\">how to make that happen<\/a> in CakePHP, but it requires a little bit of work.  Maybe Symfony is the only \"mainstream\" framework out there that has put effort into implementing that.  Personally, I don't use the Ajax helpers in Cake as I prefer to use jQuery.<\/p>\n\n<h3>Cake's HTML and Form helpers produces bad markup<\/h3>\n\n<p>I don't feel that's true at all.  The form helper can produce legends and fieldsets...and those can be turned off via parameters in the calls to that particular helper.  Again, more work needs to be done to clue people in about this stuff.  The online documentation does show what all the parameters that the helpers take do, so check them out to find out exactly how to bend if to your will.<\/p>\n\n<h3>Unit tests are an afterthought<\/h3>\n\n<p>Definitely not true.  When you use the 'cake bake' utility to create the outlines of models and controllers it also creates the empty unit tests that go along with it as well.  Cake also has a very extensive set of unit tests for the framework itself and code coverage that is up past 85% last that I had seen.  Testing is important, and it's good to see that Symfony also has a commitment to that.\n<\/p>\n\n<h3>CakePHP is not an \"enterprise capable framework\"<\/h3>\n\n<p>\nCould someone please tell me what this actually means?  Cake is used by Mozilla for their Add-ons site, so I think that's about as enterprisy a use as you're going to see out there.\n<\/p>\n\n<p>\nSo, a few myths about CakePHP busted I hope.  The thing I wish to emphasize to those who are looking at Cake to make sure they look at the <a href=\"http:\/\/book.cakephp.org\">CakePHP Cookbook<\/a> and the <a href=\"http:\/\/api.cakephp.org\/\">online API documentation<\/a> in order to fully understand how to use the various helpers.\n<\/p>\n",
        "date": "2009-01-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Mythbusters!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/04\/cakephp-mythbusters\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Interesting meme running round on the net, mostly via Twitter, where you tag seven people, and those who get tagged are supposed to share seven things about themselves.  In turn, those seven people should tag seven other people, and so on, and so forth.  I was tagged by <a href=\"http:\/\/blog.phpdeveloper.org\/?p=113\">Chris Cornutt aka enygma<\/a>, the unstoppable force behind PHPDeveloper.org and <a href=\"http:\/\/joind.in\">Joind.in<\/a>.  Just to slightly correct him, I didn't actually create the image on the <a href=\"http:\/\/www.printfection.com\/atthekeyboard\">Framework Apocalypse t-shirt<\/a>, I was smart enough to get someone to draw it for me.  Prepare yourself for seven things you might not know about me:\n<\/p>\n\n<ol>\n<li><i>I got paid to write my first computer program when I was 12 or 13<\/i>.  My first computer was a Commodore VIC-20, which I got when I was 10 or 11.  My mother was teaching computers and math at a private school in Toronto, and they needed someone to do up a salary grid for the teachers' pay.  Written in Apple BASIC on an Apple IIGS, complete with user input AND verification of the data they entered.<\/li>\n<li><i>Although I have a diploma in computer science from community college, I also have a diploma in civil engineering<\/i><\/li>.  When it was time to go to college, I listened to my father who told me there would always be work in construction.  When I graduated, the construction industry in the Toronto area went into it's worst slump in a long time.  I remember sending out almost 100 resumes (this is pre-internet days, so all by mail or fax), hearing back from 3 places and getting hired by 1.  After a summer of working for minimum wage and 60 hours a week, I decided to go back to school and study what I really enjoyed, which was computer programming.\n<li><i>My wife and I met at work<\/i>.  We were both working at a small ISP, she in sales and me doing phone support.  I was totally oblivious that she was interested in me and until one of her co-workers pushed her into asking me out for dinner after work one day.  10+ years of marriage later, we have two little girls and enjoying watching them grow up.<\/li>\n<li><i>My mom and sister blog<\/i>, making us a truly wired family.  My mother talks about all her experiences at her blog <a href=\"http:\/\/www.teachersatrisk.com\">Teachers At Risk<\/a>.  My sister, a stay-at-home mom and frustrated writer, shares her progress on her novel over at <a href=\"http:\/\/www.lisahartjes.com\">her blog<\/a>.<\/li>\n<li><i>I used to own a comic book store<\/i>.  Back in the mid '90s, my sister and I started up a comic store at a strip mall around the corner from where we lived.  It lasted one year and we burned through all the money our father had given to us.  In the end, it was a totally bad location despite what we thought.  I worked Saturdays and Sundays in the store and there were days when nobody came in at all.<\/li>\n<li><i>I learned German on Saturday mornings for seven years as a kid<\/i>.  My parents are both of German descent, and they sent my sister and I to German heritage school for many years.  My oldest daughter goes to the same school now, 20+ years later, at *her* insistence.  I understand German better than I speak it, and often just use it to yell at my cats.  But it's starting to come back despite all my best efforts to bury the trauma of never being able to watch Saturday morning cartoons.<\/li>\n<li><i>I'm writing a book<\/i>.  Inspired by P?draic Brady's self-published book about <a href=\"http:\/\/http:\/\/www.survivethedeepend.com\/\">Zend Framework<\/a>, I've started working on what I believe is a much-needed subject:  a guide to converting legacy applications over to using the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> framework.  I've already got the outline for the book done, the introduction is written and the first two chapters half-written as well.<\/li>\n<\/ol>\n\n<p>\nSo, who shall be my next victims?  I've tried to think of people whom others haven't talked about yet at all, and the list is pretty small. Although some of these people aren't really close friends, I think they are all the type of people you should all get to know better.\n<ul>\n<li><a href=\"http:\/\/debuggable.com\">Felix Geisend?rfer<\/a>, CakePHP guru and co-owner of an awesome consultancy based out of Deutschland.<\/li>\n<li><a href=\"http:\/\/jan.prima.de\/\">Jan Lehnard<\/a>, CouchDB evangelist and reluctant PHP coder (as far as I can tell).  Always super helpful when asked for help, and the master of the human helicopter presentation technique<\/li>\n<li><a href=\"http:\/\/www.openkomodo.com\/blogs\/jeffg\">Jeff Graham<\/a>, who works at Activestate and promotes Komodo, OpenKomodo and PHP as well.  I've met him at a few conferences, genuinely nice guy and he's Canadian on top of it.<\/li>\n<li><a href=\"http:\/\/blog.derekmartin.ca\">Derek Martin<\/a>, former co-worker at an adult dating web site and co-contributor of our Zend_Service_Audioscrobbler component for Zend Framework.<\/li>\n<li><a href=\"http:\/\/funkatron.com\">Ed Finkler<\/a>, the awesomely talented developer behind <a href=\"http:\/\/funkatron.com\/spaz\">Spaz<\/a>, a Twitter client written in Adobe Air.  I'll forgive him for using Code Igniter<\/li>\n<\/ul>\n<\/p>\n\n<p>\nLooks like mostly everyone else has already been tagged.  So spread the meme and the world know a little bit more about yourself.\n<\/p>\n",
        "date": "2009-01-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My Sevent Things",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2009\/01\/03\/my-seven-things\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I hope everyone has had a good holiday season this winter of 2008\/2009.  Me, I took two weeks of consecutive vacation time for the first time since my youngest was born.  This has given me time to relax, enjoy time with my family and think about 2009.  Due to time constraints I have been forced to start the process of handing over the Side Project That Will Not End to another developer who can give it the attention that it deserves and needs.  If you are well versed in CakePHP 1.2 and are looking for a side project that will push your skills, contact me.  The client is anxious to get it done and are awesome to work with.\n<\/p>\n\n<p>\nAnyway, onto other matters.  As you saw in parts 1 and 2, a bug part in having a successful transition from legacy app to CakePHP is having an environment that is well suited to the use of a framework.  Having laid out the groundwork for that switchover, it's time to talk about the part of a refactoring or porting that is most difficult:  separating your business logic from your display logic.\n<\/p>\n\n<p>\nIn a post on this site, I talked about the concept of \"fat models and skinny controllers\".  Having worked with frameworks professionally for almost two years now, I can say that I think I can update that motto to be \"fat models, skinny controllers, and flexible views\".   So, just what do I mean about this.\n<\/p>\n\n<p>\nThe main reason people use a framework (other than to become a raving fanboi) is to provide structure to an application.  However, with this structure there comes some limitations.   Maybe limitations is the wrong word.  I prefer to borrow a term used a lot by the Rails world (and the Cake world as well), and that is \"convention\".  Every framework has it's conventions, and the culture and environment of the framework dictates what the rules are for the models, views and controllers.  Or models, views and templates if you're into Django.  Whatever you call them (data source, request responder, output?) any framework does its best to try and prevent you from doing harm to yourself while coding.\n<\/p>\n\n<p>\nIn what I call spaghetti PHP, you usually end up with applications that have their data source interactions, request responder and output mashed together.  The vast majority of my early code was of this type.  Nothing wrong with it, as long as it was cleanly written and easy to understand.  Frameworks say that this kind of thing leads to poorly written code and lack of flexibility.  Refactoring spaghetti PHP is not always easy, especially when you have to add new things into the mix.\n<\/p>\n\n<p>\nSo, as a result, it has become a common programming practice to make the effort to separate your business logic from your presentation logic.  I don't think this is a bad thing at all, framework fanboi that I am or not.  The goal in all this is to create an application that is easier to maintain going forward, and I truly believe that this can only be done through this separation.  But *how* do you do this?\n<\/p>\n\n<p>\nLet's look at the first part of the new motto:  \"fat models\".  Now, I'm not talking about <a href=\"http::\/\/http:\/\/en.wikipedia.org\/wiki\/Big_Beautiful_Woman\">BBW<\/a> here, despite how many people end up on my site via a search along those lines.  The \"fat model\" is the concept of placing as much code in the data source interaction parts of your application as possible.  In Cake terms, this means creating methods in your models to do all the data crunching that you need, and then having your controllers simply call these model methods and pass the results to the view.\n<\/p>\n\n<p>\nSo, in our legacy app we had a structure that used \"modules\", which are really nothing more than a number of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Front_controller\">front controllers<\/a> that had request response processing via large switch-case blocks that did a lot of database calls.  Then, it would do a search-and-replace of tokens within a template based on the data retrieved and then display it.  While I had some issues with their \"all-inclusive templates\" that controlled the display of data via CSS calls that set \"display:none\" as needed, it did mean I had templates to work with.  \n<\/p>\n\n<p>\nThe next logical step then was to take a look at all the database calls that were being done within these modules and map them to a particular Cake model.  As I looked at the queries and what was being done with the results, I started breaking them done into one of two categories:\n<ol>\n<li>Results that could be obtained with the existing model methods like find('all') etc<\/li>\n<li>Results that would require further manipulation of the data after using an existing model method call<\/li>\n<\/ol>\n<\/p>\n\n<p>\nInitially, I thought that I would be looking at a small number of the first category, but in the end it was the power of Cake's Associative Data Mapping capabilities that made me realize the number of custom model methods would be minimal.  Let me give you some examples.\n<\/p>\n\n<p>\nLet's say that I need to get a list of all cases that belong to a particular firm.  Here's one way of doing that in Cake.\n~~~\n<?php\n\n\/\/ Given that we have a has-and-belongs-to-many relationship \n\/\/ established between LegalCase and Firm, and the ID of the firm \n\/\/ already stored in the session via the Auth component\n\n$conditions = array(\n     'LegalCase.archived' => 0,\n     'Firm.id' => $this->Auth->user('firm_id')\n);\n$order = 'LegalCase.case_name';\n$cases = $this->LegalCase->CaseFirm->find('all', compact('conditions', 'order'));\n\n?>\n~~~\n<\/p>\n\n<p>\nVery straightforward, and Cake would return to me an associative array containing all the cases that belong to the firm, ready to pass to the view.  If you were to look at the SQL generated by such a thing, you would see that it was using some SQL JOINS to link the cases, firms and cases_firms table to get my results.  I cannot recommend enough for people building things in CakePHP to use the awesome <a href=\"http:\/\/github.com\/cakephp\/debug_kit\/tree\/master\">Debug Kit<\/a> to peer inside Cake as you develop.\n<\/p>\n\n<p>\nIn another part of the application, I had to get a list of orders that had been archived, count them, and group them by month.  Obviously this could not be done with just the existing model methods.  So I looked at the queries and then the code that followed those queries, then condensed them down into a method in the Order model:<br \/>\n~~~\n    function archivedOrdersCount($user_id) {\n        $fields = \"DATE_FORMAT(date_completed, '%m') as month_completed, DATE_FORMAT(date_completed, '%M') as month_name, DATE_FORMAT(date_completed, '%Y') as year_completed\";\n        $conditions = array(\n            'user_id' => $user_id,\n            'OR' => array(\n                'client_archive' => 1,\n                'void' => 1)\n        );\n        $order = \"year_completed, month_completed ASC\";\n        $results = $this->find('all', compact('fields', 'conditions', 'order'));\n        $orders = array();\n\n        foreach ($results as $result) {\n            $key = \"{$result[0]['month_name']} {$result[0]['year_completed']}\";\n            \n            if (!isset($orders[$key])) {\n                $orders[$key] = array(\n                    'year' => $result[0]['year_completed'],\n                    'month' => $result[0]['month_completed'],\n                    'label' => $key,\n                    'count' => 0\n                );\n            }\n\n            $orders[$key]['count']++;\n        }   \n        \n        return $orders; \n    }\n~~~\n<\/p>\n\n<p>\nI think part of the problem a lot of people are faced with when converting a legacy app over to using *any* framework, is the idea that your problems are unique and not solvable via a framework.  In the context of using Cake's models, I think people would be really shocked to discover just how easy it really is now to take an existing query and make it work with Cake models.\n<\/p>\n\n<p>\nI hope I've given you a little glimpse into some of the work involved in converting SQL calls in PHP over to using Cake's model objects.  In the next post in this series, I'll be showing what I mean by \"skinny controllers\".\n<\/p>\n",
        "date": "2008-12-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Converting Legacy Apps to CakePHP, Part 3",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/30\/converting-legacy-apps-to-cakephp-part-3\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Congrats to the CakePHP dev team for getting 1.2 final out the door just in time for X-Mas.  Read all the details <a href=\"http:\/\/bakery.cakephp.org\/articles\/view\/the-gift-of-1-2-final\">here<\/a>.  I feel somewhat guilty as I have not been able to contribute to 1.2 during the run-up to the final release, but working with it for a side project has been enjoyable and living on the bleeding edge for a side project has not resulted in any show-stopping bugs.  That alone is worth mentioning.\n<\/p>\n\n<p>\nI know that frameworks get a bad rap, especially full-stack ones like Cake, but most of those complaints come from people who are unwilling or unable to embrace the constraints on your environment that Cake places.  I used to be militant about that sort of thing, but I've come to realize that it just doesn't matter.  I'd rather shape my application to leverage the strengths of a framework.   Maybe I am just smart enough to figure out workarounds for the weaknesses.  But understanding the environment \n<\/p>\n\n<p>\nTerry Chay had an awesome contribution to PHP Advent 2008 where he talked about <a href=\"http:\/\/phpadvent.org\/2008\/php-without-php-by-terry-chay\">some funky tricks in PHP and the importance of respecting the environment your code will run in.<\/a>.  After I said nice things about the post on Twitter, he sent this to me (note, this was spread across two tweets):\n<blockquote>\n<i>Thank you. I appreciate the comment. Happy Christmas. :-)  I know we don't always agree on things like CakePHP, so the fact that you liked the entry means a lot.<\/i>\n<\/blockquote>\n<\/p>\n\n<p>\nI was disappointed there were no f-bombs in the reply, but it's still nice to have someone you consider on another upper level of competency from you to say nice things back.<\/p>\n\n<p>\nAnyway, even if you hate CakePHP I think it's worth investing 5 to 10 minutes of your time to look at the announcement and see just how much stuff is in the 1.2 release and ask yourself how much of that code could you write yourself *and* have it be reusable by others.  To me, the fact that I can use much of what is in CakePHP without any modification beyond the conventions is the real reason to use it.\n<\/p>\n",
        "date": "2008-12-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP 1.2 Final released and some thoughts on frameworks",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/27\/cakephp-12-final-released-and-some-thoughts-on-frameworks\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As a guy who gets so much out of open source software, I thought that this Christmas season is a good time for me to give something back to all of you out there and share with you some of the things I've been thinking about.  Notice that many of these things are not PHP related...\n<\/p>\n\n<h3>Rails and Merb merge<\/h3>\n\n<p>Much to surprise of many, egos have been pushed aside and <a href=\"http:\/\/yehudakatz.com\/2008\/12\/23\/rails-and-merb-merge\/\">Rails and Merb are merging to create Rails 3<\/a>.  It's not very often I read something online and unleash a string of astonished obscenities, but this announcement absolutely stunned me.<\/p>\n\n<p>\nIf I ever went back into the land of Ruby again, <a href=\"http:\/\/merbivore\">Merb<\/a> was going to be the framework I was going to use.  But since I'm not going that way, it's really a moot point.  Rails can only get better by not only integrating stuff from Merb into it but also taking to heart the modular nature of Merb itself.\n<\/p>\n\n<p>\nPerhaps this is yet another watershed moment in the evolution of frameworks.  As much as I am a full-stack guy, I am seeing the advantage to having a framework that has a very tight core, and lots of modules that you can add-on to it.  <a href=\"http:\/\/www.djangoproject.org\">Django<\/a> has this to a certain extent, but it also has a lot in the core.\n<\/p>\n\n<h3>Alternate Workflows<\/h3>\n\n<p>\nI've been spending time at work trying to figure out workflows that fit in with my development style.  I found this very innovative <a href=\"http:\/\/joemaller.com\/2008\/11\/25\/a-web-focused-git-workflow\/\">web-focused workflow<\/a> that uses <a href=\"http:\/\/git.or.cz\">Git<\/a>.  The thing that I find intriguing is that it allows you to make edits on the production side, and those changes get propagated to where they need to go.  Even though I think that doing edits on the production side of things is usually a Very Bad Idea, but that might be a product of my experience with one-way deployment of code from dev->staging->production.\n<\/p>\n\n<h3>Master your Editor<\/h3>\n\n<p>\nNow that my waffling is over and I only use <a href=\"http:\/\/code.google.com\/p\/macvim\/\">MacVim<\/a> as my primary editor, I am now embarking on the journey from beginning user to vim power user.  Thanks to posts like <a href=\"http:\/\/www.catonmat.net\/blog\/vim-plugins-surround-vim\/\">this one from a series on Vim plugins you should know about<\/a>, I can customize my programming environment to be the way *I* want.  No matter what editor you use, take the time to learn it's features and you will surely discover ways to become more productive.\n<\/p>\n\n<h3>Design your site from front to back<\/h3>\n\n<p>\nEver tried to design a site based off a text description from the client \/ boss \/ whatever?  You are doomed to failure.  Instead, I have started insisting on taking things in the other direction and designing from front to back.  Tools like <a href=\"http:\/\/www.balsamiq.com\/products\/mockups\">Balsamiq Mockups<\/a> are indispensable to make this happen.  In truth the tool doesn't matter.  What matters is that you have a way to draw rough designs for your site and then build it from the interface on back.  For a guy who has very little design talent, this makes total sense to me.  I have two side projects that currently exist ONLY as interface sketches.  And I think that is a good thing.\n<\/p>\n\n<p>Any way, that's it for now.  Have a good holiday season I will be posting again next week with the next installment in my \"refactoring with CakePHP\" series, this time about the rearranging of business logic and display logic.\n<\/p>\n",
        "date": "2008-12-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Chris' Brain, X-Mas 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/24\/chris-brain-x-mas-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For a while I had been threatening to commission a t-shirt design based on either \"Framework Jihad\" or \"Framework Apocalypse\".  The general consensus amongst my Twitter peeps was that (a) this was a great idea and (b) they would buy one.  Well, that time has come.<\/p>\n\n<p align=\"center\">\n<img src=\"https:\/\/www.littlehart.net\/zombie-shirt-3.png\" height=325 width=454\/>\n<\/p>\n\n<p>\nOne of my favourite webcomics is <a href=\"http:\/\/hijinksensue.com\/portfolio\/\">Joel Watson's<\/a> <a href=\"http:\/\/www.hijinksensue.com\">Hijinks Ensue<\/a>.   Joel is trying to <a href=\"http:\/\/hijinksensue.com\/experiment\/\">Live The Dream<\/a> of being a full-time web cartoonist \/ merchandiser, and to this end he also does custom design work.  After about exchanging a few emails about designs, Joel cranked out this awesome t-shirt for me.\n<\/p>\n\n<p>\nAfter taking a look at the various web sites that can do print-on-demand t-shirts, and reading come comparisons between them, I settled on <a href=\"http:\/\/www.printfection.com\">Printfection.com<\/a>.  Once Joel sent me the final design, it took about 30 minutes from first signing up to having a working store.\n<\/p>\n\n<p>\nSo, show the world that you are not afraid of the upcoming Framework Apocalypse by going to my <a href=\"http:\/\/www.printfection.com\/atthekeyboard\">online store<\/a> and ordering yourself a shirt...or ten. ;)\n<\/p>\n",
        "date": "2008-12-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "You Cannot Escape...The Framework Apocalypse",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/22\/you-cannot-escapethe-framework-apocalypse\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While talking with Nate in IM tonight, he told me to spread the good word that CakePHP 1.2RC4 has been released.  Check out <a href=\"http:\/\/bakery.cakephp.org\/articles\/view\/rc4-close\">the announcement<\/a> and pay close attention to the changelog mentioned in that posting to see what's changed.\n<\/p>\n",
        "date": "2008-12-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP 1.2RC4 Released",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/18\/cakephp-12rc4-released\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n<i>(Note: after being schooled by Nate Abele via IM about the various ways you can deal with schemas without built-in relationships, I have altered the post)<\/i>\n<\/p>\n\n<p>\nNow you've decided to convert your legacy app over to CakePHP, you will run into the first serious obstacle:  your database schema. If your schema does not already account for relationships between multiple tables you are in for a lot of extra work.  If the tables already have foreign keys pointing to other tables, you're in pretty good shape.\n<\/p>\n\n<p>\nIf you're still looking at not having foreign keys in the existing schema, all is not lost.  You can set the foreignKey property in a model association to false and then create a custom query that pulls in the joined records, which I imagine is useful if you need to use multiple foreign keys or something.  So despite my previously hard line stance on this, you *can* deal with tables that don't have bulit-in foreign keys.  It's just extra work. \n<\/p>\n\n<p>\nWithout a database schema that contains relationships, you will not be able to use CakePHP's awesome associated data mapping abilities that are offered as part of the model.  Basically, given a set of conditions and knowing the relationships between the tables it will generate fairly well-tuned SQL queries and then return the results to you as nested arrays.  Is this perfect ORM?  No, but it's very easy to pass these result sets to your views for iterating over.\n<\/p>\n\n<p>\nIn my case, this was going to be the easiest part: the schema already contained relationships between the tables so I was able to use the Cake console and in under an hour I had used 'cake bake' to create all my models.  I did go back after the fact and tweak some of the relationships because they weren't *perfect* matches with the Cake conventions, but that was the exception rather than the rule.  Had there been no relationships between the tables, or extreme denormalizing of the data, I am unsure what I would've done.\n<\/p>\n\n<p>\nOn the topic of working with denormalized data, I'll late Nate speak for himself here:\n<blockquote>\n\"Again, you can get this to work fine, it just takes a bit of extra effort.  It's nice when you can move this effort down to the database (i.e. cascading foreign key updates) but if not, you just have to write a little extra callback code.\"\n<\/blockquote>\n<\/p>\n\n<p>\nWhat Nate is referring to here is that you will have to some work in your models to create functions as \"callbacks\" that are executed when performing updates or saves.  For example, a site I worked on had broken out user profile information into 4 different tables depending on what type of search you were doing.  In this case, I'd be writing a callback function that would go and update all the other search tables whenever I updated the master record.  That's the \"cascading foreign key updates\" thing Nate is referring to.\n<\/p>\n\n<p>\nNow that I had my models, it was time to start thinking about how to switch over old queries.  In order to understand how to turn old SQL queries into results you get from Cake, I think you have to understand the following things (all of this applies to Cake PHP 1.2):\n<ul>\n<li>Understanding how relationships (i.e. hasMany, hasAndBelongsToMany) work in CakePHP.<\/li>\n<li>How to use the <a href=\"http:\/\/book.cakephp.org\/view\/474\/Containable\">Containable behavior<\/a> so you limit what comes back in the result set<\/li>\n<li>Pretty solid SQL skills so you can decipher legacy code that might be using JOINS and subselects<\/li>\n<\/ul>\n<\/p>\n\n<p>\nI think that if you are really good at those three things, you will be able to quickly determine how to turn that legacy SQL code into the proper parameters that need to be passed to your models to get back the results you need.\n<\/p>\n\n<p>\nSo now armed with the tools needed to convert those old queries over, I was onto the next and probably most difficult part of this particular project:  converting the old page controllers that used a token-replacement system for the templates over to Cake controllers and views.\n<\/p>\n",
        "date": "2008-12-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Converting Legacy Apps to CakePHP, Part 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/12\/04\/converting-legacy-apps-to-cakephp-part-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In anticipation of my <a href=\"http:\/\/conf.phpquebec.com\/en\/session#deployment_is_not_a_4_letter_word\">talk at PHP Quebec 2009<\/a> I've been going over my slides and thinking about what I'm going to update for it.  One little nugget I'd thought I'd share is one way of handling having multiple environments your code must run in.\n<\/p>\n\n<p>\nFor a work application, I have *three* environments that the code must run in:  'dev' (which is my laptop), 'staging' (which is where I look for the infamous \"bug does not exist in production\" type of errors), and 'production'.  For all these environments, there are different web services that they need to speak to so I tried to think of an easy way to handle this.  I have a configuration file that is used, so it seemed to me that this would be a logical place to do the *check* for what environment we are in.  But *how* to define where we are?  That turned out to be easy.\n<\/p>\n\n<p>\nIf you are using Apache, you have the ability to define server variables that can be read in using $_SERVER.  I'm sure you can do the same thing with other web servers, but this example is Apache-specific.  So, I figured the best way to handle this problem was to define a server variable and have a unique value for each environment.  Then, I added in code that checks the contents of that server variable and reacted accordingly.  Here's an example:\n<\/p>\n\n<p>\n~~~\n<?php\n\/\/ In Apache, add SetEnv APP_ENV \"<unique environment value>\" somewhere in your http.conf file\n\/\/ e.g. SetEnv APP_ENV 'dev'\n\nswitch ($_SERVER['APP_ENV']) {\n    case 'dev':\n        $config['webservice'] = 'http:\/\/admin@localhost:8008';\n        $config['putfeed'] = 'http:\/\/dev.domain.com:8080\/put\/sml';\n        break;\n    case 'production':\n        $config['webservice'] = 'http:\/\/admin|password@ws.domain.com:8080';\n        $config['putfeed'] = 'http:\/\/in.domain.com\/put\/sml';\n        break;\n}\n?>\n~~~\n<\/p>\n\n<p>(NOTE:  <a href=\"http:\/\/snook.ca\/jonathan\/\">Jonathan Snook<\/a> asked me to add an example on how to configure SetEnv)<\/p>\n\n<p>\nThen, in your Apache httpd.conf file you add the SetEnv directive.  Here's a snippet of how I did it for a work project:\n~~~\n<virtualhost *:80> \n     ServerName local.sportso.com \n     DocumentRoot \/Users\/chartjes\/Sites\/sportso.com \n     SetEnv SPORTSO_ENV \"dev\" \n  \n     <directory \/Users\/chartjes\/Sites\/sportso.com> \n         Options Indexes FollowSymLinks MultiViews \n         AllowOverride None \n         Order allow,deny \n         Allow from all \n          \n         RewriteEngine on \n         RewriteCond %{QUERY_STRING} ^last-accessed=(.*)$ \n         RewriteRule ^(.*)$ $1\/last-accessed\/%1? \n         RewriteRule ^$ \/index.php [L] \n         RewriteRule ^\/$ \/index.php [L] \n         RewriteCond $1 !^(index\\.php|images|styles|js|robots\\.txt) \n         RewriteRule ^(.*)$ \/index.php\/$1 [L] \n     <\/directory> \n      \n     LogLevel warn \n     ErrorLog \/opt\/local\/apache2\/logs\/sportso.com-error.log \n     CustomLog \/opt\/local\/apache2\/logs\/sportso.com-access.log combined \n<\/virtualhost> \n~~~\n<\/p>\n\n<p>\nHope that helps out any other developers struggling to think of an elegant way to determine what environment you are in.  As opposed to the lazy method of checking a production version of the config file into your version control system and then simply not checking back in the hacked-up dev version of it. ;)\n<\/p>\n",
        "date": "2008-11-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Handling Multiple Environments In Your PHP Application",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/11\/28\/handling-multiple-environments-in-your-php-application\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In order to make some extra money, I do side projects from time to time.  In my rapidly dwidling spare time I have been working on a project to convert an existing site for a legal services company over to PHP.  I'm *this* close to being done, so I thought I'd share what I went through to get to where I am right now.<\/p>\n\n<p>\nThe existing code is typical of what I call the pre-framework era.  It had grown organically, much like many applications do.  When I initially did the code review (contact me if you're interested in having me do a code review of your application) I noticed lots of stuff that needed fixing.  No escaping of database input or filter of output.  Plaintext passwords in the database.  Total mixing of business logic with presentation logic.  To make things a little more difficult, SOME of the application was done properly in terms of separating business logic from presentation logic through a system of HTML templates that would have parts of it filled in via token replacement.  Not great, but not the end of the world.\n<\/p>\n\n<p>\nI could also tell that multiple people had worked on it.  How?  Inconsistency in coding standards.  That and the comments strewn throughout it indicating who had done what.  Did I also mention that no version control was used on the project at all, so lots of copies of files like user_search.php.old, user_search.php.old.2.  You get the idea.  The best news of all was that the application DID work and met the objectives of the business.  Never lose sight of that when contemplating a legacy rewrite.\n<\/p>\n\n<p>\nSo after giving the code review I was asked to do the rewrite.  The client realized that they had some serious maintenance issues on their hands and were in the process of creating a new look-and-feel for the site.  Being the framework guy that I am, I indicated that porting the code over to a framework would be the best way to reduce maintenance issues going forward.  Why?  More and more developers are starting to work with frameworks, and gaining the discipline that comes from using the Model-View-Controller design pattern.  Also it would be a lot easier to start creating new templates for the site since only the presentation will be changing, not the data itself.\n<\/p>\n\n<p>\nAfter considering using this project as a learning tool for Django, I settled on CakePHP.  Time was sort of important here and I thought that a paying job was not one where I should be fooling around learning Django.  Plus I had no confidence that the host they were using would be able to accomodate my desire for a Python + Django + mod_wsgi setup. \n<\/p>\n\n<p>\nIn part two I will talk about the first thing I did once I started:  tackle the database structure.\n<\/p>\n",
        "date": "2008-11-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Converting Legacy Apps to CakePHP, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/11\/27\/converting-legacy-apps-to-cakephp-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI just got word that my proposal to give a version of my \"Deployment Is Not A 4-Letter Word\" talk has been accepted for <a href=\"http:\/\/conf.phpquebec.com\">2009 PHP Quebec Conference<\/a>.  It's actually within driving distance for me (5 hours) or maybe I can chill and take the train.  Either way, I'll be there from March 4 to March 6, 2009.\n<\/p>\n\n<p>\nIt looks like a pretty great conference lineup, so I suggest you check it out and consider coming to Montreal in March.  It's a great city and I've always enjoyed myself every time I've gone.  It will also be nice to see some people I've met before and always more fun to make new friends.\n<\/p>\n",
        "date": "2008-11-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Come Heckle Me At The 2009 PHP Quebec Conference!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/11\/19\/come-heckle-me-at-the-2009-php-quebec-conference\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been thinking about topics for conference talk submissions a lot lately (I have a serious case of conference envy the last little while), which usually gets my dev juices going and trying to make a better dev environment for myself.  I've started using a few newer techniques so forgive me if some of these seem old to you, dear reader.\n<\/p>\n\n<p>\n<h3>MySQL over an SSH tunnel<\/h3>\n<\/p>\n\n<p>\nI certainly can't be the only person who has to do development (or refactoring) work involving databases that have GB of data in them.  It's not even remotely practical to copy it over to my laptop, and taking a snapshot is pretty much impossible given the relationships between the tables.  It would be 3 times the work to create a tool to give me a snapshot that includes all the proper related records.  How do people handle that anyway?<\/p>\n\n<p>\nSo I discovered via <a href=\"http:\/\/lazyweb.ca\">my favourite pair-program-via-IM partner<\/a> the technique of tunnelling to MySQL over SSH.  It couldn't be easier:\n<pre>\nssh -fNg -L3310:127.0.0.1:3306 user@server.domain.ext\nmysql -h127.0.0.1 -P 3310 -u user -p database\n<\/pre>\n<br \/>\nYou can use whatever port you want at your end, but the key here is telling SSH that you want to map port 3306 on the remote server to a specific port at your own end.  \n<\/p>\n\n<p>\nThe only downside I've seen is that when I was pounding on a remote server with a very involved query that the remote server started writing MySQL tmp files to disk.  Files so large that they started to trigger our <a href=\"http:\/\/www.nagios.org\/\">Nagios<\/a> monitoring process that look at free drive space.  Maybe I shouldn't do that on a production server.  Heh.\n<\/p>\n\n<h3>Use an editor that supports remote debugging in PHP<\/h3>\n\n<p>\nI took a Twitter poll and asked how many people actually use debugging tools like <a href=\"http:\/\/xdebug.org\">xDebug<\/a> and was surprised by how many don't.  I have used them off an on (more on these days) and now that I'm using <a href=\"http:\/\/www.vim.org\">vim<\/a> I have also started <a href=\"http:\/\/2bits.com\/articles\/using-vim-and-xdebug-dbgp-for-debugging-drupal-or-any-php-application.html\">debugging stuff inside of vim<\/a>.  Is there *nothing* you cannot bend and twist vim to do for you?\n<\/p>\n\n<p>\nThis just further reinforces my recommendation that whatever editor you do decide to use every day, learn it inside and out.  Right now I'm trying to break myself of the habit of using the arrow keys to move around in vim, instead relying on the hjkl home row keys to do so.  Debuggers are so common in other languages (Ruby and Python have an awesome interactive console to act as a debugger for you) there is no reason except for, I dunno, laziness and an unwillingness to learn how to add an extension to your PHP install, to not at least try using xdebug.\n<\/p>\n\n<h3>Don't procrastinate, read the documentation<\/h3>\n\n<p>\nA side project I've been working on has some of the tightest production-level PHP code I've ever written in it.  Why?  Because I took the time to dig into the documentation of the newer features in Cake to see how they apply to the work I'm doing.  Containable behavior that is now part of the core.  Johnathan Snook's <a href=\"http:\/\/snook.ca\/archives\/cakephp\/multiple_validatable_behavior\/\">Multiple Validation behavior<\/a>.  Fat models and skinny controllers.  Reusable elements in your pages.  Pestering Nate and Garrett via IM to confirm my suspicions on how to tackle certain problems \"the Cake way\".  It's amazing what happens when you stop to think about all the techniques you've learned and then figure out the best way to weld them all together to solve a problem.\n<\/p>\n\n<p>\nAgain, I've said this before and will continue to say it:  making the effort to fully understand the tools you are using (that includes editor AND programming environment) can only make you better.\n<\/p>\n\n<h3>If the documentation is bad, don't even bother using it<\/h3>\n\n<p>My IM pair-programming partner once said to me \"Chris, if the documentation is shit then don't even think about using it.\"  Lately I've seen the wisdom in that.  If the documentation is lacking, just forget about using that tool.  Of course, if you *do* have the skills to dive right into it and figure out what's going on then this technique probably doesn't apply to you.\n<\/p>\n\n<h3>Learn your version control system, or else have it decide your fate for you.<\/h3>\n\n<p>\nThere is incredibly well-written documentation for what I call the Big Three (CVS, SVN and Git) open source version control systems.  For the love of Wotan, go and learn the one you are using beyond how to commit a change.  And if you AREN'T using a version control system (no, renaming files to index.php.old.frank is NOT version control) then you should stop calling yourself a programmer.  Seriously.<\/p>\n\n<h3>Peer code reviews are good, not bad<\/h3>\n\n<p>\nEven if it consists of taking 15 minutes to talk with your boss who wrote stuff and says \"but I'm not really a programmer\" so he understands the changes (for the better that you are making, it pays off huge in the end.  Especially when you know they will be going back in to tweak things as they play with the code you wrote.\n<\/p>\n\n<p>\nThat's all I can think of for the moment.  What programming techniques or tools have you come across that have made your work go faster or help you produce better code?  Let me know in the comments.<\/p>\n",
        "date": "2008-11-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Making Mistakes So You Don't Have To:  Development Tools",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/11\/17\/making-mistakes-so-you-dont-have-to-development-tools\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My apologies for the slowdown in posting.  I have a Side Project For Money That Will Not Die and it is occupying almost all my spare time outside of work and family commitments.  In the aftermath of the most historic election ever in the United States of America, here is what I've been thinking about:\n<\/p>\n\n<p>\n<ul>\n<li><a href=\"http:\/\/www.activestate.com\/Products\/komodo_ide\/latest_release.mhtml\">Komodo 5 is out<\/a>.  If you've been looking for an IDE that lets you work with multiple languages, do not waste any more time looking.  Go and check it out.  (Disclaimer: I am in Activestate's good books and received a free upgrade to Komodo 5).  I have been playing with it (currently I use a <a href=\"http:\/\/www.vim.org\">different IDE<\/a> because I am a masochist) but I do use it when I need to break out a debugger for some nasty code.  It was weird using Komodo and finding my fingers trying to type all the keystrokes that vim uses<\/li>\n<li>The Side Project For Money That Will Not Die has really pushed my coding skills forwards by reinforcing the notion to embrace the conventions of the framework your application has been built with.  Nothing sharpens the skills up like taking old code and figuring out how to duplicate the functionality under the constraints of a different system.  While it is an exercise in coding masochism, I highly recommend everyone doing it at least once.<\/li>\n<li><a href=\"http:\/\/gilesbowkett.blogspot.com\/\">Giles Bowkett<\/a> is a guy you should pay attention to.  Sure, he's a Ruby guy but he's *very* different from the rest of the Ruby community.  Follow his blog and follow him on Twitter too.<\/li>\n<li>Returning to IDE's  for a second, if you do settle on an editor for your day-to-day use (Komodo, stop poking me in the ribs!  Vim is laughing at me now) please, PLEASE, learn what you need to learn to master it.  Otherwise you end up like me:  typing :V, scrolling down and typing Y in Komodo, then wondering why nothing got copied.  Yes, I know there are vim keybindings for it but muscle memory is a very nasty thing.<\/li>\n<li>It's all over but the shouting:  \\ has been chosen as the new separator \/ indicator for namespaces in PHP 5.3+.  My own opinion on this doesn't really matter, I'm just glad that they have decided.<\/li>\n<li>Something I saw a few weeks ago in a screencast of a talk that <a href=\"http:\/\/blog.obiefernandez.com\/\">Obie Fernandez<\/a> gave about the proper way to about being a consultant has totally stuck with me:  do exceptional work.  Three simple words that a lot of people should pay attention to no matter the environment they happen to be working in.  Of course, easier said than done.\n<\/li>\n<li>Selenium + PHPUnit + CodeIgniter is helpful, but really, really slow.<\/li>\n<li>PHPUnit + CodeIgniter is good because I am tired of fixing bugs that would've been caught if I had written tests.<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2008-11-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: November 2008 Issue",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/11\/05\/whats-in-chris-brain-november-2008-issue\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Note: I have updated this posting with some more info on what I am looking for)<\/p>\n\n<p>\nSince I make a little bit of money every month in advertising off this blog, I thought I'd put some of this money to good use.  I've been trying very hard to use <a href=\"http:\/\/www.vim.org\">vim<\/a> as my editor for day-to-day use.  Previously, amidst lots of waffling, I had settled on TextMate for my day-to-day work.  Awesome editor, nice and lightweight and full of the cool features I needed.  There were two features that were stopping me from totally switching over.\n<\/p>\n\n<p>\nFirst one was Cmd-T inside a project, which allows you to search through your project doing a fuzzy search for files that match your search string.  Awesome, awesome feature.  Cuts down on the browsing using the project drawer that I tended to do.  That particular hurdle has been fixed thanks to <a href=\"http:\/\/weblog.jamisbuck.org\">Jamis Buck<\/a> (of Capistrano and 37 Signals) through his <a href=\"http:\/\/weblog.jamisbuck.org\/2008\/10\/10\/coming-home-to-vim\">FuzzyFinderTextmate<\/a> plugin.  It's extends the <a href=\"http:\/\/www.vim.org\/scripts\/script.php?script_id=1984\">fuzzyfinder.vim<\/a> plugin with a little bit of Ruby.  Does the trick, but you have to do a little jiggering to get it to recognize new files. An argument for another day I guess.\n<\/p>\n\n<p>\nThe second one is the also-awesome 'Find In Project' feature in Textmate, which searches through all your files looking for matches for the string (or regex if you're up to it) inside those files, then providing you with a list of files that you can open.  I'm wanting functionality similar to how the fuzzyfindertextmate plugin referenced above works, but for searching inside files.\n<\/p>\n\n<p>I am aware of how :vimgrep and :grep work (thanks to those who pointed it out), but I do not like how the quickfix window works, as I want a dropdown list of the files that contain what was found so I can open them.  Again, very similar as to how the FuzzyFinderTextmate plugin works.\n<\/p>\n\n<p>\nSo, I am offering $100 of my own ill-gotten advertising revenue (payable via PayPal) to the person who comes up with the solution I like the best that actually works.  If you don't want the money, I can donate it to the charity of your choice as long as they will take PayPal as well.\n<\/p>\n\n<p>\nI know *someone* out there can figure this out.  I'll give you until American Thanksgiving to come up with a solution.  Please post your suggestions in the comments, but please realize that all comments are moderated and off-topic ones will definitely be sent to \/dev\/null\n<\/p>\n",
        "date": "2008-10-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "VIM Programming Bounty: FuzzyFind inside Files",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/10\/20\/vim-programming-bounty-fuzzyfind-inside-files\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nDo you like sports?  Are you good with PHP\/CSS\/HTML\/MySQL?  Not scared of XML?  Can you handle working remotely from the comfort of your home or a never-ending series of coffee shops with free wifi?  If so, there is an opportunity for you.\n<\/p>\n\n<p>\nMy employer, <a href=\"http:\/\/www.xmlteam.com\">XML Team Solutions<\/a> is looking to hire a \"Software Engineer\" to replace an outgoing employee.  This is not an entry-level position as it requires solid skills in PHP, HTML\/CSS\/ and knowing how to build some pretty scary SQL queries.\n<\/p>\n\n<p>\nYou would be spending your days hanging out on the company IRC channel, doing tasks as assigned which include writing web apps for internal and external use, answering support tickets from our clients and tackling some interesting problems involving large data sets and traffic levels.  \n<\/p>\n\n<p>XML Team Solutions provides sports data to our clients formatted in XML and offers support tools for dumping that data into a relational database so you could run, for example, a fantasy football site.  We collect data from a wide variety of content sources both in North America and Europe, and we have worked with companies like Yahoo!, Google and ESPN.  If you're into sports, a good problem solver, and used to working with minimal supervision, this is the job for you.  Plus you get to work with me!  What could be better?\n<\/p>\n\n<p>We're a small company (6 people including myself) so you will often be asked to do non-programming tasks because, well, sometimes somebody's got to do it!  I will say that the company feels more like a team than any other place that I've ever worked.\n<\/p>\n\n<p>\nIf you're interested, send a resume to me at chris@DIESPAMMERREMOVETHISxmlteam.com.  I will only respond to those who are being considered for an interview.  DEFINITELY no recruiters or agencies allowed, thanks.\n<\/p>\n",
        "date": "2008-10-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Job Opening: XMLTeam Solutions",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/10\/16\/job-opening-xmlteam-solutions\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs a <a href=\"http:\/\/sportso.com\">project for work<\/a> gets ready for an alpha release, I've managed to eliminate all the serious bugs and now have some time for what should've been part of the project from the beginning:  writing tests. As a lapsed tester, I always feel guilty about not writing tests when things start to get complicated with an application.  Whenever you make a change, you have to point-and-click your way through the application to make sure that nothing has broken.  I got tired of pointing-and-clicking, so I decided it was time to shut up and write some tests.  Since I'm using Code Igniter instead of CakePHP for this project (did I mention that I inherited the project and couldn't switch?) I started looking into the culture of testing surrounding Code Igniter.  It's weaker than a newborn baby.\n<\/p>\n\n<p>\nThe built-in testing system is some weird mishmash of unit testing and \"you have to create your own test results template\".  WTF?  You can't be serious.  So I quickly ignored that.  Besides, the first set of tests were going to be using <a href=\"http:\/\/phpunit.de\">PHPUnit<\/a> combined with <a href=\"https:\/\/selenium.dev\/\">Selenium<\/a> so I could make the \"acceptance testing\" automated.  As an aside to this, I remember speaking with Sebastian Bergmann (the driving force behind PHPUnit) at a conference maybe 3 years ago and him telling me that he knew someone was working on getting Selenium and PHPUnit to play nicely together.  Anyway, it's working just fine.\n<\/p>\n\n<p>\nSo, next step was to see if I could use something else than the incredibly lame testing tools that Code Igniter came with.  I found something called <a href=\"\/www.foostack.com\/foostack\/\">fooStack<\/a>, that contained CIUnit.  It lets you use PHPUnit with Code Igniter.  Now we're talking!  Lickety split I had some unit tests for my models written.  Well, after spending quite a lot of time screwing around with the tests and finding out the difference in relative paths between the application running via Apache and trying to test the models via the command line.  Thanks to all those on Twitter who yelled \"use php_sapi_name to figure out what environment you are in, you idiot!\" at me.\n<\/p>\n\n<p>\nBut all this got me to thinking:  how do some other PHP frameworks stack up in terms of having tests?\n<ul>\n<li>Code Igniter has ZERO tests for the framework itself.  Perhaps I will mention this to my boss next time I'm asked to create a project from scracth.  Hrm, guess I'll have to trust that their code actually works the way it's supposed to.<\/li>\n<li>Zend Framework (full disclosure: I was one of the original authors of the Zend_Service_Audioscrobbler component) has huge amounts of tests for the framework itself.  In fact, any new contributions MUST have working tests submitted with it.<\/li>\n<li>CakePHP has lots of tests for the core, and I believe that I saw something in the changelog for CakePHP 1.2RC3 that indicated they were at 80% code coverage in terms of testing for the CakePHP core.  Bug submissions for CakePHP are supposed to come with tests to prove that there is a repeatable problem.<\/li>\n<li>Symfony recently rewrote it's core tests and created their own testing framework for it.<\/li>\n<\/ul><\/p>\n\n<p>So now when you start comparing frameworks to each other, I think it's important you also consider how much effort has gone into creating tests for the core functionality of that framework.  A well tested framework should mean far less surprises when using it.  Given how many tools are out there to assist you in testing, I don't think there are any excuses other than being totally lazy to not create tests for the core functionality of any application.  Pay now, or pay later, but you will PAY to fix bugs in your application.  Paying now is simply cheaper.\n<\/p>\n\n<p>\nWould you stake your project on complex code written by someone else that is simply not testable by you?  Perhaps I am not looking at from the proper distance because I am inside the framework-creator culture, but I can't see why you wouldn't want to provide tests to prove your stuff actually works the way you claim it does.  Tests prove that the code is *behaving* the way you expect, and code that is testable is also usually easier to modify as time goes on.  There is some sort of sick joy in making a change to code, running the unit tests, and seeing that you didn't break anything. \n<\/p>\n",
        "date": "2008-10-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A New Way Of Judging Frameworks:  Where are the tests?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/10\/09\/a-new-way-of-judging-frameworks-where-are-the-tests\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks to the power of Twitter I found out that <a href=\"http:\/\/live.cakephp.org\">The Show for CakePHP<\/a> was resuscitated and brought back to life last night.  I listened to the (surprisingly short) show, the main thrust of which was that CakePHP 1.2RC3 was released last night.  Why should you care?\n<ul>\n<li>Final RC before a final 1.2 release<\/li>\n<li>Significant speed increases in the wake of <a href=\"http:\/\/talks.php.net\/show\/froscon08\">Rasmus Lerdorf's talk about PHP framework performace<\/a>, and Cake's poor showing.<\/li>\n<li>A chance to totally break your application by upgrading!<\/li>\n<\/ul>\n<\/p>\n\n<p>\nWell, maybe not so much on the last item but it's ALWAYS good to see any project make a significant release.  1.2 has been in the works for more than 18 months, which seems to many to be way too long.  I'm not so sure I share that sentiment.  If the goal is to try and produce quality releases, then \"it's done when it's done\" is a reasonable answer.  I'm sure this is not a new argument, so I won't get into it here.\n<\/p>\n\n<p>\nMy own contributions to RC3 have been, what's the word...non-existent.  Non-computer hobbies + side work = no time to contribute to Cake.  I found out that commit access for people who haven't contributed anything in more than 60 days has been revoked, but that's really just a minor annoyance.  I'm sure I could get it back by asking nicely and actually having something to contribute.\n<\/p>\n\n<p>\nBut I think I've gotten back into Cake developing at the right time as I caved in and decided that my long-rumoured <a href=\"http:\/\/www.rallyhat.com\">plan-a-road-trip site<\/a> shall be built in CakePHP after all.  Yes, I've been playing around with Django but I'm violating one of my favourite rules:  Just Build It, Damnit!  I've been fooling around with <a href=\"http:\/\/www.balsamiq.com\/products\/mockups\/\">Balsamiq Mockups<\/a> to do the pages and are now digging around for helpers to do the mapping mashup I need.  If you want to mock me over how little progress I've made, feel free to visit the site.  If you'd like to get involved at all (I could use some help on the \"make a pretty UI for it\" front) let me know.\n<\/p>\n",
        "date": "2008-10-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP 1.2RC3 Released",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/10\/02\/cakephp-12rc3-released\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nFor those who remember how I was an <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2008\/03\/18\/im-an-editor-waffler\/\">editor waffler<\/a> will remember that I play around with <a href=\"http:\/\/community.activestate.com\/products\/Komodo\">Komodo<\/a> from time to time, and decided to get back into using it again.  There are alpha 5.0 versions available so I downloaded one and tried it out.  Seems to be less resource hungry than previous versions (as in it doesn't cause my fan in  my MacBook to start up every time I open Komodo).  Now, since I know a few people at Activestate I emailed Jeff Griffiths to ask him a few questions.  He responded by hacking together something very quickly for <a href=\"http:\/\/community.activestate.com\/node\/2794\">adding code intelligence for CakePHP to your views<\/a>.  If you're a Komodo user (or are interested in trying out Komodo), try it out and let Jeff know how it's working out.\n\n<\/p>\n",
        "date": "2008-09-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Komodo and CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/09\/19\/komodo-and-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIt's time again for a round-up of the ideas that have been bouncing around in my head this past month, because I don't have enough material for a big blog post.  Not yet, any way.\n<\/p>\n\n<ul>\n<li>Oh look, <a href=\"http:\/\/manning.com\/obrien\/\">another CakePHP book<\/a> coming out that I can review if the author pulls some strings.  Yes, I'm talking to YOU AD7Six<\/li>\n<li>Although the title of the presentation is <a href=\"http:\/\/www.youtube.com\/watch?v=i6Fr65PFqfk\">\"Why I Hate Django\"<\/a>, Cal Henderson from Flickr shows why you simply cannot avoid frameworks when building applications.  Deny this fact at your own peril.<\/li>\n<li>If you're not already reading their blog, check out Felix and Tim (and sometimes Nate) over at the <a href=\"http:\/\/debuggable.com\/\">Debuggable Ltd.<\/a> blog where you can find some of the best CakePHP tips around.  Felix is closing on on 30 straight days of blogging, though not always CakePHP related.<\/li>\n<li>I'm going to be in Mountain View, CA next Wednesday (the 24th) for a super-secret meeting and have some time to kill before my red-eye flight back home.  Maybe we can hook up so you can hurl abuse at me and so I can get enough alcohol in me to sleep on the red-eye flight back to Toronto?<\/li>\n<\/ul>\n",
        "date": "2008-09-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: September 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/09\/16\/whats-in-chris-brain-september-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A few weeks ago I was approached by <a href=\"http:\/\/www.paktpub.com\">Pakt Publishing<\/a> and asked if I was interested in reviewing the recent <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> book <a href=\"http:\/\/www.packtpub.com\/cakephp-application-development\/book\">'CakePHP Application Development'<\/a> by Ahsanul Bari and Anupom Syam.  In the interest of full disclosure, I have communicated with Ahsanul a few times via the CakePHP mailing list and on <a href=\"http:\/\/twitter.com\/chartjes\">Twitter<\/a>.  We're not total strangers, more like casual acquaintances who know each other through the CakePHP community.<\/p>\n\n<p>\nOne of the biggest criticisms in the past of CakePHP was the lack of published documentation on how to use the framework.  As shocking as it was to me, there were people who preferred a paper copy of the Cookbook so they could have access to it when they might not be online (what, working on your computer and not online?!?) or to read offline.  Naturally, several books about the framework have been published in the past few months, and I can't think of a better book to recommend to people interested in learning the framework than this one.  And I'm not just saying that because I got a copy for free.  While the book is good, there are a few places where it could be even better.\n<\/p>\n\n<h2>The Good: Examples, Example, Examples<\/h2>\n\n<p>\nThe target audience for this book is the right one that CakePHP is attracting:  intermediate PHP developers who may have not used a framework before and are trying to figure out how to use one to their advantage.  Without clear and relevant examples of how to use it, CakePHP would be just another framework struggling to gain acceptance with the PHP deveoper community.  If you want examples on how to do most basic things with CakePHP, this book has them.  Want to know how to configure CakePHP to work for your web server?  Check!  How do you get results from your database?  Check!  How do you use the 'bake' utility from the Cake console?  Check!  Validating form fields?  Check!\n<\/p>\n\n<p>\nI feel that the examples in this book are it's strengths.  The code is well written and every code example is followed by an explanation of what they are doing.  Many times the example is not enough, you have to understand WHY it's written that way.<\/p>\n\n<h2>The Good:  Sample Applications Always Help<\/h2>\n\n<p>\nAlmost half the book is devoted to creating an application from scratch, including configuring the often-misunderstood Auth component and showing how the built-in Javascript helper allows you to add Ajax-powered functionality via the Prototype and Scriptaculous Javascript libraries.  Seeing an application being built from start to working prototype is an invaluable lesson for the \"learn from example\" crowd.\n<\/p>\n\n<h2>The Bad:  Less Info On Doing Things The Cake Way<\/h2>\n\n<p>\nI feel that some more time could've been spent explaining CakePHP's \"convention over configuration\" preferences and how it changes the way you approach building an application using CakePHP.  Perhaps that wasn't a topic for this book's intended audience, since it's only the deep thinkers and the rant-and-ravers (which I have been accused of belonging to) who like to discuss the philosophy behind CakePHP and the question of just what a framework is good for.\n<\/p>\n\n<p>\n<h2>The Bad: Thin on Server Configuration Information<\/h2> \n<\/p>\n\n<p>\nWhile there is a chapter devoted to getting CakePHP up-and-running using Apache and MySQL (specifically using <a href=\"http:\/\/www.wampserver.com\/en\/\">WAMP<\/a>), it would've been very helpful to see an example of the type of configuration recommended for production environments, where the APP directory is web-accessable while the CakePHP core is located somewhere outside the webroot, linked in via an option in the configuration files.\n<\/p>\n\n<h2>The Bad:  No mention of the differences in debug levels<\/h2>\n\n<p>\nWhen I do my development work on a CakePHP application, I set the debug level to 1 so that I see all errors and the SQL statements being generated by my models.  In production I have the debug level set to 0 as I don't want error messages on the screen that reveal any information, and I certainly don't want people seeing the SQL statements being executed.  Sure, it's security by obscurity but it's also debugging information that's cluttering up the screen.\n<\/p>\n\n<h2>The Bad: No mention of using the built-in testing<\/h2>\n\n<p>\nWhile I'm a lapsed tester, the fact that CakePHP will create the shells for writing unit tests for the models and controllers you create should not be overlooked.  Although testing gets a bad rap (\"It's too hard, and it wastes my time!\") it's a programming practice that should be encouraged.  \n<\/p>\n\n<h2>The Ugly: CakePHP is still a moving target<\/h2>\n\n<p>\nWhile this in no way diminishes the efforts put in by the authors to create this excellent introduction to CakePHP, at the time it went to press CakePHP 1.2 was still not feature-final.  Some tihngs have changed, and I expect some more things will change before CakePHP 1.2 is finalized and work on CakePHP 2.0 starts.  This is the danger in writing about any programming language:  the information could become obsolete at any time.  But don't get all upset about it, as it is likely only very minor details that have changed.  The CakePHP core team does try to not break things *that* much.\n<\/p>\n\n<p>\nSo, don't let the number of \"bad\" issues above dissuade you from checking out this book.  The items I highlighted are probably bettered suited for a \"Advanced CakePHP Application Development for Grumpy Developers\" book.  I would not hesitate to recommend this book to any semi-experienced PHP developer who is looking for a resource guide to get themselves started.\n<\/p>\n",
        "date": "2008-09-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Book Review:  CakePHP Application Development",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/09\/08\/book-review-cakephp-application-development\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n(Note: this is a reposting of an entry I made when trying out <a href='http:\/\/habariproject.org'>Habari<\/a> as my blog software.  If you missed it, I hope you enjoy it now.<\/p>\n\n<p>\nFor a consulting job I'm working on where I'm porting a spaghetti-PHP application over to using CakePHP I am moving their existing authorization system over to using Cake's Auth component.  Of course, they are storing all their passwords in plaintext in the user account table, so I needed an easy way to convert all the existing passwords over to be encrypted using the same hash that Auth would use.  Doing this was surprisingly easy thanks to the power of <a href=\"http:\/\/book.cakephp.org\/view\/110\/Creating-Shells-Tasks\">shells and tasks in CakePHP.<\/a>.\n<\/p>\n\n<p>\n~~~\n\/**\n * Shell for encrypted naked passwords with the correct hash for use\n * with the Auth component\n *\n * @auth Chris Hartjes\n *\/\nclass EncryptPasswordsShell extends Shell {\n    var $uses = array('UserClient');\n    \n    function main() {\n        App::import('Core', 'Security');\n        $this->out(\"Starting to encrypt passwords\\n\\n\");\n        $this->UserClient->recursive= -1;\n        $users = $this->UserClient->find('all');\n        \n        foreach ($users as $user) {\n            $userName = $user['UserClient']['username'];\n            $password = $user['UserClient']['password'];\n            \n            if ($password != '') {\n                $data = array('UserClient' => array(\n                    'id' => $user['UserClient']['id'],\n                    'password' => Security::hash($password, null, true))\n                );\n                \n                if ($this->UserClient->save($data)) {\n                    $this->out(\"Updated password for {$userName}\");\n                }\n            } else {\n                $this->out(\"Bad password for {$userName}\");\n            }\n        }\n    }\n}\n~~~\n<\/p>\n\n<p>\nI think the code in there is pretty self-explanatory.  The only \"gotcha\" I ran into (fixed by a look at the Auth component itself) was that I needed to tell Security::hash() that I wanted to use the salt I defined in my config file.  By default that parameter is set to false, hence the need to explicitly set it to true.\n<\/p>\n\n<p>\nThank to <a href=\"http:\/\/mark-story.com\/\">Mark Story<\/a> for pointing me in the right direction for this.<\/p>\n",
        "date": "2008-09-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Don't Fear The Command Line: Using CakePHP Shells",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/09\/04\/dont-fear-the-command-line-using-cakephp-shells\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n<img src=\"https:\/\/www.littlehart.net\/images\/web-app-development.png\"\/>\n<\/p>\n\n<p>\nWelcome to the 4th and final day of reader feedback week here.  Today's topic is one that comes up over and over and over and over again:  web application performance.  In particular, I wanted to discuss web application performance and frameworks.\n<\/p>\n\n<p>After seeing a slide from a presentation at FrOSCON about CakePHP's performance in the incredibly-unrealistic-and-irrelevant \"Hello World\" competition against vanilla PHP and other PHP frameworks I came up with that very aggressive statement you see above.  That prompted a flurry of tweets by other people about their thoughts on that matter, and so on and so forth.  I believe my earlier statements were misunderstood, so I shall clarify them here.\n<\/p>\n\n<p>\nI stand by the statement \"frameworks are about increasing development speed, not application speed\".  I've talked about frameworks plenty in the past, and they all promise you this:  if you build things according to their rules (and this is the really important thing to remember) then you will gain a significant increase in application development speed.  If you fight against those rules, why are you even bothering to use the framework?  The goal is to speed up development time by following a set of conventions on how the application is put together.\n<\/p>\n\n<p>\nSo, if you've had enough courage to build you application with your framework of choice, you should have a working application.  That doesn't mean it is as fast as it could be, but remember the mantra I shared earlier:  \"make it work, then make it work better\".  Where frameworks typically fall down is in the \"make it work better\" part of that statement.  <a href=\"http:\/\/www.travisswicegood.com\/\">Travis Swicegood<\/a> pointed out to me when it comes to frameworks \"...actually, a really good one should have mechanics in place to do both\" (referring to increased development speed and application speed).\n<\/p>\n\n<p>\nSo, if you have a framework that actually cares about application performance (perhaps unfairly some frameworks have decided that performance is sole responsibility of the developer, not the framework itself) then it should come with things to make your application a little more responses.  Things like built-in output caching, or features in their ORM\/ADM that cache your schema, things like that.  But in the end, there is only so much you can to make a framework-built application run really fast.  Sometimes you can do it with just the additional features I mentioned above.  Sometimes you can't do it because the architecture you've chosen for your application won't let you.  And sometimes, you can't do anything about it because it's too hard to modify the framework itself.  These things happen.  Look at Twitter and all the contortions they have gone through trying to take what was initially a Rails application and push it's performance up to it's current level.\n<\/p>\n\n<p>\nThere are also lots of 3rd-party solutions to help you make your application perform better.  <a href=\"http:\/\/www.danga.com\/memcached\/\">Memcached<\/a> for caching data (ask me some time about my Memached story at an old job). <a href=\"http:\/\/pecl.php.net\/package\/APC\">Alternative PHP Cache<\/a> if you're running PHP.  <a href=\"http:\/\/www.squid-cache.org\/\">Squid<\/a>.  <a href=\"http:\/\/nginx.net\/\">nginx<\/a>.  <a href=\"http:\/\/mongrel.rubyforge.org\/\">Mongrel<\/a>.  Those are just the ones I can think of off the top of my head.  Some of them are even framework agnostic.<\/p>\n\n<p>\nHaving a framework that lets you BUILD things fast and RUN things fast is the perfect situation, but not too common.  I used to get mad when I'd see people asking if <insert framework here> can scale, because I felt it revealed a certain level of ignorance in the person asking the question.  I've now come to the conclusion that what they are really asking is if <\/insert><insert framework here> can scale without them doing any extra work.  Usually, the answer to that question is FUCK NO (emphasis mine) because scaling is an issue that goes far beyond just a simple framework.\n<\/insert><\/p>\n\n<p>\nSee, not every framework is slow.  Some frameworks, due to their internal structure, are faster than others.  I'm okay with that now, not so okay in the past.  In a lot of cases, the bottlenecks in your application aren't code-related.  I've come to understand that too, especially in the new Javascript-driven world web applications have started to run in.  If you think Twitter is slow because they chose Rails, I think that you do not have a firm understanding of how Twitter actually works.  Or maybe you don't care because it's easy to make fun of Rails and Twitter.\n<\/p>\n\n<p>\nLuckily, we have lots of free and easy-to-use tools at our disposal that let us look at our up-and-running web application (remember, Just Build It, Damnit!) and see how it's performing.  Things like <a href=\"http:\/\/www.joedog.org\/JoeDog\/Siege\">Siege<\/a> and <a href=\"http:\/\/developer.yahoo.com\/yslow\/\">YSlow<\/a> are just two tools that their use will give you huge insights into the actual performance of your web application.\n<\/p>\n\n<p>\nYou shouldn't be GUESSING how your application performs, you should KNOW what is going on.\n<\/p>\n",
        "date": "2008-08-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Reader Feedback: Web Application Performance",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/28\/reader-feedback-web-application-performance\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWelcome to the 3rd installment of me answering reader feedback questions.  Today we deal with a topic that I deal with every day at my <a href=\"http:\/\/www.xmlteam.com\">day job<\/a> -- working with XML in PHP.<\/p>\n\n<p>\nFirst of all, I do all this in PHP 5.  SimpleXML makes it so easy to manipulate XML.  For my main work project, I've written a PHP application front end that talks to <a href=\"http:\/\/exist.sourceforge.net\">eXist<\/a>, an open source XML database.  Since we deal with XML all day long it was decided that we needed to <a href=\"http:\/\/en.wikipedia.org\/wiki\/Eat_one's_own_dog_food\">eat our own dog food<\/a> and go with an XML database to store the information that the <a href=\"http:\/\/sportso.com\">application<\/a> generates.  So a lot of my code does some of the following things:\n<ul>\n<li>Do a call to a xQuery script running on the database that returns info that I'm looking for, usually both comma and pipe-separated data<\/li>\n<li>Load a specific document into a SimpleXML object and pull out some specific info<\/li>\n<li>Load a specific document into a SimpleXML object and then use it's XPath functions to pull some information out.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThose 3 techniques seem to work well for me when dealing with XML data in PHP.  If I had to go back and redo some of the earlier code, I'd probably change things a little differently in how I'm using eXist to simulate how some of our other products work:\n<ol>\n<li>Use eXist to give me a list of documents that contain the info I am looking for<\/li>\n<li>Load those documents into SimpleXML<\/li>\n<li>Use Xpath to grab the data I needed<\/li>\n<\/ol>\nBut in the interest of Getting Things Done, what I've done works pretty good and the code is really not horrible.<\/p>\n",
        "date": "2008-08-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Reader Feedback: Working with XML In PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/27\/reader-feedback-working-with-xml-in-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Welcome to Day 2 of my answering reader feedback questions here in the month of August.  I was asked to share my experiences with Django.  I will confess that I am a complete n00b when it comes to Python (wrote a few scripts for work-related stuff) and got an early alpha of my baseball road-trip planning site actually working using Django.  Sure, it was ugly and very rough around the edges but I got it to work.  But I will say this:  if I had the opportunity to start working with Python and Django every day (and for the same pay I'm getting now) I would take it in a heartbeat.  Seriously.\n<\/p>\n\n<p>\nSo why all the love for Django and Python?  As a guy who's used PHP for a very long time, I'm really blind to the syntax of it.  All the griping about needle vs. haystack and \"PHP is ugly\" is just wasted on me.  Just so much pissing and moaning by people who should know better and lack the courage to learn the language they way they should.  I heard it described by Evan from Identi.ca as being \"the working man's language\".  Nothing wrong with that, as PHP is great at Getting Things Done.  But Python...Python is vastly different from PHP.  It's about objects.  It's about consistency.  It's about the most amazing interactive interpreter I've seen since I was a kid fooling around on my VIC-20 typing in programs from Compute! magazine.  Bet you didn't think I'd been using computers for that long.  To shift into bragging mode, I first got paid for programming when I wrote a program for my mother's school (she's a teacher) to create the salary grid for the teachers.  I was 12. I think.\n<\/p>\n\n<p>\nAlso, there's a dirty little secret about using frameworks that nobody really tells you.  After a while, it makes you lazy.  You forget how to do certain things because, well, the framework does it for you.  The other day there was a tweet from someone asking about the best way to sanitize data before you put it into the database.  My first thought was \"sheesh, that's built into the framework\" and then I stopped myself and said \"you are getting goddamn lazy!\".  My response was \"try using mysql_real_escape_string(...)\" but was also told about using PDO's binding of parameters as another way to do it.  See, those things are all done by the framework meaning lazy old Chris doesn't have to remember how to do it.  Until the time he's confronted with non-framework code that he cannot simply rewrite as part of a framework.  *gulp*.  So, since Python and Django are so different from the other frameworks I've used it forces me to STOP being lazy and actually learn how not only Django itself works but how the insides of it work as well.  \n<\/p>\n\n<p>\nNow, being an old hand at frameworks means using Django is not that big a stretch.  I spent a lot time googling around for the \"Python (or Django) Way\" to do things.  Except for a few concepts that are not familiar to a long time PHP guy (generators?) it wasn't that hard to get up and running with Django.  The documentation is awesome, and once you learn to stop writing PHP code in Python and instead embrace doing things the Python way, it becomes a lot easier.\n<\/p>\n\n<p>\nIn the end it's still datasource-backed models talking to some controller code and passing it onto some template.  I find the Django templates to be very limiting after my initial experiences and my \"PHP is the template\" background, and I think that as I get deeper into it I really have to find out how to do things the Django way.  What CakePHP calls Model-View-Controller, Django calls Model-View-Template, but it's really the same thing.\n<\/p>\n\n<p>\nWhen I compare Ruby to Python, I don't get the feeling that I will have to resort to dynamic functions and closures to Get Things Done in Django like I see happening in Rails.  Besides, they seem to be two very different communities.  That's probably because the leaders of the Django community are so different in temperament and I don't see the same type of \"Django rules, everything else sucks!\" mind sets that I saw in the Rails community.  Maybe I'm just looking in the wrong places, but I feel more at ease in the Django community than the Rails community, albeit from the outer fringes of it.\n<\/p>\n\n<p>\nSo don't be lazy and complacent about the tools that you use.  Go and checkout Django and you might feel the same way about it as I do.\n<\/p>\n",
        "date": "2008-08-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Reader Feedback: Experiences With Django",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/26\/reader-feedback-experiences-with-django\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWith August winding down to a close and the insane August family event schedule over with (5 birthdays and my wedding anniversary) I now have the time to answer some of the reader feedback questions I had solicited at the beginning of the month.  So, to give something back I will be answering one question each day this week.  Today's first topic is Personal Project Management.\n<\/p>\n\n<p>\nAs I never get tired of telling people, my <a href=\"http:\/\/www.xmlteam.com\">employer<\/a> is one of the enlightened few who lets their employees telecommute 100% of the time, so there are some different challenges in play.  I understand that some people could not \"handle the pressure\" (their words, not mine, although I am paraphrasing) of working from home.  At this point I could not imagine going BACK to working in an office.\n<\/p>\n\n<p>\nSo, with your boss always around on IRC and just a phone call away, how does your grumpy correspondent stay on top of his tasks since he knows the boss will never show up at my desk asking me a question?  You may be surprised at the answer if you know me in real life:  through self-discipline.\n<\/p>\n\n<p>Yes, I can already feel the immense amount of eye-rolling (including my <a href=\"http:\/\/www.teachersatrick.com\">mother<\/a>) but it really is true.  If you are the type of person who needs to be constantly told what to do, you are not going to cut it in a telecommute environment because you WILL be left alone for long periods of time to Get Things Done Without Constant Supervision.  The only way to make sure you are able to function without simply going upstairs and watching TV when you are supposed to be working is to, well, act like the professional coder you are supposed to be.  So, how do I handle this?  Please be aware that this is a method that works for me and probably only for me.  Copy it at your own peril.  \n<\/p>\n\n<p>\nI tend to approach programming assignments as if it was Big Problem that can be solved by breaking it down into Little Problems.  This is why when confronted with the question \"is there any programming challenge you solved that you are really proud of?\" I tend to draw a blank because, well, despite all my bluster and accusations of being an asshole, I don't really look at the stuff I do and say \"goddamn, that was amazing work\".  To me, it's really just solving a bunch of smaller problems that make up a bigger problem.  I guess you thought I'm a shameless self-promoter of my work.  I try to do go\n<\/p>\n\n<p>I mean, not every programming task I complete is what I would call exceptional work because sometimes you just can't figure out an exceptional way to do it.  Plus, I can't bring myself to be such an asshole as to expect everything I do to be perfect.  Not everyone is at their best all the time.  Therefore, I try to follow a policy that was explained to me by gwoo from the CakePHP project: \"Make it work, then make it work better\".  I can't think of a better philosophy for the type of work I do every day.<\/p>\n\n<p>\nEverything beyond how I approach solving problems is really just non-important.  I make lots of notes, but I'm not a compulsive note organizer.  I don't have any system for keeping track of what I'm working on beyond a simple list of items in a spiral notebook that I cross off and scratch away at while I work.  Hate to disappoint people, but I try to keep it very simple.  Whenever I veer off into the land of Complex Task Tracking, I spend more time tracking tasks than doing them.  Keep it simple, keep it something I can use each day and every day.\n<\/p>\n\n<p>\nSo, that's my approach to personal project management:\n<ul>\n<li>Be professional since you are, you know, being paid to do it.<\/li>\n<li>Keep your solutions simple<\/li>\n<li>Adopt organizational practices you can follow every day.<\/li>\n<li>Try and do your best work whenever you can, but understand when you are not at your best<\/li>\n<\/ul><\/p>\n",
        "date": "2008-08-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Reader Feedback: Personal Project Management",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/25\/reader-feedback-personal-project-management\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For those who might not look at the same obscure blogs that I do, I thought I should mention that the last few spaces for the first <a href=\"http:\/\/debuggable.com\/posts\/cakephp-workshop-in-raleigh-nc-sep-6-to-7:488a234d-39fc-4d06-9c57-65aa4834cda3\">CakePHP Workshop<\/a> in Raleigh, NC are filling up so if you want to learn CakePHP straight from the people who help to build it, this is your best bet.  Sadly, I will not be in attendance. ;)  If they hold one closer to Toronto I'll probably come out.\n<\/p>\n",
        "date": "2008-08-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Workshop",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/18\/cakephp-workshop\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>You know how sometimes you use a piece of software and you just don't like the internals of it?  Then you switch to something else that is cleaner, and looks bettter?  And then it just unexpectedly stops working?  That's why I'm back on WordPress.  The missing post I did will be back up later today.\n<\/p>\n",
        "date": "2008-08-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Please Do Not Adjust Your Set",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/12\/please-do-not-adjust-your-set\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm doing some server maintenance today, so the site might be up and down throughout the day.<\/p>\n",
        "date": "2008-08-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Server Maintenance",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/08\/server-maintenance\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While working on a consulting gig where I'm using <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> to rewrite an existing site, I was fooling around with the latest version of Cake from SVN and discovered a nifty little feature.  Cake now has dynamic models.\n<\/p>\n\n<p>\nI discovered this because my app was working, pulling data from the database but I hadn't baked any models at all.  After confirming with gwoo via IM that I was not going crazy, he told me what was going on.\n<\/p>\n\n<p>\nBy default now, Cake will automatically use the AppModel class and create a unique alias to a database table if it does not find the file.  This means that if you have a table that follows the Cake conventions, needs no validation, and has no associations to other tables, you <b>don't even have to create the model file any more<\/b>.  Woah, talk about a serious time saver in some cases.\n<\/p>\n\n<p>\nHowever, keep in mind that this feature *also* means that if you misspell the name of your model file, this dynamic model feature will mean that your misspelled model file will NOT get loaded, and you might be scratching your head as to why your associations don't work and why validation is not going on. So pay close attention to the naming of your files to avoid confrontations with grumpy Canadian programmers on the mailing list.\n<\/p>\n",
        "date": "2008-08-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Dynamic Models in CakePHP 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/05\/dynamic-models-in-cakephp-12\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>With summer half over, I've realized that I'm just too damn busy during the summer.  As a result, my blogging suffers.  So, I've decided to turn things around and bit and ask my readers what they would like to see in the next month or so.<\/p>\n\n<p>\nUsing <a href=\"http:\/\/haveamint.com\">Mint<\/a> I do get to see what visitors are looking at when they visit, and it's a mixed bag.  Which is good.  Many of my tutorials and smaller posts have gotten lots of visits and lots of great feedback.  Again, which is good.  Feedback lets me know if I'm being clear in what I'm posting.  But now I've sort of hit a lull and run out of topics.  I'm sure nobody wants to read about my struggles at softball or the intricacies of politics in my job.  You know, the boring non-technical stuff.  Instead, I want to give YOU more of what YOU want.  \n<\/p>\n\n<p>\nIn the comments, let me know what stuff you'd like to see.  Follow-ups to existing tutorials, my thoughts on certain topics, explanations on other things I've blogged about.  I'm sure that some of the existing content might be slightly out-of-date, so if there is enough call for revision I'd be glad to revisit things and give them an update spin.  \n<\/p>\n\n<p>\nAs most of my commenters know, I do moderate every single comment that comes in and only dump the spam that gets through Akismet.  Don't be shy, let me know what sort of stuff you are looking for.\n<\/p>\n",
        "date": "2008-08-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "August Is Reader Feedback Month!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/08\/01\/august-is-reader-feedback-month\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI struggled to come up with a good name for this blog post, and have totally failed, but give this article a chance.  Or maybe you're here by accident thanks to a weird google search.  \n<\/p>\n\n<p>As a committed user of open source technologies, the difference between me using something and not using something is the documentation.  Is there documentation for it?  Is it easy to find?  Does it answer my questions?  Is there someone I can call an idiot if I disagree with the level of documentation?  These are all very important questions.\n<\/p>\n\n<p>My involvement with <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> has opened my eyes in terms of what people consider documentation.  Me, I'm the type who learns from examples that come with explanations.  While API documentation is great, it only becomes useful to me once *I* can figure out how to do something useful with this new technology.  I see people on the mailing list for Cake asking for the source code to a sample application, which I immediately file away in my head as \"looking for answer to their homework\", and move on.  Maybe that's unfair, but it's more a reflection of the fact that I tend not to learn anything from having the source code for an application.  I learn by getting in there and DOING SOMETHING and figuring out why this goddamn thing is not behaving properly and who do I know who can help me with this problem etc.  Learning by mooching, I call it.\n<\/p>\n\n<p>\nSo, back to CakePHP.  CakePHP had acquired the reputation that the documentation for it sucked.  While I did not share that opinion, I can see why people say that.  Because most coders are lazy.  Seriously.  They want solutions handed to them in a form that they can just drop into their application and then get onto the next problem.  There are definitely times when I wish someone else could just write this goddamn \"alter the football game stats form dynamically via Ajax and send the results to the XML database\" code for me.  Inevitably, I build the code up from an example stolen via Google into something that both works and that I understand fully.  However, most of the time I am content to figure stuff out on my own and ask for help only when stuck.  I'm not lazy, but maybe I'm suffering from a bit of the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Lake_Wobegon_effect\">Lake Woebegon effect<\/a>.\n<\/p>\n\n<p>So, things are much better in terms of documentation for CakePHP.  Whereas we used to have a manual that only covered 1.1, we now have the amazing <a href=\"http:\/\/book.cakephp.org\">CakePHP cookbook<\/a> that covers both 1.1 and 1.2.  If that's not enough, well, you might actually have to do a little thing I like to call \"research\".  This gets us to the point of this blog posting.  Sometimes you have to stop being lazy and actually think about where you could find an answer.\n<\/p>\n\n<p>\nThere are no shortage of blogs that talk about CakePHP.  Some of them are even good.  Maybe you like the code examples I put up here.  People seem to like them enough to comment, so maybe I'm doing something right.  Google is your friend to track down blogs that have exactly the type of information that you need:  small examples with explanations about how they work.\n<\/p>\n\n<p>\nThe CakePHP mailing list is done via Google Groups, so all those posts where I make fun of people for no reason other than my poor self-esteem can be found with a few keywords.  But there are a lot of great tips on how to accomplish things using Cake, so a search of the google group will find lots of good information.\n<\/p>\n\n<p>\nThe <a href=\"http:\/\/bakery.cakephp.org\">Bakery<\/a> is another good source of CakePHP info, consisting of all sorts of small articles along with comments.  It has a search function as well, but could easily be considered YACB (Yet Another Cake Blog).  Again, perfect for people with the same learning style as me:  short examples with explanations of how it was done.\n<\/p>\n\n<p>\nFinally, we come to one of the more unorthodox documentation sources:  the unit tests for CakePHP.  CakePHP has some really good unit test coverage, although I sometimes wonder if you can really say that a piece of code works properly if it passes all the unit tests associated with it.  This is by no means a phenomenon limited to CakePHP, it happens everywhere there are unit tests.  Sometimes you can't figure out a test that makes something break.  It happens, so please do not misinterpret my thoughts on this.  Unit tests are good, and the amount of tests that CakePHP has in place is awesome and perfect example of a cohesive development team.  Automated testing is a goal worth striving for, don't let anyone else tell you otherwise.  I'm in the early phases of automated testing for a work project on the integration side of things because I'm tired of always running through the same damn tests by hand all the time to make sure something that I wrote didn't break things.  Tips on what good browser-based solutions are out there would be appreciated.  Other than telling me to use Selenium.  A solution that is tailored to the <a href=\"http:\/\/codeigniter.com\">framework I have been forced to use<\/a> would be even better.\n<\/p>\n\n<p>\nOkay, back on topic.  Since the unit tests cover so much of what CakePHP can do, what better way to see examples of how to actual do things?  My work on fiddling around with new console functionality showed me that I had no idea of how to create unit tests for my console work.  That led to discussions with people on the best way to do testing of console functionality.  Which leads to changes in the console code itself to make it easier to test certain things.  But at least when I'm ready to get back to doing that console work I can see if doing testing for it has become easier.\n<\/p>\n\n<p>\nSo, having been told all the stuff above, how can anyone who is not simply lazy say that the documentation for CakePHP sucks?!?\n<\/p>\n",
        "date": "2008-07-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Is Really Considered Documentation?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/07\/22\/what-is-really-considered-documentation\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>The summer is always the worst for me in terms of blogging.  That's when I have to run my team in the <a href=\"http:\/\/www.ibl.org\">IBL<\/a>, play slo-pitch (or softball for my American readers) at least once a week, do side-jobs to help pay the bills, and spend time with the family.  Phew.  So, that leaves little time for the types of activities that lead to good blogging.  But never fear, I will continue to dispense what wisdom I can from here.  So, here's some of the things I've been thinking about.\n<\/p>\n\n<h2>Closures and lambdas coming to PHP<\/h2>\n\n<p>\nVia twitter I found out that PHP 5.3 is going to have <a href=\"http:\/\/wiki.php.net\/rfc\/closures\">lambdas and closures<\/a>.  I suggest you google around for a better explanation of what they are, but they are an incredibly powerful tool.  If you do any <a href=\"http:\/\/www.rubyonrails.org\">Ruby on Rails<\/a> work, you end up using them.  If you use <a href=\"http:\/\/jquery.com\">jQuery<\/a>, you end up using them.  I had a conversation in twitter with <a href=\"http:\/\/travisswicegood.com\">Mr. Git Book<\/a> about this, where he accused me of being a \"closure hater\".  Believe me, I'm not a hater of that particular programming construct.  I simple expressed my feelings that given how horribly some PHP programmers abused OOP concepts, I imagine the same things happening with lambdas and closures.  Please prove me wrong.\n<\/p>\n\n<h2>Where The Hell Are The Easy Layout Editing Tools For Non-Designers?!?<\/h2>\n\n<p>I have a side job where I am taking an existing app and converting if over to <a href=\"http:\/\/cakephp.org\">CakePHP<\/a>, but preserving the look and feel.  What this poor designer-challenged programmer needs is a tool that will take that existing HTML and let me edit it in a fairly intuitive way so I can fix the so-many-damn-tables-I-want-to-bleach-my-eyes layout that exists.  Can nobody help me with this?  Sheesh.  I don't want to burn up my billable hours fucking around with layouts.<\/p>\n\n<h2>The Framework Jihad<\/h2>\n\n<p>I need a \"Framework Jihad\" t-shirt.  Size 2XLT, please.<\/p>\n\n<p>Yes, the arguments about frameworks will just not go away.  Which one is best?!?  Why should you even use a framework?!?!  And the more it goes on, the more ambivalent I feel about it.  I cannot think of the last time I wrote a PHP script that was NOT part of a framework.  Hell, even my Python programming has been 75% Django and 25% straight Python, but that's only to do things like loading up databases with info from a CSV file.  But here's what I think:  the Framework Jihad is winning.<\/p>\n\n<p>\nIf you substitute \"modularized code with standardized API\" for \"framework\", would that make people feel better?  I use frameworks because so much of the infrastructure code is stuff I DO NOT WANT TO WRITE ANY MORE.  After 10 years of doing this, it's time I stopped reinventing things.  My old motto of \"just build it, damnit!\" requires a structure around your application to let you quickly build something. To me, that means a framework that has taken care of database access and application flow and templating.\n<\/p>\n\n<p>The number one complaint about frameworks appears to be that they are slow and have all sorts of overhead.  Fair enough, but I tell you what:  I'll worry about scaling when I, you know, have something to worry about.  If I get to the point where I have to worry about scaling, then I have done very well indeed.  Despite our desires, not everyone can create a Flickr or Twitter.  They are the lucky ones.  The rest of us should shut up and just build something.<\/p>\n\n<p>It's just too easy to dismiss the Framework Jihad as irrelevant.  Like many things in life, dismiss it at your own peril.<\/p>\n",
        "date": "2008-07-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain, July 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/07\/15\/whats-in-chris-brain-july-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Disclaimer: after trying out the demo for this application, I discovered I could get a license for it by saying nice things on my blog.  I was ready to fork out the money for it though)<\/p>\n\n<p>\nI cannot be the only one useless at interface design.  I know my buddy and fellow patio-laying-at-my-house-worker <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a> is too.  While checking out <a href=\"http:\/\/news.ycombinator.com\">Hacker News<\/a> I came across this great application called <a href=\"http:\/\/www.balsamiq.com\/products\/mockups\">Mockups<\/a>, which is cool AIR app (I use Ed Finkler's so-awesome-I-actually-use-it AIR Twitter client <a href=\"http:\/\/funkatron.com\/spaz\">Spaz<\/a>) for (shocking, I know) doing mockups of things.\n<\/p>\n\n<p>\nWhen I saw this, I said (really) \"Holy shit!!!\".  And started to play with it.  And quickly realized that for people like me, this is the PERFECT tool for creating mockups of the sites I want to work on.  I agonize over sites when I'm building one from scratch, so much so that I feel the \"paralysis from analysis\" effect I have heard others talk about.  Don't believe me that it's this cool?  Check this demo out:\n<br \/><br \/>\n<object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http:\/\/www.youtube.com\/v\/e7htdJCvkeQ&hl=en&fs=1\"><\/param><param name=\"allowFullScreen\" value=\"true\"><\/param><embed src=\"http:\/\/www.youtube.com\/v\/e7htdJCvkeQ&hl=en&fs=1\" type=\"application\/x-shockwave-flash\" allowfullscreen=\"true\" width=\"425\" height=\"344\"><\/embed><\/object>\n<\/p>\n\n<p>\nTo me, the really cool thing is that it is also available as a plugin for some of the most well-known collaboration applications out there:  Confluence, JIRA and Twiki.  For me, the desktop version is just right, as I can take those mockups I create and export them as PNG's that I can then pass onto designers for comments and tweaking.  This is a sign of a developer who is <a href=\"http:\/\/steve-yegge.blogspot.com\/2008\/06\/done-and-gets-things-smart.html\">\"done, and gets things smart\"<\/a>.\n<\/p>\n\n<p>\nIt costs $79, and for the frustrated programmer who wishes he could better as a designer, this is an amazing tool to add to your toolbox.  Go try it out and give him your money!\n<\/p>\n",
        "date": "2008-07-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Web Mockups, With A Hint Of Balsamiq",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/07\/07\/web-mockups-with-a-hint-of-balsamiq\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nEarlier today I say the following tweet on the-often-down-but-always-interested Twitter from <a href=\"http:\/\/weierophinney.net\/matthew\/\">Matthew Weier-O'Phinney<\/a>:\n<br \/><br \/>\n\"What issues to _you_ see with using namespaces in PHP? Start blogging!\"\n<br \/><br \/>\nSince I am one who likes to share his opinion on a wide variety of topics, I thought this is a good one to prompt discussion.\n<\/p>\n\n<p>\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Namespaces\">Namespaces<\/a> are expected to be a feature in future releases of PHP.  I'm an outsider when it comes to tracking the going-on in the world of PHP internals.  So, because of that, I'm not going to comment on the actual syntax of how namespaces will be implemented or it's impact on internals.  That's not really important as far as this particular discussion goes.\n<\/p>\n\n<p>\nImagine if you will that you are the user of a <a href=\"http:\/\/cakephp.org\">web application framework<\/a> that allows you to easily use third-party libraries by dropping them into a specific location in your application structure.  You go to use it and...what the fuck?!? Class name conflicts?!?!? ARRRRRRGGGGGGGHHH.  You proceed to post to  the mailing list for said framework, complaining bitterly about how you cannot use your favourite library with this stupid framework.  Some grumpy guy from Canada flames you in response and it spirals down from there into oblivion.\n<\/p>\n\n<p>\nThere are many programming languages that support namespaces, but PHP was not one of them.  Why are namespaces so important?  They can help to solve the exact problem mentioned in the paragraph above.  Why *wouldn't* you want such a thing?!?!  You can have 5 classes with the same name in 5 different namespaces and everything will be just fine.  Except for the fact you have 5 classes with the same name.  That's not good design, but namespaces would let you do that.\n<\/p>\n\n<p>\nSo, to go back to our little framework example for a minute, the framework could assign itself a namespace (oh, I dunno, like 'Cake') and if you happen to want to use a 3rd-party library with your application that has a class with the same name, it's all good...as long as you didn't put your own code in the same namespace.\n<\/p>\n\n<p>\nSo, to answer Matthew's original question:  I cannot think of any reason to NOT have namespaces in PHP.\n<\/p>\n",
        "date": "2008-06-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Namespaces in PHP?  Why *wouldn't* you want them?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/06\/30\/namespaces-in-php-why-wouldnt-you-want-them\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Man, my blogging pace has slowed right down.  Not doing anything particularly exciting will do that to you. So, I thought I'd take a break from trying to diagnose a production-only bug (you know, the type of bug where the code runs perfectly in dev but doesn't work properly in production) that is mocking me, and taunting me while I feel the burn from starting the <a href=\"http:\/\/hundredpushups.com\/\">100 pushups challenge<\/a> (damn you Twitter for the peer pressure!).  In case you're wondering, I am starting at rank 1 because I think I have the upper body strength of a man twice my age.<\/p>\n\n<p>\nLast week I wrote more Javascript code than PHP code, which is an interesting trend so it has me thinking about front end development a little more.  I still suck at interfaces (Rallyhat's UI is giving me analysis paralysis) but recent developments make me feel a little better.\n<\/p>\n\n<p>\nIn a previous post (not gonna self link, so search for it) I talked about why can't I have an all-Javascript back-end talking to an Erlang server.  Well, other than the fact that I don't know any Erlang I mean.  This is why projects like <a href=\"http:\/\/sproutcore.com\">Sproutcore<\/a> have me excited.  Never mind the whole \"Cocoa on the web angle\" that a lot of people are talking up when describing it.  It's exciting because it is promoting a \"back-end neutral\" philosophy and emphasizing that people who ignore Javascript are turning their backs on a lot of good functionality.\n<\/p>\n\n<p>\nJavascript + any back end that can spit out JSON is really what a Sproutcore application is.   I know the word paradigm shift is thrown out there a lot and is really overused, but I think the fact that something like Sproutcore is out there shows that web development itself is undergoing a shift.  I know that there are lots of examples of advanced Javascript + some back end in use (GMail, anyone?) but the fact that Sproutcore is getting some backing from Apple should tell you how important some people feel this type of application architecture could be.\n<\/p>\n\n<p>\nIt also simply reinforces my thoughts that knowing one language is no longer enough.  Just think of what you would need to understand in order to build something in Sproutcore using, say, CakePHP as the back-end:\n<ul>\n<li>HTML<\/li>\n<li>CSS (can't have those pages looking ugly, right?)<\/li>\n<li>Javascript (although I'm wondering if jQuery and Sproutcore can co-exist)<\/li>\n<li>PHP<\/li>\n<li>SQL (have to be able to understand the queries being generated)<\/li>\n<li>JSON (does that really count as a language or is it just encoding really?)\n<\/li><\/ul>\n<\/p>\n\n<p>\nThe funny thing is that I now use this stuff without really considering that they are separate.  I just use 'em all, and abuse my relationships with people who are smarter than me to fill in the gaps.  It's the only way, really. :)\n<\/p>\n\n<p>\nI believe Sproutcore is just the first of many Javascript application frameworks that will come out, so keep an eye peeled for the copycats and the \"I did this because my problem is so unique that I could not use an existing solution\" crowd.  The signal-to-noise ratio will be low, but worth wading through.\n<\/p>\n",
        "date": "2008-06-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New Trends In Front Ends",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/06\/24\/new-trends-in-front-ends\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I lost my cellphone last night, which sucks because the phone I want isn't going to be available until July 11th.  I'll get a loaner phone until then, but it is exciting times to be a web developer.  Why?  Because the introduction of the iPhone there is a renewed interest in web sites that cope well with mobile browsing.  I'm working on an app that is perfect for mobile browsing, but that is still down the road.<\/p>\n\n<p>\nAnyhow, I saw a post the other day showing how to create an <a href=\"http:\/\/www.symfony-project.org\/blog\/2008\/06\/09\/how-to-create-an-optimized-version-of-your-website-for-the-iphone-in-symfony-1-1\">iPhone-optimized version of your Symfony app<\/a>.  Yawn.  Cake <a href=\"http:\/\/bakery.cakephp.org\/articles\/view\/building-an-iphone-app-in-a-day\">had that a year ago.<\/a>.  No code provided *but* the article does tell you exactly how he did it.\n<\/p>\n\n<p>\nBut that's really the key here.  You don't need to do anything special to make a web-based app in CakePHP that will work nicely on your iPhone.  Contrast that to all the stuff I see in that article that you need to do.  Off the top of my head, it seems to me the best way to do it is:\n<ul>\n<li>create CSS and layouts for regular and iPhone versions of your application<\/li>\n<li>do a check in your beforeFilter() method where you check the User-Agent<\/li>\n<li>pass that info to your actions, and render whichever layout+CSS you need<\/li>\n<\/ul>\n<\/p>\n\n<p>Compare the Symfony article to the CakePHP article plus my notes, and let me know what you think.<\/p>\n",
        "date": "2008-06-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP and the iPhone",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/06\/13\/cakephp-and-the-iphone\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I know I don't talk much about my life outside of programming, but for the past 12 years I've been running a team in the <a href=\"http:\/\/www.ibl.org\">Internet Baseball League<\/a>, and have been the commissioner for 10 of those years.  I'm also on the design team for the <a href=\"http:\/\/iblgame.ibl.org\">dice-and-charts baseball game we use for the league<\/a>.  My contribution has been writing Perl scripts to generate the ratings we use for our throwing arms and baserunning ratings.  Anyhow, I (and other league members) wonder if people use the game to run their own replays, as most of us just play in the IBL and that's it.  My friend Sean told me today via IM that one guy emailed him with a spreadsheet showing him the results of a replay in progress of the Boston Red Sox 2007 season.  Here's what this guy said:\n<blockquote>\n\"I am replaying the 2007 Red Sox with IBL and thought you might like to\n   see the stats to date (attached). I am using retrosheet.org and am\n   playing the \"as played \"starting lineups. Relief pitchers are used as\n   closely to \"as played\" usage as possible, but obviously game situations\n   dictate which relievers appear in a particular game.\n   Let me know what you think. While individual averages will invariably\n   vary, through 77 games the team batting average is identical to the\n   actual 2007 (full) season and OBP is only .04 from the actual. I truly\n   appreciate the time and effort that you have devoted to making this\n   game so accurate.\"\n<\/blockquote>\n<\/p>\n\n<p>One of the things we pride ourselves is all the work that we've put into TIG (The IBL Game as it's called) to make it not only one of the most accurate dice-and-charts baseball simulation games out there, but also to give it away for free.  All that hard work is worth it when you see e-mails like this.\n<\/p>\n",
        "date": "2008-06-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Accuracy In Baseball Simulations",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/06\/13\/accuracy-in-baseball-simulations\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(before I get into this I wanted to let people know that I will be going to <a href=\"http:\/\/www.zendcon.com\/ZendCon08\/public\/content\/home\">ZendCon<\/a> to give my deployment talk.  I might be looking for a place to crash for a second night, so let me know if you're going and can hook me up)<\/p>\n\n<p>\nFor a <a href=\"http:\/\/sportso.com\">work project<\/a> I had to add in some Ajax functionality for a scoreboard feature, where users will enter scores for periods \/ quarters \/ innings and then the total score has to update automatically on the screen before the user wishes to save that scoring document.  So with some help from one of my online <a href=\"http:\/\/marcgrabanski.com\/\">javascript ninja associates<\/a> and Google searches, I got it all figured out, and thought I would share.\n<\/p>\n\n<p>\nHere's a snapshot of the interface in question:\n<img src=\"http:\/\/chrishartjes.com\/sportso-scoreboard.png\" alt=\"Sportso scoreboard interface\" \/ width=532 height=183  \/>\n<\/p>\n\n<p>\nThe first thing I did was apply the same class name to the away \"innings\" and home \"innings\" form fields, so that $().serialize would be able to pull up all those fields.  That way, it wouldn't matter how many \"inning\" fields there might be.  The tricky thing I found out was that I need to wrap my $('.homePeriods').change() call in it's own function() call so that it would actually be loaded when the page was loaded as well.  I had no idea I needed to do that, and thanks to Marc for pointing it out.  If there is a better method, let me know.\n<br \/>\n~~~\n\/\/ Method used to automatically update total fields\n\/\/ when editing individual periods\n$(function(){ \n    $('.homePeriods').change(function(){\n        var params = $('.homePeriods').serialize();\n        var pArray = params.split('&');\n        var homeTotal = 0;\n\n        for (var i=0; i < pArray.length; i++) {\n            var temp = pArray[i].split('=');\n            var homePeriod = temp[1];\n            \/\/ Cast value to an integer with this little hack\n            homePeriod = homePeriod - 0;\n            homeTotal += homePeriod;\n        }\n\n        $('#homeScoreTotal').replaceWith('<td class=\"period\" id=\"homeScoreTotal\"><input type=\"text\" name=\"homeScoreTotal\" value=\"' + homeTotal + '\" maxlength=\"2\" size=\"2\" id=\"htotal\" \/>');\n    });\n\n    $('.awayPeriods').change(function(){\n        var params = $('.awayPeriods').serialize();\n        var pArray = params.split('&');\n        var awayTotal = 0;\n\n        for (var i=0; i < pArray.length; i++) {\n            var temp = pArray[i].split('=');\n            var awayPeriod = temp[1];\n            awayPeriod = awayPeriod - 0;\n            awayTotal += awayPeriod;\n        }\n\n        $('#awayScoreTotal').replaceWith('<td class=\"period\" id=\"awayScoreTotal\"><input type=\"text\" name=\"awayScoreTotal\" value=\"' + awayTotal + '\" maxlength=\"2\" size=\"2\" id=\"vtotal\" \/>');\n    });\n});\n~~~\n<\/p>\n\n<p>\nSo, here's a small movie showing that in action.\n<br \/>\n<br \/>\n[flv:http:\/\/www.archive.org\/download\/SportsoDynamicScoreboard\/sportso-scoreboard.flv 533 400]\n<\/p>\n\n<p>I hope this helps out other people looking to add similar functionality to their site.<\/p>\n",
        "date": "2008-06-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Yes, I Do Some Javascript Programming As Well",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/06\/10\/yes-i-do-some-javascript-programming-as-well\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, I realize that my posting had slowed down and that's mainly because, well, I'm trying to subscribe to the theory that I should only blog when I have something interesting to say.  Maybe some of you think I never have anything interesting to say.  Anyhow, here's what I've been thinking about.\n<\/p>\n\n<p>Despite my 10 plus years of cranking out terrible code using a language hated by numerous developers (those \"I've gone to language X and will never return to PHP\" comments I see on the web just make me laugh and remind me how few people really understand that a programming language is just a tool to get a job done and it's about the skill of the progammer.  Delude yourself at your own peril) I am constantly learning new things.  Here are a few of the newer things I've been concentrating on as of late:\n<ul>\n<li>Learning how to create <a href=\"http:\/\/simonwillison.net\/static\/2008\/xtech\/\">unobtrusive Javascript<\/a> for my Ajax-powered applications.  Much easier to do when starting from scratch, harder to do when refactoring an existing application<\/li>\n<li>Simple code is better, so I am focusing my coding on trying to do the bare minimum that works, and avoiding cute and clever solutions.  Common sense, sure.  But I still see examples all over the place of people avoiding easy solutions.  Why do people do this?  Job security? Over-inflated ego?  This is where my slacker tendencies work well for me.  Simple is GOOD, my dear readers.<\/li>\n<li>When dealing with conditional logic and programming flow, you should always practice <a href=\"http:\/\/www.debuggable.com\/posts\/programming-psychology-return-home-early:4811de9f-ae28-49c2-a7dc-2f154834cda3\">\"return home early\"<\/a>.  Felix nailed it on the head here, and I've been doing this for a number of years now but as I refactor code for <a href=\"http:\/\/www.sportso.com\">a work project<\/a> I find myself chopping away at the code.  Reminds me of an old post on <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/05\/02\/carpenter-or-sculptor\/\">carpenter or sculptor<\/a> from a programming perspective.<\/li>\n<li>Always be open to new ideas, as you never know when the next big thing flashes across your vision and you want to be aware of it.  Watching Twitter's struggles to simply stay up under the huge crushing load has made me realize how critical it is to actually understand WHAT it is you're building and HOW technology choices impact things.  So I've started thinking about system architectures.  I love reading about cool application stacks and figuring out how I could ever fit in time to learn some of these things like Erlang, or <a href=\"http:\/\/oubiwann.blogspot.com\/2008\/05\/mantissa-alternative-to-lamp.html\">Mantissa<\/a>.  I've been working with the LAMP stack for so long it might be time to branch out and build some apps using one of the alternatives just so I understand these things.  Why couldn't I build a Javascript + Erlang + CouchDB application?  Other than my own internal fears, nothing, right?<\/li>\n<\/ul><\/p>\n\n<p>\nNever stop learning, people.  Passion is the key to keep your job interesting, as you never know when your job will suddenly become interesting whether you like it or not.\n<\/p>\n",
        "date": "2008-05-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Never Stop Learning",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/30\/never-stop-learning-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm bored.\n<\/p>\n\n<p>\nThere, I said it.  I think it's probably one of my worst character flaws in that I get disinterested in long-running projects that I am working on quite easily.  Somehow, CakePHP continues to grab my interest so maybe I'm getting better.  But I can't escape that voice I hear in my head (I mean, the one that cuts through all the other voices) that says \"you MUST be working on the latest and the greatest, otherwise you're wasting your time\".\n<\/p>\n\n<p>\nSuch is the peril when you work for a small company, and you're the only developer on a project.  I should've stuck with my guns and built the damn thing on CakePHP instead of CodeIgniter.  Bah! Anyhow, here's what I've been thinking about lately:\n<ul>\n<li>Lots of good input on features for my 'cake deploy' idea.  I got a good suggestion via Twitter to take a look at what Symfony is doing in this regard, so maybe they can give me some ideas on a solid implementation.<\/li>\n<li>I have an extreme alpha version of Rallyhat working, and are now trying to get the look-and-feel stuff taking care of.  Found a colourscheme I like.  Thank you <a href=\"http:\/\/kuler.adobe.com\/\">kuler<\/a><\/li>\n<li>Gave up on the Django-on-Google-App-Engine idea because I just couldn't get the datastore stuff to work properly.  Screw it, I'll go back to my straight Django app.  I am contemplating running it off of Amazon EC2, but I wonder how much work that is to do.  If any of my readers have any tips on making this work, let me know.<\/li>\n<li>3 weeks straight of using MacVim as my main IDE!  No complaints, and I broke out Komodo the other day just for the XDebug stuff.  Yes, I know you can use xdebug inside vim but the implementation I saw lacks the variable introspection features that Komodo gives you.<\/li>\n<li>Some time in the next day or two, a beta release for CakePHP 1.2 is coming out.  This is *very* exciting news.  After that, 1.2RC1 is around the corner.  If I wasn't so damn busy working on the new and shiny things, I might actually contribute more than that one small patch for console work.  Which other people ended up extending anyway.  Bah<\/li>\n<li>I took a look at <a href=\"http:\/\/seaside.st\">Seaside<\/a>, a web application framework that uses Smalltalk and found out that there is no templating for doing the HTML.  Huh?  You create all the HTML programatically and then style it using CSS.  Not too designer friendly, but they do give an explanation about <a href=\"http:\/\/onsmalltalk.com\/programming\/smalltalk\/rails-vs-seaside\/\">why it is this way.<\/a>.  How delightfully sadistic!  And yet, strangely appealing...<\/li>\n<li>I need to find a way to convince my employer that attending conferences provides value to the company, and not just me.  Even though I only go to conferences where I speak.  Unless I have some really generous readers willing to underwrite me to go.<\/li>\n<li>I read something recently on the idea of working remotely but with some other freelance tech types as a way to at least get some social contact.  Don't know how well that would work out here in <a href=\"http:\/\/maps.google.ca\/maps?f=q&hl=en&geocode=&q=Milton,+ON,+Canada&ie=UTF8&ll=43.516191,-79.883995&spn=0.113531,0.283928&z=12&iwloc=addr\">Milton<\/a>, but maybe it's worth sending some feelers out.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nOkay, back to refactoring some code for work...\n<\/p>\n",
        "date": "2008-05-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - May 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/23\/whats-in-chris-brain-may-2008-edition-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A co-worker of mine always complains that people don't read the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Request_for_Comments\">RFC<\/a> that covers a topic related to making their own stuff work with our stuff.  He's old sk00l like that.  Although my co-worker is a tad out-of-touch with the realities of programming these days (as in the amount of people who actually read the RFC when they can simply use someone else's library \/ module \/ function \/ application is very small), I thought I would at least adhere to some semblance of standards and do a blog posting about my plans for making CakePHP application deployment easier.\n<\/p>\n\n<p>\nWhile I really prefer to use <a href=\"http:\/\/capify.org\">tools like this<\/a> for deployment, I understand that not everyone wants to mess with standalone programs and configuration files.  I've been asked before about Cake-specific deployment techniques, so I figure the easiest way is to see about adding a task to the Cake console.  Let's call this 'cake deploy'.\n<\/p>\n\n<p>\nAs I <a href=\"http:\/\/groups.google.com\/group\/cake-php\/browse_thread\/thread\/ea4e5ec768c8d95a#\">explained on the mailing list<\/a> I am looking for opinions on what sort of things should be part of the 'cake deploy' task.  Right now, my thoughts are as follows:\n<ul>\n<li><i>cake deploy config<\/i><\/li> - setup and edit configuration parameters.  Initially I thought of setting things like transport method (ssh, ftp), logins and passwords, remote location, source directory, and destination directory.  The configuration file would be stored locally in APP\/config\n<li><i>cake deploy<\/i> - seems pretty self-explanatory to me.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nIn the RFC thread on the CakePHP mailing list, someone mentioned they'd like to see rsync, but I'm trying to avoid having to external programs required to make the deployment work.  Or, at least, use as few as possible.  Anyhow, if you have any thoughts on this feel free to add them to the comments.\n<\/p>\n",
        "date": "2008-05-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Application Deployment: RFC",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/16\/cakephp-application-deployment-rfc\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm certainly not the only person who has been blogging about this, but I thought I'd mention that a feature freeze is coming up for the next CakePHP 1.2 release, codenamed 'DV'.  My very modest contribution this time around is a patch to fix a problem with running 'cake bake' on Windows, where it was mangling the app path that a user would enter.  <a href=\"https:\/\/trac.cakephp.org\/ticket\/4495\">Ticket 4495<\/a> if anyone is interested.\n<\/p>\n\n<p>\nAnyhow, anyone who uses CakePHP or wants to help out can definitely get involved in the process by:\n<ul>\n<li>Entering bugs into CakePHP's trac if they don't see them in there<\/li>\n<li>Contributing tests and\/or patches for existing bugs<\/li>\n<li>Testing out the bleeding-edge versions of CakePHP that you can get from the SVN repository<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThere has been a lot of debate on the mailing list about both the direction of the project and the attitude of people on the mailing list.  Well, as one of the people who gets to be involved in both sides (albeit a minor role in terms of contributing code) I can tell you that the project will continue moving forward, building on all the traction CakePHP has gotten.  Maybe 1.2 has dragged on for a while, but isn't that just a number anyway?  Would people be reacting if it was Cake 1.7.2 or something like that?\n<\/p>\n\n<p>What people don't always see is the amount of work that goes into CakePHP by developers.  Every morning when I log into my account on my MacBook, I update my copy of CakePHP from SVN.  99.999% of the time there is an update.  These days, tests are being written like crazy and <a href=\"http:\/\/debuggable.com\/posts\/code-coverage-analysis-soon-in-cakephp---test-how-well-you-test:4814f6a0-fe60-4f50-be0b-07194834cda3\">Tim's awesome work in creating code coverage information<\/a> and those things can only help the project as a whole get better.  These are exciting times for anyone connected to the project, no doubt about that.  No amount of CakePHP haters (you know who you are) are going to change that.\n<\/p>\n\n<p>\nSecondly, people have to understand that a mailing list full of a lot of technical, highly-skilled people is not a friendly place for beginners.  Sad, but true.  I have answered many questions on the mailing list, some of them properly and some of them, well, let's just say my nickname of GrumpyCanuck has been well-placed.  Can we all be civil?  Probably not.  Should we be civil?  Maybe.  I think anyone who doesn't understand the dynamics of the CakePHP list itself should go and read <a href=\"http:\/\/www.catb.org\/~esr\/faqs\/smart-questions.html\">this<\/a>.  Forewarned is forearmed.\n<\/p>\n",
        "date": "2008-05-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New CakePHP 1.2 Release Coming",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/13\/new-cakephp-12-release-coming\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This was *supposed* to be a post about my successes in getting the Rallyhat web service up and running on Google App Engine, but that's not quite done yet.  Instead, I will inform our spanish-speaking CakePHP users (and the more adventurous types who enjoy travel) that the <a href=\"http:\/\/www.cakefest.org\">CakeFest<\/a> site as been updated to announce <a href=\"http:\/\/cakefest.org\/users\/add\">pre-registration<\/a> and other information about CakeFest #2, which will be held in Buenos Aries, Argentina at the beginning of December.\n<\/p>\n\n<p>\nAll your favourite people from the CakePHP world will be there, although I might not be able to make it despite Mariano's very convincing IM conversations.  The organizer (the previously-mentioned Mariano) is a great guy, good contributor to the project, and I still like him despite the fact that he is a Windows user in an ocean of Mac fanbois.  Maybe things will work out that I can go, but if you can make the trip it will be one of the most interesting conferences this year.\n<\/p>\n",
        "date": "2008-05-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakeFest Hispania",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/07\/cakefest-hispania\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, it's the day after May Day (workers of the world, unite!) and yes, I only managed to get one blog post done this week.  So, it's time for a round-up of the stuff I've been thinking about this week.\n<\/p>\n\n<p>\n<ul>\n<li>For all the bleating I did on the CakePHP mailing list this week about using free and open software, the editor waffling continues and I was back to Komodo today.  I needed the security blanket of an IDE today after spending way too much time with <a href=\"http:\/\/macrabbit.com\/cssedit\/\">CSSEdit<\/a> trying to get stuff lining up properly for a work project.<\/li>\n<li>Halfway through a code review project as a side gig.  Old code, running on PHP 4.4.8 (those of you following me on Twitter saw me moaning about getting that working with CentOS on Parallels).  Needless to say, the code is a mess but I have to actually talk about WHY it's a mess and what can be done.<\/li>\n<li>Trying to see if I can get a caching plugin for WordPress to work with nginx.  Not that I ever expect to get Dugg, but you never know.  Almost there...<\/li>\n<li>Finally managed to get a Django app running properly inside the Google App Engine SDK.  Work on that got torpedoed this week by two slow-pitch games...that got rained out...after me waiting around for 20 minutes or so.  Next step is to build out my web service for Rallyhat.  Should only be a few hours work (he said, not knowing now what he will know later)<\/li>\n<li>YASP (Yet Another Side Project) is going to get rolling this weekend.  Some cool stuff using Amazon S3, integration with OpenID and PayPal.  This time I actually have a plan to make some money. :)<\/li>\n<li>I've submitted my \"Deployment Isn't A 4 Letter Word\" talk for <a href=\"http:\/\/www.zendcon.com\">ZendCon<\/a>.<\/li>\n<li>Been updating the IBL web site to use the latest CakePHP goodies, meaning just refactoring a lot of stuff that was garbage and using newer techniques I discover via the mailing list and Nate Abele's rantings.<\/li>\n<li>Special thanks to <a href=\"http:\/\/traviscline.com\/blog\/\">Travis Cline<\/a> for sending me a copy of \"xUnit Test Patterns\" from my Amazon Wish list!  Many thanks to a fellow budding Djangonaut for the gift.<\/li>\n<\/ul><\/p>\n",
        "date": "2008-05-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - May 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/05\/02\/whats-in-chris-brain-may-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the 6 \"rules\" I came up with for my talk on application deployment at <a href=\"http:\/\/www.openwebvancouver.ca\">Open Web Vancouver<\/a> was that the only difference between your development environment and your production environment should be data sets.  My friend Juan, who works as the software architect at the adult dating site I used to work for, talked with me via IM about how that rule isn't always true.\n<\/p>\n\n<p>\nA little background on this is necessary.  They are still using the same development setup today that was in place when I was there, in that they have given each developer a server that uses jails (this is a FreeBSD thing) to simulate having all the servers they would have in production.  A great solution, one that is still great today.  It made writing architecture-specific code (i.e. testing that an application server could talk to a queue processing server for a specific task) very simple.  So, in this case I believe that they had a development environment that matches production as closely as you can get.\n<\/p>\n\n<p>\nBut then Juan mentioned that they are using <a href=\"http:\/\/www.zend.com\/en\/products\/platform\/\">Zend Platform<\/a> on their production servers, and it wasn't possible to give everyone a copy of Zend Platform on their development servers due to licensing.  While Zend Platform is a great product, well, you've just introduced an extra variable into your application development and deployment process.  Now, your development environment will never be the same as production and you are increasing the likelihood that you will encounter \"production-only\" bugs, which are the hardest to solve.\n<\/p>\n\n<p>I have great respect for Juan (he's near the top of my list of the smartest developers I've worked with), but rule #5 still the best one to follow.  While you gain from using something like Zend Platform in production because of all the extras you get, you end up with a development environment very far from what is using in production. Just make sure that you understand the implications of that decision.\n<\/p>\n\n<p>\nAlso, there is something else hidden inside rule #5.  If you have differences between environments, make sure you understand what those differences are and take steps to minimize their impact.  For example, I run Apache2 + PHP 5.2.5 compiled from source + Postgres 8.25 from a package for OS-X & MySQL 5.0.45  from a package for OS-X on my laptop, which is my main development environment.  On my VPS (which hosts this blog) I'm running Nginx + PHP 5.2.5 modified under Gentoo with USE flags + MySQL 5.0.54 under Gentoo.  So, that means I'm running mod_php on my dev, but using FastCGI on my \"production\".\n<\/p>\n\n<p>\nHas this been a problem?  Nothing yet *but* if I ever got serious about running something other than my blog I would definitely consider configuring my VPS to use Apache 2 and PHP with the same configuration options as I have in dev, so that I have consistency in environments.  Django is recommending Apache + mod_python so I may be doing this sooner rather than later.\n<\/p>\n\n<p>\nSo, remember, the goal is to have your dev and production environments the same.  But if you can't have the same, you better be damn sure you understand what the differences are so you don't end up saying stuff like <a href=\"https:\/\/www.littlehart.net\/workz-for-me-u-must-b-dum.jpg\">this<\/a>.\n<\/p>\n",
        "date": "2008-04-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deployment Rule #5: The only difference between environments should be data sets",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/25\/deployment-rule-5-the-only-difference-between-environments-should-be-data-sets\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While at Open Web Vancouver I got the chance to participate in a <a href='http:\/\/c7y.phparch.com\/c\/entry\/1\/p3,20080417'>podcast<\/a> with Paul Reinheimer from php|architect.  Take a listen as we discuss PHP 5.3 and some other topics, along with a disturbing discovery at the end of the podcast about my frozen cappuccino drink.\n<\/p>\n\n<p>\nA friend of mine (hi Juan!) had a brief chat with me about my \"Deployment Isn't A 4 Letter Word\" talk and screencast and brought up some interesting points about the talk.  I was gonna do a posting about it today, but I need some time to put my thoughts together in a coherent way.  Look for that on Friday.\n<\/p>\n",
        "date": "2008-04-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "C7Y Podcast",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/23\/c7y-podcast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI managed to make a screencast of the second talk I gave at <a href=\"http:\/\/www.openwebvancouver.ca\">Open Web Vancouver 2008<\/a> about application deployment.  I had hoped to make a screencast of my CakePHP console talk, but I messed something up at my end and all I have is the audio from it.  Not the best thing when you are doing a demo.  However, the conference was also recording talks so hopefully they will have a copy of it for you to see as well.\n<\/p>\n\n<p>\nThe talk was well-attended, which is a nice boost for the ego and although I spoke too fast (as usual) I think I got all my points across quite nicely.\n<br \/><br \/>\n[flv:http:\/\/www.archive.org\/download\/DeploymentIsNotA4LetterWord\/deployment.flv 320 240]\n<\/p>\n",
        "date": "2008-04-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deployment Is Not A 4 Letter Word - The Screencast!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/17\/deployment-is-not-a-4-letter-word-the-screencast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting out in the \"lounge\" area outside the conference rooms, trying to come down from doing my second talk.  At least this time the screencast software worked properly, so I'm going to convert the video from <a href=\"http:\/\/www.shinywhitebox.com\/home\/home.html\">iShowU<\/a> to flash so that I can put it up on <a href=\"http:\/\/archive.org\">Archive.org<\/a>\n<\/p>\n\n<p>\nSo, a bit about the talks I went to.  First up I went to <a href=\"http:\/\/codinginparadise.org\/about\/\">Brad Neuberg's<\/a> talk on <a href=\"http:\/\/gears.google.com\/\">Google Gears<\/a>.  I only had a vague understanding of how Gears worked before but now it's a little better.  I think I could implement a Google Gears app to talk to Rallyhat's web service when the time comes.\n<\/p>\n\n<p>\nNext I went to <a href=\"http:\/\/geeksandglobaljustice.com\/\">Kate Milberry's<\/a> talk on the use of Open Source software as a tool to force social change, usually for the good.  She has an academic background so it wasn't your usual chat (lots of reading of her talk), but the talk was really good and dug at some of the key issues coming up late in the first decade of the 21st century.\n<\/p>\n\n<p>\nI didn't find any talks I really wanted to see after that, so I bumped into <a href=\"http:\/\/c7y.phparch.com\/\">Paul Reinheimer<\/a> and got invited to join one of the C7Y podcasts.  There's nothing like being the stupidest guy in the room.\n<\/p>\n\n<p>\nAfter that, a quick lunch and then <a href=\"http:\/\/en.wikipedia.org\/wiki\/Kevin_Marks\">Kevin Mark's<\/a> excellent Open Social talk.  Just the thought of the Open Social API, that crawls through social networks mapping out relationships between people and allowing you to use other social network's registration systems.  Way cool.\n<\/p>\n\n<p>\nNext, I sat in on a talk on how to use <a href=\"http:\/\/merbivore.com\/\">Merb<\/a>.  The guy had a pretty dry delivery, but he was rock solid when having the shell, editor and browser open.  I got a good glimpse into Merb, enough to take a look when the documentation situation gets better.\n<\/p>\n\n<p>\nOff to have some beer and some food.\n<\/p>\n",
        "date": "2008-04-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Open Web Vancouver 2008: Day 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/15\/open-web-vancouver-2008-day-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in one of the meetings rooms here at Open Web Vancouver 2008 waiting for a talk on Google Gears to start, so I thought I'd share my thoughts on day one.\n<\/p>\n\n<p>\nThe first two keynotes were probably worth coming to the conference.  First, Zak Greant gave a talk \"The Age of Literate Machines\", talking about the history of communication and the concepts behind free software.  He was severely jet-lagged but he soldiered through and was quite coherent.  <\/p>\n\n<p>\nNext up was Tim Bray's keynote on the status of web development in 2008.  Again, another awesome speaker and he touched on the recent paradigm shift in tools available to you to build your applications.  Specifically he talked about the research he's done into the fields of agile development, the usefulness of blogging, and what trends he sees having a huge impact.\n<\/p>\n\n<p>\nMy favourite part of his talk was his comparison of PHP to Rails, and he gave them a very fair comparison.  His recommendation was that you should seriously consider using Rails for your next project, even if you're not going to use it because it's the ideas that led to the creation of Rails that are important.  After the talk, he answered a question about Django vs. Rails.  He talked about how they took two developers of roughly the same skill level, gave one of them Rails, the other Django and set off to see how fast they could build something.  It turned out that it was a dead heat, so it makes my decision to start playing with Django a good one.  No point in starting behind the curve, right?\n<\/p>\n\n<p>\nSo after that talk, I went to Jeff Griffith's talk on \"RIA with open standards\".  Jeff works for ActiveState (the folks behind Komodo) and he talked about the various options for building Rich Internet Applications and how it was in your best interests to try and build these things with open standards so that you are well positioned to take advantage of new technologies and standards as they become available.\n<\/p>\n\n<p>\nAfter that, I sat in on Eric Promislow's talk about creating scalable Javascript code.  Even though I'm a Javascript newbie, I got a ton out of that talk because the stuff he was talking about is directly related to the stuff I'm trying to do with Rallyhat.  Eric also works for ActiveState, helping with Ruby and Perl support for their products.\n<\/p>\n\n<p>\nI went with <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a> to the \"Grassroots Open Mobile Technology\" talk, and I was incredibly disappointed.  It was basically a 15 minute informercial about mobile devices.  The speaker is affiliated with Nokia, so he predictably gushed over Nokia's phones.  Very rarely do I hate the talks I go to, but 15 minutes when you have an hour slot is just wasting the audience's time.  The guy was sure passionate about mobile tech, but the complaints he had (like \"why don't we have the iPhone in Canada?\") are just so naive and seems to me at least to reflect a disconnect from the realities of mobile technology in Canada.  Anyway, enough about that.\n<\/p>\n\n<p>\nThen I gave my talk on using CakePHP's CLI tools.  First off, I fucked up the recording of the screencast so I'm not happy about that.  Secondly, if I ever give this talk again I'm not going to do any slides.  I'm going to have my shell open and the browser and that's it.  I found that jumping from Keynote to Terminal to Safari and back just totally threw me out of any sort of flow.  Hopefully 3rd time will be the charm.\n<\/p>\n\n<p>\nAfter that, there was a cool get-together at a local art gallery with some drinks and good conversaton, and then a great dinner with some of the speakers.  I sat with Paul Reinheimmer and Brian Shire from Facebook.  Good Italian food, good conversation, a good time in all.\n<\/p>\n\n<p>\nLater today I'm giving my second talk about application deployment, that's a more standard slides-and-me-talking presentation so I should be better at that one.\n<\/p>\n",
        "date": "2008-04-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Open Web Vancouver 2008: Day 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/15\/open-web-vancouver-208-day-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, that went relatively well.  As a proof-of-concept for Google App Engine I decided to see what I could whip together today in between domestic duties, looking after the kids and praying that my wife gets better from her massive cold because I'm off to Vancouver tomorrow.\n<\/p>\n\n<p>So, I pushed the database for Rallyhat up into the cloud and wrote a super-simple front end just to see if I could do it.  You can take a quick peek at http:\/\/chrishartjes.appspot.com.  To get it to spit something out, you need 3 parameters:\n<ul>\n<li>home_team -- nickname for a baseball team (i.e. Yankees, Red Sox, Padres).  Don't forget to urlencode the spaces with a +<\/li>\n<li>begin_date -- date in YYYY-MM-DD format<\/li>\n<li>end_date -- date in YYYY-MM-DD format<\/li>\n<\/ul>\n<\/p>\n\n<p>\nIt's a small start, but a start nonetheless.  Next step is to configure my app to use the dev version of Django, not the built in version.\n<\/p>\n",
        "date": "2008-04-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building Rallyhat:  Proof-of-concept Deployment",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/12\/building-rallyhat-proof-of-concept-deployment\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It pays to have friends who have connections.  After reading my blog posting about <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2008\/04\/09\/the-rise-of-the-app-cloud\/\">the rise of the app cloud<\/a> I got an IM from <a href=\"http:\/\/marcgrabanski.com\/index.php\">Marc Grabanski<\/a> asking me if I wanted an invite to get in on <a href=\"http:\/\/code.google.com\/appengine\/\">Google App Engine<\/a>.  Needless to say, I said yes.<\/p>\n\n<p>\nSo I have an account up there now, but nothing to show you guys yet.  The tutorials they have are actually quite clear and make sense.  What makes it even more ironic is that all you can use is Python (which I'm learning) and runs Django 0.96 standards (although you can use dev versions if you like). Is that fate trying to give me a hint or something?\n<\/p>\n\n<p>\nAnyway, it looks like it will be trivial for me to redo my database structure so that it fits in nicely with BigTable.  I need to massage the data in the new format and then find a tool that lets me upload that up into BigTable itself.  My data is simple enough so the fact that I can't do joins won't really matter.  All my data can be per row in a database anyway, the relational stuff just makes it easier to write code.  Or at least I've found that when doing stuff with Cake.\n<\/p>\n\n<p>\nAs far as Rallyhat Extreme Alpha goes, I've got it working in that you can do the following:\n<ul>\n<li>pick your teams and date range<\/li>\n<li>see the list of games and pick which ones you want to go to<\/li>\n<li>plot the stadiums on a map so you can see distances<\/li>\n<\/ul>\n<br \/>\nThe UI isn't pretty so I have lots of work on making that easier to use.  But I am excited.  Once I figure out how to create driving-distance stuff dynamically it will be even cooler.\n<\/p>\n\n<p>\nI have to say that I have noticed that the Python \"way\" is quite different from the PHP \"way\".  Maybe it's more accurate to say the Django \"way\" is different from the PHP \"way\".  Django has deliberately limited what you can do in their templates out-of-the-box.  Yes, you can write custom code for stuff in templates by extending it yourself (the documentation is actually quite clear on how to build them) but out-of-the-box you can only do so much.  Frustrating when you come from the PHP world where you are able to put PHP code in your templates to accomplish certain tasks.  You can't just dump any old Python code in there, as I have found.  Much of what I'm trying to accomplish simply needs to be done in a different place, as a lot of the form-processing magic in both CakePHP and PHP itself has hidden that from me.\n<\/p>\n",
        "date": "2008-04-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building Rallyhat: Up into the cloud",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/11\/building-rallyhat-up-into-the-cloud\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThese are heady times for any web developer.  Two of the biggest companies on the web are now offering access to what I call their \"app cloud\" so you can run your web app in a hugely scalable environment.  Amazon was first out of the gate with their great combo of <a href=\"http:\/\/www.amazon.com\/gp\/browse.html?node=16427261\">S3<\/a>, <a href=\"http:\/\/www.amazon.com\/gp\/browse.html?node=201590011\">EC2<\/a> and <a href=\"http:\/\/www.amazon.com\/gp\/browse.html?node=342335011\">SimpleDB<\/a>.  Of course, you didn't expect Google to stand idly by and they have delivered as well with <a href=\"http:\/\/code.google.com\/appengine\/\">Google App Engine<\/a>.  So, what do they have in common?\n<\/p>\n\n<p>\nYou're limited in what you are allowed to do.  It's really that simple, because in order for you to gain the advantage of being able to have scalability out of the box you are going to have to follow a bunch of rules.  Sandboxes are good, but the problem occurs when you fight against the sandbox rather than embrace it's constraints.  Sort of the same thing I see on the CakePHP mailing list where people are determined to do what they want, and who gives a flying fuck what the conventions are.  But in this case, you cannot avoid it.\n<\/p>\n\n<p>\nHaving looked into the idea of running an app using Amazon's EC2 + SimpleDB structure for Rallyhat, it looks like it's pretty simple to get up and running with those tools.  I know I'm grossly simplifying the process, but you create your app, create an image, upload it into the cloud and away you go!  With Google App Engine, all you can do is create Django-based apps...but they've severely limited what you can do as they require you to use a GAE-specific wrapper to talk to things.  That means a lot of the cool Python libraries that are out there WILL NOT BE ABLE TO HELP YOU.  Maybe that's just for now, but that's a pretty serious limitation.\n<\/p>\n\n<p>\nSecondly, both SimpleDB and BigTable have the same limitation in that you cannot do joins, so that means you have zero hope in hell of using any sort of ORM wrapper on your data.  It's all about the denormalized data.  Go look it up if you don't believe me.  Now, this can be a problem if you have a very complex database structure that requires a lot relationships between your tables...like most of the apps that use modern web application frameworks.  Maybe my thoughts on using a very simple REST-based framework in PHP isn't such a crazy one for this.\n<\/p>\n\n<p>\nRallyhat is using relationships between tables because that makes it easier for me.  Games belong to Teams, Locations belong to Games, Teams belong to Sports.  Also, I've been using CakePHP long enough that all my apps are designed around the idea of data having relationships.  If I had to denormalize that data by putting it all in one big table essentially, I lose the use of ORM \/ data mapping.  Django lets me do the same sort of relationships as Cake, so why the hell wouldn't I use it?  It's about speed of development, after all.  Quicker to a usable state is really the key here, as you're bound to spend all sorts of time in maintenance-and-bug-fix mode no matter what.\n<\/p>\n\n<p>\nSo this leads me to what I consider an inevitable conclusion:  using an app cloud is only for certain types of applications.  What a huge leap in logic, no?  All sarcasm aside, this is the same sort of logic that dictates that most web application frameworks are only good for certain types of sites.  Once you step up to a certain level of complexity, you have two choices:  work really, really hard to simplify things as possible OR understand that you are in the land of Custom Solutions and hope that you are smart enough to come up with one that works.  What's that old adage:  simple systems can display complex behaviour?  Now that there is a solution for certain types of scalability issues, the trick is to figure out how to build an app to leverage that.\n<\/p>\n\n<p>\nThe biggest problem I see with putting your app up in the cloud is the issue of data sharing.  Scalability usually requires as little sharing between parts of your application as possible.  If you have a central data store, that will forever be your application choke point.  Whether it's clustering or sharding, it is a non-trivial task to build scalable data stores.  I haven't looked at SimpleDB and BigTable enough to form an opinion on whether or not these are viable contenders for this type of solution.  Hopefully it is.\n<\/p>\n\n<p>\nIt's ironic to me that while we have a definite rise in the use of frameworks for web application programming, some of the most powerful tools available to build web applications that can handle the complexity of scaling well require you to throw all that stuff away and get back to really simple things.  Perhaps this is a good thing, as all these magic methods in frameworks give the developer simplicity, but you become dependent on those magic methods.\n<\/p>\n\n<p>\nHeady days indeed.  Time to look at whether or not Rallyhat could run in those environments...just because I want to see if it's possible.  Learning Python is one thing.  Learning Python + Django + SimpleDB, or Google App Engine (if I could ever get an invitation) is another.  Seems to me I could whip something together in PHP that could run on EC2 with SimpleDB, but is that really much of a challenge?\n<\/p>\n\n<p>&lt;<\/p>\n",
        "date": "2008-04-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Rise of the App Cloud",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/09\/the-rise-of-the-app-cloud\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I continue to be impressed with <a href=\"http:\/\/www.djangoproject.com\">Django<\/a> as I build out Rallyhat.  I have an extreme alpha version working on my laptop, minus the Yahoo! Maps stuff I've been playing around with.  The biggest task was populating my database with the schedules for all the baseball teams.  I thought I'd share what the import script looks like:\n<\/p>\n\n<p>\n~~~\n#!\/usr\/bin\/env python\nfrom django.core.management import setup_environ\nimport settings\nsetup_environ(settings)\nfrom rallyhat.www.models import Team\nfrom rallyhat.www.models import Game\nfrom rallyhat.www.models import Location\nfrom rallyhat.www.models import Sport\n\nfrom datetime import date\n\nimport csv, urllib, time\n\ns = Sport.objects.get(name='Major League Baseball')\nteamSchedules = Team.objects.all()\n\nfor teamSchedule in teamSchedules:\n    scheduleFile = teamSchedule.schedule\n    print \"Importing games for \" + str(teamSchedule.name)\n\n    if scheduleFile != \"\":\n        reader = csv.reader(urllib.urlopen(scheduleFile))\n\n        for row in reader:\n            teams = row[3].split(' at ')\n\n            if len(teams) == 2:\n                if Team.objects.filter(name=teams[1]).count() == 0:\n                    print \"Adding new team: \" + teams[1]\n                    homeTeam = Team(name=teams[1], sport=s)\n                    homeTeam.save()\n                else:\n                    homeTeam = Team.objects.get(name=teams[1])\n\n                if Team.objects.filter(name=teams[0]).count() == 0:\n                    print \"Adding new team: \" + teams[0]\n                    awayTeam = Team(name=teams[0], sport=s)\n                    awayTeam.save()\n                else:\n                    awayTeam = Team.objects.get(name=teams[0])\n\n                gameDate = time.strftime(\"%Y-%m-%d\", time.strptime(row[0], \"%m\/%d\/%Y\"))\n                startTime = time.strftime(\"%H:%M\", time.strptime(row[2], \"%I:%M %p\"))\n\n                # If this game doesn't exist, add it to the system\n                if Game.objects.filter(home_team=homeTeam, away_team=awayTeam, game_date=gameDate, start_time=startTime).count() == 0:\n                    locationCheck = Location.objects.filter(name=row[4]).count()\n\n                    if locationCheck == 0:\n                        print \"Adding new location: \" + row[4]\n                        l = Location(name=row[4])\n                        l.save()\n                    else:\n                        l = Location.objects.get(name=row[4])\n\n                    locationId = l.id\n                    g = Game(home_team=homeTeam, away_team=awayTeam, location=l, game_date=gameDate, start_time=startTime)\n                    g.save()\n~~~\n<\/p>\n\n<p>\nIt's interesting to treat everything as an object after so many years of being in the PHP world where you can mix and match depending on what's been going on in your application.  I'm also amazed at how clear the code is.  There is some non-intuitive stuff in there, especially when dealing with the saving of model records.  It took me a while to figure out I could pass the object containing the model  as a parameter when saving a record for a model that it is associated with.\n<\/p>\n",
        "date": "2008-04-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building Rallyhat: Importing Schedules",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/04\/building-rallyhat-importing-schedules\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was going to do a rant today in honour of April Fools' day, talking about how much it frustrates me to no end that people prefer complicated explanations for their bugs:\n<blockquote>\nThem: \"I notice that module X is no longer working when I moved from BloatOS to TinyNX, and my framistat widget is now displaying stars instead of being in plain-text.  Why is the component doing that?\"\nMe: \"Dude, that component doesn't just magically stop working because you're on TinyNX.  Are you using the same version of FooWorks in both environments?\"\nThem: \"I think so.\"\nMe: \"Don't f*****g THINK so, MAKE SURE\".\nThem \"But it was working just fine...\"\nMe:  \"SILENCE!  I'll bet you the balance in my savings account that you are using the star framistat widget on TinyNX and the two code bases aren't the same\"\nThem: \"Oh, will you look at that...somehow an older intermediate version of the code using the star widget was deployed on the TinyNX version\"\nMe: \"You owe me lunch\"\n<\/blockquote>\nPeople, people, people.  Weird problems almost ALWAYS have a simple solution.  But enough about how smart I think I am, back on topic.\n<\/p>\n\n<p>\nI've started working on my presentation I'm giving in two weeks.  Oh, don't worry, I know what I'm going to say but I just need to create the slides that results from it.  Part of the presentation is pointing out some deployment horror stories and how they could've been avoided.  If you can swallow your pride and share some of those stories with me, I'd appreciate it.  I will start off with one of my own.\n<\/p>\n\n<p>\nBack when I used to work for an adult dating website, we built a database abstraction class that passed all data modification statements to our master database server...via HTTP.  Yes, we wrote code that listened for a string to be sent to it and then executed the code on the server.  I don't have the time or the patience to explain how this decision was made, but there it was.  We were lead to believe that MySQL replication at the time (this is 5 years ago) was in 'milliseconds' so we thought we were okay dealing with the very large number of updates that would happen to the master, and then being replicated to the 7 to 8 application servers we had running at the time.\n<\/p>\n\n<p>\nThat was until we found out that replication is slow, and some machines were up to 30 minutes behind on processing the replication requests.  Holy shit.\n<\/p>\n\n<p>\nThe solution was to decide what requests could be done later, and creating a queuing system for processing those delayed requests.  Apparently this same system is in place today, despite the current software architect's desire for switching things to a clustering or sharding scenario for the data.  Since the site is so dependent on people signing up for paid accounts, nothing is allowed to be done that can disrupt the site when deploying changes.  Best of luck with that.\n<\/p>\n",
        "date": "2008-04-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deployment Horror Stories",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/04\/01\/deployment-horror-stories\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><a href=\"http:\/\/www.travisswicegood.com\">Travis Swicegood<\/a>, who is now my DBFF (Django Best Friend Forever) is writing a book about <a href=\"http:\/\/git.or.cz\/\">git<\/a> entitled <a href=\"http:\/\/www.travisswicegood.com\/index.php\/2008\/03\/23\/pragmatic-version-control-using-git\">Pragmaatic Version Control Using Git<\/a>.  Nicely done, Travis!<\/p>\n\n<p>\nAs someone who has started using git not too long ago, I completely agree with him that the market for such a book is wide open.  Hurry up and get it done!<\/p>\n",
        "date": "2008-03-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Upcoming Git Book",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/29\/upcoming-git-book\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've got a whole bunch of little things I want to talk about, as opposed to one big topic.  Here we go<\/p>\n\n<p>\n<ul>\n<li>You'll see a badge on the right side of my blog announcing that I'm speaking at <a href=\"http:\/\/openwebvancouver.ca\">Open Web Vancounver 2008<\/a>.  If you can make your way up to Vancouver on April 14th and April 15th, please come up and support this conference.<\/li>\n<li>I got an email from someone on the CakePHP mailing list asking me about what sort of setup I have for running my apps.  I have a 256 MB slice <a href=\"http:\/\/www.slicehost.com\">with slicehost<\/a>, and I have ZERO complaints about performance.  I'm running PHP 5.2.5 under fastcgi (I use nginx as my web server), with MySQL on there to power my blog.  In an earlier post I wrote how to create the rewrite rules for CakePHP to work with nginx, so search my archives for that.  I've got Python on there as well for my upcoming Django work, and soon Apache will be on there to act as my app server for Django.\n<\/li>\n<li>Wrote my first Python script for work:  it trolls through a bunch of gzipped XML documents, doing some search and replace.  75 lines of pure Python n00bness, built entirely with the help of \"Dive Into Python\" and google.  I'm sure it could be optimized by some more experienced Pythonistas, but it sure felt good to get the first one done and out of the way.<\/li>\n<li>I've decided to start using <a href=\"http:\/\/twitter.com\">twitter<\/a> again, see how long that lasts<\/li>\n<li>The more I use it, the more powerful I realize jQuery is<\/li>\n<li>Some ruthless refactoring has caused my Code Igniter code to be a bit more CakePHP-like, in that I'm moving stuff into models and out of the controller wherever it makes sense.  That's a good practice no matter what framework you use<\/li>\n<li>As much info as there is out there for using Django (the Django project site, the Django book available online), it sure would be helpful to me to find some sort of Django guru who can help me out with some of the finer points of Django and Python itself.  I'm trying very hard to not write Python code like I was writing PHP, and I feel like some of the finer points are escaping me.<\/li>\n<li>I'm working on moving some old CakePHP code I have that runs on PHP 4 over to PHP 5, and having PHP 4 *and* PHP 5 running on the same server.  Should be an interesting experience<\/li>\n<\/ul><\/p>\n",
        "date": "2008-03-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: March 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/28\/whats-in-chris-brain-march-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This will be the first in a series of posts chronicling my building out of Rallyhat, a site that people will use to plan sporting road trips, baseball first.  In this first installment I wanted talk a bit about the first steps I too to actually get this thing rolling.<\/p>\n\n<p>\nNow, I could easily build this site in CakePHP, so that's not really much of a challenge.  I already have <a href=\"http:\/\/www.ibl.org\">one site that runs Cake<\/a> to keep me on top of things there, and future work-related projects are going to be CakePHP for me as well.  So, something else then?  I already did the Rails thing, and tore that down to build the CakePHP one.  I thought about using <a href=\"http:\/\/merbivore.com\/\">Merb<\/a>, and I'm going to attend a talk at <a href=\"http:\/\/openwebvancouver.ca\">Open Web Vancouver<\/a> about Merb so I get a better idea about what it could do for me.  So that left just <a href=\"http:\/\/www.djangoproject.com\">one choice<\/a>.\n<\/p>\n\n<p>\nC'mon, you're not really surprised are you?\n<\/p>\n\n<p>\nOne of the things I really liked about Django is the admin app that you get for free.  I've already been using it to full some of my support tables for the application, but I wanted to talk about a neat little thing you can do here.  In Django, you define the names of the fields in your model in order for the ORM magic to work.  Here's a little sample:<br \/>\n~~~\nfrom django.db import models\n\nclass Sport(models.Model):\n    name = models.CharField(max_length=30)\n    \n    class Admin:\n        pass\n\n~~~\n<\/p>\n\n<p>\nThe Admin stuff is so that those models show up properly in the admin part of the application.  So, just like in CakePHP where you can use $this->Model->find('list') to get an array for use in your dropdowns for forms.  Django, does this a little differently.\n<\/p>\n\n<p>\nBeing totally object oriented, if you drop into the Python interpreter and ask it to return a model to you, you'll get something like this, taken from the Django tutorials:\n~~~\n(chartjes@jackjack ~\/Sites\/rallyhat)\n>python manage.py shell\nPython 2.5.1 (r251:54863, Jan 17 2008, 19:35:17) \n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from rallyhat.www.models import Sport\n>>> Sport.objects.all()\n[<sport : Sport object>]\n>>> \n~~~\n<p>\nWTF?  What good is \"Sport: Sport object\" to us?  I want something more descriptive.  How about the name of the sport?  That's easy.  We can modify the Sport model and tell it that when we return the object, return the \"name\" field instead.\n<\/p>\n~~~\nclass Sport(models.Model):\n    name = models.CharField(max_length=30)\n    \n    class Admin:\n        pass\n    \n    def __unicode__(self):\n        return self.name\n~~~\n<\/sport><\/p>\n\n<p>\nSo, when I drop into the shell, I get the following:\n~~~\n(chartjes@jackjack ~\/Sites\/rallyhat)\n>python manage.py shell\nPython 2.5.1 (r251:54863, Jan 17 2008, 19:35:17) \n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from rallyhat.www.models import Sport\n>>> Sport.objects.all()\n[<sport : MLB>]\n>>> \n~~~\n<\/sport><\/p>\n\n<p>\nSame result, different way to get to it.        \n<\/p>\n",
        "date": "2008-03-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Building Rallyhat: First Steps",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/25\/building-rallyhat-first-steps\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIn a post earlier this week I had talked about the fact that I have turned into an \"editor waffler\", paralyzed with fear that I couldn't decide on what editor to use for my day-to-day use.   I had promised that by the end of the week I would reveal what editor I've decided on using.  But before I talk about that, I wanted to talk some more about my thoughts on why I can't decide.\n<\/p>\n\n<p>\nI had prepared a really long blog post to answer this question but I started rambling and I deleted it all.  It comes down to a fear of freedom.  That's right, a fear of freedom.  I have enlightened employers who don't care what tools I use as long as I get the job done.  I'm grateful for that, so I am constantly looking for tools that meet my requirements from project to project.  I think I've settled on the collection of tools that are working for me on a daily basis.  Thanks to Marc Grabanski for his <a href=\"http:\/\/marcgrabanski.com\/article\/107\/Arsenal-of-Web-Development-Tools\">Arsenal of Web Development Tools<\/a> post for reminding me that it's about tools that you don't fight with that help you get the job done.\n<\/p>\n\n<p>Here's my personal web development stack:\n<ul>\n<li><a href=\"http:\/\/macromates.com\">TextMate<\/a> -- built in SVN integration, syntax highlighting for all sorts of common web langauges *and* I found a plugin that highlights what files in the file drawer are under version control<\/li>\n<li>Terminal -- still a CLI guy for a lot of tasks, especially for code generation<\/li>\n<li><a href=\"http:\/\/www.mozilla.com\">Firefox<\/a> with <a href=\"http:\/\/www.getfirebug.com\/\">Firebug<\/a> -- if there was something as good for Safari I'd use it instead<\/li>\n<li><a href=\"http:\/\/cocoamysql.sourceforge.net\/\">CocoaMySQL<\/a> -- sometimes I use the CLI client, but CocoaMySQL is the tool I use most of the time for MySQL work.   I need to find one that I like as much for Postgres<\/li>\n<li><a href=\"http:\/\/macrabbit.com\/cssedit\/\">CSSEdit<\/a> -- I was so impressed at how it helped this CSS and layout n00b fix a problem, I paid for a copy<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThose 5 tools are the ones I find myself using consistently, day-in and day-out.  But that's not to say I don't use other things as well.  I use <a href=\"http:\/\/www.vim.org\">vim<\/a> for quick editing of system-level files and for editing on various remote servers.  I do use <a href=\"http:\/\/www.activestate.com\/Products\/komodo_ide\/index.mhtml\">Komodo<\/a> when I really need to do some deep debugging, like I had to do a few weeks ago to try and figure out why an upgrade to the latest version of Code Igniter was failing for a work project (they broke their Active Record implementation  when dealing with Postgres for whatever reason, please prove me wrong if that's not true) and it helped me narrow down the problem a lot faster.\n<\/p>\n\n<p>\nBy being an \"editor waffler\" I have learned enough about a variety of tools that I feel like they are all part of my toolkit.  It's like having a large number of tools and making sure that you use the right one for the job.  Okay, enough angst from for now on my choice of editors.\n<\/p>\n",
        "date": "2008-03-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I'm An Editor Waffler, Part II",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/21\/im-a-editor-waffler-part-ii\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Taken from a discussion with my friend <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a> via IM earlier today (warning, may contain bad language):\n<pre>\nwebslinginfool\nor try pida\nwhich _is_ what you wanted no?\n\nChris Hartjes\npida?\n\nwebslinginfool\n*sigh*\n\nChris Hartjes\nnot really\n\nwebslinginfool\nhttp:\/\/pida.co.uk\/files\/screenshots\/pida_0-5-2_17.png\n\nChris Hartjes\nif I want that, I can go with Textmate\n\nwebslinginfool\ntrue\nvery true\nactually , why dont you use textmate?\n\nChris Hartjes\nI do use it\nbut you get me looking at that vim stuff\n\nwebslinginfool\nahh\na man of weak faith\ntsk\ntsk\ntsk\n\nChris Hartjes\nvery weak when it comes to editors\n\nwebslinginfool\nwait, let me halt construction of your monument\ni've never met anyone like you actually\n\nChris Hartjes\nin what way\n\nwebslinginfool\neditor waffling\n\nChris Hartjes\nyeah, that's pretty rare\nI dunno why I'm like that\n\nwebslinginfool\ni've never even  heard of it\nyou should totally add an \"editors\" \nsection to your blog and simply detall \nyour experiences\noh, and make friends with a bishop\n\nChris Hartjes\nfuck\nYOU\n\nwebslinginfool\nbecause you'll start a holy war!\n<\/pre><\/p>\n\n<p>\nKevin is a <a href =\"http:\/\/www.vim.org\">vim<\/a> guy, and is always giving me tips (solicited or not) on how to make my vim experience more enjoyable.  A lot of what he gives me *is* useful.  I probably have a vim setup now that will work okay for me, and I did give vim a two-week audition as my main editor a while back.  However, it didn't have the GUI file drawer \/ file explorer crutch that I've gotten used to.  Besides, I think my arguments about why I use each editor are just lame.<\/p>\n\n<p>\n<ul>\n<li>Komodo - got a free license after talking at the Vancover PHP conference last year (please, go to <a href=\"http:\/\/www.openwebvancouver.ca\">Open Web Vancouver<\/a> this year so they can get enough money for me to fly business class ;)), cool editor, nice debugger...but I find it slow and unresponsive at times.<\/li>\n<li>TextMate - one of the first OS-X apps I ever paid for, nice and snappy, great syntax highlighting...but doesn't have the tooltip stuff that Komodo does.  I did find a cool plugin that shows me what files I've modifed in version control right there in the file drawer, but it's not an IDE like Komodo is<\/li>\n<li>vim - very powerful, pretty much does everything I need in an editor...but all those damn commands to remember, and where's my pretty GUI file explorer?!?!<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThose are three of the lamest statements I've come across in my talking to people about the editor I use.  Editors are usually a religious issue amongst developers:  you can pry the one they use every day from their cold, dead hands. <\/p>\n\n<p>\nSo, maybe it's time to grow up as a developer and stop switching between editors.  But can I do it?  Yes, I know you're not used to reading my angst-filled posts about what editor to use.  Damnit, why am I so weak on this issue?!?\n<\/p>\n\n<p>\nThis post is not intended to become a holy war on what editor to use, I'm just expressing my frustration at my inability to decide what to do here.  If I look at it objectively, it's about what tool I would be the most productive in.  The problem is, I can't figure that out...probably because I keep switching all the damn time.\n<\/p>\n\n<p>\nIs it fear of commitment?  Fear that I pick the wrong editor for what I need?  I have started branching out into other languages, so my editor needs to support those as well.  All three can do it.  *sigh*\n<\/p>\n\n<p>\nKomdo vs. TextMate vs. vim.  Maybe there is no winner, just a loser.  Me.\n<\/p>\n\n<p>\nOne of the thing the Pragmatic Programmers said (when not trying to get us to buy their books all the time) is to settle on one editor, whatever one that is, and learn ALL it has to offer because you might be surprised what it can do for you.  Flipping back and forth is no way to do that.  More like a delaying tactic from someone who doesn't want to HAVE to pick, maybe?\n<\/p>\n\n<p>\nWell folks, that day has come.  I must pick and stick with it for once.  I'll let you guys know at the end of the week what I picked.  Go back to making fun of me in the other posts, okay?\n<\/p>\n",
        "date": "2008-03-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I'm An Editor Waffler",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/18\/im-an-editor-waffler\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Most developers who have worked with PHP for any significant period of time have heard of the LAMP application stack.  <b>L<\/b>inux, <b>A<\/b>pache, <b>M<\/b>ySQL and <b>P<\/b>HP.  This is probably the most common PHP application configuration out there, and I've been giving application stacks a lot of thought these days for a variety of reasons.  First of all, I'm giving a talk on application deployment at <a href=\"http:\/\/www.openwebvancouver.ca\">Open Web Vancouver<\/a>, and the stack plays a big role in that.  Secondly, I'm always looking at new technologies and trying to figure out where they might fit in.<\/p>\n\n<p>\nThirdly, there seems to be a trend towards providing \"drop-in-place\" PHP stacks for developers trying to figure out things locally.  I'm talking about things like <a href=\"http:\/\/www.mamp.info\/\">MAMP<\/a> and <a href=\"http:\/\/www.wampserver.com\/en\/\">Wampserver<\/a>.<\/p>\n\n<p>\nSo the next thing I've been wondering about is about what future PHP stacks will look like, at least on the open source side of things.  Have we gotten to the point where this is as good as it gets?  I know for my own personal stuff, I've started moving away from the AMP part of LAMP, instead using Postgres for database stuff and nginx as my webserver.  So, what is that now?  LNPP?  That doesn't roll off the tongue as nicely as LAMP.\n<\/p>\n\n<p>\nAlso, are we limiting ourselves in the description of a stack by just going with PHP as part of LAMP?  With the rise of Javascript on the client-side and the increasing use of frameworks by developers (I'm *not* getting into that MVC argument again) do they need to be considered as part of the stack now?\n<\/p>\n\n<p>\nSo, my question to my readers is this:  what do you see as the future stack for PHP?  Is LAMP the combination likely to continue to see the most usage?  To spark things off, here are some of the PHP stacks I've been working with lately:\n<ul>\n<li>CakePHP + PHP + Apache2 + Postgres + Gentoo Linux<\/li>\n<li>jQuery + Code Igniter + PHP + Apache2 + (<a href=\"http:\/\/exist.sourceforge.net\/\">eXist<\/a> + Postgres) + Debian Linux<\/li>\n<li>jQuery + CakePHP + PHP + MySQL + nginx + Gentoo Linux<\/li>\n<\/ul>\n<\/p>\n\n<p>\nLet me know your thoughts about the PHP application stack in the comments.  I mean, are we going to see something like an application server for PHP (like Mongrel for Ruby folks) or is mod_php or FastCGI (for the nginx + lighttpd folks) as good as it's gonna get?\n<\/p>\n",
        "date": "2008-03-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's The Next PHP Stack?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/14\/whats-the-next-php-stack\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nMy in-box is filling up with rejection emails from various places because some asshole spammer decided to use my domain name to send their spam.  Trust me, there's only three addresses that send out mail from littlehart.net and HolliscezanneMorse is not one of them.\n<\/p>\n\n<p>\nMy apologies to anyone who's gotten spam from someone claiming to be at the littlehart.net domain.  It isn't me.\n<\/p>\n",
        "date": "2008-03-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Darn Spammers Got To Me!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/12\/darn-spammers-got-to-me\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI like to check out the <a href=\"http:\/\/reddit.com\/r\/programming\">programming section on Reddit<\/a> on a regular basis because it usually contains some interesting links.  Yesterday I came across a link that discussed the fallout surround a presentation at phplondon08 where <a href=\"http:\/\/pookey.co.uk\/blog\/index.php?url=archives\/43-phplondon08-the-crazy-guy-mail.html\">panelists on a discussion of frameworks got heckled<\/a> but some guy claiming to be an expert on what a real MVC framework is.<\/p>\n\n<blockquote>\nAll major Rails clone PHP frameworks that exist on the market today are a complete and utter failure. All of them call themselves MVC frameworks and none of them implement actual MVC. In fact, some of the worst ones merely resemble MVC, and have no right whatsoever to be called frameworks. Whatever benefits of sexy ORMs and flexible build systems and scaffolding and other secondary tools these frameworks have are nullified by the fact that using them results in architectural chaos which is no better than your usual spaghetti code. This is because the people who wrote Rails didn't bother to understand MVC, and the PHP amateurs who were excited about the idea of getting done more in less time blindly tried to clone Rails into PHP and in so doing not only replicated the stupidity of Rails into PHP but also multiplied it by their own incompetence and PHP's shortcomings as a language and a platform.\n<\/blockquote>\n\n<p>\nNo, tell us how you really feel about it.\n<\/p>\n\n<p>\nAnyhow, this guy apparently works for the <a href=\"http:\/\/agavi.org\">Agavi<\/a> project, a (wait for it) MVC framework written in PHP as an \"evangelist\".  Well, he certainly talks like you would expect an evangelist too.\n<\/p>\n\n<p>\nThe comments for that post are really interesting too, as people take their usual swipes at PHP, and CakePHP, and the Symfony guys come out in droves to talk up Symfony, and on and on it goes.  Sadly, this is not a unique occurance on the web.\n<\/p>\n\n<p>\nSo, back to the topic of the post.  Is this guy right?  Is *nobody* except Agavi doing it right on the PHP side of things?  I took a peek at their documentation.  Lots of statements about what a framework should and shouldn't do.  \n<\/p>\n\n<p>\n<em>(Author's note 03\/10\/08: removed code example as, well, it's not really relevant to the discussion, other than making me giggle about mixing business logic with presentation logic)<\/em>\n<\/p>\n\n<p>\nDigging through the documentation some more, it's quite dry.  Short and sweet, not a lot of tips on building an Agavi app from scratch.  Again, to be fair, that might not be the point of the documentation.  But it's approach is very, *very* different from the \"Rails way\" that CakePHP has been following.  Before you flame, there is nothing wrong with the \"Rails way\" because, if nothing else, it has forced developers to crank their skills up a notch and actually *think* about what they are building.\n<\/p>\n\n<p>\nI knew one of the original developers of <a href=\"http:\/\/www.mojavi.org\">Mojavi<\/a> (of which Agavi is a fork) and he was a really smart guy (Hi Shawn!). My early forays into framework use was with Mojavi, when trying to convince a previous employer that we needed to rewrite this monster PHP application with Mojavi so we could get things like a private branding version of the site done a lot easier.\n<\/p>\n\n<p>When I compare this to Cake, they are as different as night and day.  Agavi (and Mojavi) are heavily configuration-oriented (XML *everywhere* for config files), while Cake uses conventions to try and speed things up.  But the real truth is this:  they are both trying to separate your business logic and your presentation logic to make things easier for the poor saps who have to build these applications.\n<\/p>\n\n<p>\nOur lovely heckler has missed the forest for the trees, as far as I'm concerned.  It's like complaining that you can't call it a forest because the trees aren't growing straight up and down, but tend to branch out in different directions.  They're still trees, right?\n<\/p>\n\n<p>Frameworks are designed to try and help you to get things done faster *and* to organize your code in a much more consistent manner.  Cake uses the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Model-view-controller\">Model-view-controller design pattern<\/a>, and I think that the quote below makes it clear that Cake is doing it the right way:\n<blockquote>\nModel-view-controller (MVC) is an architectural pattern, which at the same time is also a Multitier architecture, used in software engineering. In complex computer applications that present a large amount of data to the user, a developer often wishes to separate data (model) and user interface (view) concerns, so that changes to the user interface will not affect data handling, and that the data can be reorganized without changing the user interface. The model-view-controller solves this problem by decoupling data access and business logic from data presentation and user interaction, by introducing an intermediate component: the controller.\n<\/blockquote>\nIf you are trying to tell me that CakePHP does not follow that practice, then I am calling you a fucking idiot who is more interested in pedantic minutiae than understanding that there is more than one way to implement MVC.\n<\/p>\n",
        "date": "2008-03-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My framework is more MVC than *your* framework!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/06\/my-framework-is-more-mvc-than-your-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n(Note: I will be cross-posting a version of this to <a href='http:\/\/book.cakephp.org'>the CakePHP Cookbook<\/a> within a day or two).\n<\/p>\n\n<p>\nAs amazing as the built-in CakePHP pagination helper is, sometimes you have to create your own custom queries for data you wish to paginate.  For <a href='http:\/\/www.ibl.org'>the simulation baseball league site<\/a> I wanted to be create an admin area where I could paginate through the series instead of individual games.  It took some digging around with google, but I found some info in a thread (thanks to <a href='http:\/\/www.3hndesigns.com\/'>Baz<\/a> for contributing that tidbit to the thread) on how to do just that.\n<\/p>\n\n<p>\nOkay, so it turns out that the paginate() method that is used to generate the data that you (oddly enough) paginate through takes the same arguments as Model::findAll().  So, if you want to use your own query, you simply create a 'paginate' method for your model.  In my case, I needed a query that would group things together (because a 'series' is simply a collection of all games between two teams in a particular week).  The query stuff I did is ugly because there currently is no support 'group by' in CakePHP (although that would be a very interesting project to tackle).  So, here's what I did:\n<\/p>\n\n<pre><code>\/**\n * Custom paginate method\n *\/\nfunction paginate($conditions, $fields, $order, $limit, $page = 1, $recursive = null) {\n    $conditions[] =\"1 = 1 GROUP BY week, away_team_id, home_team_id\";\n    $recursive = -1;\n    $fields = array('week', 'away_team_id', 'home_team_id');\n\n    $params = array(\n          'conditions' =&gt; $conditions,\n          'recursive' =&gt; $recursive,\n          'fields' =&gt; $fields,\n          'order' =&gt; $order,\n          'limit' =&gt; $limit,\n          'page' =&gt; $page\n     );\n\n     return $this-&gt;find('all', $params);\n}\n<\/code><\/pre>\n\n<p>\nSo, that's the first part of the custom query stuff taken care off.  Next, I needed to be able to properly count the number of 'series' so that the numbers (you know, that stuff that says 'page 7 of 23') come out properly.  Again, you can override the paginateCount() method if you need to.  It uses the same parameters as Model::findCount().  Now, the custom query I'm using below is Postgres-specific, so YMMV:\n<\/p>\n\n<pre><code>\/**\n * Custom paginateCount method\n *\/\nfunction paginateCount($conditions = null, $recursive = 0) {\n    $sql = \"SELECT DISTINCT ON(week, home_team_id, away_team_id) week, home_team_id, away_team_id FROM games\";\n    $this-&gt;recursive = $recursive;\n    $results = $this-&gt;query($sql);\n\n    return count($results);\n}\n<\/code><\/pre>\n\n<p>\nSo there you have it.  Hope this helps out anyone who's been trying to figure out how to use custom queries with their pagination.\n<\/p>\n",
        "date": "2008-03-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Custom CakePHP 1.2 Pagination Queries",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/03\/04\/custom-cakephp-12-pagination-queries\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in the Orlando airport at this ungodly hour waiting for a flight to Memphis as part of an Orlando -> Memphis -> Toronto trip back from my two days at the Newspaper Association of America conference.  I was there with my <a href='http:\/\/www.xmlteam.com'>employer<\/a> to help start promoting the <a href=\"http:\/\/www.sportso.com\">project I've been working on<\/a>.  It was an interesting show, and I had a great time in the booth hanging out and talking with Ken Zajac from <a href=\"http:\/\/sportsnetwork.com\">The Sports Network<\/a> and Digger Turnbull from <a href=\"http:\/\/fantasysports.ca\">Fantasy Sports Services<\/a>.  It was fun huddling around Digger's computer listening to the latest moves during the NHL's trading deadline day.\n<\/p>\n\n<p>Anyway, enough geeking out about my sports fetish.  Work took up a lot of my time this last 2 weeks getting ready for the demo, so my posting has suffered a bit.  Here are some of the things I've been thinking about.:\n<ul>\n<li>more and more messages about using the CakePHP Auth component on the mailing list<\/li>\n<li>I will be doing some Python work later this week on a utility to rip through some of our archived XML documents at work and do some search-and-replace ninja work.<\/li>\n<li>Investing in using <a href=\"http:\/\/jquery.com\">jQuery<\/a> for work has made for some super-quick integration of some new features.  It took me under half-an-hour from the first search in google to get an autocomplete plugin for jQuery working.  Now *that* is rapid development<\/li>\n<li>Despite my best efforts I can't get vim setup and working the way I want.  Sorry Kevin, TextMate is just the best one for me, and Komodo when I need to break out the Xdebug guns<\/li>\n<li>I'm going to put together a post (and contribute the same info to the <a href=\"http:\/\/book.cakephp.org\">CakePHP Cookbook<\/a>) on my experiences with custom pagination usage with Cake, since I had to hack something together for recent changes I've been working on for the <a href=\"http:\/\/www.ibl.org\">IBL website<\/a><\/li>\n<\/ul>\n<\/p>\n\n<p>\nAnyway, enough talking.  It's way too early to do this sort of nonsense (can't believe I have coherent thoughts at 5:30AM) and it's close to boarding time.  See you on the other side...\n<\/p>\n",
        "date": "2008-02-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: February 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/27\/whats-in-chris-brain-february-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nOf all the people in the <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> community that I have come across, none suffers from a lack of respect more than John David Anderson, more commonly known as _psychic_ on IRC.  Why do I say this?  John heads the CakePHP documentation project, a thankless task that seems only to exist so unimaginative people can complain that there is no documentation for CakePHP.  If I had a dollar for every person on the CakePHP mailing list who seems to either not understand how to use Google or how to look at someone else's PHP code to figure out how something works, I could retire and blog full time.\n<\/p>\n\n<p>\nBut I digress.  With a ton of help from Andy Dawson (AD7Six) the documentation for CakePHP 1.2 has moved forward immensely with the unveiling of the <a href=\"http:\/\/book.cakephp.org\">CakePHP Cookbook<\/a>.  It's a combination of manual and wiki, where people can flesh out the manual and make comments on the methods in there.  I have been quite harsh on people who have called for a CakePHP wiki in the past, because they tend to be a mess.  This project is just different enough that I cannot stop recommending people to use the cookbook when searching for answers to their CakePHP problems.  In fact, if you can contribute by moving entries over from the <a href=\"http:\/\/tempdocs.cakephp.org\">temporary documentation<\/a> to the cookbook, _psychic_ will have one less thing to do.\n<\/p>\n\n<p>\nFrom now on, whenever I find a solution to something in CakePHP I will not only post it here on my blog (because, after all, I am still an egomaniac) I will also create an entry in the Cookbook if it's appropriate.  Lucky for you, contributions are anonymous so you won't be able to tell what I've put in there.  My first contribution has been to get my documentation on the Auth component in there (although my simple user registration stuff isn't in there), and <a href=\"http:\/\/www.3hndesigns.com\/\">Baz<\/a> added his stuff he's been doing with Auth as well.\n<\/p>\n\n<p>\nSo, no more excuses about lack of documentation!  Anyone who registers and account can create entries in the manual, and everyone who complains about on the mailing list will be told to go look at the cookbook and contribute changes and comments to it.\n<\/p>\n",
        "date": "2008-02-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Cooking Up Some Cake",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/18\/cooking-up-some-cake\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nFresh off the middling success of my talk at <a href='http:\/\/cakefest.org'>CakeFest 2008<\/a>, I'll be giving a more expanded version of the talk at <a href='http:\/\/www.openwebvancouver.ca\/'>Open Web Vancouver 2008<\/a>, which is being held April 14 and 15, 2008 in Vancouver.  I really enjoyed going out there last year, and this talk is quite different from the last one I gave.  However, I will have to flesh this one out as I will be talking to a crowd that might not necessarily be familiar with CakePHP, or even MVC frameworks as a whole.  The cute slides done by my kids are definitely going to stay in it.\n<\/p>\n",
        "date": "2008-02-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It's Convention Season!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/12\/its-convention-season\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in the airport in Orlando, waiting for my flight to Charlotte (which is delayed about 40 minutes as this point) so I thought I'd talk about what I saw on the second day of CakeFest.\n<\/p>\n\n<p>\nPhpNut's keynote was, well, PhpNut was having problems with his presentation (his notes for the slides weren't showing up for him) but he did a good job of talking about where he started out with CakePHP and his thoughts on where it's going.  Specifically he mentioned how Cake 2.0 was going to be PHP 5 only, and more likely 5.3 specific as they planned on leveraging the upcoming support (or is it in there already?) for namespaces in PHP.  Sure, you can use it on older versions of PHP 5 that don't support it, but you won't be able to benefit from the namespaces.\n<\/p>\n\n<p>\nThen we broke down into two \"tracks\", API and GUI.  After the keynote I sat in on Nate's talk about building REST services with CakePHP 1.2, which was very informative and showed me just how hard Nate had been working to make those changes possible.  However, the end of the talk featured some fireworks as one of the crowd members took exception to Nate characterizing SOAP as being (and I'm paraphrasing here) stupid and useless.  During the lunch break afterwards, the discussion about SOAP vs. REST continued at the table I was sitting it, with the same person claiming that once Web 2.0 got \"serious\" that it would absolutely require SOAP.\n<\/p>\n\n<p>\nWell, I dunno about you but I'm of the opinion that just because something is using SOAP doesn't make it serious.  REST is great for lots of different applications, and to say that REST has no place in any sort of \"serious\" web application is just, I dunno, elitist and pig-headed.  Look, the truth of the matter is this:  if you want to talk to other applications in different programming languages and web environments, well, you have to use whatever API's the *creator* of that application has chosen.  If it's REST, don't start bitching to me about how you want SOAP.  If I don't want to create a SOAP interface to my app, you are shit out of luck.  This idea that there is somehow a split between  \"serious\" and \"non-serious\" web applications is just snobbery in another form.\n<\/p>\n\n<p>\nSo, after lunch I watched <a href=\"http:\/\/marcgrabanski.com>Marc Grabanski<\/a> talk about using jQuery in your web applications.  From my perspective, I think you can thank things like jQuery for making Javascript into a language that is now pretty much as easy to use as PHP.  When I Think about how I had to do things with Javascript even 3 years ago, tools like jQuery just make it so simple.\n<\/p>\n<p>\nFollowing that, I watched <a href=\"http:\/\/www.thinkingphp.org\">Felix's<\/a> talk on CakePHP + jQuery and World Domination.  One of the things I like about going to these conferences is that I am always impressed by the level of skill of the people I meet.  I feel like I'm constantly the stupidest person there (which may be true) and their youth and energy and out-and-out mad skillz make me appreciative of all the tools they create so lazy bastards like me can build things for money.  My hats off to those guys.\n<\/p>\n<p>\nFor the rest of the time I spent it trying to fixed a messed-up git conflict (I have no idea what I did but I'll be more careful next time) and tweaking on some new features for the baseball web site, mainly consisting of refactoring some code to do the standings and learning to exploit the power of Set::extract (don't worry Felix, you're gonna get that email like I promised.\n<\/p>\n<p>\nBut of course, the best part of the conference is the people I got to meet and hang out with.  I appologize to anyone I miss here, but I want to thank the following:\n<ul>\n<li>Sonicbaker - easiest roomate ever, except for the fact you snored like a chainsaw<\/li>\n<il>Felix, Tim and Timo - always good to hang out with the Germans and practice all those language skills I learned as a kid\n<li>Travis Cline, Ryan Peterson, Neal the English Guy (or is it Neil?), Forrest - conversation was good and I'm glad I entertain you guys with my blog postings and flame-bait postings on the mailing list<\/li>\n<li>Mariano - your rousing stories of kidnappings and being shot at by 10 year olds in Argentina make me want to rush right down there!<\/li>\n<li>Jeff \"Don't call me phishy!\" - despite all my efforts to have you do an edition of The Show at CakeFest, I left before it could happen...<\/li>\n<li>PhpNut - always good to talk to you even if the professional relationship didn't work out we can still be nice to each other in social situations :)<\/li>\n<li>Nate - big shock to find you on the same flight to Orlando from Charlotte, and I always enjoy our conversations no matter what medium...and don't take offense at you making fun of me because I'm from Kanuckistan<\/li>\n<li>and finally Garrett - thanks for inviting me to speak, thanks for taking care of me during a time when money is supertight, and I look forward to the next CakeFest in the US<\/li>\n<\/il><\/ul> <\/p>\n",
        "date": "2008-02-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakeFest 2008, Day Two",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/08\/cakefest-2008-day-two\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I made it down to Orlando for CakeFest, and are sitting in my hotel room having had some beer and some food (bacon double cheeseburger at Denny's) before crashing for the night.  However, on the way up I did the stupidest thing EVER.  The wife and I have two cars.  For a variety of reasons, mostly owing to laziness on my part, I only have one set of keys for my car.  Which is in the driveway.  My wife's car, is in the garage.  I took my keys with me to Orlando.  Dumb, dumb, dumb.  So, I have to send my keys by courier first thing in the morning so my wife can actually, you know, drive around and do stuff while I'm gone.  *sigh*.  Like I said, dumb-dumb-dumb.\n<\/p>\n\n<p>\nSo, on Wednesday I'm giving my talk \"Fake It Before You Make It\" where I show people how easy it actually is to use the console to \"bake\" your application.  I also thought I'd take the time to highlight some of the talks I'm interested in hearing:\n<ul>\n<li>RESTful interfaces by Nate Abele<\/li>\n<li>Adding Common and Kung Fu UI Components to your CakePHP Applications by Marc Grabanski<\/li>\n<li>With CakePHP & jQuery to World Domination by Felix Geisendorfer<\/li>\n<\/ul>\n<\/p>\n\n<p>\nOf course I'll be in other talks as well but those are the 3 I'm really looking forward to seeing.\n<\/p>\n",
        "date": "2008-02-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakeFest, the night before",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/06\/cakefest-the-night-before\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Day 1 of CakeFest is winding down, so I thought I'd talk about today's talks<\/p>\n\n<p>\nFirst, Garrett \"gwoo\" Woodworth was they keynote, talking about where CakePHP came from and how he got involved with it both on a coding level and as project manager.  He included a nice little shout-out to my posting about how \"the devil's in the details\".\n<\/p>\n\n<p>\nNext up was Tim Koschuetzki's talk about unit testing in CakePHP.  I'm a lapsed believer in unit tests (as in, I believe in them but still find a way to not do them) and he did a great job of showing how to do them, with some neat points about how he extended some functionality in <a href=\"http:\/\/simpletest.sourceforge.net\">SimpleTest<\/a> to help test web pages.  As an aside, I also met <a href=\"http:\/\/www.thinkingphp.org\">Felix<\/a> and while I'm a big guy, Tim and Felix are even bigger than I am.  They grow them big in Deutschland these days.\n<\/p>\n\n<p>\nAfter lunch <a href=\"http:\/\/www.joelmoss.info\">Joel Moss<\/a> gave his talk on implementing database migrations in PHP.  I have experience with migrations from my Rails days, so I might investigate this for use with the IBL web site.\n<\/p>\n\n<p>\nThen I gave my talk on using the Cake console.  It was a little shorter than I liked, and I forgot to talk about how the baked views have pagination links in them as well, but it was pretty well received.  All the pictures of my kids (who featured prominently in the slides) generated lots of laughs.\n<\/p>\n\n<p>\nAfter me was a talk by Frederic Bollon about a CakePHP-specific deployment system he called Fredistrano.  Interesting talk, and PhpNut talked about how he thinks it might a viable solution to the problem he faces in updating all the Cake-related sites.\n<\/p>\n\n<p>\nTomorrow has two tracks:  API and GUI.  Should be good...\n<\/p>\n",
        "date": "2008-02-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakeFest, Day 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/06\/cakefest-day-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I had been struggling with some weirdness that CakePHP has been displaying while trying to add some new features to the <a href=\"http:\/\/www.ibl.org\">baseball league website<\/a>, where Cake + PHP 4.4 + Postgres were deciding to just be sulky and not work together well.<\/p>\n\n<p>\nSo, I was trying to figure out how to make a test for this so I could file a bug (CakePHP not finding the proper name of the Postgres sequence for a table) when I tracked down <a href=\"http:\/\/cake.insertdesignhere.com\/\">nate<\/a> on IM to whine to him about this problem, he started bugging me about \"not paying attention\" when looking around in code to try and track down what I thought was a bug.  If I had looked at the API a little closer I would've been steered towards the solution he gave me.\n<\/p>\n\n<p>\nLucky for me, it turns out that the solution (for now) to the problem was to simply add the name of the sequence for that table as a variable to the model definition.\n~~~\n<?php\nclass Vote extends AppModel {\n\n    var $name = 'Vote';\n    var $sequence = 'votes_id_seq'; \/\/ This is what I added in\n\n    \/\/The Associations below have been created with all possible keys, those that are not needed can be removed\n    var $belongsTo = array(\n            'BallotItem' => array('className' => 'BallotItem',\n                                'foreignKey' => 'ballot_item_id',\n                                'conditions' => '',\n                                'fields' => '',\n                                'order' => ''\n            ),\n            'Franchise' => array('className' => 'Franchise',\n                                'foreignKey' => 'franchise_id',\n                                'conditions' => '',\n                                'fields' => '',\n                                'order' => ''\n            )\n    );\n    var $validate = array('ballot_item_id' => array('rule' => 'numeric',\n                                                    'required' => true),\n                          'franchise_id' => array('rule' => 'numeric',\n                                                  'required' => true),\n                          'answer' => array('rule' => 'numeric',\n                                            'required' => true,\n                                            'message' => 'You must vote on this item')\n                         );\n\n}\n?>\n~~~\n<\/p>\n\n<p>\nThis confirmed to me that my new-found respect for trying to come up with the simplest solution to a problem is the correct way to do so.  Since my head is full of all sorts of nonsense (work items, family life, baseball stats, old Dungeons & Dragons adventures from my teenage years) I find that at times I am better served by taking the time to think about the problem rather than start digging around.  Especially when it comes to code that was well-written an has been tested by lots of people, like the overwhelming majority of CakePHP's core code.\n<\/p>\n\n<p>\nThanks again to nate for proving to me that the Devil's in the details.  And continuing to make me feel stupid.\n<\/p>\n",
        "date": "2008-02-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Devil's In The Details (or, Handling Sequences in Postgres in CakePHP)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/02\/02\/the-devils-in-the-details-or-handling-sequences-in-postgres-in-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nNot a lot going on, it's time for a quick round-up post\n<ul>\n<li>I'm speaking at <a href='http:\/\/www.cakefest.org'>CakeFest<\/a>, so I'm working on my presentation.  Since I'm going to be a combination of slides and actual demonstrations of the Cake console, I'm going to be using <a href=\"http:\/\/meyerweb.com\/eric\/tools\/s5\/\">S5<\/a> to run the slideshow, then switching to a terminal and my IDE to show people the results<\/li>\n<li>I've run into a weird bug in working with Cake and Postgres, where the code works okay in PHP 5 + Postgres + OS-X, but erroring out in PHP 4 + Postgres + Linux.  If I could figure out a test to recreate the bug, that would be a good step forward.  In a nutshell, for some reason CakePHP is not determining the correct name of the sequence (it's what Postgres uses when determining auto-incremented ID's for a table) in the PHP 4 + Postgres + Linux environment.  It's very weird and I have no idea what might be happening here.  Given that I can't submit a ticket without a test proving the problem, and then figuring out what code to change, this could cause me some headaches.<\/li>\n<li>I suck at writing screen scrapers, which is what I need to make one of my side projects work<\/li>\n<li>Via the ever-increasingly-useful Miro, I have started watching a presentation on <a href=\"http:\/\/research.sun.com\/projects\/lively\/\">the Lively Kernel<\/a>.  For some more info about it,  check out this post about how <a href=\"http:\/\/bitworking.org\/news\/290\/JavaScript-is-the-new-Smalltalk\">Javascript is the new Smalltalk<\/a><\/li>\n<li>I've been playing around with different themes for this blog, but nothing seems to work as well as my current setup.  Interesting...<\/li>\n<li>I also experimented with adding some more advertising but that got me nothing in the way of revenue.  Maybe I didn't give it enough time or something. My current set of advertisers (thank you very much, guys and gals) make this blog pay for itself, so I consider that a major accomplishment.\n<\/li>\n<\/ul><\/p>\n",
        "date": "2008-01-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: January 2008 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/29\/whats-in-chris-brain-january-2008-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I got a question in the comments about my previous post on simple user registration about how to do some of the necessary validation for registration in the model.  I thought I'd show some code I did to do exactly that.\n<\/p>\n\n<p>\nThe key to all this stuff is using a second form field for doing the validation.  Here's some sample code for you, based on the latest straight-from-svn version of Cake PHP 1.2 (r6402)\n<br \/><br \/>\n~~~\n<?php\n\n\/**\n * Class used for user authentication on the league website\n *\n *\/\n\nclass User extends AppModel\n{\n    var $name = 'User';\n\n    var $validate = array(\n        'id' => array('rule' => 'blank',\n                      'on' => 'create'),\n        'username' => array('rule' => 'alphanumeric',\n                            'required' => true,\n                            'message' => 'Please enter a username'),\n        'password' => array('rule' => array('confirmPassword', 'password'),\n                            'message' => 'Passwords do not match'),\n        'password_confirm' => array('rule' => 'alphanumeric',\n                                    'required' => true)\n    );\n\n    function confirmPassword($data) {\n        $valid = false;\n        \n        if ($data['password'] == Security::hash(Configure::read('Security.salt') . $this->data['User']['password_confirm'])) {\n            $valid = true;\n        } \n        \n        return $valid;\n    }\n\n}\n?>\n~~~\n<\/p>\n\n<p>\nSo, let's talk about what's in there.  \n<ul>\n<li>make sure that the username is alphanumeric and has been entered<\/li>\n<li>make sure the password exists and run the custom validation function 'confirmPassword' on the data being posted in<\/li>\n<li>make sure that our confirm password field exists and is alphanumeric<\/li>\n<\/ul>\n<\/p>\n\n<p>\nThe only tricky thing when I made this was figuring out how to compare the two password fields, and where to get the proper hashing from.  Initially I thought that I could somehow import the Auth component in there but a quick chat with gwoo showed me how stupid that was when I could just duplicate how the component itself is hashing the password field.  That's what is going in with the use of Security::hash(...).\n<\/p>\n\n<p>\nHope that helps.\n<\/p>\n",
        "date": "2008-01-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Simple User Registration in CakePHP 1.2, Part II",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/22\/simple-user-registration-in-cakephp-12-part-ii\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nYes, it's been confirmed:  I will be attending <a href='http:\/\/www.cakefest.org'>CakeFest<\/a> down in Orlando Feb. 6 to 8.  I'll be giving a talk entitled \"Fake It Until You Make It\" about how to use the Cake console tools to speed up your development.  I use the Cake console for all my CakePHP projects, since it helps me quickly create the code for models, controllers (love being able to have all those admin methods already baked in) and I hope to show those who might be a little shy of using the command line what they are missing out on.\n<\/p>\n\n<p>\nI'm going to be flying down Tuesday night, getting in around midnight and flying out Friday morning (it's looking like a 10:30 departure).  So that's two full days at the conference, which is okay.  Now, if anyone is going down there and could use a roomie to help cut down on costs let me know.\n<\/p>\n",
        "date": "2008-01-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Going To CakeFest!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/21\/going-to-cakefest\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Full disclosure:  my wife works as a job recruiter, dealing in full-time permanent positions.  If you live in Southern Ontario and are a fit for this position, please contact her.<\/p>\n\n<p>\nManufacturing Engineer - Waterloo, ON<br \/>\n<br \/> \nFull Time<br \/>\nSalary: Neg.<br \/>\nRequired Skills:<br \/>   \nBachelor of Engineering degree in Industrial, Manufacturing or Mechanical Engineering <br \/>\n<br \/>\nExperience in Lean Manufacturing, Concurrent Engineering and familiar in utilizing various statistical tools desired <br \/>\n<br \/>\nCandidate with 2-5 years engineering experience in high volume electronic manufacturing preferred <br \/>\n<br \/>\nExperience on outsourcing projects <br \/>\n<br \/>\nProject management experience with demonstrated ability to use resources to complete projects on time and within budget <br \/>\n<br \/>\nDemonstrated leadership and communications skills <br \/>\n<br \/>\nAn experienced technical problem solver who can work with cross functional groups to execute continuous improvement actions <br \/>\n<br \/>\nJob Description:     <br \/>\nThe successful candidate will be aligned with specific new product introductions and will play a pivotal technical role principally during the Product Development Process (PDP), but also through to product end of life (EOL). The responsibility will apply to products built within Manufacturing and our Outsourcing partners. The Manufacturing Engineer will be primarily responsible for identifying new product?s DFM\/DFA requirements, and working these through to completion with the product development teams. The engineer will be required to establish with the design teams the development process and product milestones, specifications and assembly process deliverables inclusive of standard time, routings, new process qualifications and will lead the DFA\/DFM, build analysis, issue tracking and resolution to meet the defined goals<br \/>\nContact:    Claire Aucott<br \/>\nPhone:  416-823-7554<br \/>\nEmail Address:  claire@npssolutions.ca<br \/>\n<\/p>\n",
        "date": "2008-01-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Job Posting: Manufacturing Engineer Position",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/17\/job-posting-manufacturing-engineer-position\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nA work project is getting close to 0.1 status.  Pretty underwhelming, I know.  One of the last 'milestones' for 0.1 is taking these wonderful XML documents that my web app creates (and stores in <a href='http:\/\/www.exist-db.org\/'>eXist<\/a> and sends them to an internal web service that reads in the XML and breaks it apart for use by a wide variety of other company applications.  This web service will accept documents via an HTTP PUT (you know, GET, POST and it's neglected siblings PUT and DELETE) so I dug around a bit on the web (ignoring one cranky co-worker's complaints that real programmers read RFC's, or at least *know* what an RFC is) and put together some code<\/p>\n\n<p><br \/><br \/><\/p>\n\n<pre><code>    function _publish($service, $doc) {\n        $params = array(\n            'http' =&gt; array(\n                'method' =&gt; 'PUT'));\n        $context = stream_context_create($params);\n        $fp = fopen($service, 'rb', false, $context);\n        $response = fwrite($fp,file_get_contents($doc));\n\n        if ($response === false) {\n            return false;\n        }\n\n        \/\/ Pull out the status code from the header\n        $metaData = stream_get_meta_data($fp);\n        preg_match_all(\"\/HTTP\\\/1\\.[1|0]\\s(\\d{3})\/\", $metaData['wrapper_data'][0], $matches);\n        $code = end($matches[1]);\n\n        if ($code == 200) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n<\/code><\/pre>\n\n<p>\nThe only tricky thing here really is the use of the <a href=\"http:\/\/www.php.net\/end\">end<\/a> function to grab that last match of the status codes.  I got the code for doing the preg_match from <a href\"http:\/\/www.jellyandcustard.com\/2006\/05\/31\/determining-if-a-url-exists-with-curl\/\">this site<\/a> and it seems to work just fine.  The reason to use end(...) as far as I can tell is to make sure that I only get the last match of the group.  Neat little trick and the link I posted demonstrates it.\n<\/p>\n\n<p>\nI'm also quite proud that it's cURL free, as cURL seems to be the first option that most people use when doing this kind of thing.  There is some existing code that is using cURL that I *might* refactor to use the streams-driven stuff that I've been playing with.\n<\/p>\n",
        "date": "2008-01-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How To HTTP-PUT A File Somewhere Using PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/11\/how-to-http-put-a-file-somewhere-using-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In the comments for my seemingly-popular post about using <a href=\"http:\/\/www.cakephp.org\">CakePHP's<\/a> Auth component (available in CakePHP 1.2), people have been having some questions about how the password is hashed and questions about a user registration system.  Of course, the snarky response is \"go and read the source for Security::Hash() and create some of your own code\", but it is easier to just give people some code so they stop asking.\n<\/p>\n\n<p>\nI'm in the process of building out an admin area for my <a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a> web site, and I created a registration system.  Here's a condensed version of it.\n<\/p>\n\n<p>First, I have my User model\n<br \/>\n~~~\n<?php\nclass User extends AppModel {\n\n    var $name = 'User';\n    var $useTable = 'users';\n}\n~~~\n<\/p>\n<\/p><p>\nNext, I created my controller for my users and the registration action for it\n~~~\nclass UsersController extends AppController {\n    var $name = 'Users';\n    var $helpers = array('Html', 'Form');\n    var $components = array('Auth');\n    \n    function beforeFilter() {\n        $this->Auth->allow('register');\n    }\n        \n    function register() {\n        if (!empty($this->data)) {\n            if ($this->data['User']['password'] == $this->Auth->password($this->data['User']['password_confirm'])) {\n                $this->User->create();\n                $this->User->save($this->data);\n                $this->redirect(array('action' => 'index'));\n            }\n        }\n    }\n}\n~~~\n<\/p>\n<p>\nSo, let's dissect this controller:\n<ul>\n<li>We're using the Auth component, set via \"var $components = array('Auth')\"\n<\/li><li>We tell Auth to not ask for authentication when doing the 'register' action<\/li>\n<li>When we detect data coming into the 'register' action (usually via a POST), then check to see if the hashed password that Auth has created from the 'password' field in our form matches the hashed value of the 'confirm password' field from our form<\/li>\n<li>If all that is okay, we create and save our new user record<\/li>\n<\/ul>\nYes, it really is that easy.\n<\/p>\n<p>\nThe form for this is very simple as well\n<br \/>\n~~~\n<?php\necho $form->create('User', array('action' => 'register'));\necho $form->input('username');\necho $form->input('password');\necho $form->input('password_confirm', array('type' => 'password'));\necho $form->submit();\necho $form->end();\n?>\n~~~<\/p>\n\n<p>\nThrow all that stuff together and you now have a very simple user registration system.\n<\/p>\n",
        "date": "2008-01-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Simple User Registration in CakePHP 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/08\/simple-user-registration-in-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nC'mon ,you know that <a href=\"http:\/\/en.wikipedia.org\/wiki\/Duran_duran\">Duran Duran<\/a> kicks ass!  I was trying to think of a catchy title for a series of posts as I wind my way through the building of my first <a href=\"http:\/\/www.python.org\/\">Python<\/a> app, using the <a href=\"http:\/\/djangoproject.com\">Django<\/a> framework.  If you've used any other framework, you should be able to follow along with these posts as the concepts are all pretty much the same.\n<\/p>\n\n<p>\nFirst off, I have great hopes that the <a href=\"http:\/\/tempdocs.cakephp.org\">current CakePHP 1.2 manual<\/a> can morph into a resource as great as <a href=\"http:\/\/www.djangobook.com\">The Django Book<\/a>, which looks to me to be the essential resource for anyone wishing to start off with Django.  Everything I'm doing at this stage in the project builds on what I've covered so far.<\/p>\n\n<p>\nAnyway, I've chose to build out Rallyhat, my sporting road planning site.  Much like when I build a <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> app, I start out with the models.  Django has a pretty good <a href=\"http:\/\/en.wikipedia.org\/wiki\/Object-relational_mapping\">ORM<\/a> component, as compared to the associated data mapping model that CakePHP uses.  Now, to paraphrase from the Django book:  \"introspection is hard\", so in order to give the Model ORM some help you define the fields you will be using in your models.  Here are the definitions I'm using:\n~~~\nfrom django.db import models\n\nclass Sport(models.Model) :\n    name = models.CharField(max_length=30)\n        \n    def __str__(self):\n        return self.name\n\n\nclass Team(models.Model):\n    name = models.CharField(max_length=30)\n    sport = models.ForeignKey(Sport)\n    city = models.CharField(max_length=30)\n    state_province = models.CharField(max_length=30)\n    country = models.CharField(max_length=30)\n\n    def __str__(self):\n        return self.name\n                \n                \nclass Game(models.Model):\n    home_team = models.ForeignKey(Team, related_name='home_team')\n    away_team = models.ForeignKey(Team, related_name='away_team')\n    start_date = models.DateTimeField()\n    sport = models.ForeignKey(Sport)\n    \n    \n    def __str__(self):\n        return '%s vs. $s' (self.away_team, self.home_team)\n\n~~~\n<\/p>\n\n<p>\nAs you can see, I'm able to define all my fields I'm going to use with generic data types, and can even define the associations between the tables.  So, why do we do all this? Well, Django comes with some great CLI tools for helping you build stuff.  In fact, I dare say that you cannot build a Django application *without* using these tools.  Once you've defined the models you want to use, you validate the models using 'python manage.py validate', and it reports any problems it found.\n<\/p>\n\n<p>\nWhile I was building this out, it told me that it couldn't determine the foreign keys I wanted, so I quickly figured out I had to put Sport first in the definition list, then Team, so that Game would know what to reference for the foreign keys.  It also told me that I had to set a 'related_name' attribute for my foreign keys in Game since I was reference the same model twice for a foreign key.  Very similar to how you can alias an association in Cake.\n<\/p>\n\n<p>\nOkay, once that's done I can then get it to generate the actual SQL needed to create those models using 'python manage.py sqlall rh' (with 'rh' being what I'm calling the application within Django).  In this case I'm using a Postgres backend, so it generated SQL specifically for Postgres.\n[sql]\nBEGIN;\nCREATE TABLE \"rh_game\" (\n    \"id\" serial NOT NULL PRIMARY KEY,\n    \"home_team_id\" integer NOT NULL,\n    \"away_team_id\" integer NOT NULL,\n    \"start_date\" timestamp with time zone NOT NULL,\n    \"sport_id\" integer NOT NULL\n)\n;\nCREATE TABLE \"rh_sport\" (\n    \"id\" serial NOT NULL PRIMARY KEY,\n    \"name\" varchar(30) NOT NULL\n)\n;\nALTER TABLE \"rh_game\" ADD CONSTRAINT sport_id_refs_id_66e4cc9c FOREIGN KEY (\"sport_id\") REFERENCES \"rh_sport\" (\"id\") DEFERRABLE INITIALLY DEFERRED;\nCREATE TABLE \"rh_team\" (\n    \"id\" serial NOT NULL PRIMARY KEY,\n    \"name\" varchar(30) NOT NULL,\n    \"sport_id\" integer NOT NULL REFERENCES \"rh_sport\" (\"id\") DEFERRABLE INITIALLY DEFERRED,\n    \"city\" varchar(30) NOT NULL,\n    \"state_province\" varchar(30) NOT NULL,\n    \"country\" varchar(30) NOT NULL\n)\n;\nALTER TABLE \"rh_game\" ADD CONSTRAINT home_team_id_refs_id_20e54e34 FOREIGN KEY (\"home_team_id\") REFERENCES \"rh_team\" (\"id\") DEFERRABLE INITIALLY DEFERRED;\nALTER TABLE \"rh_game\" ADD CONSTRAINT away_team_id_refs_id_20e54e34 FOREIGN KEY (\"away_team_id\") REFERENCES \"rh_team\" (\"id\") DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX \"rh_game_home_team_id\" ON \"rh_game\" (\"home_team_id\");\nCREATE INDEX \"rh_game_away_team_id\" ON \"rh_game\" (\"away_team_id\");\nCREATE INDEX \"rh_game_sport_id\" ON \"rh_game\" (\"sport_id\");\nCREATE INDEX \"rh_team_sport_id\" ON \"rh_team\" (\"sport_id\");\nCOMMIT;\n[\/sql]\n<\/p>\n\n<p>\nMan, it creates the indexes too!  Okay, now that I'm happy with that all I have to is 'python manage.py syncdb' and it goes and actually creates the tables (and indexes) for me.  I took a look at the 'schema' task that exists for the Cake console (try 'cake schema' if you have already configured the console for use and poke around) and it will do similar things for you.  Nicely done, gwoo!\n<pre>\n(chartjes@jackjack ~\/Sites\/rallyhat)\n>python manage.py syncdb\nCreating table rh_game\nCreating table rh_sport\nCreating table rh_team\nInstalling index for rh.Game model\nInstalling index for rh.Team model\n(chartjes@jackjack ~\/Sites\/rallyhat)\n>\n<\/pre>\n<\/p>\n\n<p>\nBingo, presto!  We have our tables created for us!\n<\/p>\n\n<p>\nI hope you've enjoyed this little glimpse into Django (and how it relates to CakePHP, in an obtuse way I guess).  Next time we invoke the spirit of Duran Duran, I'll be showing how I built a search form to find all games for a particular team, showing how Django's MTV (Model-Template-View) system works.\n<\/p>\n",
        "date": "2008-01-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Union Of The Snake, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/03\/union-of-the-snake-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWhile speaking with <a href=\"http:\/\/shiflett.org\/blog\/2007\/dec\/php-advent-calendar-day-24\">nate<\/a> last night via IM, he told me about the latest set of changes for CakePHP 1.2.  There is simply just too much to mention, so I suggest heading on over to the brand-spanking-new <a href=\"http:\/\/cakephp.org\">CakePHP home page<\/a> and checking out the <a href=\"https:\/\/trac.cakephp.org\/wiki\/changelog\/1.2.x.x\">changelog<\/a>.  There's a lot in there, but take the time to go through it. Besides, you might find that a particular bug that had been bothering you has been fixed.\n<\/p>\n\n<p>\nMy own modest contribution to the latest release was contributing some work in the 'bake' utility to allow you to select what database configuration you wanted to use (it was hard-coded before), and allowing you to bake a plugin (which is sort of like a stand-alone module within an application.   Yes, there were a few tweaks afterwards by gwoo but he told me (or maybe lied to me to soothe my ego) that a lot of my code was still in there.\n<\/p>\n\n<p>\nSo, CakePHP 1.2 stable looks like it's getting closer and closer, so don't be afraid to move from 1.1 to 1.2.  The improvements are worth it as 1.2.x is probably the most stable piece of \"alpha\" or \"beta\" software I've come across.\n<\/p>\n",
        "date": "2008-01-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New Release of CakePHP 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/02\/new-release-of-cakephp-12\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nSince the summer, something had been bothering me about PHP.  I couldn't put my finger on it but over the holidays I finally figured out what was wrong.  After ten years of working with PHP, I'm bored with it.  Every professional programming job I've ever had has involved PHP as the main language, with a smattering of things like SQL, Perl, Ruby and Javascript.  But it's always PHP at the core.\n<\/p>\n\n<p>\nSo what is there left for me to do with PHP?  I'm not about to write my own PHP framework as I <a href=\"http:\/\/www.cakephp.org\">have one I already like<\/a>, one that I use for my <a href=\"http:\/\/www.ibl.org\">simulation baseball league's web site<\/a>.  I'm not a C programmer, so diving into the internals of PHP to contribute that way is a no go.  No, it's time to put PHP aside (so to speak) and pour my energies into something else.\n<\/p>\n\n<p>\nA while back I tried the <a href=\"http:\/\/www.rubyonrails.com\">Rails thing<\/a>.  I liked it...because it was so different from PHP.  Ruby has such elegant syntax, reading like English in many ways.  I even got asked to create a training course for Ruby on Rails, but never got far with it (sorry <a href=\"http:\/\/mtabini.blogspot.com\/\">Marco<\/a>).  Once I started poking around more about Rails, I started to see things that made me uneasy about it:  issues about performance in high-traffic environments, the attitude of some of the more senior \"core\" guys in Rails, and the zealotry displayed by users of it.  \n<\/p>\n\n<p>Slam PHP all you want for it's syntax ($object->chaining->looks->weird()), it's inconsistency in function parameter order, the still-ongoing debate about how to implement namespaces, and the combo of powerful functionality combined with a low barrier of entry (thereby infuriating programming snobs).  But it gets shit done, plain and simple.  That's how Rasmus Lerdorf started off using PHP, that's how it will always be.  Elegance in code and proper programming techniques are the domain of the developer, not the language in my not-so-humble opinion.\n<\/p>\n\n<p>\nSure, Ruby is nice and Rails has all those cool magic functions but some stuff I read by <a href=\"http:\/\/www.zedshaw.com\/rants\/rails_is_a_ghetto.html\">Zed Shaw<\/a> (the creator of <a href=\"http:\/\/mongrel.rubyforge.org\/\">Mongrel<\/a> put into words a lot of what I had felt about Rails:  just not for me, I guess.\n<\/p>\n\n<p>\nSo what's left?  Not gonna go the Java route:  too much pain and suffering lies down that path.  So, I'm left looking at a language that is rock solid, has a great object model, has a good web application framework to help me get up to speed and lots and lots and LOTS of great documentation and tutorials:  Python.\n<\/p>\n\n<p>\nI won't be giving up getting PAID to do PHP code any time soon because I have a great job with a great bunch of guys, and I get to work from home.  But I just feel it's time to focus my energies on something else.  Python is very similar to Ruby, and let's be honest here:  I've got enough programming experience that there shouldn't be much of a learning curve for me to figure out Python.  Python code just looks nice and clean, less writing to get more done.  That's what I'm really looking for these days.\n<\/p>\n\n<p>\nThe simball web site continues to grow and get new features, so I will be leveraging CakePHP to the hilt in that respect.  It's an exciting time for CakePHP as they are heading towards 1.2 and preparing for 2.0.  But I am not sure what my contribution to the project will be any more, which hasn't been much lately but I am interested in helping push the CLI tools forward as not only can they help me, they can help other developers as well.  But it is time for a change.  Maybe one of these days I find a job programming in Python, or even manage to push Python in through the back door where I currently work.  But the time is absolutely right for me to start learning Python and make it a tool I want to use on a regular basis instead of it continually being on my list of \"things to do when I feel up to it\".\n<\/p>\n\n<p>\nI've got my copy of \"Dive Into Python\" in PDF, been going through the Python tutorials (wow, the interactive interpreter is great) and getting ready to bust out a Django install.  But make no mistake:  PHP pays the bills, but it's time to start using other people's tools to get the job done.  Time to quit fooling myself that I'm going to make some sort of earth-shattering contribution to PHP, and save my brainpower for learning Python the way I've learned PHP.\n<\/p>\n\n<p>\nWish me luck!\n<\/p>\n",
        "date": "2008-01-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Moving From Herding Elephants To Handling Snakes",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2008\/01\/01\/moving-from-herding-elephants-to-handling-snakes\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nNow, I was going to post something about how I was all pumped up about the whole \"I can run my app on Amazon now with EC2, S3 and now SimpleDB!\" but I got myself in trouble on a thread on the CakePHP mailing list.  A poster wsa asking something and I looked at the code and said to myself \"what the hell is he trying to do here?\" so I posted a response that pretty much said that.  I've noticed that these days it's difficult to be an ass on a mailing list because people get all defensive and things like that.  Maybe I should know better, but being an ass comes naturally to me and I don't really worry about people calling me names.\n<\/p>\n\n<p>\nI mean, I didn't understand what the poster was trying to do because it was obvious that it wasn't going to work, and I said so, and then he said something, and I said something and away we went!  Classic flamewar, brought on by not having to say those things to someone's face.  Those who know me will tell you that I am pretty much the same in person as I am in my e-mails, so I have no problem saying things directly to people.  But the internet is great for passive-aggressive geeks who lack the intestinal fortitude to say things like that to your face.<\/p>\n\n<p>\nAnyway, the guy got really defensive and flamed me hard.  Of course, I deserve some of that but it reminded me of what I had been feeling for a while now.  Some mailing lists get to the point where I get nothing out of being on the mailing list.  I've cultivated enough friendships through the list that I can hit up those people when I need solutions to stuff (like debugging a problem that I can't figure out with the Auth component in CakePHP despite me promising to contribute a chapter in the documentation about the Auth component).\n<\/p>\n\n<p>\nReading that list frustrates me in the same way that having to tell my two daughters the same things over and over and over and over again.  I don't want to have to repeat myself.  Yes, snarkiness and trolling is an inappropriate response to a lot of questions but damnit, it feels good sometimes to just lower the correctness filter and tell people how you feel!  If that makes me an ass, well, I guess I'm an ass then.  I'm just honest about it compared to a lot of other people.  But then again, isn't that like saying \"it's okay to drink so much because I've admitted I'm an alcoholic\"?\n<\/p>\n\n<p>\nSo I think I should either unsubscribe from some of these lists I'm on or simply lurk and not respond to questions.  I mean, if I find myself being a dick more often than I should then I guess it really means that I am the one with the problem and not the \"stupid n00bs\" (to use the proper derogatory term) who are flailing about trying to get answers to their questions.  \n<\/p>\n\n<p>\nI mean what's stupider:  people asking dumb questions or getting all riled up about those questions and feeding my inner bully?  Bah!   Crappy blog indeed.<\/p>\n",
        "date": "2007-12-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Now please, if you really must continue acting like an ass, take it to your crappy blog where ~7200 developers don't have to watch if they don't want to.",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/27\/now-please-if-you-really-must-continue-acting-like-an-ass-take-it-to-your-crappy-blog-where-7200-developers-dont-have-to-watch-if-they-dont-want-to\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nMany thanks to <a href=\"http:\/\/www.riapedia.com\/blog\/mike\">Mike Potter<\/a> for sending me a copy of O'Reilly's \"Programming Flex 2\", which had been on my Amazon Wish List.  It will be some light reading over the Christmas holidays.  Thanks Mike!\n<\/p>\n\n<p>\nNow, if I can scrape the money together for a copy of Flex Builder then I can perhaps use a Flex front end for my sporting road-trip planning site...\n<\/p>\n",
        "date": "2007-12-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Christmas With A Little Flex 2 It",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/20\/christmas-with-a-little-flex-2-it\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nSo, dear readers, I received some nice emails and comments from those you have used Zend_Service_Audioscrobbler, along with having a nice email conversation with Wil Sinclair from Zend (who is involved with Zend Framework).  Wil told me that backwards compatibility for the 1.5 version is important so I can't just rip everything up like I want to.  Well, I could but it probably wouldn't be accepted.  I'd have to write some letter to convince the Elder Gods Of Zend Framework of why I needed to break backwards compatibility.  In Wil's words: \"?I find it embarrassing and want to destroy the evidence? will not be considered a good enough reason. \".\n<\/p>\n\n<p>\nI had a good chuckle at that, but Wil did offer up a very good suggestion on how to go about the refactor that I hadn't thought of:  use a _call() method in the class to intercept all the old calls and translate them into new calls.  I would also get it to trigger a warning that the old method would be deprecated in a future release as a way to get people to upgrade to the newer ones.  Once I have some code, I will show it.  Thanks Wil!\n<\/p>\n",
        "date": "2007-12-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Story and Rebirth of Zend_Service_Audioscrobbler, Part 2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/18\/the-story-and-rebirth-of-zend_service_audioscrobbler-part-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nMany moons ago I set out (along with my friend <a href=\"http:\/\/derekmartin.ca\">Derek<\/a>) to make a contribution to <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> in the form of an add-on to let people easily access the <a href=\"http:\/\/www.audioscrobbler.net\/\">Audioscrobbler<\/a> web service.  We worked really hard, implemented all the features of the web service at that time.  Imagine our surprise when it got accepted as part of the 1.0 release of Zend Framework!  Awesome!  It even has <a href=\"http:\/\/framework.zend.com\/manual\/en\/zend.service.audioscrobbler.html\">it's own entry in the manual and everything.<\/a><\/p>\n\n<p>\nHowever, I have a confession to make, although it will not come as a surprise to anyone who reads my blog on a regular basis:  the code is a complete piece of shit.  There.  I said it.  How do I know that it's terrible and needs refactoring in a fierce way?  Check out this lovely snippet of code:\n~~~\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  USER  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n    \/**\n    * Utility function to get Audioscrobbler profile information (eg: Name, Gender)\n    * @return array containing information\n    *\/\n    public function userGetProfileInformation()\n    {\n        $service = \"\/{$this->get('version')}\/user\/{$this->get('user')}\/profile.xml\";\n        return $this->getInfo($service);\n    }\n\n    \/**\n     * Utility function get this user's 50 most played artists\n     * @return array containing info\n    *\/\n    public function userGetTopArtists()\n    {\n        $service = \"\/{$this->get('version')}\/user\/{$this->get('user')}\/topartists.xml\";\n        return $this->getInfo($service);\n    }\n\n    \/**\n     * Utility function to get this user's 50 most played albums\n     * @return SimpleXML object containing result set\n    *\/\n    public function userGetTopAlbums()\n    {\n        $service = \"\/{$this->get('version')}\/user\/{$this->get('user')}\/topalbums.xml\";\n        return $this->getInfo($service);\n    }\n~~~\nIt goes on and on and freakin' on like this.  SEVENTEEN methods just for dealing with user stuff.  This is insane.  Going back over the comments when I was building this thing I realized I totally ignored created elegant code and instead just 'banged out something that worked'.  So, I'm going back to the drawing board and are going to refactor this puppy so it makes sense.   First up, let's talk about dealing with users.  Wouldn't it be better if we had something like this:\n~~~\npublic function user($action) {\n     $service = \"\/{$this->get('version')}\/user\/{$this->get('user')}\/{$action}.xml\";\n     return $this->getInfo($service);\n}\n~~~\nNow, THAT looks like nice and elegant.  All I have to do is establish the convention on how to connect to various user-related web services.  That's as simple as comments in the file itself.  Now, to replicate what I was doing before, here are how simple the calls could be:\n~~~\n$zsa = new Zend_Service_Audioscrobbler();\n$zsa->set('user', 'chartjes');\n$zsa->set('version', '1.0');\n$userProfile = $zsa->user('profile');\n$userTopArtists = $zsa->user('topartists');\n$userTopAlbums = $zsa->user('topalbums');\n~~~\nI think I just got rid of something like 200 lines of code...and that's just in the user section.  Clearly, I majorly screwed it up when I did it the first.  Luckily for me, there is built-in testing for all this stuff so I can refactor and test as I go.<\/p>\n",
        "date": "2007-12-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Story and Rebirth Of Zend_Service_Audioscrobbler, Part 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/11\/the-story-and-rebirth-of-zend_service_audioscrobbler-part-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>There are usually lots of Has And Belongs To Many relationship questions on the CakePHP mailing list.  Since I am stupid about this stuff, I sought out Nate Abele and bugged him via IM until he agreed to give me an example of how to do this.  Thanks Nate!\n~~~\nclass Tag extends AppModel {\n \n    var $hasAndBelongsToMany = 'Post';\n   \n    function paginate($conditions = null, $fields = null, $order = null, $limit = null, $page = 1, $recursive = null) {\n        $tag = $conditions['tag'];\n        unset($conditions['tag']);\n \n        $this->hasAndBelongsToMany['Post'] = am(\n            $this->hasAndBelongsToMany['Post'],\n            compact('conditions', 'fields', 'order', 'limit', 'page')\n        );\n        return $this->findByName($tag);\n    }\n \n    function paginateCount($conditions = null) {\n        $tag = $conditions['tag'];\n        unset($conditions['tag']);\n        $tmp = $this->hasAndBelongsToMany['Post'];\n        $this->hasAndBelongsToMany['Post']['fields'] = array('id');\n        $tag = $this->findByName($tag);\n        $this->hasAndBelongsToMany['Post'] = $tmp;\n        return count($tag['Post']);\n    }\n}\n \n?>\n\n<?php \n\/\/ Controller code\n \n$data = $this->paginate('Tag', array('tag' => $tag));\n\/\/ Where $tag = some tag name\n~~~\nOkay, that's great but WHY does it work?  Normally, when you do pagination you have to pass it a bunch of different parameters so it knows what records you wish to include as part of the data set you want to paginate over.  In this example, you've already established that Tag HABTM Post.  In order for the pagination query to correctly pull out the Posts that are also associated with the Tag, you need to merge the parameters you passed in to your 'paginate' method so that the CakePHP data mapping functionality knows what associated records are to be included.  Then run your $this->findByName(...) and you're all set.<\/p>\n",
        "date": "2007-12-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Pagination With A HABTM Relationship",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/11\/cakephp-pagination-with-a-habtm-relationship\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you can read this, I've switched hosts from veggiehosting to slicehost.  While it's nice to support a Canadian company (Veggiehosting is in Toronto), I had been having lots of unexplained problems with my slice.  Slowdowns, unannounced outages, SSH connections taking 30 to 40 seconds to come up.<\/p>\n\n<p>\nSo, I'm all setup again and just have to finish pointing all my master DNS entries to the new slice.\n<\/p>\n",
        "date": "2007-12-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Switched Hosts",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/09\/switched-hosts\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI had recently upgraded to a new laptop (white MacBook) and had just gotten stuff setup up the way I liked.  So I continued doing development work for my latest work-related project and it was time to push the changes up to the staging server.  Oh wait, I hadn't installed Capistrano yet.  So I installed that and found, oooh, we moved up to version 2.1.  Cool!  Progress is good.<\/p>\n\n<p>\nSo I go to deploy and WTF!?!??! It won't work!??!  No error messages except to say the remote command failed.  I dig around on google.  The amount of documentation available for Capistrano 2.0 (or 2.1 for that matter) makes CakePHP's slowly-growing documentation look like Wikipedia.  God damn it, why would you release something that breaks so many things and then don't tell people WHY it won't work.  Maybe I'm doing something wrong, but I'll be damned if I can figure out what it is.\n<\/p>\n\n<p>\nSo, on to the backup plan.  <a href=\"http:\/\/phing.info\/trac\/\">Phing<\/a>, despite it's use of XML which I am not huge fan of in terms of it's use as a configuration file, but at least it's PHP and there is lots of documentation on how to use it.  Now, where did I put <a href=\"http:\/\/domain51.com\">Travis Swicegood's<\/a> e-mail address...\n<\/p>\n",
        "date": "2007-12-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Many Times Has This Happened To You?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/12\/04\/how-many-times-has-this-happened-to-you\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWe had a nice corporate retreat last week, an opportunity for all the members of <a href=\"http:\/\/www.xmlteam.com\">XMLTeam<\/a> to get together (and in some cases meet face-to-face for the first time) and discuss what's going on and figure out priorities over the next 12 months.  If you're expecting some company secrets here, you'll be disappointed. :)<\/p>\n\n<p>\nOne of the things that got bandied around was whether or not we would continue using <a href=\"http:\/\/exist.sourceforge.net\/\">eXist<\/a> to store the XML documents that the application is using or go with a <a href=\"http:\/\/xtoss.org\">database-driven solution<\/a>.  So, my partner on this project was tasked with figuring out how to update existing elements and attributes in this documents using eXist only.<\/p>\n\n<p>\nHow can I put this?  Oh, I know:  traversing through large complicated XML documents to find one element that you need to update when the location could be in multiple places sucks!  Part of the reason for this may be my lack of XPath foo within PHP itself.  Besides, if eXist can handle this for us then why shouldn't we leverage this?  I liken it to being able to do an UPDATE statement in a database.  I don't do a SELECT where I grab the whole data set, then drill down through the data looking for one specific row.  You do an update with the proper key.  So, Paul (that's the co-worker) got to work figuring out for me while I refactored code to be ready for it.  He got one script working (yay!) so I hacked away and got a very simple one to work today.  Here it is (with some info changed to protect the status of the project:\n[code]\nxquery version \"1.0\";\ndeclare namespace sportsml=\"http:\/\/iptc.org\/std\/SportsML\/2006-10-18\/\";\ndeclare namespace xts=\"http:\/\/www.xmlteam.com\";\ndeclare namespace request=\"http:\/\/exist-db.org\/xquery\/request\";\ndeclare namespace xmldb=\"http:\/\/exist-db.org\/xquery\/xmldb\";\ndeclare namespace util=\"http:\/\/exist-db.org\/xquery\/util\";\n\ndeclare variable $league := request:get-parameter(\"league\", \"\");\ndeclare variable $league-name := request:get-parameter(\"league-name\", \"\");\ndeclare variable $team-key := request:get-parameter(\"team-key\", \"\");\ndeclare variable $colors := request:get-parameter(\"colors\", \"\");\ndeclare variable $location := request:get-parameter(\"location\", \"\");\ndeclare variable $name := request:get-parameter(\"name\", \"\");\ndeclare variable $nickname := request:get-parameter(\"nickname\", \"\");\ndeclare variable $abbreviation := request:get-parameter(\"abbreviation\", \"\");\n\ndeclare variable $league-doc := concat('\/db\/', $league, '\/dynamic-resource-file\/', $league, '.xml');\n\n<dummy>\n{\nif (doc($league-doc)\/sports-content\/statistic\/group\/\/team-metadata\/@team-key=$team-key) then\n\nfor $team-metadata in doc($league-doc)\/sports-content\/statistic\/group\/\/team-metadata[@team-key=$team-key]\nreturn\nupdate replace $team-metadata with\n<team -metadata>\n{attribute team-key {$team-key}}\n{attribute colors {$colors}}\n<name>\n{attribute first {$location}}\n{attribute full {$name}}\n{attribute nickname {$nickname}}\n{attribute abbreviation {$abbreviation}}\n<\/name>\n<affiliation>\n{attribute membership-type {\"league\"}}\n{attribute membership-key {$league}}\n{attribute membership-name {$league-name}}\n<\/affiliation>\n<\/team>\n\nelse\n\nreturn\n} \n<\/dummy>\n[\/code]<\/p>\n\n<p>\nSo, this sits in eXist, which is running on top of <a href=\"tomcat.apache.org\">Tomcat<\/a> and I send the data in by POST-ing to the script.  I was all set to start using cURL for this task but a quick search on the net found <a href=\"http:\/\/netevil.org\/blog\/2006\/nov\/http-post-from-php-without-curl\">this blog posting by Wez Furlong<\/a> showing how to use streams to do what most people automatically associate with having to use cURL for.  I liked it so much I went and refactored some other code that was using cURL to use that stuff instead.  It's always nice to find out that something you've been doing can still be done, but with fewer lines of code and *still* be elegant.\n<\/p>\n\n<p>\nI'm off to look closer at streams in PHP 5 and see what other hidden treats are there...\n<\/p>\n",
        "date": "2007-11-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "More XML-DB Fun!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/30\/more-xml-db-fun\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I get emails all the time from recruiters, and I usually politely respond that I'm not interested since I'm usually pretty happy with the job I have.  I recently got one from Jason Squires at <a href=\"http:\/\/www.squiresresources.com\">Squires Resources<\/a> that I thought I should share with my readers.  Please be advised that I am not receiving any sort of compensation from Squires Resources in exchange for putting this information up here.  I just thought people should be aware of the kind of cool opportunities that are out there.\n<blockquote>\nTechnical Solutions Specialist - Development\nA unique opportunity awaits in sunny, sub-tropical Bermuda!\n \nOn behalf of a premier ISP\/Communications company in Bermuda we are seeking an experienced and motivated Developer who would be interested in relocating to join their dynamic team.\n \nThe successful candidate will be involved in:\n- Applications design, Online (live web) and offline (supporting)applications development applications development, and Recurring HTML content.\n- Working with engineering in evaluating requirements and developing plan for project resolution.\n- Coordinating with Engineering on quality and design changes.\n- Providing technical support to internal resources on internal systems.\n- Providing superior customer service either on site or over telephone.\n \nRequirements\n- Degree\/Diploma in Computer Science or equivalent work experience.\n- Must have: Excellent PHP skills including Object Oriented Design\n- Excellent knowledge of web development technologies such as XHTML, CSS, XML, Web Services, SSL, OOD, AJAX, ASP.NET.\n- In depth knowledge of SQL, PL\/SQL language\n- Zend Certified Engineer would be a strong asset but not required\n \nOur client offers a competitive compensation and benefits package (with only 4.75% tax!) along with the opportunity to live and work in beautiful Bermuda.   Due to the relocation involved, candidates should be highly mobile and adaptable, with outside interests that correspond to Bermuda's idyllic and unique living environment. \n \nFor more information or to explore this unique position, please contact Jason Squires, Squires Resources Inc.  705.725.7660 ext 23 or jason@squiresresources.com      \n \nThousands of professionals are enjoying unique careers and exceptional lifestyles in Bermuda and the Caribbean...  Please visit us online at www.squiresresources.com to find out how you can join them!\n<\/blockquote><\/p>\n",
        "date": "2007-11-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Want To Write PHP Code in Bermuda?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/28\/want-to-write-php-code-in-bermuda\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I recently bought a new MacBook (took the huge street-cred hit by getting a 13\" white MacBook) and are busy getting my development environment up and running.  I had heard some rumblings that things weren't quite what they seemed when it came to getting PHP up and running in Leopard, and spent much time googling for things.<\/p>\n\n<p>\nMy main dev environment is Apache2+PHP+MySQL\/Postgres, so I searched around and found that Sean Coates (from <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> and a guy I've had several beers with at conferences) put together some great instructions up on <a href=\"http:\/\/blog.phpdoc.info\/archives\/83-php-5.2.5-on-Leopard.html\">on getting PHP 5.2.5 up and running on Leopard<\/a>.<\/p>\n\n<p>\nIf you are upgrading to Leopard, those instructions are the best I've seen so far AND do nothing to mess up your existing Leopard Apache and PHP installation.<\/p>\n",
        "date": "2007-11-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Developing with PHP on Leopard",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/26\/developing-with-php-on-leopard\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As devoted as I am to the use of frameworks (although not THAT devoted that I would take the anti-lazy-programmer's route of porting an existing non-frameworked app to use a framework) I do enjoy seeing what frameworks in other languages are up to.  I'd like to share three with you that I've been following for a variety of reasons (mostly curiousity).<\/p>\n\n<p>\nI've mentioned <a href=\"http:\/\/erlyweb.org\/\">ErlyWeb<\/a> in this blog before.  Created by <a href=\"http:\/\/yarivsblog.com\/\">Yariv Sadin<\/a>, it's a web framework built to run on top of <a href=\"http:\/\/www.erlang.org\/\">Erlang<\/a>, which is a programming language created by Ericsson (the cellphone people) and open sourced a while back.  Why do I feel it's worth checking out?  Erlang is legendary in it's ability to supply a robust concurrent environment.  When you use it to run phone switches, it has to stay up!  99.999% uptime makes Erlang barely break a sweat.  Now, as web 2.0 morphs into Web Pi, there will be more demand for the type of interactive web apps that require statefull connections.  The most common \"Ajax design pattern\" that requires concurrency is <a href=\"http:\/\/en.wikipedia.org\/wiki\/Comet_(programming)\">comet<\/a>, where you want to continually push information to the client without it having to request that information.  Given that much of the web is stateless, this is usually implemented as 'pull' with clients repeatedly polling data sources.  Anyway, that's a whole another discussion and I'd want to do lots more research before I get into that.  Anyway, Erlang is ideally suited for large-scale interactive applications that would be sending information back and forth.  Check out what Yariv's been talking about.<\/p>\n\n<p>\nMy friend <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a> is a Perl hacker and he mentioned <a href=\"http:\/\/catalyst.perl.org\">Catalyst<\/a> to me and then I heard a great podcast over at <a href=\"http:\/\/www.twit.tv\/floss\">FLOSS Weekly<\/a> about Catalyst.  Now, I'm not a Perl guy (I've used a little bit of it as part of the data-munging effort for the game the <a href=\"http:\/\/www.ibl.org\">IBL<\/a> uses) but if you've made a big investment in Perl and want to move forward with some more modern web applications then I think Catalyst is a great option.  Listen to the podcast.\n<\/p>\n\n<p>\nFinally, I took a very quick look at a web framework written in <a href=\"http:\/\/www.scala-lang.org\">Scala<\/a> called <a href=\"http:\/\/liftweb.net\/index.php\/Main_Page\">Lift<\/a>.  There's a <a href=\"http:\/\/http:\/\/radar.oreilly.com\/archives\/2007\/05\/liftscala_for_w.html\">great write-up about it<\/a> by Tim O'Reilly, and I think I will look into it further.  Why should I care about Scala?  Well, it looks very similar to Ruby in it's syntax (and I have a smattering of Ruby experience) and it's multithreaded (which should theoretically scale better on a single machine I believe).  Besides, it never hurts to learn a new language.  Evolve or die, right?  I have a VPS that I can fool around on so why not see if Lift (and Scala) is worth investing some time into.\n<\/p>\n",
        "date": "2007-11-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Looking Outside The Box",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/20\/looking-outside-the-box\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nThere have been some mention in the comments for <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/09\/11\/a-hopefully-useful-tutorial-for-using-cakephps-auth-component\/\">this post<\/a> for clarification on the 'remember me' cookie that is mentioned in the code.  I thought I'd elaborate a bit on how I used it for this example.<\/p>\n\n<p>\nAs part of a project I was working on while at <a href=\"http:\/\/www.cakedevelopment.com\">CDC<\/a> there was a requirement for there to be 'Remember Me' functionality for the authentication system.  I'm sure you've seen this elsewhere.  Implementing such a thing is actually very simple, but I should've clarified that 'remember me' functionality is NOT part of the Auth component.  \n<ul>\n<li>When they go to log in, check to see if there is a 'remember me' cookie present.<\/li>\n<ii>If there is, read in the cookie (containing the user name and encrypted password.  Never EVER put plaintext passwords in a cookie!) and then compare those values to the database table (or whatever data source you are using) that you are authenticating against.  If they match, then set the user as being 'authorized' and they can proceed on their merry way.  Otherwise, delete the cookie (it may be a bad cookie) and send them to the login screen\n<li>If there is no cookie, let the person log in as usual and if they are successfully authenticated then store that information  in your 'remember me' cookie before you let them proceed to whatever areas require authorization.<\/li>\n<\/ii><\/ul>\n<\/p>\n\n<p>\nNow, to drop into CakePHP for a minute the key thing that was left out of the previous blog posting is *how* you get the Auth system to accept the values in the cookie.  It took a quick IM conversation with <a href=\"http:\/\/rd11.com\/\">gwoo<\/a> to jog my memory.\n~~~\nfunction beforeFilter() {\n     \/**\n     * Code that does other Auth stuff goes before this...\n     *\/\n\n     \/**\n     * If you've checked the data against your auth model,\n     * you have to put that info into $this->data so that the\n     * Auth component can use it\n     *\/\n     $this->data['User']['username'] = $cookie['username'];\n     $this->data['User']['password'] = $cookie['password'];\n}\n~~~\nThe password stuff is critical here.  By default, the Auth component will take any password that you've entered via a form and then hash it using the default for Auth (this value is configurable, check the Auth section API to see how to do it).  So, make sure that the *encrypted* password value is being placed into $this->data, and consequently stored in your cookie.  In the example above 'User' is the model being authenticated against, so feel free to change it if you're using something else.  Keep in mind it's probably not a good idea to put a field called 'password' in your cookie, so feel free to change it to something less obvious or come up with another method of obscuring the true contents of the cookie.\n<\/p>\n\n<p>\nHope that clears up the 'remember me' cookie mystery for people.  Thanks again to gwoo for helping me rummage around in my brain for the details.\n<\/p>\n",
        "date": "2007-11-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Follow-up to \"A Hopefully Usefull Tutorial For Using CakePHP's Auth Component\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/20\/follow-up-to-a-hopefully-usefull-tutorial-for-using-cakephps-auth-component\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nPeople on the CakePHP mailing list often complain about not being able to get CakePHP configured properly, with CakePHP usually displaying all sorts of weird errors.  Telling people these errors is very helpful, because it shows us that the problem almost always is people not following the installation instructions as outlined in the manual.  Those instructions are there for a reason.  Anyway, I guess I'm one of the lucky ones who gets it to work properly almost every time, hell even working with non-standard web servers like nginx.  Anyway, the latest version of CakePHP 1.2.x.x as I write this has deprecated a lot of things in the configuration file...and people are simply ignoring the warning messages and complaining about why things don't work.\n<\/p>\n\n<p>\nSince I desire to not be as harsh as I have been in the past, here is some advice that I posted to the mailing list that I thought I would share:\n<blockquote>\nPerhaps I'm just lucky and Murphy is smiling down on me from above,\nbut I am using the latest version of CakePHP via SVN *and* have my\ncake directory outside of app and I have NO problems getting my stuff\nto work.\n\nI followed all the notices that Cake threw when I updated the Cake\ncore, changed the code that it mentioned and that was it.  Really.  In\nfact, here's my config file for everyone to see:\n\nhttp:\/\/bin.cakephp.org\/view\/1205137498\n\nI continue to be baffled by the problems people seem to be\nexperiencing when my own configuration has been just fine.  I've found\nthree things that help\n\n1) pay attention to the warning messages that CakePHP spits out as\nthey usually point at the problem\n\nWhen I upgraded, I saw lots of warnings about deprecated functionality\nand suggestions on how to get rid of those problems.  Those error\nmessages are there for a reason, ignore them at your own peril.  They\ntell you EXACTLY what to do.\n\n2) permissions for the tmp directory really do matter\n\nUse the firehose permission level if you're on some sort of UNIXy\nsystem:  chmod -R 777 $APP\/tmp\n\n3) make sure you do your dev work with the debug level to 1 and save\ndebug level 0 for your production apps.\n\nThat little tip will mean you will never have to mess around with\ndeleting and recreating your $APP\/tmp directory.\n\nI hope this helps those who seem to be struggling to get their CakePHP\nconfigurations to work properly.  I did all the things above I\nmentioned and continue to have smooth sailing whenever I upgrade from\nSVN (which is usually every morning).\n<\/blockquote>\n<\/p>\n",
        "date": "2007-11-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Having Problems When Upgrading CakePHP?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/15\/having-problems-when-upgrading-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've just increased the size of the slice I host this blog on, and are also experimenting with seeing if APC can help distribute the load.  If you see weird things happening over the next few days, let me know...<\/p>\n",
        "date": "2007-11-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Server Shakeout",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/14\/server-shakeout\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIn my quest to try and learn new things (more like trying to avoid being bored with stuff I'm doing) I decided to take a look at another version control system I had heard about called <a href=\"http:\/\/git.or.cz\/\">Git<\/a>.  According to it's <a href=\"http:\/\/en.wikipedia.org\/wiki\/Git_(software)\">entry over at Wikipedia<\/a> it is \"..a <a href=\"http:\/\/betterexplained.com\/articles\/intro-to-distributed-version-control-illustrated\/\">distributed revision control<\/a> \/ software configuration management project created by Linus Torvalds.\"  Yes, the same Linus Torvalds who created Linux.  When I first heard about Git I thought to myself \"why should I care that Subversion supposedly sucks and that distributed version control is awesome?\".  So I decided to dig a little further.\n<\/p>\n\n<p>\nI found <a href=\"http:\/\/video.google.com\/videoplay?docid=-2199332044603874737\">this video of Linus talking about Git at Google<\/a> and while I did laugh at Linus' professed hatred for all things CVS (and it's hip descendant SVN) I did grow to understand git.  Basically, he created the version control system *he* wanted to use for the Linux kernel after his experiences with <a href=\"http:\/\/www.bitkeeper.com\/\">BitKeeper<\/a> led him to stop using it, but there was no way he could go back to the old patches-and-tarballs way they used to maintain the Linux kernel.  Just too many people using it now I guess.  So, he hit on the idea of using a bunch of existing tools, hacking them together with some glue of his own and creating a distributed version control system that he could use on a daily basis.<\/p>\n\n<p>\nLinus had a problem with CVS\/SVN because of a few things as far as I can tell:  branching and merging was terrible (I agree that branching and merging is not the easiest thing to do in SVN if you get to any level of complexity) and he disagreed with the 'you need access in order to commit things' model that CVS\/SVN promotes.  As someone who has commit-level access to the CakePHP repository, I can understand why that bothers some people:  once you can commit stuff you can wreak a lot of havoc with bad commits.\n<\/p>\n\n<p>\nMy understanding of a distributed version control system is that anyone can grab a copy of the repository and start playing with it locally, making their own commits.  Once they are happy, you can then push those changes up the chain to where yo u originally got them from and then continue merrily on your way.  The people who are working off of the source of your ORIGINAL checkout can then choose to pull your changes into their working copy whenever they are ready, and so on, and so forth.  I hope I'm not oversimplifying things here, and Linus does a really good job of explaining this in the talk.\n<\/p>\n\n<p>\nThe main advantage seems to be that it's greatly increased the speed at which merges and commits can happen.  Also, because you have a copy of the entire repository at your fingertips you don't need to be connected to the net in order to commit stuff:  the commits happen locally and don't go anywhere until you execute a git-push, which sends those changes back to the original source of your checkout.  Randall Schwartz, who gave a <a href=\"http:\/\/video.google.com\/videoplay?docid=-3999952944619245780\">follow-up talk about git<\/a> talked about how nice it was that he could do stuff on his laptop on the plane, committing and reverting changes locally.\n<\/p>\n\n<p>\nSo, I installed git both on my laptop and my VPS that hosts this blog and decided to try it out.  After fumbling around in the documentation for a while I figured out how to (a) create the repository, (b) how to get a copy of the repository, (c) how to commit and revert things and (d) how to push those changes back to the main repository.  Really, not that much different from how I use SVN these days...except I think it's neat how I can do local commits and know that if someone else was working on the project, they could mess around locally committing things and not run the risk of accidentally blowing something away.  Maybe I need to get another developer involved in the projects I'm trying out with git to see how this stuff will work.\n<\/p>\n\n<p>\nSo, right now I've got <a href=\"http:\/\/www.ibl.org\">the IBL web site<\/a> and Rallyhat using git.  No complaints, and I really do see how fast the commits and updates (in this case git-commit and git-pull on the servers where the projects are in production) are compared to SVN.  Of course, I've automated deployment of these projects using Capistrano. :)\n<\/p>\n\n<p>\nNow, don't take my word for it but I really think that distributed version control systems are a great idea that is starting to gain traction.  The Linux kernel uses it, and I believe the KDE project is using it as well.  I suggest you do what I did before I decide to actually use it:  watch the two videos I mentioned above, do some research into how distributed version control systems should work and then actually try it out.  You might be surprised.\n<\/p>\n",
        "date": "2007-11-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Git Mah Code From Th' Repository, Ma!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/13\/git-mah-code-from-th-repository-ma\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<ul>\n<li>Why the heck can't I find any info on reusable views in Code Ignitor so I can quit duplicating code I see all over the place?<\/li>\n<li>Found a cool article on using <a href=\"http:\/\/tech.blog.box.net\/2007\/06\/20\/how-to-debug-php-with-vim-and-xdebug-on-linux\/\">debugging PHP using XDebug in vim<\/a>.  Sometimes Komodo gets resource hungry and a quick drop into vim usually makes me feel better.<\/li>\n<li>Man, how much time should someone spend refactoring code they've inherited?  Is it really true that people think everyone else's code is ugly and theirs is a paragon a beauty?<\/li>\n<li>Working on the script for a <a href=\"http:\/\/devzone.zend.com\/tag\/PHP_Abstract\">podcast<\/a> entitled 'Coding Standards Only Matter When Things Go Wrong'<\/li>\n<li>Trying to figure out if I can fit in an opportunity to teach some online courses into my current employment<\/li>\n<li>Rallyhat (my sporting road trip planning site) is actually in the 'designing screens on paper' stage.  Maybe I will scan some notes for showing people in another post<\/li>\n<li>Jeff Griffiths from <a href=\"http:\/\/www.activestate.com\">ActiveState<\/a> (Hi Jeff!) emailed me to ask me to provide some feedback on using CakePHP with <a href=\"http:\/\/community.activestate.com\/products\/Komodo\">Komodo<\/a>.  If anyone else is building CakePHP apps with Komodo, let me know how you're making out.<\/li><\/ul>\n",
        "date": "2007-11-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: November 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/07\/whats-in-chris-brain-november-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs loyal readers to my blog know, my <a href=\"http:\/\/www.xmlteam.com\">employer<\/a> has committed to using <a href=\"http:\/\/codeigniter.com\">CodeIgniter<\/a> for projects, although I hold out hope that new projects with my beloved <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a>.  That's okay, I'm a big boy and can handle working with different things as clients (and bosses) demand.  So, after maybe a week and a bit of working with CodeIgniter I thought I'd talk about it.<\/p>\n\n<p>\n<b>Once you know one MVC framework, you know them all<\/b>.  My experience with CakePHP and <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> means that understanding how CodeIgniter works in the context of MVC is simple.<\/p>\n\n<p><b>CodeIgniter mixes OOP and functions<\/b>.  CakePHP has a much, much stronger commitment to using objects to access core functionality.  A quick example is this is the way both frameworks handle forms in the views.\n~~~\n\/\/ CakePHP\necho $form->create(...);\necho $form->input(...);\necho $form->select(...);\necho $form->submit(...);\necho $form->end();\n\n\/\/ CodeIgniter\necho form_create(...);\necho form_input(...);\necho form_dropdown(...);\necho form_submit(...);\necho form_close();\n~~~\nBut within the controllers you are calling methods of objects to do things.\n~~~\n$data = $this->defaultdata();\n$this->load->model('Leagues');\n$lookupResults = $this->Leagues->getLeagues();\n$data['lookupResults'] = $lookupResults;\n$data['mainview'] = 'league_browse';\n$this->load->vars($data);\n$this->load->view($data['layout']);\n~~~\nNow, take this with a grain of salt because I am inheriting other people's code here so this might not be 'CodeIgniter best practices' but I think a little consistency would go a long way in the decision to use either functions or objects.\n<\/p>\n\n<p>\n<b>Lack of conventions makes Chris sad<\/b>.  I am very used to CakePHP's habit of just knowing where things are supposed to be instead of me having to specify everything.  Yes, I understand that CodeIgniter is all about doing it your way, but I've grown to like the CakePHP way.  I like that my actions in the controller know where to find the view...as long as I've followed the conventions.<\/p>\n\n<p>\n<b>CodeIgniter's User Guide Is Awesome<\/b>.  Logical groupings, cool Web 2.0 features when you click on the table of contents.  Yes, we finally have some <a href=\"http:\/\/tempdoc.cakephp.org\">documentation for CakePHP 1.2 available<\/a> but it is 'alpha with extreme prejudice' in it's current form.  I'm not saying CakePHP should copy what CodeIgniter is done.  I'm sure there will be an awesome final place for the CakePHP 1.2 documentation.  But for someone starting out with CodeIgniter, the user guide is an essential tool.<\/p>\n\n<p>\n<b>No built-in associative data mapping makes Chris sad<\/b>.  But then again, I'm not really having to deal with much in the way of databases on this current project due to us using eXist.<\/p>\n\n<p>\nSo, there you have it.  A very, very early look at my thoughts on CakePHP vs. CodeIgniter.  I'll post the more interesting things I come across along the way as my current project gets built out more...<\/p>\n",
        "date": "2007-11-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "10 Days Later:  Early Impressions of CakePHP vs. CodeIgniter",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/11\/02\/10-days-later-early-impressions-of-cakephp-vs-codeigniter\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nSo, I need to deploy changes to a work-related project from my laptop to a dev server.  I was told that one of our other developers had a solution using shell scripts, but I couldn't figure out a problem with it and didn't want to hack away at his scripts in case I broke something he was depending on.  So, I figured it was time to go back to Capistrano and simply hack my deploy script I had used <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/09\/21\/deploying-cakephp-applications-using-capistrano\/\">for another deployment<\/a> to fit this circumstance.<\/p>\n\n<p>\nSo, off I went hacking away at it and testing it.  Then I discovered something:  I need to be able to send a password for both running some commands on the remote server and for checking some stuff out of a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Subversion_%28software%29\">SVN<\/a> repository.  So, I did some googling and here's what I came up with:<br \/>\n~~~\ntask :deploy do\n     run \"sudo cp -r #{deploy_to} #{deploy_to}-old\" do |ch, stream, out|\n          ch.send_data \"#{sudo_password}\\n\" if out =~ \/Password:\/\n     end\n\n     run \"sudo svn --quiet --force #{checkout} #{repository} #{deploy_to} do |ch, stream, out|\n          ch.send_data \"#{svn_password}\\n\" if out =~ \/.xmlteam.com's password:\/\n     end\nend\n\ntask :rollback do\n     run \"sudo mv -r #{deploy_to}-old #{deploy_to}\" do |ch, stream, out|\n          ch.send_data \"#{sudo_password}\\n\" if out =~ \/Password:\/\n     end\nend\n~~~\n<\/p>\n\n<p>\nAll those #{...} values are simply variables I defined in the recipe file.  You don't actually expect me to tell you what my passwords are for access to various machines, do you? :)  I remember how difficult this stuff was to do in previous versions of Capistrano, requiring all sorts of hacks to make it deploy non-Rails applications but they removed that dependency with Capistrano 2.0, thus making it possible to use Capistrano with ANY project, not just a Rails one.  Although you can use a lot of built-in magic if you use Capistrano to deploy a Rails project.<\/p>\n\n<p>Now that I know how easy it is to pass data to the remote server, I can actually envision some fairly complicated deployment scripts.  Hope this helps out other people who've come here and read my other post about using Capistrano to deploy their CakePHP projects.<\/p>\n",
        "date": "2007-10-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "More Fun With Capistrano and PHP Applications",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/31\/more-fun-with-capistrano-and-php-applications\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I know what you're thinking:  \"Chris, aren't you supposed to be talking about CakePHP, or PHP, or your ever-changing working conditions?!?\".  Alas, enough about my storied working career.  Working <a href=\"http:\/\/www.xmlteam.com\">here<\/a> now means that I'm going to become Mr. \"I know how to manipulate XML\" in a hurry.  Lucky for me, I can use PHP 5 and have access to SimpleXML to make fooling around with raw XML (is that actually a term?) so much easier.  I remember working with <a href=\"http:\/\/www.sportsticker.com\">PA Sportsticker<\/a> XML feeds and having to write code to parse stuff out in PHP 4.  Compare that to using SimpleXML in PHP 5.  Go ahead, I'll wait while you go and look it up.<\/p>\n\n<p>\nSo, for a project I'm working on (no names until it goes beta) I'm having to write and retrieve information from an XML document repository system (<a href='http:\/\/www.caucho.com\/resin-3.1\/'>Resin<\/a>  + <a href='http:\/\/exist.sourceforge.net\/'>eXist<\/a>).  Now, I'm not too bad with database stuff but this system doesn't use SQL.  It uses something called <a href=\"http:\/\/www.w3.org\/TR\/xquery\/\">XQuery<\/a> to retrieve information.  I can pull back XML snippets, whole XML documents, or just extract data from it.  On the storing side, you can simply insert whole XML documents into it and then eXist takes care of indexing etc so you can look for information inside those documents.<\/p>\n\n<p>\nLucky for me, my company has a subscription to O'Reilly's <a href=\"http:\/\/safari.oreilly.com\">Safari<\/a> system so I grabbed 'XQuery Kick Start' and started reading up on how xQuery works and how I can cheat and only learn what I needed to do for this first task. So, what I had to do was this:\n<blockquote>\nGive me all games that belong to this league\n<\/blockquote>\nSo, I had the key for the league, and every document that was a game has the key for the league as an attribute.  Now, if I was doing SQL you'd have something like:\n<code>\nSELECT * FROM games WHERE league_id = $leagueKey\n<\/code>\nand then you iterate through the results like normal.  Let me tell you, xQuery is VERY different.  <a href=\"http:\/\/bin.cakephp.org\/saved\/24839\" target=\"new\">Here's what it looked like<\/a>.  My apologies for the link to the saved paste but it was looking terrible in preview. :)\n<\/p>\n\n<p>Wow, not too intuitive at first glance, is it.  Anyway, here's what the output looked like:\n<code>\n2007-10-25 01:00:00AM|Monrovia Madness|Monrovia Madness,\n2007-10-26 04:00:00AM|Monrovia Madness|Monrovia Madness,\n<\/code>\nNote the extra ',' at the end.  I'll have to figure out how to stop it from doing that so I don't have to do any code workarounds based on the output.  Sorry for the ultra-boring and non-informative test data, but you gotta start somewhere.  Now, the syntax does actually make a little bit of sense to me now that I've had the chance to muddle through from where I started.  I'll keep you posted as I get into some more-than-basic uses of xQuery.\n<\/p>\n",
        "date": "2007-10-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Babysteps with xQuery",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/26\/babysteps-with-xquery\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In my previous post, I was asked in the comments to share my thoughts on telecommuting.  As a little background, I started telecommuting part-time back in March, then full-time starting at the beginning of July after a project fell through.  At that time, I had gotten totally sick of a long commute from home in a little town just outside Toronto to my job in downtown Toronto.  90 minutes in, almost two hours home via commuter train and bus.  Sure, I didn't have to drive but almost 5 years of that ground me down and made me yearn for a job where I could work from home.  While I certainly feel a lot less stressed, telecommuting is not without it's challenges.<\/p>\n\n<p>\nThe biggest problem is lack of human interaction.  Yes, I can chat all day long with people via IM (both of my telecommuting jobs use IRC channels on freenode.net as a way for the team to gather) but it still doesn't match being able to see people face-to-face.  Despite being labeled as grumpy by some people (my long-suffering wife being one of them) I still enjoy talking to my co-workers, having lunch with them, etc.  When I'm down in my basement office (currently unfinished with lots of junk that needs to be dragged away to the dump and then renovations looming on the horizon) all I can do is talk to my cats...when they bother to come downstairs.   Do I get lonely?  Sure do, but since I'm home I get a mini-break at around 2:45PM to get my oldest daughter from school and I get 15 minutes of talking to her and the other parents waiting around to get their kids from school as well.  Then I tell her to go and do her homework. :)<\/p>\n\n<p>\nNow, although I am an experienced PHP programmer my career has been one of breadth, not depth.  I've worked on a lot of different things, but only one of them was a really in-depth project where I got to know it inside and out.  That was the adult dating site, and even that level of in-depth knowledge started to fade 2 years into my 4 year run there.  So, I'm constantly having to learn new things and it doesn't always go well.  Sitting in your house alone isn't good when you get frustrated with your inability to figure things out to the degree you want.  So, even though you are isolated remember that there are people out there who can help you.  Don't feel stupid about asking questions, although my massive ego does get in the way sometimes of asking questions.<\/p>\n\n<p>\nBut most of all, you need to learn to focus on the task at hand.  Just because you're at home wearing your jammies (yes, sometimes I've kept my pj's on when I've dropped my kids off at school and day care), with a setup just the way you like it and no boss walking around peering over your shoulder doesn't mean it's a license to screw around.  Yes, we all get distracted at times.  I'm no saint, and it's easy to get distracted with non-work things.  Like the internet.  Just remember that your ability to get the job done the way the people who are paying the bills want it done will determine how long you get to work from the comfort of your own home instead of in a cubicle where your boss can keep an eye on you.\n<\/p>\n\n<p>\nWithout that constant presence hovering around (\"Is my boss going to come over any minute now to talk about something unrelated to work?\") I feel a lot more comfortable digging around to find answers via Google to the set of problems facing me.  Or taking the time to actually read some documentation about something related to programming.  Or experimenting with some prototyping of code before getting on with the actual problem itself.  You know, the type of things all good programmers are supposed to be doing.  Or at least what *I* think they are supposed to be doing.<\/p>\n\n<p>\nAs it stands right now, it would be very difficult for me to go back to an office job because I've set my life around being able to work from home:  the freedom to go pick up my daughter from school and not pay for after-school care, the freedom to quickly pop out to run an errand that normally would have to get done after work, the freedom to shift my work hours if Real Life intrudes.  The self-discipline required can be difficult for some (I have struggled with it from time to time) but I keep reminding myself that learning to work productively from home is a small price to pay for avoiding long commutes to work and being a slave to someone else's schedule (be it train, bus, or local traffic patterns).<\/p>\n\n<p>\nThere seem to be more and more telecommuting jobs available as companies start to realize that it is possible to run a distributed business, and that if you are willing to trust the people you have hired to work without physically being there you can accomplish a lot.  It's really all about trust:  you are trusting that the people you have hired can get the job done without you actually having to watch them from your office.<\/p>\n",
        "date": "2007-10-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Perils Of Telecommuting",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/23\/the-perils-of-telecommuting\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Like I said in a previous post, I'm never out of work for too long these days.  Besides, it makes the wife nervous about our ability to pay the mortgage if I sit around the house in grubby clothes not doing anything of substance.  Starting Monday I will be working with the folks from <a href=\"http:\/\/www.xmlteam.com\">XMLTeam<\/a> from the comfort of my basement lair, doing programming work for them.  Yes, another telecommuting job.  Better to be lucky than good. :)<\/p>\n\n<p>\nSo why am I working for them?  Besides the opportunity to continue working from home, they are in the sports data business.  They provide data feeds, in XML format using the <a href=\"http:\/\/www.sportsml.org\">SportsML<\/a> standard, and have some pretty impressive clients on board (many subscription-based clients) and some of the upcoming projects sound exciting (two pretty cool baseball-related things).  Since I'm a baseball freak, this is right up my alley.<\/p>\n\n<p>Sounds good, right?  Well, not everything is perfect.  They don't use CakePHP. ;).  They preferred <a href='http:\/\/www.codeignitor.com'>CodeIgnitor<\/a> when they needed some framework stuff done.  Not that there is anything wrong with CodeIgnitor, as it has it's place.  My problem is that I can't keep jumping from framework to framework all the time.  My brain gets confused about how to solve things sometimes.\n<\/p>\n",
        "date": "2007-10-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I've Joined The XMLTeam Team",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/19\/ive-joined-the-xmlteam-team\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, it took some time but thanks to the help of my <a href=\"http:\/\/veggiehost.com\">VPS provider<\/a> I've got my stuff all back up, and it only took me two days of tweaking to get everything back.  You never realize how much work it took to tweak your environment to get it exactly the way that you had it before.  I'm glad that's all over with.<\/p>\n\n<p>\nSome things did change while I was waiting for an OS re-install on my slice:  I'm no longer working for the Cake Development Corporation.  In the end, it just wasn't the right fit for what Larry and the crew needed at this time.  However, I will be continuing to work with them via the <a href=\"http:\/\/www.cakefoundation.org\">Cake Software Foundation<\/a> as an evangelist for CakePHP and helping to organize CakePHP-related events.  I'm very excited about this part because I've been working on organizing a CakePHP-related conference to be held in Orlando, FL February 6th through 8th, 2008.  We're down to the signing of contracts to secure meeting rooms etc, and I imagine the web site for the event will be launched sometime in the next few weeks.  Sorry I can't share more details at this time, but it should be very exciting.\n<\/p>\n\n<p>\nSo, don't cry for your humble correspondent as I am never out of work too long these days, but if you know of any interesting telecommuting positions for an egomaniacal PHP developer with lots of experience doing all sorts of difference things, drop me a message.  Hopefully those who know me will be able to say something nice about me. :)<\/p>\n",
        "date": "2007-10-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Back In Business",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/16\/back-in-business\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thinks will be quiet for a while around here as I need to back up my blog and other stuff in order to make way for an upgrade to my <a href=\"http:\/\/www.veggiehost.com\">VPS<\/a> due to a busted Gentoo configuration.  My emerge binary seems to have disappeared and the tech gurus there say a full reinstall is the way to go.  Not sure when I'll get around to the backup, so I'll see ya on the other side...<\/p>\n",
        "date": "2007-10-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Things Will Be Quiet...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/10\/02\/things-will-be-quiet\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm sure I'm not the only person who has been talking about this, but the response to Derek Sivers talking about <a href=\"http:\/\/www.oreillynet.com\/ruby\/blog\/2007\/09\/7_reasons_i_switched_back_to_p_1.html\">how he switched back to PHP<\/a> after 2 years of trying to rewrite <a href=\"http:\/\/cdbaby.com\">CD Baby<\/a> using Rails has been so predicatably idiotic. He even hired a Rails expert to help him out.  Not what I would've done, but whatever.  So, he had the courage at some point to pull the plug on it and got down to work rewriting his app in PHP.  2 months and 10K lines of code later, he was done.  2 years vs. 2 months.\n<\/p>\n\n<p>\nNow, other people have done a much better job of deconstructing the childish, immature responses that basically seem to imply that Mr. Sivers' is an idiot (which he clearly is not) and that Rails is perfect and that he must be doing something wrong.  But that's not what I'm here to discuss today. His experience is not atypical in the software industry.  Many have been seduced by the promise of a new tool and have failed to anticipate that some of the same problems they were hoping to fix were going to show up no matter how hard they tried.  And woe unto anyone who chooses to criticize that technology, as they will be flamed mercilessly for not accepting that the new is better than the old.<\/p>\n\n<p>\nAnyway, the guy I feel bad for is the Rails expert Mr. Sivers' hired.  He was being asked to shoehorn an existing application into not only a new language but probably a new paradigm.  Was the old CD Baby a prime candidate for a rework using a framework that relies heavily upon convention over configuration in order to gain development time?  Legacy apps are very hard to rewrite when you didn't create the original.  Sure, Mr. Sivers was helping the Rails guy out but there was no way he (the Rails guy) could get this done.  Mr. Sivers just knew way too much about all the hackery that inevitably creeps into an app to get it to work and no amount of time could get that info out of his head and into a form that Rails Guy could use.\n<\/p>\n\n<p>\nOf *course* Mr. Sivers could rewrite this thing in 2 months.  He knew all the intimate details.  How could he *not* succeed?  He had thrown away 2 years worth of work but was able to get it done in 2 months by himself.  All he really had to do was go back and recognize the mistakes he had made and what was the simplest way to implement the functionality <i>he had already written before<\/i>.  But here's the kicker:  he knew how do it better BECAUSE of what he learned while doing Rails.<\/p>\n\n<p>\nAs I told my friend <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a>, the end result of all my talks on \"What can PHP learn from Ruby on Rails\" was me being able to stand up and say \"there is nothing I can't build in PHP that I can build in Rails, but thanks for showing me all those best practices.\"  That, my Rails fan boys, is the real lesson to be learned.  Keep all that \"PHP is ugly, Ruby is beautiful\" nonsense to yourself and just build something with it.  I'll be humming along building PHP sites using all those cool things I learned from Rails.  You want to use Rails?  Great!  I'll be here working on my PHP stuff, let me know when you run into an application-level problem Rails can't solve because I'm willing to bet it's been solved with PHP.  Numerous times.\n<\/p>\n",
        "date": "2007-09-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rails Fan Boys Missed The Point",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/25\/rails-fan-boys-missed-the-point\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>There was a question on the <a href=\"http:\/\/groups.google.com\/group\/cake-php\/\">CakePHP mailing list<\/a> where somebody was asking about deploying CakePHP apps using <a href=\"http:\/\/www.capify.org\/\">Capistrano<\/a>.  What is Capistrano?  From the web site:\n<blockquote>\nSimply put, Capistrano is a tool for automating tasks on one or more remote servers. It executes commands in parallel on all targeted machines, and provides a mechanism for rolling back changes across multiple machines. It is ideal for anyone doing any kind of system administration, either professionally or incidentally.\n<\/blockquote>\nSounds like exactly the type of thing a lazy programmer like myself needs.\n<\/p>\n\n<p>\nIn a nutshell, here's what you do:  you create a file that contains instructions on what tasks you need to run on your remote server, then you get Capistrano to load the file and execute the tasks you've defined.  In the past, Capistrano was pretty tightly integrated with Rails, but with version 2.0 I found I didn't need to have a Rails app installed *anywhere*, which is good news for anyone wishing to use this amazing tool with other web applications.\n<\/p>\n\n<p>First thing I did was go and <a href=\"http:\/\/www.capify.org\/install\">install Capistrano<\/a>.  Relatively easy, but I had to install the Ruby gems system on my MacBook, something that was easy to do.  Once I had that installed, I then grabbed a <a href=\"http:\/\/simplisticcomplexity.com\/assets\/2006\/9\/21\/deploy.rb\">sample deploy.rb file<\/a>, and hacked away at it until I got  something very basic that would work for my situation (with names changed to protect the innocent):<\/p>\n\n<pre>\nset :application, \"yourapp\"\nset :repository, \"svn:\/\/location.ofrepo.com\"\nrole :web, \"server.domain.com:\nset :deploy_to, \"\/cakeapp\/:\nset :checkout, \"export\"\n\ndesc \"This will deploy the app\"\ntask :deploy do\n     run \"svn --quiet --force #{checkout} #{repository} #{deploy_to}\"\nend\n<\/pre>\n\n<p>That sure looks simple, doesn't it?<\/p>\n\n<p>In the spirit of convention over configuration, Capistrano has a few defaults.  It assumes you're using SSH to connect to the remote server.  It also assumes that you are using Subversion as your version control system.  \"But you're accessing svn directly!\" I can hear you saying.  Yes, but that's because I'm lazy and wanted to get the thing working as soon as possible.<\/p>\n\n<p>\nI then saved the file in the config\/ directory of my Cake app.  Why?  Seemed like a good place to put it.  Then, when I'm ready to deploy the changes I've made, here's what happens.  I tend to place my cake root outside of the web root so that I can have multiple Cake apps running off the same library.  ~\/src\/www.ibl.org is the app\/ directory if you look at it that way.\n<pre>\ncupcake:~\/src\/www.ibl.org chartjes$ cap -f config\/deploy.rb deploy\n  * executing `deploy'\n  * executing \"svn --quiet --force export svn:\/\/server.littlehart.net\/www.ibl.org\/trunk \/home\/wwwroot\/www.ibl.org\/public\/app\/\"\n    servers: [\"phantasm.ibl.org\"]\nPassword: \n    [phantasm.ibl.org] executing command\n    command finished\ncupcake:~\/src\/www.ibl.org chartjes$ \n<\/pre>\nThat's it!  Now, when I finish my local development and check my changes into my repository I can deploy them to production via the command line.  For more advanced deployment schemes I suggest you checkout <a href=\"http:\/\/www.capify.org\/\">the main Capistrano site<\/a> and as always, Google is your friend.\n<\/p>\n",
        "date": "2007-09-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deploying CakePHP Applications Using Capistrano",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/21\/deploying-cakephp-applications-using-capistrano\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Mad props go out to Jeff Loiselle (aka phishy) for putting together <a href=\"http:\/\/live.cakephp.org\">The Show<\/a>, a CakePHP-specific podcast.  The archive of the first show is up there (Jeff talks to Nate Abele, with a side-order of Garrett Woodworth) and the next show will be broadcast live tomorrow at noon.  Check out the site for more details, and your humble correspondent may try to worm his way into tomorrow's episode that talks about writing console applications, since I am busy extending bake and adding to my interactive testing console.<\/p>\n",
        "date": "2007-09-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New CakePHP Podcast Launched",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/18\/new-cakephp-podcast-launched\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I use the incredibly small high-performance web server <a href=\"http:\/\/wiki.codemongers.com\/Main\">Nginx<\/a> to run this blog and some of my other projects.  Again, the ADD developer in me likes trying out new technology and nginx is a great fit for me so far.  I had to dig around a bit to find some rewrite rules that work for using WordPress (I'll share those if people are interested) but I got an email this morning from a fellow <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> user who couldn't find any configuration info on how to get it to work with Nginx.  Well, I did some fooling around and I'm confident this set of rules will work.  This assumes that you've gotten Nginx already up and running.\n<pre>\n# CakePHP rewrite rules\nlocation \/ {\n     index index.php;\n     if (!-e $request_filename) {\n          rewrite ^\/(.+)$ \/webroot\/$1 last;\n          break;\n     }\n}\n\nlocation \/webroot\/ {\n     index index.php;\n     if (!-e $request_filename) {\n          rewrite ^(.+)$ index.php?url=$1 last;\n          break;\n     }\n}\n<\/pre>\nI am by no means an nginx expert, so if you have problems you are probably on your own.  I hope this helps out other people wanting to run CakePHP on nginx.\n<\/p>\n",
        "date": "2007-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Configuring CakePHP to Work With Nginx",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/14\/configuring-cakephp-to-work-with-nginx\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Cal Evans just pinged me to let me know that my second contribution to his PHP Abstract podcast, called <a href=\"http:\/\/devzone.zend.com\/article\/2537-PHP-Abstract-Podcast-Episode-19-Glue-Frameworks-vs.-Full-Stack-Frameworks\">Glue Frameworks vs. Full-Stack Frameworks<\/a> has just been posted.  Go and take a listen and let me know what you think.<\/p>\n",
        "date": "2007-09-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Glue vs. Full-Stack: The Podcast Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/13\/glue-vs-full-stack-the-podcast-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the parts of CakePHP that caused me the most grief while trying to learn the finer details of the framework was the <a href=\"http:\/\/api.cakephp.org\/1.2\/class_auth_component.html\">Auth component<\/a>.  The problem at the time was that there was scant information available on how to actually use and configure it.  Luckily, I was able to get some insider information via gwoo and Nate from the CakePHP core team.  Plus there was stuff floating around on different web sites.  So, here I will attempt to collect some of that information and show you some basic-to-intermediate info on how to use the component.  Note, this code is for 1.2.x.x, and the API for the Auth component had not been declared 100% stable at the time of this post.  In other words, don't blame me if this doesn't work 6 months from now. :)<\/p>\n\n<p>\nSo, in order to use this component, you have to add it to the list of components your controller is using.  I tend to put this info in app_controller.php since I usually need Auth to work for all my controllers.\n~~~\nvar $components = array('Auth');\n~~~\nSo, now that we want to use it we suddenly have a huge variety of options that can and need to be set.  For this example I use code from an existing project, with some info changed to protect the innocent.  You set the various Auth options by putting code in your beforeFilter() method for your controller that will be using Auth.\n~~~\n$this->Auth->fields = array('username' => 'email', 'password' => 'pasword');\n~~~\nBy default, Auth expects you to have a model called User that has a 'username' and 'password' field in it.  You can override what fields contain the username and password information though.\n~~~\n$this->Auth->loginAction = array('controller' => 'users', 'action' => 'login');\n~~~\nYou need to tell Auth what controller \/ action pair it needs to use to present the login form.\n~~~\n$this->Auth->loginRedirect = array('controller' => 'users', 'action' => 'index');\n~~~\nTell the Auth component where the user should be redirected after a successful authentication...\n~~~\n$this->Auth->logoutRedirect = '\/';\n~~~\n... and where they should go when you logout.\n~~~\n$this->Auth->loginError = 'Invalid e-mail \/ password combination.  Please try again';\n~~~\nYou can specify what error message you want displayed if authentication fails.\n~~~\n$this->Auth->autoRedirect = false;\n~~~\nSometimes you don't want to send an authenticated user to the location specified in $this->Auth->loginRedirect because you need to do some work based on the user being authenticated.  I've used this in this bit of code that checks to see if we have a cookie that has user credentials in it for logging in.\n~~~\n    function login() {\n        if ($this->Auth->user()) {\n            if (!empty($this->data)) {\n                if (empty($this->data['User']['remember_me'])) {\n                    $this->Cookie->del('User');\n                }\n                else {\n                    $cookie = array();\n                    $cookie['email'] = $this->data['User']['email'];\n                    $cookie['token'] = $this->data['User']['pasword'];\n                    $this->Cookie->write('User', $cookie, true, '+2 weeks');\n                }\n\n                unset($this->data['User']['remember_me']);\n            }\n\n            $this->redirect($this->Auth->redirect());\n        }\n    }\n\n$this->Auth->authorize = 'controller';\n~~~\nThis is a newer addition to Auth, where you can specify some additional information about where Auth can look for more information.  Normally, Auth will expect you to have already setup stuff using Cake's own ACL stuff.  I didn't need anything as complicated as that, so I was happy to see I could bypass it.  When you set $this->Auth->authorize to 'controller', you're telling the Auth component to look for an action called 'isAuthorized' for more information on whether the user is authorized or not.  Here's a sample one:\n~~~\n    function isAuthorized() {\n        if (isset($this->params[Configure::read('Routing.admin')])) {\n            if ($this->Auth->user('admin') == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n   }\n~~~\nI assume that example is self-explanatory.  Now, if you set $this->Auth->authorize to 'model' then you can create a special method in your User model that can do similar things.  Thanks to AcidMax for <a href=\"http:\/\/www.ogrn.com\/andy\/2007\/07\/10\/auth-changes-in-cakephp-12-and-how-to-use-basic-auth\/\">this post<\/a> that shows you what to do if you use 'model' for $this->Auth->authorize.  There is also a 'crud' option for $this->Auth->authorize, but I have not used it myself. You can use $this->Auth->mapActions to then tell auth what actions map to the various CRUD actions:\n~~~\n$this->Auth->mapActions(array('read'=> array('display')));\n~~~\nLike I said, I haven't fooled around with it.  Once I do, I'll update this blog post to expand on it some more.\n~~~\n$this->Auth->allow('add', 'view');\n~~~\nYou need to tell Auth what actions in your controller can be accessed without needing to be authorized.  What trips most beginners up is that 'login' and 'logout' are already actions that Auth expects to not needing to be authorized.  If you put 'login' and 'logout' in there, Auth starts acting very weirdly and totally bypassing authorization.  So, don't do that. :)\n<\/p>\n\n<p>\nNow, there are also some other features that are useful to those using Auth:\n~~~\n    function logout() {\n        $this->Session->setFlash(\"You've successfully logged out.\");\n        $this->redirect($this->Auth->logout());\n    }\n\n~~~\n$this->Auth->logout will return the URL to whatever location you told Auth you wanted people to be sent to upon them being logged out.\n~~~\n$userId = $this->Auth->user('id');\n~~~\nYou can retrieve info from the User model if you've been successfully authorized.  Whatever fields are in your User model can be retrieved.  Wouldn't it be nice to do stuff like this:\n~~~\nif ($this->Auth->user('admin') == true) {\n     $this->Session->setFlash('You are an admin');\n}\n~~~\n<\/p>\n\n<p>\nPhew.  That's a lot of stuff to try and keep in your head when building apps using Auth.  But there's still more.  The Auth component will automatically hash whatever value you place in the 'password' field in your form.  It will do this both upon login *and* if you are creating a record in your user model, so you need to make sure that your field in your table that stores the password is large enough that it will accept the hashed password.  If you need to do something with that password before you store it, call the field something other than what you've told Auth your password field is, then you can get the value needed to store it by using $this->Auth->password('passwordtostorehere').<\/p>\n\n<p>\nAnyhow, I'm sure I've missed some other more esoteric stuff, but I hope I've done a good job of showing just how easy the Auth component really is to use...once you understand how it actually works. :)<\/p>\n",
        "date": "2007-09-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Hopefully Useful Tutorial For Using CakePHP's Auth Component",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/11\/a-hopefully-useful-tutorial-for-using-cakephps-auth-component\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Ah yes, it's now the unofficial end of summer here in the Greater Toronto Area.  It runs from <a href=\"http:\/\/en.wikipedia.org\/wiki\/Victoria_Day\">Victoria Day<\/a> until <a href=\"http:\/\/en.wikipedia.org\/wiki\/Labour_day#Labour_Day_in_Canada\">Labour Day<\/a>.  Also commonly referred to as \"construction season\" due to all the road work that goes on on the highways surrounding Toronto during that time period.  Yes, we will still get some nice hot days (like today, where it's above 30 Celsius) but you can almost smell fall coming.  The nights get a little cooler, days get a little shorter, and baseball season is almost over too.  Which means I suddenly get a lot of my free time back. So, I've started thinking about what I'm going to work on in the fall.<\/p>\n\n<p>\n<ul>\n<li>*finally* get some work done on my baseball-roadtrip-planning site.  Since I'm not immune to the Facebook phenomenon I will be making it Facebook compatable as well<\/li>\n<li>add features to my interactive testing console for CakePHP, the big one being the ability to create routes and then pass in a URL to see what controller \/ action pair would handle the request.  It might involve new functionality for the router, but hopefully I can do it without expanding the <\/li>\n<li>I have my eyes on a few enhancement tickets for the 1.2 release that I think I can help with, the first one being some additional functionality for the lazy developer's favourite tool, the CakePHP bake script.<\/li>\n<\/ul>\n<\/p>\n\n<p>\nOn top of that I have a very small job to do today, which is to record a podcast on my earlier \"Glue vs. Full-Stack\" post for Cal Evans and his <a hre=\"http:\/\/devzone.zend.com\/tag\/PHP_Abstract\">PHP Abstract podcast<\/a>.<\/p>\n",
        "date": "2007-09-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain:  September 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/07\/whats-in-chris-brain-september-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of my co-workers over at <a href=\"http:\/\/www.cakedevelopment.com\">CDC<\/a> (the mighty <a href=\"http:\/\/rd11.com\/\">gwoo<\/a>) gave a talk to the Orange Country PHP group about CakePHP 1.2 and some of the features that it contains.  One of the more interesting items, well interesting to *me* anyway, is the addition of a convenience feature to \"has and belongs to many\" associations called \"with\".  Stolen directly from gwoo's slides, here's an example of it:\n~~~\n<?php \nclass Post extends AppModel { \nvar $hasAndBelongsToMany = array( \n ?Tag? => array( \n ?className? => ?Tag?, \n ?with? => ?TaggedPost?, \n ) \n ); \n\n    function beforeSave() { \n         if(!empty($this->data[?Tag?])) { \n$this->TaggedPost->save($this->data[?Tag?]); \n         } \n    } \n} \n?>\n~~~\nSo what is the \"with\" parameter really for?  It's nothing more than a convenience parameter that lets you apply a label to the name of your join table, so you don't have to call it by it's ugly name, in this case PostTags.  Want to see it in action?\n~~~\n<?php \nclass PostsController extends AppController { \nvar $name = ?Posts?; \nfunction tags() { \n$this->set(?tags?, $this->Post->TaggedPost->findAll()); \n} \n} \n?>\n \n<?php \nforeach ($tags as $tag) : \necho $tag[?Post?][?title?]; \necho $tag[?Tag?][?name?]; \necho $tag[?TaggedPost?][?date?]; \nendforeach; \n?>\n~~~\nIt's little touches like that, unseen by a lot of developers, that makes CakPHP just a little bit easier to use with each passing day.  You can download gwoo's slides <a href=\"http:\/\/www.cakephp.org\/files\/OCPHP.pdf\">here<\/a>.<\/p>\n",
        "date": "2007-09-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Glimpse Inside CakePHP 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/09\/04\/a-glimpse-inside-cakephp-12\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As someone who has used lots of open source software, in fact making my livelihood off of open source software, I've often wondered what happens when the guiding forces behind an open source project decide to make that project closed source?  Under what circumstances is that even possible.<\/p>\n\n<p>I'm the lead developer for my <a href=\"http:\/\/www.ibl.org\">simulation baseball league's<\/a> web site.  That is a very small venture, so I often say no to requests for additions and changes because, well, I can.  It's okay to be an asshole sometimes instead of just bottling it up all inside.  Sometimes I don't feel like putting in the work to implement certain functionality.  Or I don't feel like the request adds anything to the web site.  But if I were the lead developer for a fairly large open source project, I'm pretty sure I would get to some point where the complainers and moaners would get to me and cause me to want to consider closing the source.  It's an easy thing to complain about a bug or missing feature, but it takes real courage to complain *and* go and fix it, showing why and how you fixed it.<\/p>\n\n<p>\nSo, what would happen if you closed the source?  I guess you'd say that you would still accept patches but nobody could distribute or implement those changes without your permission.  I believe that Dan Bernstein does this for his immensely popular <a href=\"https:\/\/www.getmailbird.com\/what-resources-are-available-now-that-qmail-org-is-gone\/\">qmail<\/a> project and explains that qmail is not open source.  I also imagine that the license you release your code under would have a huge impact on this as well.  If you took something close sourced, what about all the changes that others had contributed while the project was open sourced?  Are they out of luck?  Do they remain in the closed source with you giving them credit?  Many, many questions to be answered when taking an open source project closed.\n<\/p>\n\n<p>\nThe key feature of open source, to me, seems to be that you can get the source, change it, and then distribute those changes.  There is nothing wrong with you taking an open source project, make a bunch of your own changes and then using it yourself without distributing those changes.  That's how a lot of cool functionality ends up in an open source project.   I seem to remember the systems group at a previous employer hacking on qmail and making some changes to it that were only used internally and, although I am not a lawyer, I can't imagine that being a problem.  Distributing those changes to others is a different story, as that would appear to violate the license that qmail has been released under.<\/p>\n\n<p>\nThe perception on many open source projects is that the leadership is running things like a closed source project by limiting access to people to commit their changes to whatever central version control repository they are using.  Is that a bad thing?  I would have to say no because when a project gets to a certain level of complexity (such as, say PHP itself) you don't want just anyone going in there and making changes that would cause things to break all over the place.  <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> does exactly that:  there is a \"core\" team of developers who have write access to the subversion repository, and they either change code themselves or go over patches submitted by others, committing them if it's agreed that the patch fixes a problem.<\/p>\n\n<p>\nFrom my own perspective as a developer, I don't know if I would stop using an open source application if it would go closed source.  As long as it continued to work the way I needed it, I don't think I would complain too much.  But if I needed to make changes and are skilled enough to do so, that's when it would become really annoying if there was a bug I could obviously fix but have no access to do so.  My experiences with some PHP applications that were encoded using IonCube showed me how much time and money was wasted trying to get problems that could've been fixed in-house.  That's as closed-source you can get in the PHP world.<\/p>\n\n<p>\nTell me in the comments your thoughts on taking an open source project closed and what you think the ramifications of that would be.<\/p>\n",
        "date": "2007-08-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "When Do You Take Your Ball And Go Home?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/28\/when-do-you-take-your-ball-and-go-home\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the reasons I use <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> (well, other than the fact I get paid to :) ) is that I'm a believer in full-stack frameworks, and learning to build your application within the rules that the framework lays down is an exercise in understanding the problem domain and then figuring out how to solve it with the tools at hand.  Most full-stack frameworks rely on what I call \"magic methods\", complex functionality that has been reduced to a simple API for the developer to use.  A good example of this is the ability to create relationships between models.  If you say \"Foo has many Bar\" and create that relationship in the model, you can access all the Bars that belong to Foo with a simple command:\n~~~\n$bars = $this->Foo->Bar->findAll();\n~~~\n<br \/>\nTalk about magic methods.  All sorts of complexity in terms of writing your own SQL code to pull this information out is totally hidden from the developer and you are left with an easy-to-use API for getting that information.  But, like anything, this comes with a price.<\/p>\n\n<p>\nA common message that I see on the CakePHP <a href=\"http:\/\/groups.google.com\/group\/cake-php\">mailing list<\/a> is one from a user who is examining the SQL generated by command like the one I showed above.  They question why it's being done this way.  \"The SQL isn't efficient, why does it have joins, etc\".  All valid arguments but reveal a huge problem that goes unspoken in programmer circles:  trust is an issue when using someone else's code.\n<\/p>\n\n<p>Look at this code:\n~~~\n$this->Media->hasAndBelongsToMany['Tag']['conditions'] = array('Tag.name' => $tag);\n$media = $this->paginate('Media', array('AND' => array('Media.approved' => 1, 'Media.published' => 1)));\n~~~\n<br \/>\nThat's a lot of serious complexity in two lines of code.  This is part of some code I'm writing for a CDC project where I'm trying to paginate over a result set of media that have been given a particular tag.  The current pagination method wasn't able to do what I wanted, so with some help from gwoo I found out what magic I needed to make things work the way I wanted.  That code is amazing when you think about it, but do you trust it?  If you use CakePHP you have no choice but to trust that the model methods are doing things the best way they can.<\/p>\n\n<p>\nBeing open source, there is nothing stopping people who have gripes about certain functionality to go in and fix it themselves, but how many people really do?  1% of the users?  1% of 1% of the users?  It's a very, very small percentage, small enough that it becomes daunting at times to contemplate contributing to a popular open source project.  So, instead you sit back, curse the developers and trust that whatever problem you want fixed will be fixed.\n<\/p>\n\n<p>\nAdoption of any library or framework depends so hugely on trust, I'm surprised that it never comes up in the discussion.  I guess it's so obvious that nobody has seen it.  If I don't trust a tool to do what I want it to do, I won't use it.  Witness my retreat (once again) from <a href=\"http:\/\/www.vim.org\">vim<\/a> to <a href=\"http:\/\/www.activestate.com\/Products\/komodo_ide\/\">Komodo<\/a>.  I don't *trust* my ability to make vim do the things I can do in Komodo, so I go back to using a tool that I do trust.  Recently, it was the ease with which I was able to debug some code using <a href=\"http:\/\/xdebug.org\">XDebug<\/a> and Komodo.  It's something I could never do with vim because I don't trust myself with vim.\n<\/p>\n\n<p>\nI'm not saying you need to have blind faith in a particular bit of software, because that's dangerous and leads to a lot of unfulfilled expectations.  The path from fanboy to intense critic is a very short one, especially if you bought into the promise of something and it didn't deliver the way you wanted.  I trust CakePHP for very different reasons, ones that obviously make me a fanboy.  I liked what the framework was about, trusted that the magic methods were doing what they were supposed to be doing after getting to know the core development team, and now I earn a living off of trusting that CakePHP can do the job that I want.<\/p>\n\n<p>\nThe biggest lesson I've learned from thinking about this idea of trust is that you have to do your research and learn how the magic methods interact with each other.  Could I have possibly come up with that line of code above that sets the hasAndBelongsToMany relationship in order for me to find all tags associated with a particular media file?  I would have to say that before I asked gwoo about it, I was thinking I was going to have to set *some* value in $this->Media to get the pagination functionality to work but didn't know where to start.  But now that I see the code I understand why it works.  It's the dynamic setting of conditions for the hasAndBelongsToMany that forces the Media model (when used by the pagination functions) to pull in the associated Tag records.  It's the ultimate hindsight:  \"Of *course* that's what you should do, it makes perfect sense in front of my grumpy face!\";\n<\/p>\n\n<p>\nSo next time you are evaluating a piece of technology that you wish to start using, ask yourself if the reason you are reluctant to use it is because you don't trust it to work the way you are expecting it.<\/p>\n",
        "date": "2007-08-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Trusting Magic Methods",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/21\/trusting-magic-methods\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As my friends find out that I work for <a href=\"http:\/\/www.cakedevelopment.com\">Cake Development Corporation<\/a>, they start asking me what resources I use in order to get my work done.  Since I don't have any essays to share, or tutorials for you this week, I'd thought I'd spend some time sharing some of my favorite resources.<\/p>\n\n<p><i><a href=\"http:\/\/manual.cakephp.org\">The CakePHP Manual<\/a><\/i> is the first place I go when I need to remember how to use some pretty basic, non-advanced functionality.  For all the pissing and moaning about the lack of documentation for 1.2.x, the manual is still a great resource.  When will the documentation be ready? When it's ready!<\/p>\n\n<p>When the manual isn't enough, I venture down into the bowels of the code and visit the <a href=\"http:\/\/api.cakephp.org\">online API<\/a> so I can see if a particular class \/ component \/ whatever has a method I think it has and what parameters it can accept.  As awesome as the API is, I think it would be very helpfull if there were examples of using a method right in the API.  Next time I add something into the core I will be sure to include an example right there in my <a href=\"http:\/\/phpdoc.org\">docblock<\/a><\/p>\n\n<p>However, nothing beats actually having examples on how to do something with CakePHP.  Once I found out about <a href=\"http:\/\/bakery.cakephp.org\">the Bakery<\/a>, it was like I had found a chest up in an attic with all sorts of cool stuff inside it.  Lots of examples, and when you're an insider like I am (heh) you can even see articles that hasn't been published yet.  If you are looking for specific examples of doing stuff in both 1.1.x and 1.2.x then your first stop should be the Bakery.<\/p>\n\n<p>I am on the <a href=\"http:\/\/groups.google.com\/group\/cake-php\">CakePHP mailing list<\/a>, where I have earned my nickname 'GrumpyCanuck' that I use on various IRC channels on freenode.  Getting help via the mailing list and IRC comes with some baggage though.  Do your research before you ask, or else you will be either flamed or outright ignored.  Nobody wants that, they want answers to their questions, right?  I may come across as grumpy on the list but when you show you've put the work into trying to find an answer you will be surprised how quickly people rush to help.<\/p>\n\n<p>Then I start using Google itself, finding interesting information all over the web.  There are very few CakePHP blogs that I go to all the time (I read a lot of aggregating feeds, so that does the work for me) but the one I find myself constantly coming back to is Felix Geisend?rfer's <a href=\"http:\/\/www.thinkingphp.org\">ThinkingPHP And Beyond<\/a>.  Tons of code exampes and excellent commentary.  Almost as good as this blog (hah!)<\/p>\n\n<p>But of course, I'm super spoiled because I have direct access to many of the core developers of CakePHP, such as Larry Masters (PhpNut), Garrett Woodworth (gwoo) and Nate Abele (_nate_).  Without being able to talk to those guys via IM or on IRC, so many of my problems learning how CakePHP works at more than a basic level would not have been solved.  So, it never hurts to suck-up to \/ cultivate relationships with some of the more senior members of the CakePHP community.  They are usually more than glad to help you out when you have questions and can speak to them directly.<\/p>\n\n<p>\nSo, as baseball season starts to head towards a finish (between my long-running simulation baseball league, coaching girls baseball and playing men's 35+ slow-pitch) I will finally have some time to give back to CakePHP.  There are some tickets in <a href=\"http:\/\/trac.cakephp.org\">CakePHP's trac site<\/a> with my name on them that I need to get to and hack away at them, along with adding functionality to my CLI console for testing things.  Also, rumours of a CakeFest conference for later this year have me motivated to get a bunch of stuff done so I have something to give some talks about.<\/p>\n\n<p>\nSo, if you have any other resources you like to use for CakePHP, feel free to put them in the comments and if we get enough of them I will do a follow-up post.<\/p>\n",
        "date": "2007-08-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "CakePHP Resources",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/17\/cakephp-resources\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For those not familiar with the history of the <a href=\"http:\/\/www.rubyonrails.org\">Ruby on Rails<\/a> framework, it's interesting (well, at least to me) to note that the framework grew from extractions from working on <a href=\"http:\/\/www.basecamphq.com\/\">Basecamp<\/a>, an online project management \/ collaboration tool.  Basically, they took functionality from Basecamp (the \"extraction\") and used it as components for Ruby on Rails.  This is probably a gross oversimplification, but this is not a blog posting about how Ruby on Rails was created.<\/p>\n\n<p>\n<a href=\"http:\/\/www.loudthinking.com\">David Heinemeier Hansson<\/a> (the driving force behind Ruby on Rails) is a huge believer in using extractions as a method to add functionality to your projects, typically in the context of a framework.  You need some particular functionality, you write it, and if it's good enough you extract it from it's original context and make it generic enough that it can be used by other people.  You could also call this \"building stuff you need\" instead of \"building stuff you think you might need\".  It's part of the whole <a href=\"http:\/\/en.wikipedia.org\/wiki\/YAGNI\">YAGNI<\/a> philosophy of programming, I guess.<\/p>\n\n<p>\nSo, the flipside to this idea of how you get new features is doing it by design.  This is where you sit down and decide \"I'm going to write a component to interface with Frammastat's Whoozinator API because I think some people would like to have that\".  So, you sit down and you bang out the code so that users of GrumpyFramework can now talk to Frammastat's Whoozinator via a component instead of writing their own.  It's like what I did when I helped write code for Zend Framework to talk to Last.fm's Audioscrobbler service.  I didn't need it, but a friend thought it was a good idea and it was a chance to learn how to use Zend Framework.  I received a patch request for it the other day, so maybe I should go and take a look at it... :)<\/p>\n\n<p>\nAnyway, where was I?  Oh yeah<\/p>\n\n<p>\nIn this case, a decision was made to build something specifically for a project, whether it was required as part of my current work or not.  Did I need that Frammastat interface for GrumpyFramework?  No, but somebody else might.  And that, in my opinion, leads down the road to premature optimization and feature creep.  Just because you *might* need something, doesn't mean you should spend the time and effort to write some code for it.  Often times, design makes sense when you know that the vast majority of users of your project will need something.  But for a lot of things, wait until you actually need them.<\/p>\n\n<p>\nI have found that the best bits and pieces of code that I have used with <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> have come from people extracting ideas they were using for their own personal projects and then putting a good spin on it so others could use it. Of course, it helps that CakePHP lets you create components and behaviors (that talk to controllers and models respectively) so that you can extend functionality without rewriting any of the core, but I remain firmly convinced that the extraction of ideas from current projects is the best method of adding new functionality to an existing application.\n<\/p>\n",
        "date": "2007-08-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Extraction vs. Design",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/14\/extraction-vs-design\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A big shout-out to my <a href=\"http:\/\/cake.insertdesignhere.com\/\">favourite typist<\/a> for showing me some of these gems, which I will gladly share with you<\/p>\n\n<p>\nSo, one of the things that often happens in CakePHP is that you will have multiple values to send to your view, so you might have code that looks like this:\n~~~\n$this->set('user', $this->User->read(null, $id));\n$this->set('foo', $foo);\n$this->set('bar', $bar);\n$this->set('baz', $baz);\n~~~\nSeems simple enough, yes?  Once when I showed code similar to this to the above-mentioned typist, he said \"ew\" and showed me two neat little tricks to make the code (a) more readable and (b) a little more efficient.  \n<\/p>\n\n<p>Solution one?  Use <a href=\"http:\/\/www.php.net\/compact\">compact()<\/a> to pass all the variables to your view.\n~~~\n$user = $this->User->read(null, $id);\n$this->set(compact('user', 'foo', 'bar', 'baz'));\n~~~\n<\/p>\n\n<p>\nWhat does the compact() function do?  It takes the array you pass into it and looks for variables of the same name as the elements in that array.  It then spits out an array of key => value pairs.  So, one little trick with compact() means you only have to use one set statement.  This works because all those $this->set() statements simply add those values to an array.  But you already knew that, right?\n<\/p>\n\n<p>The second solution is similar to sing the \"chmod 777 firehose\" to solve UNIX-based permissions problems.\n~~~\n$user = $this->User->read(null, $id);\n$this->set(get_defined_vars());\n~~~\nNow, while this looks neat it does come with one big caveat:  if you use <a href=\"http:\/\/www.php.net\/get_defined_vars\">get_defined_vars()<\/a> you will be passing a lot of stuff into your view that you might not want there.  In a way it's like using REGISTER_GLOBALS in your CakePHP.  Every variable you've defined in the controller (and some other ones that CakePHP has defined for you) in your current scope will be available in the view.\n<\/p>\n",
        "date": "2007-08-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Stupid CakePHP Controller Tricks",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/07\/stupid-cakephp-controller-tricks\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I've mentioned in this blog before, I spent 4 years working for an adult dating web site.  One of the biggest problems we ran into was a bottleneck involving database replication lag.  In a normal replication setup you have your application do writes to a master database and then those changes get replicated to the slaves.  That's okay...until you start dealing with huge amounts of updates.<\/p>\n\n<p>\nSo, the quick solution was to make sure that we had fast enough hardware on the slaves to handle the huge volume of updates.  I remember partition lag in the order of 30 minutes on some of the machines (that's right, THIRTY MINUTES).  But the bigger problem came down to trying to find a way to minimize replication problems.  One of the things discussed (and I have no idea if it ever got implemented after I left) was partitioning the data into groups that made sense.  Some of the suggestions were to partition based on geographical location of the users, or simply do grouping based on the record ID.<\/p>\n\n<p>\nThe other day I came across a great blog posting talking about <a href='http:\/\/highscalability.com\/unorthodox-approach-database-design-coming-shard'>database shards<\/a> and instantly realized that they were talking about exactly what we were facing.  The goal is to spread the data around, denormalize things so that you have all your necessary data in one spot and to try and minimize replication issues.  So you'd be reading and writing to a shard depending on whatever criteria you are using.<\/p>\n\n<p>Now, I know that you could put code into the beforeSave() method on a model to figure out what shard you would be writing to, but how to figure out what shard you would be *reading* from is something I am still mulling over.  Suggestions from #cakephp-dev (where I hang out during the work day) seem to point towards using a behavior (go to <a href=\"http:\/\/bakery.cakephp.org\">the Bakery<\/a> and search for \"behavior\" to see lots of examples) to make this work.  I'll fool around with some code to see if I can come up with something that works.\n<\/p>\n",
        "date": "2007-08-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Database Shards and CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/03\/database-shards-and-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I have a post coming up later this week on some tips and tricks involving CakePHP best practices I've picked up (and had foisted upon me) but for now it's brain dump time:\n<ul>\n<li>Can the <a href=\"http:\/\/lazyweb.ca\">lazyweb<\/a> tell me where I can find some cool online crime statistics?  I was at a friend's birthday party last Saturday and he suggested a really cool mashup that people searching for houses would be interested in<\/li>\n<li>I'm back to using Komodo instead of vim because, well, vim just couldn't give me the environment I wanted.  What I need is the \"here are the files in your project\" hanging off the main editing window, syntax checking when I'm typing away, and then show me what files I changed that are going to be checked back into version control.  Komodo does this.  Vim does not.  Well, at least not the way I want it to.<\/li>\n<li>Is it possible for a single incompetent programmer to cost their employer millions of dollars in lost opportunities without actually breaking anything?  I think a lot of managers would go insane if they actually sat down and tracked how the progress of others was held up by a single person.  That \"domino\" effect could cost a company a lot of money without them actually realizing it.<\/li>\n<li>Big news out of CakePHP-land is that <a href=\"http:\/\/www.mambo-foundation.org\">Mambo<\/a> will be using CakePHP as the core for the next version of Mambo.  Yet another reason to seriously consider CakePHP, if you haven't already<\/li>\n<\/ul><\/p>\n",
        "date": "2007-08-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain: August 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/08\/01\/whats-in-chris-brain-august-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been working on an internal application for use at <a href=\"http:\/\/www.cakedevelopment.com\">CDC<\/a> that required me to have what I call \"two-headed\" authentication.  By this I mean that there were two types of users in the system and while they could access some of the same controllers they could not always access the same actions.  I know what you're saying:  why not have them both use the same model instead of making my life difficult?  A few reasons, one of which was that one type of user was using their email address as the login while the other had a more traditional login name.<\/p>\n\n<p>\nAfter struggling my way through the Auth component (the API changed while I was starting to use it), and understanding the actual flow that the Auth component uses, I nailed down how to do it.  Using good CDC practices (as in \"do it our way you stupid Kanuckistanian!\") I started off with putting my Auth stuff into the before filter:\n~~~\nfunction beforeFilter() {\n        parent::beforeFilter();\n               \n        $this->Auth->loginAction = 'plugin\/users\/login';\n        $this->Auth->loginRedirect = 'plugin\/users\/index';\n        $this->Auth->fields = array('username' => 'username', 'password' => 'psword');\n        \n        $this->set('current', $this->action);\n        \n        if($this->Auth->isAuthorized()) {\n            \n            $role = $this->Auth->user('role');\n            \n            if($role) {\n                if ($role == 'admin' && strpost($this->action, CAKE_ADMIN) !== false) {\n                    $this->Auth->allow($this->action);\n                }        \n                if ($role == 'admin') {\n                    $this->set('adminNavigation', $this->adminNavigation);\n                }\n                \n                $this->set('userNavigation', $this->userNavigation);\n            } else {\n                $this->set('clientNavigation', $this->clientNavigation);    \n            }\n            \n            $this->set('userRole', $role);\n        }\n }\n~~~\n<\/p>\n\n<p>\nNow, I had an action in a controller where a \"client\" can view everything but a \"user\" could only view a specific action.  On top of that any \"user\" who also had an \"admin\" role could view any action in that controller.  In that particular controller I had to put in this code:\n~~~\nfunction beforeFilter() {\n        parent::beforeFilter();\n        $this->Auth->userModel = 'Client';\n        $this->Auth->loginAction = 'plugin\/clients\/login';\n        $this->Auth->fields = array('username' => 'email', 'password' => 'psword');\n        $this->Auth->authorize = 'controller';        \n}\n~~~\nIn the latest version of the Auth component (from the bleeding edge of Cake 1.2.x.x) you can tell it to use an action in your controller for authorization.  This is if you're lazy like me and don't want to use the Acl (which has a number of steps you need to go through just to get it up and running) or want something very simple.  So, in the above beforeFilter() we override the parent beforeFilter() settings and tell Auth that we want to use our Client model as the source for verifying login credentials.\n<\/p>\n\n<p>\nNow, I mentioned before that I had one action in the controller that could be viewed by the User and one action only.  So, I added in the isAuthorized() method to my controller that I told Auth to look for:\n~~~\n    function isAuthorized() {\n        if ($this->Auth->user('role')) {\n            if (strpos($this->action, CAKE_ADMIN) !== false && $this->Auth->user('role') == 'admin') {\n                return true;\n            }\n            \n            if ($this->action == 'view') {\n                return true;\n            }\n            \n            return false;\n        }\n        \n        return true;\n    }\n~~~\nI think the code is pretty self-explanatory.\n<\/p>\n\n<p>\nWorking with the Auth component taught me a lesson about frameworks in general: when you take the time to actually dig into the source code of a framework you will realize just how much work goes into some of the more \"magic\" functions.  I mean, you tell CakePHP that you want to use the Auth component, set a few parameters and *BAM* it takes care of directing people to your login page and validating login names and passwords (even automatically encrypting passwords upon account creation!) against your specified model.  Why wouldn't you want to use something like that?<\/p>\n",
        "date": "2007-07-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Two-Headed Application Authentication in CakePHP 1.2",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/28\/two-headed-application-authentication-in-cakephp-12\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the cool side effects of blogging is that my friends and family (Hi <a href=\"http:\/\/www.teachersatrisk.com\">Mom<\/a>!) ask me why I do it and eventually the conversation gets around to me suggesting they give blogging a try.  It's worked out quite well for my mother's blog, and now chalk up another successful blog launch for a buddy of mine.<\/p>\n\n<p>My friend Kevin Beckford is one of the more interesting programming characters out there.  A freelancer who is willing to live long-term at the RamenTuna Hotel as long as he has no bosses, he and I talk several times a day via IM.  He and I share a lot of common thoughts about progamming.  We differ mainly on our choice of editor as he's a <a href=\"http:\/\/www.vim.org\">vim<\/a> fanatic while I have run back into the comforting arms of <a href=\"http:\/\/www.activestate.com\/Products\/komodo_ide\/\">Komodo<\/a>.  <\/p>\n\n<p>One thing we do share is a passion for programming and a desire to stay true to practices and techniques that lead to better code being developed.  After lots of me hammering away at him to get those ideas out of his brain and into a blog, he's finally lived up to the challenge and has launched the <a href=\"http:\/\/lazyweb.ca\">Lazyweb Construction Company<\/a>.  His most recent post is about something we've talked about:  <a href=\"http:\/\/lazyweb.ca\/past\/2007\/7\/24\/a_problem_presented_i_know_very\/\">creating the API first<\/a>.<\/p>\n\n<p>  \nI don't know how often he plans to update, but I'll be on his case harassing him to post as often as possible.  All those great ideas don't deserve to live inside his head alone!<\/p>\n",
        "date": "2007-07-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Welcome To The Lazyweb",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/24\/welcome-to-the-lazyweb\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><b>WARNING:  This post contains my own opinions and does not represent the views of my current employers<\/b><\/p>\n\n<p>\nIn the July 2007 issue of <a href=\"http:\/\/www.phparch.com\">php|architect magazine<\/a> there is an article called \"Shell Shock\" that advocates using products from Zend and IonCube to encode and protect your PHP applications.  Here are some of the nuggets of wisdom from that article:\n<ul>\n<li>\"Serious business demands closed source\"<\/li>\n<li>\"Maybe your friend will let it (<i>ed: meaning your code<\/i>) sit on his server for a few years, then dig it up, make some modifications and re-release it as his own script\"<\/li>\n<li>\"You prevent would-be attackers from deceiving you by first deceiving them, and you do this by veiling your plain-text source code\"<\/li>\n<\/ul>\n<\/p>\n\n<p>This paragraph is my favourite of the whole article, and it appears at the end:<\/p>\n\n<blockquote>\nMany programmers are afraid of deception. They are \naccustomed to code that is open, and they feel safer \naround it. As a result, many programmers don?t even \ncheck for errors, refusing to entertain the possibility \nthat the PHP functions they hold so dearly may betray \nthem one day. Then that day comes, and there?s an in- \nexplicable bug in the product that is the result of the \nprogrammer?s failure to let go of the illusion of perfec- \ntion. Perfection has a very high price. What you really \nwant from your code is for it to work. You want it to \nkeep working under varied conditions, and you want it \nto keep working next week, next month and after the \nnext release of PHP. Give yourself all the help you can.\n<\/blockquote>\n\n<p>\nFirst I laughed when I read this article.  Then I sighed.  Then I got mad.  Then I decided to write this blog post.\n<\/p>\n\n<p>\nTo start, I will focus on the paragraph above.  What I get out of that is that if only your source was closed and hidden from prying eyes, it would not have bugs in it.  Which is, of course, total nonsense.  Code has bugs because it's open and they feel safer?  There are two kinds of bugs:  application bugs (which is the code I would write) and system bugs (in this case, bugs that that appear from PHP itself).  I'm sorry, but there is nothing I can do if there is a bug in PHP that causes my application to crash except to point this bug out to the people who have the ability to fix it.  That paragraph I quoted doesn't seem to make sense to me at all.  I fail to see how encoding my code makes it somehow safer and less vulnerable to bugs from either the application level or system level.  Perhaps I'm reading something that isn't there, or have taken that paragraph out of context.<\/p>\n\n<p>\nLook, I understand that people want to make money off of the code that they create.  This is how I have been making my living for almost 10 years now, writing code for companies and they pay me for doing it.  Over time I have come to realize that what I am being paid for now is not just the code I create, but the knowledge that goes with that code as well.  Unless I've signed a non-compete agreement, I can pretty much reproduce any code I've written in the past and probably do it better now.\n<\/p>\n\n<p>\nHaving said that, I haven't been in the business of creating an application that I sell to other people.  Well, that's not entirely true.  Way back in the day I wrote a parser for use with a system run by Canada Post called eParcel.  You'd send it the size of the object you're trying to ship and it would spit back XML with data in it about what size box they recommend and how much it would cost to send the item where you were going.  I sold exactly one copy of it.  I created a license that said they could use my code on as many of their own sites as they wanted but they couldn't give the code to anyone else.  I got paid for the license and that was the end of it as far as I was concerned.<\/p>\n\n<p>\nWas I worried they would give my code to someone else?  Not really.  I figured if they wanted to do it bad enough, they would do it and no license would stop them from doing so.  How many unregistered copies of the various versions of Microsoft's operating systems are out there?  See my point?  Microsoft made all their money selling programs that ran on their operating system.  Did it matter that there were so many unauthorized copies running out there?  Sure, but not as much because they were making money elsewhere.<\/p>\n\n<p>\nSo, encoding \/ encrypting \/ hiding your source code won't stop those who really want to get at it.  I'm pretty sure a quick search on google will let me find tools to break through the encryption and then I've got what I want.  And where does that leave you?  The same place as those who didn't encrypt their source code.  I know this will come as a blow to the ego of many programmers, but the stuff you've written probably isn't so earth-shattering as you think it is.  Besides, somebody out there probably already holds a patent on what you've dreamed up and also probably has a lawyer or two laying around. ;)<\/p>\n\n<p>\nAnother reason I dislike encoding \/ encrypting is that it prevents you from fixing flaws in the software you've purchased if you are able to do so.  Real world example:  my previous employer Verticalscope purchased licenses of a mailing list manager that came highly recommended by an employee.  It was written in PHP.  There were some bugs in the application, bugs that could've fixed if they had access to the source code.   Bugs that could be seen in the error logs.  Instead, it was encrypted with IonCode's encoder and they were at the mercy of the creators of the application as to if and when bugs would be fixed.  Time and money wasted...a lot more money than what the product cost them.\n<\/p>\n\n<p>\nIf you charge money for your application and it is good, PEOPLE WILL PAY YOU FOR IT EVEN IF THEY COULD STEAL IT.  If you want to be like the record industry and treat all your customers like potential criminals, then you shouldn't be surprised when people get mad at you and do everything they can to steal your application and distribute it as far and wide as they can.  What you want people to do is pay you for what you know about getting that application running (otherwise known as a service contract) and let the people who want to do it themselves (for whatever reason) be on their own when it comes to support or changes.\n<\/p>\n\n<p>Some people will steal your stuff no matter what, so you can always build that into the price of your product (don't think Microsoft isn't doing that?) if you are so concerned.  I say don't worry about your \"intellectual property\" in the form of your PHP application being stolen if you are making it available to other people.  You're smart enough to find another ways to make money off it, right?<\/p>\n\n<p>\nNow, I believe in respecting the \"intellectual property rights\" of others because ripping off someone's stuff and claiming it as your own is just about as dishonest an intellectual act as there is.  I just feel that deception gives you a false sense of security.  If your stuff is good, people will want it and many of them will pay you for it too.  Even if they can get the source code and fix it themselves if a problem occurs.\n<\/p>\n\n<p>\nTrust me, even if my sole source of income was selling a PHP application that I had written I would feel the same. The author of that article probably makes his living selling applications he wrote, and has chosen the \"security by obscurity\" path when it comes to securing his application.  Encode your stuff if you want, but be aware that the minute you choose to do that you are telling your customers \"I don't trust you\" and I have a hard time understanding a business model that assumes people are going to want to steal the stuff you sell. My policy would be simple:  if you buy it from me, I'll be happy to give you as much support as I reasonable can.  If you steal it from me or can't prove that you bought a copy from me (which is pretty much the same thing) then you can expect a hearty \"screw you, call me when you are willing to pay for your copy\" in response to your requests.  I'm sure my regular visitors will agree that seems to be more in line with my personality.\n<\/p>\n",
        "date": "2007-07-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Protecting Your PHP Code",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/20\/protecting-your-php-code\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A while back I was contacted by Cal Evans over at the <a href=\"http:\/\/devzone.zend.com\">Zend Developer Zone<\/a> to contribute to a new podcast he was starting up called <a href=\"http:\/\/devzone.zend.com\/tag\/PHP_Abstract\">PHP Abstract<\/a>.  Very cool idea, a small 5 to 7 minute podcast by PHP developers where they talk about a topic of interest to them (and hoepfully to you).  Well, being one to never miss out on an oppurtinity to promote myself I agreed to contribute what I could.  I settled on a brief talk about <a href=\"http:\/\/devzone.zend.com\/article\/2349-PHP-Abstract-Podcast-Episode-11-Opinionated-Software\">opinionated software<\/a>.  Also known as \"convention over configuration\" by the <a href=\"http:\/\/www.rubyonrails.org\">Ruby on Rails<\/a> crowd.<\/p>\n\n<p>\nGo over and have a listen and don't be shy in sharing your feedback via the comments there or here.  Opionated software \/ convention over configuration \/ tools with rules is a powerful yet misunderstood programming practice.<\/p>\n",
        "date": "2007-07-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Opinionated Software, The Podcast",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/17\/opinionated-software-the-podcast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This somewhat obscure post is in response to an IM conversation I had today with my friend <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a>, who has been procrastinating heavily on getting that first blog post done.  Well, the gauntlet has been thrown down.  Kevin is coming to my place next Saturday to help me dig and secure a really awesome swing set that my kids have been playing on in the backyard for almost a year.  He has promised to blog before Patio Day (we're doing  the patio in my backyard as well) or else he's doing ALL THE WORK HIMSELF.  Good luck Kevin...hope you bring a good shovel!\n<\/p>\n",
        "date": "2007-07-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Lazyweb Or Die (Digging)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/15\/lazyweb-or-die-digging\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In a previous post <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/06\/22\/whats-in-chris-brain-june-2007-edition\/\">where I rambled on about what I was thinking about<\/a> I briefly talked about bake, the wonderful tool that comes with <a href=\"http:\/\/cakephp.org\">CakePHP<\/a>.  In the comments for that post I was asked by 'keymaster' to expand a bit on why bake is such a powerful tool.  In a nutshell: it creates a skeleton for EVERYTHING that you will need.<\/p>\n\n<p>\nAt <a href=\"http:\/\/www.cakedevelopment.com\">Cake Development Corporation<\/a> it's our secret weapon that allows us to build out a site faster than our competition.  With bake I can build the following:\n<ul>\n<li>If I've already created my database tables following CakePHP conventions, I can create models, along with all their associations (the belongsTo, hasMany, etc<\/li>\n<li>Create controllers, and even create not only the common <a href=\"http:\/\/en.wikipedia.org\/wiki\/Create%2C_read%2C_update_and_delete\">CRUD<\/a> actions but create the admin-related actions as well<\/li>\n<li>Create views for the CRUD actions AND the admin-related ones too<\/li>\n<\/ul>\n<\/p>\n\n<p>That's 99% of the work taken care of for me!  Why *wouldn't* you want to use a tool like that?  Part of the reason people have been slow to come around to using it is because, well, there is no graphical interface for it.  It's all command line, and for those developers who work on Windows, using the command-line is often a daunting task.  It's not their fault, really.  Windows is a graphical environment after all.  For OS-X types like me, I just pop open a terminal and start baking.  I highly suggest people go and check out CakePHP's [YouTube channel](https:\/\/www.youtube.com\/user\/CakePHP) for screencasts about setting up the CakePHP console for both *NIX environments (including OS-X) and Windows.  By installing the console, you can access bake by simply typing 'cake bake' in the root directory of your app.<\/p>\n\n<p>\nRecent additions to bake like the ability to specify your own templates for views means that you can roll out a slightly-customized version of a site even faster.  There are enhancement requests in the CakePHP development queue to extend the abilities of bake to create components, helpers and plugins.  A great tool just keeps on getting better!  Now that I use bake as part of my regular work habits, I ask myself \"how the hell did I ever create anything without it before?\"\n<\/p>\n",
        "date": "2007-07-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why Code Generation Just Works, Damnit!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/11\/why-code-generation-just-works-damnit\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A lot of open source applications suffer from the twin demons of lack of extensive documentation and not enough tests.  Yes, I've mentioned many times in this blog how important I feel having tests built right into your application is.  Not only do you approach creating brand-new functionality differently when you write the tests before you write a line of code, you make it incredibly easy to extend existing code because when you change something, all you have to do is run the tests again.  CakePHP is aiming to have 100% coverage for tests.  It's a noble goal because I've come around to the idea that if you can't test your code automatically, you shouldn't be writing your code that way.<\/p>\n\n<p>\nAnyhow, back on topic.  I've been trying to write some tests for a component that is, well, a little alpha at this point.  Digging into the code has revealed that it is hopelessly tied into another component.  This is only a bad thing because it makes isolating the original component for testing purposes pretty much a hopeless task that I would delegate to my minions if I had any.  Which I don't.  Not yet anyway.<\/p>\n\n<p>\nI am by no means an expert tester as I have been known to be quite hypocritical at times with my own code in that I fail to create tests to verify that the crap I'm actually writing is working the way that it is supposed to.  But I can say that when I was working on the IPTV project I wrote all sorts of tests for the command-line scripts that I wrote and that the coverage was good.  I can quibble with CakePHP's choice of using <a href=\"http:\/\/www.lastcraft.com\/simple_test.php\">SimpleTest<\/a> for the built-in testing suite (I'm a <a href=\"http:\/\/www.phpunit.de\">PHPUnit<\/a> guy myself) but at least they have testing built right in.  Bake even creates the shells of the tests for you.  But anyway, I am straying once again off-topic.<\/p>\n\n<p>\nWhat does code that is easy to test look like?  I think it boils down to two ideas:\n<ul>\n<li>It isn't tied into another component for it's existence<\/li>\n<li>The code itself uses method, function and variable names that mean you don't have to actually read the comments to figure out what's going on<\/li>\n<\/ul>\n<\/p>\n\n<p><i>It isn't tied into another component for it's existence<\/i>.  This is the number one problem I see in a lot of code that needs to be tested.  Component A relies on functions inside component B...and it's impossible to pretend to send info from component B to component A.  There's a concept I learned from my favourite programming book \"The Pragmatic Programmer\" called the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Law_of_Demeter\">Law of Demeter<\/a>.  Basically, it's the idea that a an object should assume as little as possible about the other objects that it has to interact with you.  The downside (as mentioned in the Wikipedia entry) is that you end up having to write a lot of wrapper code so you can keep those objects from knowing too much about each other.  But the upshot is that you will have to learn the awesome testing concept known as Mock Objects in order to make your tests work.  Here's an example of what I'm talking about:<\/p>\n\n<p>\nWe have object A that uses object B, which is a database abstraction component.  Now, as long as Object A doesn't use Object B to access methods or information from Object C (think of object chaining: $this->A->B->foo() is bad for testing) then you can easily test Object A by creating a mock object that represents Object B (and controlling the responses from Object B under testing).  Otherwise, how can you simulate the results of your call to $this->A->B->foo()?  You can't.\n<\/p>\n\n<p><i>The code itself uses method, function and variable names that mean you don't have to actually read the comments to figure out what's going on<\/i>.  I'm of the programming school where you comment WHY you did something as opposed to WHAT you actually did.  If you're doing some weird of bit shifting followed by a little-used algorithm for figuring out the best path for travelling along 7 points, well, I expect the comments to say WHY you're doing what you've done and it will be up to me to decipher the code itself so I understand HOW you did it.  Luckily for me, CakePHP is filled with lots of well-named methods and variables and I'd like to think I've got enough programming experience that I can figure out HOW something is done but I often want to know WHY we're doing that.  I've had several Skype conversations with my fellow CakePHP developers asking why something was being done so I could figure out how to modify it without breaking stuff.  I added functionality to the <a href=\"http:\/\/api.cakephp.org\/1.2\/class_email_component.html\">email  component<\/a> so it would actually send out stuff via SMTP (it currently doesn't do it) and found that the code itself was pretty readable and I didn't require a lot of extra work to figure out how to extend it the way I wanted to go.  That, my friends, is a good example of code that is easy to read and easy to understand.<\/p>\n\n<p>Phew, that's a lot of stuff to dump out of my brain into the blog late on a Friday night.  So, to bring things around full circle I think it's very important to keep in mind that when you are writing code you also need to be thinking about how you would actually test that code.  Even more importantly, you need to think about what happens if someone other than you has to come along and has to change anything.  When your contributing to a project with the impact like CakePHP can have, well, you better damn well make sure that if you never contribute another line of code to the project that other people can take what you've done and keep building on it.  It's fun to do all sorts of fun tricks in code (some of the stuff I saw during a job interview once reminded me of why I don't like cute code tricks) when it's just your own stuff.  But to preserve my sanity, please make your code testable so that when I have to go and add something else to it I don't start screaming your name and pestering you via instant message, shaking a virtual fist at you.<\/p>\n",
        "date": "2007-07-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Pretty Please, Make Your Code Testable",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/06\/pretty-please-make-your-code-testable\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks to Joel Moss for pointing out that there is a problem with my RSS feeds.  I'm trying to figure it out, hopefully it's nothing serious.<\/p>\n",
        "date": "2007-07-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "RSS Feed Problems",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/04\/rss-feed-problems\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the most common complaints currently leveled at the CakePHP project is that \"there is no documentation for version 1.2\".  What people really mean is that there is no one central place where people who want to use the latest version can find documentation.  There are examples in <a href=\"http:\/\/bakery.cakephp.org\">the bakery<\/a> and in threads on the mailing list.  Really gutsy developers can look at the <a href=\"http:\/\/api.cakephp.org\/1.2\/\">API for version 1.2<\/a> or dive into the source themselves.<\/p>\n\n<p>\nNow, a decision was made that there would be no manual released for 1.2 until 1.2 is declared stable (or maybe the API's won't change).  Luckily you can look at an <a href=\"https:\/\/cakeforge.org\/plugins\/scmsvn\/viewcvs.php\/*checkout*\/sandbox\/1.2\/1point2.pdf?rev=155&root=cakedocs\">alpha version<\/a> of the documentation as well.  I suspect that not too many people know that you can find this information and simply assume that there is none available.\n<\/p>\n\n<p>\nSo, what *do* you do when there is little or no documentation?  I'm running into this because I'm trying to use a brand-new component for authorization and access control called (oddly enough) Auth.  It's very useful...but there is no documentation existing for it.  I have access to a soon-to-be-published article about it (thanks Nate!) but it's not giving me enough to go on.  I'm left to call in other favours and get access to the source code of some other apps to see how they are using the Auth component, but some of those examples aren't working for me.  *sigh*.\n<\/p>\n\n<p>\nSo, I ask you, lazyweb style, how do YOU deal with a lack of documentation for a programming component that you want to use?<\/p>\n",
        "date": "2007-07-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Do You Do When There Is No Documentation?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/07\/03\/what-do-you-do-when-there-is-no-documentation\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Since I was moaning to Larry about the lack of tests in CakePHP (even though there is a great test suite based on Simpletest) I felt obliged to add in some tests to my work on adding functionality to the Email component to allow it to send things via SMTP.<\/p>\n\n<p>Using the test suite is actually quite easy:  drop <a href=\"http:\/\/www.lastcraft.com\/simple_test.php\">SimpleTest<\/a> into your cake\/vendors directly and you're ready to start writing your tests.  Having written tests using SimpleTest before it wasn't going to be too hard for me to get them done.  But there was one little problem:  how do you test a component?<\/p>\n\n<p>\nComponents are called via controllers, so there was no way for me to simply instantiate the component and test it out.  After much back-and-forth with Larry (aka PhpNut) via IM I got it working.\n<br \/>\n~~~\nrequire_once LIBS . '\/controller\/components\/email.php';\n\nclass EmailTestController extends Controller {\n    var $name = 'EmailTest';\n    var $uses = null;\n    var $components = array('Email');\n}\n\nclass EmailTest extends CakeTestCase {\n    var $name = 'Email';\n\n    function setUp() {\n        $this->Controller =& new EmailTestController();\n\n        restore_error_handler();\n        @$this->Controller->_initComponents();\n        set_error_handler('simpleTestErrorHandler');\n\n        $this->Controller->Email->startup($this->Controller);\n        ClassRegistry::addObject('view', new View($this->Controller));\n    }\n\n    function testSmtpSend() {\n        $this->Controller->Email->to = 'chartjes@localhost';\n        $this->Controller->Email->subject = 'Cake SMTP test';\n        $this->Controller->Email->replyTo = 'noreply@example.com';\n        $this->Controller->Email->from = 'noreply@example.com';\n        $this->Controller->Email->delivery = 'smtp';\n        $this->Controller->Email->template = null;\n        $this->assertTrue($this->Controller->Email->send(\"This is the body of the message\"));\n    }\n\n}\n?>\n~~~\n<\/p>\n\n<p>\nThe trick ended up being me not knowing to create an instantiation of the controller and then telling it to initialize all components.  Before I was doig that I woudl get all sorts of controller-related errors.  The internals of CakePHP are slowly being revealed to me, which is a good thing because working for <a href=\"http:\/\/www.cakedevelopment.com\">CDC<\/a> pretty much guarantees I will need to understand them inside and out.\n<\/p>\n\n<p>\nI know that testing isn't very glamourous but can you imagine how to debug an Email compnent that sends out email on a specific TCP port without a repeatable unit test?  Me neither.\n<\/p>\n",
        "date": "2007-06-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Testing Components In CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/06\/26\/testing-components-in-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, it's certainly been a very eventful month for your not-so-humble blogger.  Here's what's been ratling around in my brain lately:\n<ul>\n<li>Finally sent over my contribution to <a href=\"http:\/\/devzone.zend.com\/tag\/PHP_Abstract\">PHP Abstract<\/a>, the podcast sponsored by Zend and put together by Cal Evans.  I'll be talking about \"Opinionated Software\" on a future edition of the podcast.  My wife said it was a perfect topic because I'm such an opinionated person.<\/li>\n<li>What stops more people from adopting lightweight web servers like <a href=\"http:\/\/www.lighttpd.net\">lighttpd<\/a> and my current favourite <a href=\"http:\/\/nginx.net\">nginx<\/a> for their PHP setup?  I used to think that mod_php was all that and a bag of chips, but running things via FastCGI seems to be providing me with the kind of performance I like.  I wonder if anyone has done a comparison on how to scale out a PHP site that use php-cgi?<\/li>\n<li>Rallyhat will definitely be a Python site, and I'll be building it with <a href=\"http:\/\/www.djangoproject.com\">Django<\/a>.  As my friend <a href=\"http:\/\/lazyweb.ca\">Kevin<\/a> pointed out:  \"It's almost like programming in a DSL thanks to all those magic methods in Rails and Django.\"<\/li>\n<li>Until gwoo and PhpNut from <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> showed me how to get the most of out using <a href=\"http:\/\/cakebaker.42dh.com\/tags\/bake\/\">Bake<\/a> I never understood why it's such a useful tool.  For a current project I've been using bake to build out all sorts of functionality in a fraction of the time it used to take me.  If you do stuff with CakePHP, do yourself a favour and learn how to use bake.<\/li>\n<li>I discovered that I can actually be more productive using vim as my editor for all my PHP work.  Go check out <a href=\"http:\/\/www.gravitonic.com\/talks\/\">Andrei Zmievski's talk on using vim with PHP.<\/a> Don't fear the command line you OS-X and Linux types!  I never thought I'd like using vim but I've learned to work with it.<\/li>\n<li>I should be getting my new MacBook Pro in the first week of July.  Of all things I miss the most having to work on my 8 year-old PC at home (I'm running Ubuntu Feisty Fawn with E17 as the window manager) I miss <a href=\"http:\/\/quicksilver.blacktree.com\/\">Quicksilver<\/a>.  I still find myself typing Ctrl-Space to bring up the program loader.  If you use OS-X check it out.  Once you start using it you'll wonder why you didn't use it before.<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2007-06-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain - June 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/06\/22\/whats-in-chris-brain-june-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, it turned out that there was a database issue with this blog that was causing the huge problems.  As a result I lost the last two posts. No big deal, really.  To sum up what you missed:\n<ul>\n<li>I moved this server over to a <a href=\"http:\/\/www.veggiehost.com\">Veggiehost<\/a> VPS.  Been happy so far, although you have to configure *everything*<\/li>\n<li>I started a new job working for the <a href=\"http:\/\/www.cakedevelopment.com\">Cake Development Corporation<\/a>, the people behind <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a>.  I'm very excited to get the chance to work from home 100% of the time, contribute to an open source project I believe in, and do the rounds of the conferences as an evangelist for the framework.<\/li>\n<\/ul><ul>\n<\/ul><\/p>\n",
        "date": "2007-06-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Turning Back The Clock",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/06\/20\/turning-back-the-clock\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>...when I say that there will be no posts for the next few days while I move things over to the new VPS.  I have a cool post for when the new site is up and running, one that I am sure will generate a lot of debate.  See you at the new site in a few days.<\/p>\n",
        "date": "2007-06-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "This Time I Mean It...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/06\/06\/this-time-i-mean-it\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>[Note: looks like the move to the new server will take some time as I configure things *just so* so blogging can continue]<\/p>\n\n<p>\nSo I'm sitting around thinking about how I'm going to build out the new rallyhat.com, turning it into a \"plan a baseball road trip site\" and figuring out what tech to use.  To be honest, I've gotten kind of bored with Ruby on Rails for a few reasons.  One is that I understand the tech behind Rails, and don't agree with a lot of the magic methods that Ruby seems to be encouraging.  I like to sort of understand what's going on rather than being told \"just do it this way\".  I don't understand Ruby enough to wade into the source for Rails and figure things out.  Secondly is that I haven't touched any Rails code in months, so any momentum I had has leached out.<\/p>\n\n<p>So, I like to learn new languages because, well, it makes me a better programmer.  I've spent my time this year learning my way around Javascript so I can get a firm grip on just how all this Ajax stuff is supposed to work.  Now I'm glancing over at Python and trying to decide if I want to invest in learning Python so I can try out Django, a web application framework that gets lots of nice things said about it.  Not as flavour-of-web-pi that Rails has become, but a solid, well-documented web application framework.<\/p>\n\n<p>\nSo naturally I do some research and found an interesting post about <a href=\"http:\/\/jesusphreak.infogami.com\/blog\/vrp1\">Python web development frameworks<\/a> that talks about Django vs. Pylons vs. Turbogears.  Very interesting reading and it convinced me that Django is the way I should go if I'm going to become a snake handler on this project.  But I followed some other links and got to a page (can't find it now of course but I remember it) where there was a discussion of glue vs. full stack frameworks.\n<\/p>\n\n<p>\nA glue framework provides you with a bunch of components that you can use together, but don't necessarily have to.  Zend Framework is a PHP glue framework, as it comes with all these cool components that you can pick and choose depending on what you need done.  You're not forced to use them, and this appeals to certain programmers who have fallen in love with their own quirky set of libraries and methodologies.  This used to be me.  To shift this over to Python, since I know no Python at this point i would be pointless to go with a glue framework.\n<\/p>\n\n<p>\nA full stack framework gives you everything you need to create your web app, and pretty much forces you to use it.  <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> is a full-stack framework.  It has a bunch of conventions, and you must follow them or die.  Okay, maybe you won't die but your application will never work properly if you don't understand the conventions.  Django is a full-stack framework.  So, given my knowledge level of Python I think that would be my safe choice.\n<\/p>\n\n<p>However, I have the Imp of the Perverse mumbling into my ear that I should just build the damn site, screw Python because we're tying to get something done here.  So I'm thinking that I need to put my money where my mouth is, and build in CakePHP.  After all, I have that cool interactive console to test stuff with.\n<\/p>\n\n<p>\nSo, give me some feedback:  which do you prefer when building an application? Full stack or glue?<\/p>\n",
        "date": "2007-05-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Glue vs. Full Stack",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/30\/glue-vs-full-stack\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm going to be updating hosts (moving to a VPS solution) so things may get a little wonky around here.  I'll be back posting again once I get everything configured<\/p>\n",
        "date": "2007-05-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Now Entering Radio Silence",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/29\/now-entering-radio-silence\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the things I've been working on in my (increasingly sparse) free-time is an interactive testing console for CakePHP.  I had suggested in an email to the CakePHP mailing list that an interactive console for doing testing of Models would be good.  While at php|tek I spent a lot of time with the CakePHP guys talking about this.  Out of it came some more ideas (like the ability to test your routes) and they even implemented a console that spits out API information for you.  Very cool stuff.  So, I decided to do a little screencast demo of a very early alpha version of the interactive console.  Hope you like it.\n<\/p>\n\n<p><br \/><br \/>\n[flv:http:\/\/ia340902.us.archive.org\/2\/items\/ScreencastForCakephpsInteractiveConsoleAlpha\/console_demo.flv 420 320]<\/p>\n\n<p>\n[Note: moved the screencast to be hosted on archive.org, so that may be responsible for slow loads and pauses in streaming]<\/p>\n",
        "date": "2007-05-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Screencast: Interactive Console for CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/25\/screencast-interactive-console-for-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I question I see a lot on the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> mailing list is \"can CakePHP scale?\".  Now, other than this being an incredibly general statement it got me to thinking about scalability.  In many ways the issue is like security: developers expect security to be \"built into the application\" when time and time again it has been pointed out that security is the responsibility of the developer, not the language itself.  If you don't make sure to filter your input and escape your output, well, who's fault is that really?  Yes, I know there are cool things like the filter extension for PHP and that many frameworks have helpers that can automagically filter your input.  But that's still code written by someone else that HAS TO BE USED.<\/p>\n\n<p>\nSo, what does this have to do with scaling?  Well, let's look at it from several different perspectives.  At the language level, it has been proven that PHP's shared-nothing tendencies mean that it is suited to what I call horizontal scaling, where you add more web servers running PHP on them.  No need for a central chokepoint means you can scale by simply adding more servers.  It's really that simple.<\/p>\n\n<p>\nNow, once you start adding in shared resources (like a database or centralized session storage) the problem ceases to be PHP's and becomes the problem of the developer.  Why? Because now you have to write your application (or components of your application) with these shared resources in mind.  You're now involving resources OTHER than PHP in the equation as well.  Say you have a centralized database and multiple application servers.  Is the ratio of reads to writes high enough that response time to the database server will be low enough to not impact application performance?  If you use replication, is replication lag going to kill you?  All these questions are beyond the scope of PHP.<\/p>\n\n<p>\nDuring my talk at php|tek I got asked if I thought that adding a framework to your code meant unnecessary overhead.  Unfortunately, the answer is \"it depends, but I try not to worry about it\".  The reason for this wishy-washy answer is that I find that when you start using a framework, you can stop using custom code for low-level things and instead use whatever the framework is using (like DB access or form creation helpers).  You gain in speed because, well, you don't have to write those things, you just have to learn how to use them.  The trade-off is developer speed vs. application speed, but there are things you can to increase application speed:  output caching, opcode caching, data partitioning, server tweaking.  Again, all those things are not done in PHP-land.\n<\/p>\n\n<p>So, looking at the above I think it's pretty obvious that scaling is not the responsibility of PHP (or a framework in this case) but the responsibility of the developer.  When you are building an application, you need to be mindful of the actual design so that when the time comes you will be able to scale horizontally by adding more servers or you can scale vertically (moving functionality around to different levels of your application) with minimal headaches.  Having been through this on an adult dating site, I can say without a doubt that trying to scale your application after the fact just doesn't work.  Do your homework, understand the problem, and don't ask if a framework can scale.  Ask yourself if you know how to build a scalable application in the first place.\n<\/p>\n",
        "date": "2007-05-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Who Is Responsible For Scaling?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/23\/who-is-responsible-for-scaling\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Just finished giving my talk at php|tek 2007, and feedback was good.  Still talked a little too fast, but I think I can conquer that problem.  Anyhow, I totally forgot to record the talk as a screencast (the speaker before me talked all the way through my prep time) so all I can give you is the slides.  If any of the attendees read my blog (c'mon, I know you do!) I'd appreciate some feedback.  I was planning on retiring this talk...but I think it still has some legs for future conferences.<\/p>\n\n<p><a href='https:\/\/www.littlehart.net\/atthekeyboard\/wp-content\/uploads\/2007\/05\/phptek-2007.pdf' title='Slides from php|tek 2007'>Slides from php|tek 2007<\/a><\/p>\n",
        "date": "2007-05-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live from php|tek!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/17\/live-from-phptek\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I fly out to Chicago tomorrow morning for <a href='http:\/\/www.phparch.com\/phptek'>php|tek<\/a> where I'll be giving my talk \"What Can PHP Learn From Ruby On Rails\" on Thursday.  The talk is significantly different from the one I gave in Vancouver back in February (with colour and graphics even!) as I've cut down the number of slides so I can talk slower and leave room for questions at the end.  If you're going to be in Chicago don't hesitate to come up and talk to me.  I may be grumpy (ask the people on the CakePHP mailing list) but I love to talk about programming and technologies.  Just like last time, I'll be doing a screencast of my talk and posting it up on the site.  It will also be an excuse for me to learn how to properly use Amazon S3 to save on my bandwidth bills. :)\n<\/p>\n\n<p>\nOn an unrelated note, I'll be able to play with my <a href=\"http:\/\/www.neurosaudio.com\/osd\/osd.asp\">Neuros OSD<\/a>, an open source media center that runs Linux, when I get back from the conference.  All I need to do is plug in an external drive and I can start recording TV shows and showing movies I already  had before.  Awesome piece of technology and a great price at around US$230 depending on where you buy it from.\n<\/p>\n",
        "date": "2007-05-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Off To php|tek",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/15\/off-to-phptek\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Thanks to everyone for the great comments to my previous post on this topic.  I think I may have found the answer to what I was looking for.  Cal Evans over at the Zend Developer Zone gave me a heads-up that he would be posting a tutorial on <a href=\"http:\/\/devzone.zend.com\/node\/view\/id\/2019\">using Flex and PHP<\/a>.  I believe my exact words to him after about 10 minutes of playing with it was \"this is FUCKING cool!\".  Which it definitely is.<\/p>\n\n<p>\nFlash at the front, and PHP at the back I think is the sweet spot for me.  I followed his tutorial (which was very well done, kudos to you Cal) and in under ten minutes from having FlexBuilder installed (30 day trial, but FlexBuilder is really expensive at US$499) I had a very simple Flex app that was talking to my Zend Framework-powered PHP application.  I built a very simple playlist editor where I could add and remove items from the playlist.  In invested a grand total of 30 minutes in playing with it.  Big props to Adobe for creating such a cool tool for \"rich internet applications\".  I was hoping I could catch Mike Potter's talk at php|tek but I don't know if I'll make it in time.  My flight is supposed to touch down at 11:00AM in Chicago and the talk is at 11:30...only a miracle would get me there in time.\n<\/p>\n\n<p>I'm thinking of seeing if I can build a media upload app using Flex on Monday for the supersecret IPTV project I've been working on since I started at Syneron.  Think I can do it?  Cal tells me that there are some open source tools out there for doing Flex work so maybe I won't have to buy it. :)  Hey Mike Potter, can't you help a developer out and get me a free copy of Flex Builder? :)  Check out <a href=\"http:\/\/flex.org\">the Flex web site<\/a> to see what might be the next wave of internet applications.  Flash is pretty much the only cross-browser technology that always works the same.  Or so I've been led to believe.\n<\/p>\n",
        "date": "2007-05-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Where Are The Good Development Tools For PHP, Part II",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/12\/where-are-the-good-development-tools-for-php-part-ii\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\"After PHP 6, I think that's it for PHP.\"  Those words were spoken to me by my boss while we were having lunch at the crazy-busy sushi buffet restaurant near the office.  I choked a bit on my food.  After all, my boss is a former Zend employee and utterly competent PHP programmer.  \"There's no innovation going on in the language.\"<\/p>\n\n<p>\"Well, what sort of innovation do you think Rasmus and the boys should be doing?\" I asked him.<\/p>\n\n<p>\"It's not about the language, because there is lots to like.  It's the tools.  Ever watch a .Net programmer build something?  Visual Studio is the best tool around for building applications.  Things like Zend Studio and Komodo are 10 years behind.  You're struggling with the interface for that playlist editor, right?  There should be drag-and-drop interface tools that integrate with your PHP code.  Your friends from ActiveState should be trying to one-up Visual Studio, not building tools for script kiddies.\"<\/p>\n\n<p>Having never seen a .Net programmer at work, I'll have to take Daniel's word for it.  But he does have a point.  It's clear to me that Adobe and Microsoft have decided the best way to dominate the internet is to ignore those pesky developers and instead try to turn designers, who know how to build decent interfaces, into developers as well.  Adobe Flex and the new Microsoft Silverlight are perfect examples of this, and are even stealing ideas from the while Getting Real crowd:  build the interface first, then plug in the code behind it.<\/p>\n\n<p>So I ask you, where are the tools to turn guys like me into passable interface designers?  Why do I have to code Ajax interfaces in PHP by hand?  How much time am I going to have to waste trying to code Javascript and integrate things like TinyMCE into my applications.  Where is Visual Studio for PHP?  Or, more importantly, does Visual Studio let you do drag-and-drop interface design with PHP?<\/p>\n\n<p>Of course, now I wonder if Daniel is right.  Should I be learning other tools?  The answer is, of course, yes.  I'm already doing that by my commitment to learning Javascript to make all this Ajax stuff work properly.  But what about PHP?  Did PHP make a mistake by making such a bold leap from PHP 4 to PHP 5?  Possibly.  Converting an app from PHP 4 to PHP 5 is usually simply not doable, because if you are really going to take advantage of the new features of PHP you have rewrite your app.  Having worked with PHP 5 for a while now, I have to agree.  Yes, your PHP 4 app can run on PHP 5 but what do you gain?  Not much.<\/p>\n\n<p>So what should I do know.  Ruby on Rails?  For all the neat stuff going on, it's still such a very small part of the web development world, and I still have my doubts about how you scale out a Ruby on Rails app.  Yes, I know, build it first and worry about it later, but I think it's still a valid question.  Is it time to learn how to use Flex?  Is it time to leave the cozy confines of OS-X and go over to the Microsoft world? What is out there?  When I'm at php|tek next week I'll start asking some questions of developers there to see what they think.<\/p>\n",
        "date": "2007-05-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Where Are The Good Development Tools For PHP?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/08\/where-are-the-good-development-tools-for-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Now that I have to actually design interfaces for other people, I am learning the finer details of Javascript.  Specifically, I'm using <a href=\"http:\/\/jquery.org\">JQuery<\/a> as my library of choice.  I won't go into why I'm using, just go to the site and see it for yourself.  One of the things I've had to build recently is a playlist editor for the IPTV project.  I decided to be user-friendly for once, and make it Ajax-powered.  So this meant a lot of work creating small little actions in my Zend Framework code to accept form posts, etc.  Still cleaning things up, but I wanted to share some of the coolness from using a <a href=\"http:\/\/www.malsup.com\/jquery\/form\/\">jQuery form plugin <\/a>.<\/p>\n\n<p>\nSo, never having really done any Javascript form validation (I know you're shocked) I unleashed my inner \"programmer\" to go and hack away at it so I can figure it out, then call back my inner \"developer\" to make the code elegant and compact.  It took me all morning but I figured it out thanks to Google and just hacking away at it.  One of the neat things about Javascript is that it supports the ability to dynamically define functions in your code.  With it's extensive use of callbacks, jQuery leverages this to the hilt. I believe this is what the Ruby crowd refers to as \"blocks and closures\".  Please correct me if I'm wrong.  Okay, so here's some code that illustrates how I was doing validation of the form:\n<br \/>\n~~~\nfunction saveBinary(playlist) {\n    var options = {\n        beforeSubmit: validateBinary,\n        success: function() {\n            $(\"div#media\").load(\"\/elostv\/getBinaries\/playlist\/\" + playlist);\n            $(\"div#editMedia\").html('<div align = \"center\"><br \/>Added media <\/div>'\n                + '<a onclick=\"addBinaries(\\'' + playlist + '\\')\">Add media<\/a>');\n        }\n    }\n\n    $(\"#addMedia\").ajaxSubmit(options);\n}\n~~~\n<\/p>\n\n<p>\nIsn't that nice?  Compact, simple, readable.  All the things a developer strives for.  In summary, the .ajaxSubmit() method lets you define a bunch of callback functions as part of the submission process.  The 'beforeSubmit' is used to handle validation, while the 'success' is stuff that gets triggered if the form submission comes back ok.  Here's the validation code (again, very simple and I'll save the advanced regex matching for the beta).  Here's the validation callback:\n<br \/>\n~~~\nfunction validateBinary(formData, jqForm, options) {\n    var allFields = true;\n\n    for (var i=0; i < formData.length; i++) {\n        if (!formData[i].value) {\n            allFields = false;\n        }\n    }\n\n    if (!allFields) {\n        alert('Please fill out every field in the form!');\n        return false;\n    }\n}\n~~~\n<\/p>\n\n<p>\nNow that I've done this once, I imagine the second time around will be much easier.  Trying to keep things simple when you're on a very tight schedule can be difficult, and I think I've done that despite a few missteps while trying to figure out what jQuery plugin to use to handle my form stuff.<\/p>\n",
        "date": "2007-05-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Form Validation with jQuery",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/04\/form-validation-with-jquery\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Now, this might sound like a weird thing to say, but as a programmer I think you fall in one of two categories:  you're a carpenter or you're a sculptor.  This relates to how you build your applications from scratch, and it says a lot about your programming style.<\/p>\n\n<p>A carpenter starts with a few pieces of wood and then starts cutting them, shaping them and building something.  Carpenter developers are the ones most likely to keep their code small and elegant, like they are a craftsman building a nice piece of furniture.  They will measure and cut and shape smaller pieces to make something bigger.  They start of small, and seem to know exactly how to fit the pieces together, often creating code that is easy to extend.  Sometimes there are few unnecessary pieces (think of it as intricated carvings) but, damnit, their code always looks good.  Sadly, this is not me.<\/p>\n\n<p>Sculptor developers, on the other hand, start off with a large block of raw code.  Then they start to see the application and start to chip away at, smoothing things, carving what you see inside it. You find flaws that are hard to overcome, but you do your best to work around them.  In the end, you keep going until you see the vision you had at the beginning, and you've removed everything that isn't needed to make the vision happen.  This is how I tend to do things.<\/p>\n\n<p>\nWhich method is better?  I'm not really sure.  I think the carpenter will get stuff done faster because they start with less, slowly adding onto it by concentrating on making sure everything fits together nicely.  The sculptor takes longer because they create a huge base of code and that start removing things, or reshaping the application as they go along.  In the end, you get to the same point, a working application, but was it worth all the effort?\n<\/p>\n\n<p>I started thinking about this today because I'm building an Ajax-powered playlist editor for my IPTV project at work.  I banged out a ton of code for the editor and, frankly, I'm not happy with it all.  I feel like I've done this the brute-force way and that I will be doing some heavy refactoring to get to that elegant, \"metrosexual\" code that my boss seems to effortlessly create.  He's a carpenter in the way he builds his code, and I'm striving to learn all I can.  His refactoring skills are great, which is good for a sculptor like me.  Could I ever be a carpenter?  I find it unlikely, but I can learn to apply a precision chainsaw to my big block of raw code to get to the finished product faster.  Let me know in the comments what category you feel you are under.\n<\/p>\n",
        "date": "2007-05-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Carpenter or Sculptor?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/05\/02\/carpenter-or-sculptor\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've become a convert to the design concept that says when you build something with an MVC pattern, you should have fat models and skinny controllers.  What does this really mean?  It means that you put as much of your business logic as you can into your models and all the controller should be doing is retrieving data from the model and passing it to the view.  Nice and simple, but a very powerful concept once you start doing it.<\/p>\n\n<p>So, despite my problems using the RADAR concept for the <a href=\"http:\/\/www.ibl.org\">Internet Baseball League<\/a> web site, I did do the models and controllers the way I wanted.  Here's what I'm talking about:\n<br \/>\n(Note the use of overriding the default table and database names.  CakePHP lets you use legacy databases, and don't let anyone tell you otherwise)\n~~~\n\/**\n * Model for accessing schedule table\n *\n * @author Chris Hartjes\n *\/\n\nclass Schedule extends AppModel\n{\n    var $name = 'Schedule';\n    var $useTable = 'sched2007';\n    var $useDbConfig = 'stats';\n\n    function get($week) {\n        $scheduledGames = array();\n        $team = array(\"a01\" => \"BUF\", \"a02\" => \"COU\", \"a03\" => \"HAG\", \"a04\" => \"TRI\",\n                    \"a05\" => \"BOW\", \"a06\" => \"MCM\", \"a07\" => \"PHI\", \"a08\" => \"WMS\",\n                    \"a09\" => \"LAW\", \"a10\" => \"PAD\", \"a11\" => \"POR\", \"a12\" => \"STL\",\n                    \"n01\" => \"CSP\", \"n02\" => \"COL\", \"n03\" => \"MIN\", \"n04\" => \"SDQ\",\n                    \"n05\" => \"BUZ\", \"n06\" => \"CAJ\", \"n07\" => \"DTR\", \"n08\" => \"SCS\",\n                    \"n09\" => \"CRE\", \"n10\" => \"MAD\", \"n11\" => \"SEA\", \"n12\" => \"SPO\");\n        $results = $this->findAll(\"home LIKE 'a%' AND week = \" . (int)$week);\n        $data = array();\n\n        foreach ($results as $result) {\n            $home = $team[$result['Schedule']['home']];\n            $away = $team[$result['Schedule']['away']];\n            $data[$home] = array('home' => $home, 'away' => $away);\n        }\n\n        asort($data);\n\n        foreach ($data as $home => $matchup) {\n            $scheduledGames[$home] = $matchup;\n        }\n\n        $results = $this->findAll(\"home LIKE 'n%' AND week = \" . (int)$week);\n        $data = array();\n\n        foreach ($results as $result) {\n            $home = $team[$result['Schedule']['home']];\n            $away = $team[$result['Schedule']['away']];\n            $data[$home] = array('home' => $home, 'away' => $away);\n        }\n\n        asort($data);\n\n        foreach ($data as $home => $matchup) {\n            $scheduledGames[$home] = $matchup;\n        }\n        \n        return $scheduledGames;\n    }\n}\n~~~\n<\/p>\n\n<p>\nNow *that* is a fat model.  I'm manipulating all the business logic within my model and returning it.  Now, here's what the controller looks like:\n<br \/>\n<br \/>\n~~~\n\/**\n * Controller for displaying individual weeks\n * of the IBL schedule\n *\n * @author Chris Hartjes\n *\/\n\nclass ScheduleController extends AppController\n{\n    var $name = 'Schedule';\n    var $uses = array('Schedule', 'Game');\n    var $layout = 'rosters';\n    var $cacheAction = \"1 day\";\n\n    function index($week)\n    {\n        $game = new Game();\n        $week = (int)$week;\n\n        if ($week == 0) {\n            $week = $game->getMaxWeek();\n        }\n\n        $schedule = new Schedule();\n        $this->set('schedule', $schedule->get($week));\n        $this->set('week', $week);\n        $this->set('maxWeek', $game->getMaxWeek());\n        $this->set('scheduleWeek', $week);\n    }\n\n}\n~~~\n<\/p>\n\n<p>See, the schedule controller is nice and thin.  All it does is get the week as a parameter passed into it via the URL and then tells the model to give me all me the schedule for the week.  Simple, easy to understand and even easier to maintain.<\/p>\n\n<p>\nI know that sometimes these things don't make sense at first but once you actually use them...and then have to go and modify something you quickly realize just what advantage you are getting from it.  Try seeing if you can refactor your MVC-based app (CakePHP or otherwise) to have Fat Models and Thin Controllers.\n<\/p>\n",
        "date": "2007-04-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Fat Models, Skinny Controllers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/27\/fat-models-skinny-controllers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Being a programmer with Attention Deficit Disorder when it comes to new ideas.  I'm always interested in new ideas, technologies and programming languages.  So, since I had been doing some work with web services I found the RADAR idea very interesting.  I even posted some code snippets and thoughts about it.  Then I went and tried to actually implement it.  Not so good.\n<\/p>\n\n<p>\nThe pages worked fine in Firefox, but IE was complaining all over the place about it.  Bad XSLT and other weird errors.  Since I had to get the thing fixed in short order, I followed my \"just build it, damnit\" mantra and ripped out all my code that called the REST service and did it without the web service.  Am I disappointed?  Hell yes.  I was *convinced* this was a good idea.  But perhaps the truth of the matter was that I was trying to solve a problem that did not exist, with the lofty goal of \"make your application the API\" that I've seen espoused in many places.\n<\/p>\n\n<p>\nSo what went wrong?  I still have no clue.  All I can do is go back to what I did and try it again.  On the surface it should've worked properly.  The problem with what I was doing was that with it spitting back information via XML, debugging things when they've gone wrong is hard.  Or maybe it's hard *for me* because I haven't spent much time doing something like this.<\/p>\n\n<p>\nThat's really the downside to playing with new technologies:  if you're not 100% sure how to debug it when it goes wrong, you could end up doing more harm than good.  I think REST is still a really good method by which to \"make the site your API\".  I can now spend some time looking at it and seeing if I can't figure out just where I went wrong.<\/p>\n",
        "date": "2007-04-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Happens When A Good Idea Doesn't Actually Work?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/24\/what-happens-when-a-good-idea-doesnt-actually-work\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Here are some of the things bouncing around in my head this month:<\/p>\n\n<ul>\n<li>Following my \"just build it, damnit!\" mantra, I finally got the new <a href=\"http:\/\/www.ibl.org\">web site for my simulation baseball league<\/a> launched.  It's not 100% the way I want it layout-wise, but I can tweak that going forward.  It at least has all the content that's required.<\/li>\n<li>Make sure you test your stuff in IE7.  I spent 2 hours debugging my RADAR-based stuff for the above-mentioned site and gave up on it, pulling it all out in the interest of getting the damn thing working.  I'm obviously doing something wrong, but at 12:30AM I was interested in making sure it just works.<\/li>\n<li>Now, I have time to work on the interactive console for CakePHP, hopefully getting it done in time for <a href=\"http:\/\/www.phparch.com\/tek\">php|tek<\/a><\/li>\n<li>Speaking of php|tek, I have to also start working on fixing up my presentation with the shiny new graphics (Ian, you need to email me about this!) so that it looks better and flows better.  Lots of complaints that I went too fast so I want to cut about 10 slides, slow it down, and leave time for questions.  I'm sure there will be lots of hecklers (I'm looking at you, <a href=\"http:\/\/cake.insertdesignhere.com\/\">Nate<\/a>) so I'll need time to smack them down.<\/li>\n<li>Don't worry <a href=\"http:\/\/www.teachersatrisk.com\">Mom<\/a>, I haven't forgotten about that sidebar widget I promised you<\/li>\n<li>My friend Kevin B. continues to delve deeper into Rails, and thanks me for pointing him at Erlang (check out <a href=\"http:\/\/yarivsblog.com\">this blog<\/a> for some more info about a guy doing some cool things with Erlang)<\/li>\n<li>I've come to the conclusion that I don't watch enough TV for a MythBox to be of use to me, but my oldest still watches a lot of TV.  Unsure what to do here.  Maybe the XBox Media Center is still a good solution, and teach my oldest to use the interface to download stuff she's interested in.<\/li>\n<li>Komodo vs. Zend Studio still rages on for supremacy on my MacBook Pro.  I want to support the Komodo guys because I've developed personal relationships with some of the employees, but Zend Studio just feels a little more responsive and lets me setup remote projects (I like to edit my files remotely instead of locally and copying them over).  The latest beta of Komodo that I was asked to check out is getting there in terms of auto-completion, and I hope they've found my feedback to be of value.\n<\/li>\n<li>My own Rails stuff has been shoved aside for the foreseeable future.  I just don't have the time, and my PHP chops are getting back to where I want them again thanks to my work projects.  I guess I just don't have the hate-on for PHP that some of my friends do.<\/li>\n<\/ul>\n",
        "date": "2007-04-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain, April 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/17\/whats-in-chris-brain-april-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Okay, time for some code samples to boost traffic to my site.  In a previous posting I talked about the idea of <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/04\/04\/keep-an-eye-on-your-radar\/\">RADAR<\/a>, or RESTful Application, Dumb-Ass Recipient.  So, wanting to see if I could put it into use, I decided to do the following for a new application:\n<ul>\n<li>Have the core of the application provide data via a REST service<\/li>\n<li>For the web part of it, create controller \/ action pairs that call the REST service and pass the output onto the views<\/li><\/ul>\nI'm hoping that some of the other programmers in the league (there are a few) get interested in using the REST API I've put together and build off of it.  The API is in place, so they can build their own apps around it.  Should be an interesting experiment anyway.\n<\/p>\n\n<p>\nSo, some code examples of building CakePHP apps the RADAR way:\n~~~\nclass IndexController extends AppController\n{\n    var $name = 'Index';\n    var $uses = array('Game', 'Schedule');\n\n    function index()\n    {\n        uses('XML');\n        $game = new Game();\n        $week = $game->getMaxWeek();\n\n        \/\/ Pass these variables to the view\n        $standings =& new XML($this->requestAction('\/rest\/standings\/' . $week , array('return')));\n        $schedule =& new XML($this->requestAction('\/rest\/schedule\/' . $week, array('return')));\n        $results =& new XML($this->requestAction('\/rest\/results\/' . $week, array('return')));\n        $this->set('results', $results);\n        $this->set('schedule', $schedule);\n        $this->set('standings', $standings);\n        $this->set('week', $week);\n    }\n}\n~~~\nThis is the controller for the \"portal\" page of the new web site I'm working on.  Since I don't have access to PHP 5 for this project, I have to use the built-in XML object instead of SimpleXML (curse you, PHP 4).  The key here is the use of requestAction to hit my REST API and return the response, and then pipe that response into an XML object, that in turn gets passed to the view.  Since I like my clean URL's, I'm using the same trick I used before in the REST controller's so I can do http:\/\/host\/rest\/results and get it to spit back XML:\n~~~\n    \/**\n     * REST service for return games for the requested week\n     *\n     * @param integer $week\n     *\/\n    function results($week)\n    {\n        $games = new Game();\n        $this->set('results', $games->getWeeklyResult($week));\n        $this->set('week', $week);\n    }\n\n    \/**\n     * REST service for returning schedule for particular week\n     *\n     * @param integer $week\n     *\/\n    function schedule($week) {\n        $team = array(\"a01\" => \"COU\", \"a02\" => \"CAP\", \"a03\" => \"TRI\", \"a04\" => \"BUF\",\n              \"a05\" => \"MCM\", \"a06\" => \"WMS\", \"a07\" => \"PHI\", \"a08\" => \"BOW\",\n              \"a09\" => \"STL\", \"a10\" => \"PAD\", \"a11\" => \"POR\", \"a12\" => \"LAW\",\n              \"n01\" => \"SDQ\", \"n02\" => \"CSP\", \"n03\" => \"MIN\", \"n04\" => \"CAJ\",\n              \"n05\" => \"BUZ\", \"n06\" => \"HAG\", \"n07\" => \"DTR\", \"n08\" => \"COL\",\n              \"n09\" => \"SPO\", \"n10\" => \"SEA\", \"n11\" => \"MAD\", \"n12\" => \"CRE\");\n\n        $schedule = new Schedule();\n        $this->set(compact('week', 'team'));\n        $this->set('results', $schedule->get($week));\n    }\n\n    \/**\n     * Output standings based on the week passed into it\n     *\n     * @param integer $week\n     *\/\n    function standings($week)\n    {\n        $divisions = array('AC West' => array(\"STL\" => \"St. Louis Rivermen\", \"PAD\" => \"Palo Alto Devils\", \"POR\" => \"Portland Gryphons\", \"LAW\" => \"Los Angeles Wildmen\"),\n                          'AC Central' => array(\"MCM\" => \"Motor City Marauders\", \"WMS\" => \"Williamstown Thunder\", \"PHI\" => \"Philadelphia Phantasm\", \"BOW\" => \"Bowling Green Bandits\"),\n                          'AC East' => array(\"COU\" => \"Chicago Cougars\", \"CAP\" => \"Capital City Fruit Bats\", \"TRI\" => \"Tri-State Traffic\", \"BUF\" => \"Buffalo Thunderherd\"),\n                          'NC West' => array(\"MAD\" => \"Monrovia Madness\", \"SEA\" => \"Seattle Rainers\", \"SPO\" => \"Spokane Chiefs\", \"CRE\" => \"Crescent City Redwoods\"),\n                          'NC Central' => array(\"BUZ\" => \"Boston Buzzards\", \"COL\" => \"Colorado Corsairs\", \"HAG\" => \"Habana Gigantes\", \"DTR\" => \"Detroit Rangers\"),\n                          'NC East' => array(\"CSP\" => \"Casper Ghosts\", \"MIN\" => \"Minnesota Snow Bears\", \"SDQ\" => \"San Diego Quakes\", \"CAJ\" => \"Carolina Cajuns\")\n                          );\n        $standings = new Standings();\n        $standings->getData($week);\n\n        foreach ($divisions as $divisionName => $divisionTeams) {\n            $divisionStandings[$divisionName] = $standings->getDivisionalStandings($divisionTeams);\n        }\n\n        $this->set('divisionStandings', $divisionStandings);\n    }\n~~~\nI'm planning on making the index action for the REST controller point to documentation on how to actually use it, which I think is a nice touch.\n<\/p>\n\n<p>\nOkay, so now one of the views using the XML object.  Again, I think it's such an ugly hack because I can't use SimpleXML.  Nate has discussed with me the possibility of trying to make something built-in to CakePHP that uses a SimpleXML-like interface so that it will work in PHP 4 as well.  We shall see...\n~~~\n<br \/><br \/>\n<center>Standings as of week < ?php echo $week ?><br \/><br \/><\/center>\n<?php\n$standings = $standings->child('standings');\n$divisionalStandings = $standings->children('division');\n?>\n<center>\n<table>\n    <tr>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[0])) ?><\/td>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[3])) ?><\/td>\n    <\/tr>\n    <tr>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[1])) ?><\/td>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[4])) ?><\/td>\n    <\/tr>\n    <tr>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[2])) ?><\/td>\n        <td>< ?php echo $this->renderElement('divisional_standings', array('division' => $divisionalStandings[5])) ?><\/td>\n    <\/tr>\n<\/table>\n<\/center>\n~~~\nThat's the main view for doing the standings, and it's done as an element called in my main index view.  Now, here's the view that actually generates the standings for a particular division:\n~~~\n<table>\n    <tr>\n        <th><b>< ?php echo $division->attributes['name'] ?><\/b><\/th>\n        <th><b>W<\/b><\/th>\n        <th><b>L<\/b><\/th>\n        <th><b>Pct<\/b><\/th>\n        <th><b>GB<\/b><\/th>\n    <\/tr>\n<?php foreach ($division->children('team') as $team) : ?>\n    <?php\n    $name = $team->child('name');\n    $w = $team->child('w');\n    $l = $team->child('l');\n    $gb = $team->child('gb');\n    $pct = $team->child('pct');\n    ?>\n    <tr>\n        <td>< ?php echo $name->value ?><\/td>\n        <td align='right'>< ?php echo $w->value ?><\/td>\n        <td align='right'>< ?php echo $l->value ?><\/td>\n        <td align='right'>< ?php echo sprintf(\"%0.3f\", $pct->value) ?><\/td>\n        <td align='right'>< ?php echo $gb->value ?><\/td>\n    <\/tr>\n<?php endforeach; ?>\n<\/table>\n~~~\n<\/p>\n\n<p>\nSo, there you have it!  Remember, the idea of RADAR is that you have a REST service at the core of your application, and then you provide a \"proxy\" for dumb clients like browsers that only understand HTML natively.  That way you make your application it's own API, and everything else is just clients that hang off the API.  As an example, I could build a plugin for the sidebar of my <a href=\"https:\/\/www.littlehart.net\/attheballpark\">baseball blog<\/a> that shows the standings for the division my team is in.  I could hit the REST service, then manipulate the results via XML and spit it out.  \n<\/p>\n\n<p>\nI hope the example above gives you a different perspective on putting together your application.\n<\/p>\n",
        "date": "2007-04-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Doing RADAR in CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/11\/doing-radar-in-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I need a design for a t-shirt done up for me, based on the phrase \"Be a developer, not a typist!\".  If you can help me out on a pro-bono basis, send some mail to chartjes@littlehart.net.\n<\/p>\n",
        "date": "2007-04-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Lazyweb: Need a t-shirt artist",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/05\/lazyweb-need-a-t-shirt-artist\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Over at the PragDave blog (written by Dave Thomas of the Pragmatic Programmers) he has a very interesting article about a <a href=\"http:\/\/pragdave.pragprog.com\/pragdave\/2007\/03\/the_radar_archi.html\">new architecture for web applications<\/a> that he calls RADAR for RESTful Application, Dumb-Ass Recipient.  Why do I think this is important?  Because it makes so much sense. :)<\/p>\n\n<p>\nIn a nutshell, he is advocating that you build the core of your web application to supply information via a REST application server, then create a proxy server that can serve up the information in HTML format for clients that can't easily speak REST's language of XML responses, like a web browser.  He has a great section in there:\n\n<blockquote>\nDoes that mean I'm down on the RESTful, CRUD based approach to application development? Not at all. For some categories of application, I think it's a great way of structuring your code. But REST isn't designed for talking to people. So let's accept that fact when creating applications. And, while we're at it, let's take advantage of the fact that HTTP is such a flexible transport. Rather than trying to design one monolithic application than has both the CRUD functionality and the smarts to be able to talk HTML to end users, why not split it into two smaller and simpler applications?\n<\/blockquote>\n\nSo, you can still serve up your data with REST for \"smart clients\" that can directly manipulate the XML resulting from a REST call, but why not filter the REST response through some code that can then output a much-easier-for-humans-to-read version in HTML?\n<\/p>\n\n<p>\nThis isn't really a radical concept, as most people are doing something similar to this already in their code.  He is just advocating doing this on a more defined level instead of just in your code.  See, in Ruby on Rails you have the ability to specify what controller \/ action pair you want for different output types using something called 'respond_to'.  Now, I've used it a tiny bit and while it is a very neat bit of code, it does look kind of hackish to me as well.\n<\/p>\n\n<p>\nInstead, continue to use a REST service as the core application server and then have, for example, an HTML application server that will read data from the REST service and manipulating so it looks real-pretty-like for display purposes.  Ironically, before I read this article I had been structuring the new IBL web site along these lines.  That site is kicking me in the ass because it's PHP 4 only, and PHP 4's XML parsing is just terrible.  Give me SimpleXML or give me death!  Nate has been helping me figure out how to use the XML object in CakePHP, but I have to do a lot of work on the data before it's in a presentable format.  Maybe I will do as Nate suggested and try pushing the XML stuff into the new Set object and see what happens.  You never know.\n<\/p>\n\n<p>\nAnyhow, check out the article on RADAR and see what sort of ideas it gives you in terms of restructuring the architecture of your application.  Simple is good, and this looks like a very simple architecture to understand.\n<\/p>\n",
        "date": "2007-04-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Keep An Eye On Your RADAR",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/04\/04\/keep-an-eye-on-your-radar\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I finish up week 3 at my new job, I have had more code reviews in 3 weeks than I have had in my last 5 years of work.  This is no lie.<\/p>\n\n<p>\nRight now, a code review consists of me either sitting right next to my boss looking at my code on a big monitor or talking via Skype while I am connected to a gotomeeting.com session he is hosting.  Either way, he is in the driver's seat and we go through my code, refactoring things and discussing the original goals of whatever it was I was supposed to be doing.  When we're done, he commits the changes back into our <a href=\"http:\/\/subversion.tigris.org\">svn<\/a> repository, and I'm left to go back and test everything we've changed.\n<\/p>\n\n<p>\nSo far, to be honest, the reviews have been just fine.  What I'm lacking right now is elegance in the code.  My boss likes to joke about making metrosexual code, but what he's really after is code that is elegant, readable, and as simple as possible.  I find that while my code is getting the job done properly, it could be more elegant as I learn (and in some cases relearn) some of the finer points of design and move towards a more OOP-style of thinking instead of the mishmash of OOP and functional I seem to gravitate towards.\n<\/p>\n\n<p>\nThings like returning objects (so that we can chain things as needed), and dumping nested ifs for the sake of readability.  Above all though, he's encouraging me to think about what I'm doing instead of just banging out the code.  Nobody I know gets paid per line of code, and my boss is not some dimwitted pointy-haired-boss who is impressed by the volume of my output as opposed to the quality of what I'm doing.  For the IPTV project I'm working on, the code HAS to be bulletproof and HAS to be able to run unattended as I won't be able to log into the server to hack things on the fly.  I've got a healthy enough level of self-esteem that I am able to take these code reviews not as criticism (which they are not, but would be if I was thin-skinned or had too much ego invested in my code) but as an invaluable opportunity to go back and fix assumptions, drill the manta of elegant code into my programmer's brain, and unlearn bad habits from years of essentially unsupervised programming.  Ouch, kind of hurts to read that now that I've typed it.  \n<\/p>\n\n<p>\nCode reviews and unit testing are probably the two things developers try to avoid as much as they can.  Don't be scared of either one.  You will not believe how much you can benefit from a code review, xtreme programming-style, with a developer who knows what he's doing.\n<\/p>\n",
        "date": "2007-03-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Do You Mean You Haven't Had A Code Review?!?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/31\/what-do-you-mean-you-havent-had-a-code-review\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Sometimes you make a blog post that generates a lot of feedback.  In this case, Nate from CakePHP had a vigorous conversation with me via IM about my blog posting <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2007\/03\/23\/in-spring-time-a-not-so-young-php-programmers-mind-turns-to-frameworks\/\">about frameworks<\/a>.  In a nutshell, Nate took issue with my comment that CakePHP isn't quite there yet because you can't use components from it outside the framework itself.<\/p>\n\n<p>\nNate does have a point here.  Zend Framework is perhaps being *overly* ambitious by not only providing an MVC component, but you can use parts of it outside that MVC component as long as you place the Zend Framework itself in your path.  So is Zend Framework truly a framework?  Yes, as long as you understand that a web application framework means more than just a MVC-based framework.\n<\/p>\n\n<p>\nAt this point, CakePHP is an MVC-based framework only.  That is changing (remember my interactive console project?), but Nate's argument was that perhaps Zend Framework is unfocused and should be concentrating on the MVC part of the web application problem.  Not to mention the fact that it still doesn't have an Active Record implementation for database access.  This particular thing baffles me, but what can you do?  Zend_Db_ActiveRecord (or whatever you could call it) wasn't a priority among the core developers for Zend Framework.  I still can't believe that I have to write SQL by hand with Zend Framework, when I have all those magic methods available to me in CakePHP.\n<\/p>\n\n<p>\nWhich brings me around to another point.  A disproportionately large number of successful open-source projects are the creation of one, very talented, egomaniacal developer.  David Heinemeier Hansson is a great developer (and has a big ego from what I've seen, heard and read about him) and still is one of the main driving forces behind Ruby on Rails.  Without him being there at the beginning, deciding on the core features and rejecting anything he didn't like, who knows how Rails would've ended up?  One of the toughest things to do is to say \"no\" to someone when they ask you for something.  Not many people can do it.  It's an especially important skill to have as a developer, because adding in features when they don't really add anything of value is the kiss of death for an application<\/p>\n\n<p>\nSo, as a result of this sort of \"cult of personality\" that surrounds open source projects (or any popular project) you get people initially choosing projects based on the recommendations of others, not on the merits of the project itself.  Why pick Zend Framework?  It's rich in libraries, backed by a large well-known company in the industry, and has many talented contributors (including yours truly).  But *why* use it for your particular project?  Biggest flaw right now as I can see it is (beating a dead horse here today) lack of an ORM database wrapper.  Again, CakePHP has one so it can't be *that* hard to implement such a thing.  I know that <a href=\"http:\/\/pixelated-dreams.com\/\">Davey Shafik<\/a> has created such a beast for Zend Framework...but it's nowhere to be seen in ZF 0.91 beta and likely ZF 1.0.  C'mon, cut Davey a break and ram it in there.\n<\/p>\n\n<p>\nSo, at this point, CakePHP is probably better suited for building an MVC application, despite the lack of libraries that Zend Framework provides that CakePHP does not.  On the other hand, a decent programmer should be able to quickly implement such things themselves, right?  So, for MVC-based apps that I need to build in a hurry I'm going to pick CakePHP.\n<\/p>\n\n<p>There, Nate.  You happy now?<\/p>\n",
        "date": "2007-03-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "More Framework Fun",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/28\/more-framework-fun\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It's my 36th birthday tomorrow (if you really love me, you'll send money to my PayPal account) and as I get older, I get lazier as a programmer.  I'm interested in getting the most amount of work done with the least amount of work.  So, as someone who fetishizes new web technologies (yes, I can finally admit it) I latched onto web frameworks as a potential solution to my problem.  So, I've tried a lot of them:  Zend Framework, CakePHP, Symfony, Mojavi (back in the day), and Ruby on Rails (not PHP, but the inspiration for a lot of frameworks).\n<\/p>\n\n<p>\nSo, what is it that I expect a framework to do?  I expect it to help me build something faster *and* with less hassle.  The less hassle part is really important to me.  Remember the lazy part above?  If it's a hassle, I'm less likely to want to use it beyond my first tutorial.  So, if a framework helps me to easily and quickly build a web application, I'm all for it.<\/p>\n\n<p>Now, at my current job I lobbied to use CakePHP instead of Zend Framework...and lost that fight.  Existing apps were build in Zend Framework, and with an ex-Zend guy as a boss, well, it seems like it's going to be Zend Framework all the time.  Don't get me wrong, I don't mind Zend Framework (shameless self-promotion: my component for using the webservice that powers <a href=\"http:\/\/last.fm\">Last.fm<\/a> is in the core for the upcoming Zend 1.0 release) but I just prefer CakePHP.  No rational reason, just my fetishizing of the new and shiny.  I'm finding myself attracted to lightweight solutions as well.<\/p>\n\n<p>I wouldn't call Zend Framework lightweight, *but* I can use components of the framework as if they are libraries, instead of only being able to use it as part of an MVC framework.  CakePHP isn't there yet, but they are striving for that ability.  That turns a framework from being strictly for web applications only from being usable for all sorts of other applications.<\/p>\n\n<p>Although I can't talk in detail about the project I'm working on (NDA, competitive advantage for our company) I can say that I've been writing PHP scripts that will be run as cron jobs, and using Zend_Config and Zend_Log.  Now, I could write my own code to do those things (and have done so in the past) but, again, people smarter than me have put the effort into writing components that work really well without me having to worry about it.  That's the less hassle thing I mentioned above.<\/p>\n\n<p>\nWhere frameworks shine is in their ability to provide helpers for output.  CakePHP has some great helpers for doing work with Prototaculous (or is it Scritacutype?) and adding in hooks to allow you build helpers for other Javascript libraries.  This is the stuff that can help a programmer who has only a little bit of UI experience create something more interesting.  Maybe Terry Chay <a href=\"http:\/\/terrychay.com\/blog\/article\/why-frameworks-fail.shtml\">was right<\/a> about frameworks.  His claim is that frameworks are really good for helping you generate fairly complex output dynamically, but using it for anything else is unnecessary.  I don't know if I share that opinion, because not everyone is an ace level programmer who can create well-thought-out architectures, and create elegant modular code that can easily be extended later.  Hell, I'm not one of those (yet) but I'm trying.<\/p>\n\n<p>\nSo, the argument about frameworks will continue on well past the spring.  In fact, it will never stop.  But people will continue to build frameworks in PHP in order to satisfy egos, not for reasons related to productivity.  I guess the fact that something you write will make other people productive seems to be a big bonus.  But why are people so zealous about frameworks?  I might ramble a bit here, so please be patient.<\/p>\n\n<p>\nPeople want other people to write code for them that they can basically dump into place, tweak like one or two things, and then the app of their dreams will be realized.  If the framework doesn't instantly meet their needs, they flame the mailing list about how the framework doesn't meet their needs (which turns out to be so incorrect, either due to their solution to the problem or due to the fact that they can't be bothered to read the existing documentation.)<\/p>\n\n<p>\nSo developers jump from framework to framework, never settling on one long enough to figure out if one is a solution for them.  Applied effort is what really separates programmers, and to use a framework properly you are going to have to not only read the documentation (several times in fact), but probably ask a bunch of questions too.  Failure to do this always leads to abandonment of a tool, no matter what it is.  So people proclaim that framework X sucks, and go onto something else.  And the cycle begins again.  All you can do is roll your eyes, make sarcastic comments about these people to your friends on IM and get back to working on stuff with tools you trust.<\/p>\n\n<p>\nUltimately, every developer finds a set of tools that they like to use.  Despite almost 10 years of programming experience, I have yet to settle on a common set of tools.  Well, the only tool I use quite a bit is PHP for web applications.  Yes, I dabble in other things (Ruby via the Ruby on Rails framework) but I keep coming back to PHP.  I don't have a common set of libraries I use, instead choosing to use whatever components come with the framework I'm using at the time.  Very different from how a lot of developers work, as far as I can tell.\n<\/p>\n\n<p>Maybe I'm a nomad programmer.  Not in the sense that I wander around from place to place programming, but I wander from component to component, library to library as I program.  I wonder how unique this is?  Is it an essential skill if you are the type who likes to pick up new technologies and figure out how to use them?  Hrm, certainly something for me to dwell upon as I'm having my birthday dinner with my long-suffering wife tomorrow night.\n<\/p>\n\n<p>It's clear to me that all my future web applications will involve a framework of some sort, the question becomes will I settle on one now that the \"modern web development framework\" seems to have stabilized around a common set of mechanics and concepts.  Right now it's CakePHP vs. Zend Framework.  Sadly, my Rails work has fallen off to the side because I'm not getting paid to build in it, so I don't get to explore concepts that would allow me to rapidly push my Rails skills forward.  I'm getting into web services in a big way, and those are totally language agnostic.  I'm actually going to try and see if I can create an API for the code I'm using to update the <a href=\"http:\/\/www.ibl.org\">IBL<\/a> web site.  My ability to harness the power of a framework seems to be key to me in order to make these sort of things happen.<\/p>\n\n<p>Get out there and put the required effort into figuring out if a particular framework suits your need.  Get rid of the juvenile \"Framework X sucks, Framework Y rocks!\" attitude.  That's okay in grade school, not amongst even remotely serious developers.  Try and be objective and put the goddamned effort into figuring out how to make your particular problem solvable in the confines of a framework.  You'll be a better programmers for it.<\/p>\n",
        "date": "2007-03-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "In Spring Time, A Not-so-young PHP Programmer's Mind Turns To Frameworks",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/23\/in-spring-time-a-not-so-young-php-programmers-mind-turns-to-frameworks\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Not a whole lot going on.  I joined the <a href=\"http:\/\/www.blackberry.net\">crackberry<\/a> cult today, as my work got me a Blackberry.  It's a very nice little tool, and I look forward to customizing it a little more.  I've already added in a GMail tool so I can check GMail if I'm away from the computer for an extended period.  Anyways, onto what's in Chris' brain.<\/p>\n\n<p>\n<ul>\n<li><a href=\"http:\/\/rallyhat.com\">Rallyhat<\/a> is sitting there doing nothing.  No time.  *sigh*.  Maybe I'll move my baseball blog over to it.  Want to do *something* with that domain.<\/li>\n<li>My <a href=\"http:\/\/www.teachersatrisk.com\">mother<\/a> wants me to do a random posts sidebar widget for her blog (she uses <a href=\"http:\/\/www.wordpress.org\">WordPress<\/a>) as a birthday present.  Is she totally wired in or what?<\/li>\n<li>Interactive console for CakePHP is moving forwards, albeit at a very slow pace.  Added in a token parsing loop, but not totally tested.  I'm really resisting simply cut-and-pasting the shell example I took from <a href=\"http:\/\/www.phpontrax.com\/\">PHP on Trax<\/a>, preferring to actually *gasp* understand how their interactive shell works.  It's about 400 lines of code I'm looking at, and hoping to chop it down.<\/li>\n<li>I have a hard deadline of April 1 to get the new <a href=\"http:\/\/www.ibl.org\">IBL<\/a> site up and running.  I'm about a week behind.  So, that is at the top of the queue, followed by the widget for my mom and then pounding out that shell.  I really would like to have that shell done for my talk in May, as a cool tool that has been \"ported\" from the Rails world over to PHP<\/li>\n<\/ul><\/p>\n",
        "date": "2007-03-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain, March 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/20\/whats-in-chris-brain-march-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>It finally made it!  After some major reworking of the unit tests (at 86% coverage, with 3 more tests to come after the freeze is up) and <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> busting his butt to get the documentation done, Darby Fenton emailed me to tell me that he's moved our component for connecting to the web services being offered by <a href=\"http:\/\/www.audioscrobbler.net\">Audioscrobbler<\/a> (and that powers <a href=\"http:\/\/www.last.fm\">Last.fm<\/a> out of the incubator and into the core.<\/p>\n\n<p>\nAlthough I lobbied very hard at work to use <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> as the framework for web applications, I'm going to be using <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a>.  After a week of using it, well, it's actually not too bad.  Daniel Kushner (my boss) is showing me all sorts of neat stuff I can do with ZF, and we're already extending the framework by adding plugins and custom components.  I suspect it won't be long until I'm an old hand and using this framework.\n<\/p>\n\n<p>Anyhow, I'm quite happy that my component has made it into core, and I've already started thinking about my next component.  It's going to be a work-related one, so I have to talk to Daniel about whether or not I can officially work on it as a Syneron employee or will it be something on my own time.  More to come later.<\/p>\n",
        "date": "2007-03-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend_Service_Audioscrobbler moves to Zend Framework Core",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/16\/zend_service_audioscrobbler-moves-to-zend-framework-core\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Do you live near Irvine, CA?  Are you really good at HTML\/CSS\/Javascript and know some PHP as well?  My employer <a href=\"http:\/\/www.syneron.com\">Syneron<\/a> is looking to hire a webmaster to maintain the corporate web site and probably work on some other projects.  If you're interested, send your resume to me at my work address (chartjes at the company domain.  Figuring this out is a good intelligence test :))\n<\/p>\n",
        "date": "2007-03-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Lazyweb Job Posting:  Webmaster with PHP Skills",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/15\/lazyweb-job-posting-webmaster-with-php-skills\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In a <a href=\"https:\/\/www.littlehart.net\/atthekeyboard\/2006\/11\/29\/using-cakephps-native-web-service-support\/\">previous post<\/a> I talked about how to use the built-in web services in <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> 1.1.x.x.  A very popular piece too according to my site statistics too.  Well, I've discovered that it's even easier in Cake 1.2.x.x.  I bugged Nate via IM for some tips on how to put it together, and it's really very simple.\n<\/p>\n\n<p>\nThe biggest change is that the old way of doing custom routing in web services is gone in favour of handling them via extensions.  In the past, you would go into app\/config\/core.php and enable the special web services routing.  I was trying to do a web service with the URL http:\/\/localhost\/cake_dev\/foo and have it spit out an XML response.  According to what I was told \"...going forward the routes part \/ extensions on the end of the URL is the recommended way of doing it\".  So, if I was doing this the standard way I would be calling http:\/\/localhost\/cake_dev\/foo\/index.xml.  I just like the cleaner URL.  Now, if I was to do it the proper way, I would add in the following to my app\/config\/routes.php file:\n~~~\n\/**\n * Add in support for web services by enabling generating output based on extension\n *\/\nRouter::parseExtensions();\n~~~\n<\/p>\n\n<p>Now, go and create your controller that will handle spitting out some XML:\n~~~\n\/**\n * Test controller for built-in web services in Cake 1.2.x.x\n *\n * @author Chris Hartjes\n *\n *\/\n\nclass FooController extends AppController\n{\n    var $components = array('RequestHandler');\n    var $uses = '';\n    var $helpers = array('Text', 'Xml');\n    \n    function index()\n    {\n        $message = 'Testing';\n        $this->set('message', $message);\n        $this->RequestHandler->respondAs('xml');\n        $this->viewPath .= '\/xml';\n        $this->layoutPath = 'xml';\n    }\n}\n~~~\nSo what am I doing here?  I make sure to use the RequestHandler component so it understands that I want to spit out some XML, and I made sure to include the Xml helper.  Next, I tell the request handler that I want the output to be XML instead of HTML by using respondAs('xml').  Finally, I do some more controller voodoo (Nate contributed this part) by setting $this->viewPath and $this->layoutPath so that I don't have to specify index.xml to get it to spit out results.  A call to http:\/\/localhost\/cake_dev\/foo will spit out an XML result based on my template, which I put into app\/views\/foo\/xml\/index.ctp:\n~~~\n<foo>\n    <bar>< ?php print $message; ?><\/bar>\n<\/foo>\n~~~\nThat spits out the following XML document:\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<foo>\n    <bar>Testing<\/bar>\n<\/foo>\n~~~\n<\/p>\n\n<p>I'm hoping to use this setup for some web services I have to write for work but my boss likes <a href=\"http:\/\/framework.zend.com\">some other framework<\/a>, which isn't surprising since he used to work for them.  I will continue to fight for my right to eat Cake.  Besides, it's all part of my evil plan to get paid to contribute code to the CakePHP project.  I mean, if I need to create an interactive console to do testing then I can build it with Cake and give it back to the community while getting paid at the same time.  What could be better?\n<\/p>\n",
        "date": "2007-03-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Easy Are Web Services in CakePHP 1.2?  Really Easy!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/13\/how-easy-are-web-services-in-cakephp-12-really-easy\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Today was my last day at <a href=\"http:\/\/www.verticalscope.com\">Verticalscope<\/a>.  While I will miss the guys I work with (I'm looking at you, Rick) I sure won't miss the commute.  Also, I won't miss that nagging feeling in the back of my mind that kept telling me it was time to move on.  \"Know when to go\" is something I've talked about before on this blog, and it was very appropriate this time.<\/p>\n\n<p>If you're expecting me to dish dirt on why exactly I left (those who know me obviously know the whole story) you won't find it here.  My now-former co-workers have a very tough road ahead of them:  rolling out a new network and trying to see if one site can make enough to support 40 other ones.  I don't envy them their task, but I won't be worrying about it as I sit in my dining room in the comfort of my own home coding away.  I know my former boss reads this blog (hi Jonathan) so I want to say this:  I enjoyed my time there, but I'm disappointed things didn't work out the way I had hoped.<\/p>\n\n<p>So, now it's time to turn my attention to helping <a href=\"http:\/\/www.syneron.com\">Syneron<\/a> and getting my practically-brand-new 17\" MacBook Pro configured as my development environment.  Where did I put that PHP 5.2.1 install package...<\/p>\n",
        "date": "2007-03-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Riding Off Into The Sunset",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/09\/riding-off-into-the-sunset\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>That is a phrase I've used more than once with my wife as a way to explain why I'm staying up late screwing around on my computer.  But some side projects have been keeping me up past my normal bed time.<\/p>\n\n<p>I'm racing to get my Last.fm \/ Audioscrobbler component for <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> all taken care of.  I've changed it to use <a href=\"http:\/\/framework.zend.com\/manual\/en\/zend.http.html#zend.http.client\">Zend_Http_Client<\/a> to talk to the web services, and found a neat trick where I can create a <a href=\"http:\/\/framework.zend.com\/manual\/en\/zend.http.client.adapters.html#zend.http.client.adapter.test\">test connection<\/a> for the client.  Why is this needed?  Well, I got told that I needed to create tests that didn't require an internet connection.  Kind of hard for a web service, so luckily Zend_Http_Client_Adapter_Test lets me create some tests that don't actually connect to the web service.<\/p>\n\n<p>\nI'm also fortunate enough now to have gained access to <a href=\"http:\/\/www.cakephp.org\">CakePHP's<\/a> inner circle (i.e. access to the SVN repository) as to make my work on a series of CLI tools (like the interactive console) part of CakePHP itself.  I know it's very nerdy, but I'm excited to contribute to the project.  Having an interactive console for a framework is a huge advantage for quickly testing something.  There are lots of examples for the Ruby on Rails crowd for how to use the console for tryign things out.  Thanks to Nate and Larry for letting me join the club.\n<\/p>\n\n<p>\nI'm a little behind on development work because I'm still waiting to get my new laptop from my new job, but once I get that I anticipate churning out a beta of the interactive console in short order.\n<\/p>\n",
        "date": "2007-03-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I can sleep when I'm dead!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/06\/i-can-sleep-when-im-dead\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've been feeling \"meh\" this week.  Winding down my last two weeks at my <a href=\"http:\/\/www.verticalscope.com\">current job<\/a> and getting ready to work at my <a href=\"http:\/\/www.syneron.com\">new job<\/a> (by the way, Doron Gerstel, the president of the company, sent me flowers(?!) as his way of welcoming me to the company.).<\/p>\n\n<p>\nSo, I thought I'd talk about a few completely random things:\n<ul>\n<li>My <a href=\"http:\/\/www.lisahartjes.com\">sister<\/a> is doing a webcomic called <a href=\"http:\/\/dominogirls.lisahartjes.com\/\">Domino Girls<\/a>.  She's writing, while someone else is doing the artwork.  Trust me, my sister can't draw but she's a pretty good writer<\/li>\n<li><a href=\"http:\/\/cake.insertdesignhere.com\/\">Nate<\/a> has been doing a lot of work on some stuff for CakePHP so that my interactive console will actually work.  Once I get my hands on my new laptop (17\" MacBook Pro, baby) I'll be able to do more work on that.<\/li>\n<li>I got feedback on the talk I gave at the Vancouver PHP Conference 2007.  It was given a 7.4 out of 10 by those who took the survey.  As I suspected, I was talking too fast and not showing enough PHP-based answers.  Now I know how to chop down the number of slides from the high 50's to the low 40's like I wanted...<\/li>\n<li>The rush is on the get the component <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> and I have been doing for the Zend Framework done.  What's left?  Proper documentation (yay Derek!), remove a deprecated object from our component (Zend_Service_Rest) and replace it with the proper one (Zend_Rest_Client) and then figure out exactly which unit tests need to go and which can stay as there is some confusion about what sort of tests are needed for a totally web-based component.<\/li>\n<li>Saw that the Pragmatic Programmers are publishing a <a href=\"http:\/\/www.pragmaticprogrammer.com\/titles\/jaerlang\/\">book about Erlang<\/a>.  Hrm...for once has my <a href=\"http:\/\/en.wikipedia.org\/wiki\/SpiderMan#Powers_and_equipment\">spidey sense<\/a> about technology caught a sniff of something before it hits big time?  Paging <a href=\"http:\/\/yarivsblog.com\">Yariv Sadan<\/a><\/li>\n<li>I'm getting a referral bonus from VerticalScope if the guy they just hired (junior programmer, will be working on <a href=\"http:\/\/www.tophosts.com\">TopHosts<\/a> makes it through his 90 day trial period.<\/li>\n<li>If you like cool war movies, I highly suggest you check out 300, a movie based on a graphic novel by Frank Miller, which is based on the real story of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Battle_of_Thermopylae\">the Battle of Thermopylae<\/a>, where 300 Spartan and Thespian warriors held off the Persian Army long enough for the rest of the Greek army to get away, fighting to the death.  I love Wikipedia for things like this.<\/li>\n<\/ul><\/p>\n",
        "date": "2007-03-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Still No New Code To Report...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/03\/03\/still-no-new-code-to-report\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Many years ago when I worked for a company that went under while I was still working there (I was tossed overboard by being laid off along with other employees who didn't happen to own any stock in the company) I vowed to myself that I will always know when it was time to go.  To not stick around when the signs around you point to leaving.  That time has come for me at my current job with <a href=\"http:\/www.verticalscope.com\">VerticalScope<\/a><\/p>\n\n<p>\nI handed in my two weeks' notice yesterday morning to my boss.  He seems to be taking it very well, congratulating me on finding a new job that works out better for me.  He says I will be missed.  While the cynic in me rolls it's eyes and thinks this is less than sincere, I do appreciate being told that.  I have enjoyed my time at the 'Scope but I have found a job I just couldn't turn down.<\/p>\n\n<p>\nI had been looking recently to change jobs for two reasons:  reason #1 was to move into a job with a leadership position, reason #2 was to try and find something closer to home.  Through my friend <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> I found out that <a href=\"http:\/\/www.iloverewards.com\">iloverewards<\/a> was hiring PHP developers.  I went to a job fair after work one day.  I had some interviews over lunch.  I received a job offer.  And then something happened.<\/p>\n\n<p>The day after I got the job offer, I received an email from Cal Evans, the editor of <a href=\"http:\/\/devzone.zend.com\">Zend Developer Zone<\/a>.  He knew what was going on with me, but said that he knew someone else who was looking to hire a PHP developer and that even though I had an offer I should at least listen to what this person had to say.  The person?  Daniel Kushner.  Ex-Zend employee, he was now working for <a href=\"http:\/\/www.syneron.com\">Syneron<\/a> in their e-business unit.  2 phone conversations.  A nice lunch.  And another job offer.<\/p>\n\n<p>There's that old song \"Did you ever have to make up your mind?\".  I was seriously stressed.  The iloverewards offer was a senior one, a chance to spearhead development and lead a team of inexperienced developers through the madness of development.  Just the type of challenge I was looking for.  But the one from Syneron, well, I couldn't pass it up.  Work from home 3 days a week.  Work on some very different things in the medical field.  Travel to California once a month.  Daniel works from home as well, so I imagine there will be lots of phone calls and text messages (maybe I need to upgrade my phone to a Crackberry now?)  Travelling an hour by car to the office twice a week is better than the 90 minute+ commute I currently have via public transit.  I'll be a lot more relaxed, and better able to focus on the tasks at hand.  As supportive as my boss at VerticalScope was about letting me work from home on occasion (and super understanding about family issues), they couldn't match that.<\/p>\n\n<p>\nSo, I'm very excited for the opportunity to work with Daniel and the e-business unit there as we go into uncharted territory when it comes to the health industry and the use of modern web technology.  I'm going to be trying to solve some very interesting problems for a group of people who really don't know much about technology, and don't really care what technology is being used.  It just has to work.<\/p>\n\n<p>\nSo, I start at the new job March 12th.  Wish me luck!  And Derek, I'm sorry it didn't work out for me coming to work with you.  Maybe somewhere else down the road we hook up again.<\/p>\n",
        "date": "2007-02-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Packing My Bags And Moving On",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/27\/packing-my-bags-and-moving-on\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I normally don't talk about other blogs that I like to read, but I decided this might be a nice time to share some of them\n<ul>\n<li><a href=\"http:\/\/yarivsblog.com\">Yariv's Blog<\/a> is the blog of programmer Yariv Sadan.  He's doing a lot of work to bring Erlang to the web via his <a href=\"http:\/\/erlyweb.org\/\">ErlyWeb<\/a> web framework.  Why do I keep coming back?  Part of me wants to build something in Erlang because it can handle the type of high concurrency, synchronous web applications that Web 2.0 seems to be pushing us towards.<\/li>\n<li>Jamis Buck has three Ruby-related blogs I like to go to: <a href=\"http:\/\/weblog.jamisbuck.org\/\">the { buckblogs :here }<\/a>, he contributes to <a href=\"http:\/\/blog.caboo.se\/\">~:caboose<\/a> and he also contributes to <a href=\"http:\/\/www.therailsway.com\">The Rails Way<\/a>, where they take user submitted code and suggest refactorings for it.  Jamis is one of the smartest guys I've ever come across on the web, so I never hesitate to take a look at what he's talking about.<\/li>\n<li>I find myself going to the <a href=\"http:\/\/www.whenpenguinsattack.com\">Jaslabs<\/a> high-performance PHP page more and more often these days.  Great articles and tips for the more advanced programmer.  You can always use some help.<\/li>\n<li>My friend Amy Hoy runs <a href=\"http:\/\/slash7.com\">Slash7<\/a> where she talks about her experiences with Rails and user interfaces.  Oh yeah, go buy her Javascript book when it comes out!<\/li>\n<li>If you're into CakePHP at all, go visit <a href=\"http:\/\/www.thinkingphp.org\">ThinkingPHP and beyond<\/a> where Felix will give you some insight into the inner workings of the CakePHP web framework<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2007-02-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Blog Roundup",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/24\/blog-roundup\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My apologies for the lateness (and shortness) of this post.  Real life has intruded this week.  More news on this later.  But here's what's jumping around in my brain:\n<ul>\n<li><a href=\"http:\/\/cake.insertdesignhere.com\/\">Nate<\/a> from CakePHP is helping me out with the work on my proposal for an interactive console.  Trax (a Cake \"competitor\") has an interactive shell so I'm taking a look at how they are doing things to see what I can use from it.  Thank you open source licensing!<\/li>\n<li>There has been great feedback from those who watched the screencast of my talk from Vancouver and I'm going to tweak the talk for May.  Remove some slides, avoid duplication and build up the parts that drew a lot of interest:  deployment and programmer ego.<\/li>\n<li>I'm going to have to dive into the slightly old <a href=\"http:\/\/www.typosphere.org\">Typo<\/a> install and figure out how to stop the huge amounts of trackback spam we've been getting.  Seems that the Typo install I'm running ignores requests to stop accepting trackbacks.  Gotta fix that by hacking at the source<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2007-02-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's Chris Thinking About, February Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/21\/whats-chris-thinking-about-february-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Back in September when I was at php|works I did an <a href=\"http:\/\/devzone.zend.com\/node\/view\/id\/1701\">interview<\/a> with Cal Evans, the editor of Zend's Dev Zone.  We chatted for about 30 minutes about various topics (we have similar introductions to the world of computers) but he had to cut it off there.  We had even more interesting discussions during the course of the conference, but a lot of those will have to stay buried for the time being...\n<\/p>\n",
        "date": "2007-02-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Interview with Cal Evans",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/16\/interview-with-cal-evans\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Looks like I just missed a winter storm that is currently pounding the Greater Toronto Area (Milton is on the outskirts of the GTA) so I may actually be snowed in tomorrow.  Good thing I can work from home when necessary.<\/p>\n\n<p>\nI had a good time in Vancouver at the <a href=\"http:\/\/vancouver.php.net\/php_conference\">conference<\/a>, although I really wished I could've stayed for the second day.  I want to thank Shane, Audrey, Peter and all the other organizers for giving me first-class treatment (Audrey, I still owe you that drink).  My talk was really well-attended (much to my surprise as I was up against Ilia and Derek) and I was far less nervous about it than I was when I gave this talk.<\/p>\n\n<p>I have to thank some of the following speakers:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/gravatonic.com\">Andrei<\/a> for putting up with me, trying to push me to eat that enormous plate of nachos, and for pointing me in the direction of the <a href=\"http:\/\/www.xboxmediacenter.com\/\">Xbox Media Center<\/a><\/li>\n<li><a href=\"http:\/\/blog.phpdoc.info\">Sean<\/a> for straightening out some issues surrounding getting paid for a magazine article<\/li>\n<li><a href=\"http:\/\/www.preinheimer.com\/\">Paul<\/a> for being in good spirits despite being deathly ill (and being cool about me grabbing a menu from you like an idiot)<\/li>\n<\/ul>\n\n<p>\nI'll be seeing most of these same people in Chicago at php|tek, so that's yet another reason to look forward to the middle of May.  Anyhow, I managed to make a screencast of my talk and chopped it down to size for the blog.  Hope you enjoy it!\n<\/p>\n\n<p>\n[flv:https:\/\/www.littlehart.net\/atthekeyboard\/videos\/vancouver.flv 320 240]\n<\/p>\n",
        "date": "2007-02-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Back from Vancouver PHP Conference 2007",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/14\/back-from-vancouver-php-conference-2007\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>On the <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> mailing list, somebody familiar with Ruby on Rails' console functionality asked \"why isn't there one of these in Cake?\".  I, of course, jumped right in and said \"such a thing does not exist in PHP.\"  Nate, of course, quickly corrected me and pointed out that PHP has an interactive mode.  Which lets you do some stuff quickly for testing purposes, but this is not enough.  So I foolishly volunteered to work on a console.  Like I'm not busy enough.\n<\/p>\n\n<p>\nSo I got to thinking about how to do this.  On the surface, it seems the easiest way to do this is to write a PHP script that takes entries on the command line, run the input through an 'eval' statement.  Sounds easy enough, and I could write that in a hurry.  I think the trickiness comes in figuring out how to hook it into CakePHP so that you can access Models that already exist.  I guess this will be something that will bother me while I'm at the <a href=\"http:\/\/vancover.php.net\">conference<\/a> on Monday and Tuesday.  I'll be sure to mention it during my talk.\n<\/p>\n",
        "date": "2007-02-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My Next Foolish Project:  A console for CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/09\/my-next-foolish-project-a-console-for-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Want the chance to work with me?  If you live in the Greater Toronto Area (we don't pay relocation costs or sponsor people) and know PHP, we may have a job for you.  We're looking to fill at least two positions I'm aware of:  nne junior developer and one intermediate developer.  Here's what my boss said he's looking for:\n\n\n<blockquote>VerticalScope Inc. is seeking a highly skilled professional programmer with extensive expertise in developing PHP and MySQL applications. The position will be focused on the custom development of vBulletin applications, CMS tools, search engine optimization, tool bar creation for our network of sports, automotive and technology sites. If you like working in a creative and fast-paced environment, please send your resume to jmillman@verticalscope.com. Please ensure your qualifications match those outlined below before applying.\n\nRequirements:\nTo be considered for this role, your background should include:\n? 4+ years of development experience in PHP (including hands on experience in your current\/last role)\n? 4+ years of experience in MySQL (including hands on experience in your current\/last role)\n? Experience with high-availability, clustering and load balancing, familiarity with Linux, Apache, Perl, CVS, vBulletin development experience an asset\n? Experience and comfort in a FreeBSD shell and with FreeBSD development environment\n? Shell scripting in Perl, Bash, or other languages an asset\n? Strong communication skills\n? Ability to work independently in a group environment\n? Proven testing and troubleshooting skills\n? Strong education background including a Bachelor in Computer Science (or similar) and relevant work experience\n? Any relevant industry certifications an asset\n\nAbout VerticalScope\nVerticalScope is a leading Internet media company providing detailed coverage and analysis of the Technology, Automotive, and Sports vertical markets. Our network of industry web portals, online communities, and print publications reach over five million enthusiasts and decision makers each month. As one of the pioneers of Consumer Generated Media, our targeted network of discussion forums and community websites have in excess of one million registered members and tens of millions of consumer generated posts, articles, and blog entries.\n<\/blockquote>\n\nThat's for the intermediate position.  For the junior position, it's the same sort of qualifications but only 2+ years of experience.  You'll be spending your time working with a small group of IT guys who are great at coming up with solutions to difficult problems.  The ability to deploy applications problem-free is critical, as you will see what it's like to deploy applications for users who don't tolerate any downtime or problems with their sites.  \n<\/p>\n\n<p>\nWe're a very small IT shop (2 programmers, 1 HTML\/CSS person, 2 sys admins) so finding a person who has the skills *and* will fit in with our mix of personalities (having a sense of humour is key around here) is critical.  After all, I want to like the people that I work with.<\/p>\n\n<p>\nIf you think that you are a good fit for us, send your resume to me at chartjes@verticalscope.com with the subject \"PHP \/ MySQL Developer position\" and I'll make sure it gets to the right people.\n<\/p>\n",
        "date": "2007-02-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "VerticalScope is hiring PHP developers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/07\/verticalscope-is-hiring-php-developers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>This time next week I will be trying to flag down a taxi at the airport in Toronto, having come back from the <a href=\"http:\/\/vancouver.php.net\">Vancouver PHP Conference 2007<\/a>.  I'm looking forward to giving my \"What Can PHP Learn From Ruby on Rails\" talk because I'll be doing a screencast of my talk.  However, I'm struggling with trying to decide what to do with it.\n<\/p>\n\n<p>\nIf I give it away, then the people who see me in person are getting ripped off.  If I charge for it, the question then becomes how much to charge?  $5?  $10.  One model I've been thinking of trying is that if 20 people by the screencast I will give it away for free after that point.  We shall see what ends up happening.\n<\/p>\n\n<p>\nOver on the CakePHP mailing list, someone asked a question about how to build a model without accessing a database.  I pointed out that it can be done, and that there were examples.  Then, I got schooled by <a href=\"http:\/\/cake.insertdesignhere.com\/\">nate<\/a>...\n\n\n<blockquote>I definitely wasn't agreeing with you, but I wasn't really making fun\nof you either.  I'll give you a hint: there's a reason why we have a\nbase DataSource class, which is extended by DboSource, which talks to\nthe database on behalf of a model.  Felix's Google Analytics model is\nactually a pretty poor example.  Not because Felix is a bad coder or\nanything (quite the contrary), but because up till now, there are a\nfew things that people really haven't clearly understood (or perhaps,\nthere are a few things we haven't made clear for people).  Basically\nwhat I'm trying to say is that you should never have to extend Model\nin that way.  Models are designed to *model* data, not handle the\ndetails of accessing it.<\/blockquote>\nOuch\n<\/p>\n\n<p>But Nate did have a good point.  I didn't fully understand how the Model was built up in CakePHP because, well, I never really had to before.  I think when I build my first CakePHP 1.2x site I'll dig into the internals a little more.\n<\/p>\n\n<p>\nNow, I've noticed a few blog postings about <a href=\"http:\/\/dev.mysql.com\/downloads\/connector\/php-mysqlnd\/\">mysqlnd<\/a>, a native MySQL driver for PHP 6 (for now) and beyond.  As an aside, I should try installing PHP 6 somewhere just to see how they are progressing.  Anyhow, back to mysqlnd.  Why is this significant? There are, in my mind, two things why you should know about it.\n<\/p>\n\n<p>Firstly, mysqlnd is designed to take advantage of PHP's own infrastructure.  I imagine this means that you can expect better performance from this library as opposed to the old libmysql or the newer libmysqli.  I understand it's aimed at PHP 6 for the time being, due to some of the work being done with Unicode in PHP 6.  There is talk of backporting it to PHP 5, or even PHP 4 (something to do with streams meaning you could backport) but it's aimed squarely at PHP 6 for now.<\/p>\n\n<p>\nThe second big reason is that it will provide a library for PHP to talk to MySQL databases that has a license that is more compatible with PHP.  In fact, it will be released under the PHP license.  MySQL has an exception for allowing libmysql to be integrated with <a href=\"http:\/\/www.mysql.com\/company\/legal\/licensing\/foss-exception.html\">FLOSS<\/a> projects, of which PHP is one.  Having a native driver that doesn't require an exception to use can only be a good thing.\n<\/p>\n",
        "date": "2007-02-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Bips and Boops",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/07\/bips-and-boops\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My long-suffering wife often tells me to \"stop being grumpy\".  What she calls grumpy I call annoyed, but perhaps she does have a point.  As a member of several mailing lists for open-source projects, I find myself getting grumpy over the type of questions that I see asked.  It started me to wonder if I've become a grumpy old programmer.  What causes me to age prematurely and transform into a Grumpy Old Programmer?  Questions on mailing lists, that's what.<\/p>\n\n<p>Oh, not just any question mind you.  There are lots of good questions being asked.  Questions about how is the best way to do something, or how to take a particular component in an unexpected direction.  Those are good questions, because they make you think about how you are doing things.  But then there are the other questions.  The questions that you often wonder if the person asking the question is a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Troll_%28Internet%29\">troll<\/a>.  Questions where you wonder if the person asking the question had ever heard of a search engine.  Questions where you wonder if the person asking the question has even bothered to read the documentation for the area they are asking a question about.<\/p>\n\n<p>Now at this point I can imagine people labeling me as a snob or elitist or some other derogatory label that implies I think I am smarter than everyone else.  I am smart enough to realize that there are plenty of people smarter than me.  I benefit from the tools they've created every day.  So please, no name-calling.  Ask anyone who knows me and I think one of the last labels they would apply to me is 'snob' or 'elitist'.  'Grumpy', maybe.  Anyway, back on topic.<\/p>\n\n<p>\nI understand that many people are just beginning out as programmers.  I was once one of those people, and I spent (and still do spend) lots of time using search engines to find answers to my questions.   When I ask a question on a mailing list, I try to have done all sorts of research that led me to the point where I couldn't find the answer without asking directly on the mailing list.  That's pretty acceptable behaviour, wouldn't you think?<\/p>\n\n<p>\nNow I'm not interested in pointing fingers or providing examples.  That would be picking on people who might not have a concept of what could be called \"mailing list etiquette\".  If I had to guess, I'd say once a month the administrators of the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> mailing list have to remind someone who is causing problems to be quiet and abide by the rules (unspoken or otherwise) of the list.  So, in the interest of providing some helpful tips for getting the most out a highly-technical mailing list, here are some pointers:<\/p>\n\n<p>\n<li>There is a proper way to <a href=\"http:\/\/www.chiark.greenend.org.uk\/~sgtatham\/bugs.html\">report bugs<\/a><\/li>\n<li>Asking people to provide you with fully-written solutions to your problem is not only rude, but shows that you aren't willing to learn anything yourself.  The mailing list is not a substitute for a consultant<\/li>\n<li>Please do some work <a href=\"http:\/\/www.catb.org\/~esr\/faqs\/smart-questions.html#before\">before you ask your question<\/a><\/li>\n<li>Don't assume <a href=\"http:\/\/www.catb.org\/~esr\/faqs\/smart-questions.html#urgent\">everyone thinks your problem is as important as you do<\/a><\/li>\n<li>Provide as much info as you can:  code samples, good descriptions of the problem, things you have tried as solutions.  The more you give, the more you can get back<\/li>\n<li>People are providing answers because they want to help, not because they are trying to make you look stupid.  People do a good enough job of making themselves look stupid (me included) without needing extra help<\/li>\n<ul>\n<\/ul><\/p>\n\n<p>\nFailing to do any combination of things listed above is very likely to turn me into a Grumpy Old Programmer when I read your question.  However, I'm not off the hook yet.  There is the <a href=\"http:\/\/www.catb.org\/~esr\/faqs\/smart-questions.html#id274601\">proper way to answer questions<\/a> as well.  I generally try to provide helpful answers if I know something about the problem, but I prefer to send the harsher messages (variations on <a href=\"http:\/\/www.catb.org\/~esr\/faqs\/smart-questions.html#rtfm\">RTFM and STFW<\/a>) via private email.<\/p>\n\n<p>I hope the stuff in this post helps people looking for help on a mailing list get more out of their questions.  In the meantime, look for me on the CakePHP mailing list and call me out if you see me not following my own advice...<\/p>\n",
        "date": "2007-02-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Have I Become A Grumpy Old Programmer?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/02\/02\/have-i-become-a-grumpy-old-programmer\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I recently decided to ditch using Google Analytics for my stats tracking and installed <a href=\"http:\/\/www.haveamint.com\">Mint<\/a> as my website stats tracking module.  I'm really liking it, and it's easily worth the $30 you have to pay for it.  C'mon, don't be cheap and steal everything, okay?<\/p>\n\n<p>\nMint has a really cool plugin architecture that they call <a href=\"http:\/\/haveamint.com\/peppermill\/\">Pepper<\/a>, and you can grab all sorts of cool addons.  I saw one called <a href=\"http:\/\/haveamint.com\/peppermill\/pepper\/11\/bird_feeder\/\">Bird Feeder Pepper<\/a>, which can track what's going on with your various feeds.  Now, the installation is fairly easy but there was a weird bug that was appearing, where a check to see if you are running a licensed copy of Mint kept getting triggered when I tried to access my feeds via a feed alias.  The solution?  An ugly hack, if you ask me.  To implement Bird Feeder Pepper and use the seeds (track individual items in your feed), there's a snippet of PHP code you have to insert in the various PHP files WordPress uses: wp-rss.php, wp-rss2.php, wp-atom.php and wp-rdf.php.  Place this snippet AFTER the line in the PHP file that executes a 'header' command and BEFORE the code that outputs the beginnings of the XML.  Here's an example:\n~~~\nheader('Content-type: text\/xml; charset=' . get_option('blog_charset'), true);\n$more = 1;\n\n\/\/ BEGIN CODE TO IMPLEMENT BIRD FEEDER PEPPER SEEDS\nglobal $Mint;\ndefine('BIRDFEED', 'Articles (RSS)');\ninclude($_SERVER['DOCUMENT_ROOT'].'\/feeder\/index.php');\n\/\/ END CODE TO IMPLEMENT BIRD FEEDER PEPPER SEEDS\n?>\n<?php echo '<?xml version=\"1.0\" encoding=\"'.get_option('blog_charset').'\"?'.'>'; ?>\n~~~\n<\/p>\n\n<p>\nHope that helps anyone else who was struggling to get Bird Feeder Pepper working with WordPress 2.1.<\/p>\n",
        "date": "2007-01-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "WordPress 2.1 and Mint",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/30\/wordpress-21-and-mint\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While googling around looking for info on using <a href=\"http:\/\/widgets.wordpress.com\/\">widgets in WordPress<\/a> I saw a link to an awesome looking theme.  Plus it supports the use of widgets, so I can easily change how the site looks on the sidebar.  Google also pointed me to a widget for the post popularity plugin I'm using, so I haven't missed anything I used to have in the sidebar.  I like the new look:  it's vibrant and cool.\n<\/p>\n",
        "date": "2007-01-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Updated Look",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/28\/updated-look\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI've tried all sorts of editors in my time:  emacs, vim, Eclipse, Zend Studio.  After I got into Ruby on Rails, I bought a copy of TextMate to be my main editor.  But that's all it is, an editor.   In the Rails world, lightweight tools are preferred.  I'm a big believer in lightweight tools, because I *hate* when my system gets lagged down because of the number of apps I'm running at once.  However, I've noticed that there really isn't much out there in the way of a full IDE for Rails, with debugging tools, etc.  I really like the TextMate + Cyberduck combo I've been using at work for my PHP work and using TextMate for all my Ruby work.  But I feel like a debugger is something that is missing.  Maybe that's in the works or exists already, I just haven't run into it.\n<\/p>\n\n<p>\nFor PHP I really liked Zend Studio, but it was pretty expensive for just one developer to buy...and my company seems reluctant to fork out the cash to buy me a copy.  The other PHP developer at work is old skool, using vim.  So, I'd been getting along just fine with TextMate...but was starting to feel the pinch of not having a debugger (and some integrated version control would be nice) for the PHP work.  A step-through debugger would've been a HUGE help as I was building out my Sportsticker feed parser.  I got so used to using var_dump and print statements at certain points to see what was going on, that I totally forgot about using debuggers and setting break points, and the joy that can come from putting your app through it's paces via a step-through debugger.  Work smarter Chris, not harder. :)\n<\/p>\n\n<p>\nNow, one of the fine folks who is putting together the <a href=\"http:\/\/vancouver.php.net\">Vancouver PHP Conference 2007<\/a> is Shane Caraveo, who is a lead developer for <a href=\"http:\/\/www.activestate.com\">ActiveState<\/a>, the company that makes the Komodo IDE.  While exchanging some emails with him (thanking him for the reimbursement cheque for my flight to Vancouver amongst other things) I sort of jokingly mentioned that I thought it would be a nice perk for giving the talk at the conference if I could get a copy of Komodo from them, because I felt that I would have to buy a copy of it with my own money if I wanted a copy.  Next thing I new, I got an email from someone at ActiveState with a link to a downloadable copy of Komodo IDE 4.0 (the latest) and a license for it.  Awesome!\n<\/p>\n\n<p>\nOne of the blogs I read is <a href=\"http:\/\/www.litfuel.net\/plush\/\">Jim Plush's<\/a> (I heard him on the sadly silent Pro-PHP podcast), and he was <a href=\"http:\/\/www.litfuel.net\/plush\/?postid=160\">raving about Komodo<\/a> because, like me, he uses a MacBook and there is no Intel version of Zend Studio Server.  He even provided a nice link to someone else instructions on how to get the <a href=\"http:\/\/www.sysarchitects.com\/node\/22\">PHP debugger up and running<\/a>.\n<\/p>\n\n<p>\nUndaunted, I set things up and bingo!  It works like a charm.  Just as a test, I decided to try the step-through debugger on my reporting system I wrote in CakePHP and got a glimpse into the heart of CakePHP just to do a simple request.  On Monday I'm going to configure PHP on my development server at work to have support for <a href=\"http:\/\/www.xdebug.org\">XDebug<\/a> built into it so I can use the step-through debugger there as well.  It will help me track down some stupid mistakes I made with the Sportsticker code that took me a long time to figure out.\n<\/p>\n\n<p>\nUntil you've used one of these debuggers for a while, you don't understand how powerful they really are.  Thanks again to Shane for hooking me up with a copy!  I owe you a beer or two while in Vancouver...\n<\/p>\n",
        "date": "2007-01-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Komodo - not just a dragon",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/26\/komodo-not-just-a-dragon\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI've gotten some work done on Rallyhat lately, mostly on the train ride home but some stuff in the evenings when I need an internet connection for looking up some sites and testing.  Here's what I've gotten working:\n<ul>\n<li>User signup (complete with email and activation code)<\/li>\n<li>User authentication<\/li>\n<\/ul>\n<br \/>\nThe next thing I'm working on is the Hunt stuff.  I've got to write some code to create hunts, allow people to join up with a hunt and stuff like that.  As part of that I will also have to do work on the image upload and storage part of the site, which has me worried due to potential bandwidth issues, but I might use Amazon's awesome SSS for that and see what the bills are like.  Along the way, I'm writing unit tests to go with my code because when my current host upgrades to Rails 1.2 I want to be able to do the same at my end, and a simple \"rake test\" command will run all my tests and point out anything that will be broken and needs to be fixed.  I suggest that interested parties go to <a href=\"http:\/\/weblog.rubyonrails.org\">the Rails blog<\/a> to see the latest news about Rails 1.2\n<\/p>\n",
        "date": "2007-01-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat.com -- moving forward",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/20\/rallyhatcom-moving-forward\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>On the CakePHP mailing list I see frequent questions about various ACL and authorization plugins that are available for cake.  I've never used anything beyond simple authentication and access control and always felt that ACL schemes were either too hard to implement or too restrictive.  Honestly, do you really need to have one person who can see 5 reports and another see 6?  I never saw the point of that, but perhaps one day I will run into a scenario where that is needed.\n<\/p>\n\n<p>Rallyhat needed some authentication.  Being a Rails app, there were tons of options.  Basically, they revolve around the same principle:  there is a feature called a before_filter that runs before you execute any action in a controller.  Lucky for my fellow CakePHP users, there is a similar feature in CakePHP.  So, you create a function that you call via the before_filter (beforeFilter in CakePHP) that verifies that the person has permission to access the current controller.  Yep, it's really that simple.\n<\/p>\n\n<p>\nOf course, there are many varied ways to do the whole login \/ assign roles to users, too many to list here.  Don't expect any code here either, as I haven't written any.  Like any lazy programmer, I steal from the best. ;)  For Rallyhat I'm using Rick Olson's awesome <a href=\"http:\/\/technoweenie.stikipad.com\/plugins\/show\/Acts+as+Authenticated\">acts_as_authenticated<\/a> plugin.  Man, it is PERFECT for what I need.  You install the plugin, head over to the stikipad where the documentation is and it gives you just about everything you need.  Signup, login, activation codes, email confirmation, \"forgot my password\" stuff.  I can't imagine how much time this has saved me.  Oh yeah, on top of it it comes with tests to make sure everything is working.  Make a change, run 'rake test' and fix any errors that pop up.  Rallyhat will require a full commitment to writing tests, so I'm glad to get into the habit of it.\n<\/p>\n\n<p>\nSo, if you want some simple authentication then if you're using CakePHP, fool around with using a beforeFilter to do things like look for a cookie or look in the session for a variable that says you are logged in.  Authentication doesn't have to be complicated, it just has to work.\n<\/p>\n",
        "date": "2007-01-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Application authentication",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/16\/application-authentication\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nVia one of the RSS feeds I read I found out about an <a href=\"http:\/\/on-ruby.blogspot.com\/2007\/01\/win-books-by-blogging.html\">interesting contest<\/a> where people are asking to post their thoughts on how Rails has made you a better programmer.  The winner gets a free book.  I thought \"What the heck, I don't care if I win the book but I do need a posting for today.\" :) So, here goes.\n<\/p>\n\n<p>\nAlthough my day job involves programming in PHP, my experiences with Rails have been completely transferable.  Discovering Rails showed me a bunch of new tricks that have streamlined the way I program.  There's no shame in stealing good ideas from one language and applying them to another, and anything that can make me a better programmer is a bonus for me.  Learning Rails prompted me to start talking about my experiences with it, and has led to giving talks at conferences and a magazine article.  I can say with no hesitation that Rails has brought nothing but good things to my career as a developer.\n<\/p>\n\n<p>\n<i>Convention over configuration<\/i> is the biggest thing I have taken away from Rails.  PHP's greatest strength is that it is flexible, allowing you to accomplish all sorts of things and build rock-solid web apps (yes PHP haters, Yahoo! is an example of rock-solid web apps that use PHP).  However, that flexibility comes at a price.  You can easily co-mingle your business logic with your data sources, with a splash of display logic built in.  We've all done it.  Why?  Because PHP says \"I don't care how you do it, but I'm going to give you the tools to do so.\"\n<\/p>\n\n<p>\nIn the Rails world, you are programming within a system that has rules, or conventions, on how to do things.  To me, Rails is saying \"If you follow some simple rules about how to build your application, I promise to take care of a lot of low-level details and let you get back to the process of just building things.\"  Some <a href=\"http:\/\/pooteeweet.org\/blog\/563\">other developers<\/a> have argued that this concept is akin to having to learn a new language (or perhaps even harder), so what advantage are you really getting?  I believe that once you learn the conventions, your will find a rapid increase in your productivity.  With so many developers talking about the increase in productivity they felt when switching to Ruby on Rails from other programming languages, there has to be something to it beyond just hype.\n<\/p>\n\n<p>\nRuby's syntax and object-oriented nature has shown me that <i>simplicity matters<\/i>.  Too often I've worked on a piece of code, got it working and have then abandoned it for the next project.  Now, I take the time to go back after I've gotten it working and to see what I can strip out, what I can rewrite, what I can improve to make my understanding of the problem better.  I've been working with <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> for my recent \"build-from-scratch\" projects in PHP, and being a Rails-inspired framework a lot of the concepts have been totally transferable.  I find myself building out prototypes faster with Cake than if I banged out the code myself.  The code I create reads differently than the hand-crafted stuff I did before and I find it easier to go back and fix stuff after my memory has dimmed on how I solved a particular problem.  The simple the code, the more likely I'll be able to figure out what I did in order to fix it or extend it.\n<\/p>\n\n<p>\nFinally, I realize that Rails has <i>set a standard<\/i> for the next generation of modern web development frameworks.  Full-stack solution based on the underlying programming language?  Check!  Extensive selection of information available via Google for beginners? Check!  Loads of helpers for creating Ajax functionality?  Check!  Testing tools built right in? Check!  I could go on and on but I think you will get my point here.  The job of a framework is to provide you with all the tools you need to build an application quickly, and Rails has shown me that any solutions I use going forward need to be held up to the same standard.  So far, CakePHP is meeting my expectations in the PHP world, but Rails forges onwards with things like RJS templates and ActiveResource.  Who knows what else DHH and the crew are planning.  I know as I continue to build out my <a href=\"http:\/\/rallyhat.com\">latest Rails-based project<\/a> I'll be keeping a close eye on developments.\n<\/p>\n",
        "date": "2007-01-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Has Ruby on Rails Made Me A Better Programmer",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/10\/how-has-ruby-on-rails-made-me-a-better-programmer\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My work week has been spent rebuilding stats that were supposed to be collected by my reporting application.  I was missing a month's worth of data.  Why?  Turns out that a bug fix I made actually introduced a new bug, and was causing silent failures.  Something about me not setting the proper PDO attribute to buffer queries.  My testing didn't reveal the bug, so the first thing I did was change the tests and bingo! it revealed the bug. Silly Chris.  Luckily, I had created a tool a while back to allow me to fix the stats for a specific day, so with a list of dates for which data was missing I set about collecting the data.  Unfortunately, it takes between 5 and 10 minutes per day to hit our 30+ sites that we are collecting data from (probably due to huge record sets and improper indexes) so that meant a minimum of 150 minutes of continuous data grabbing.  Of course, it took longer because I kept testing things, and was tweaking the stats reporting software code (I found out about the magical BETWEEN function in MySQL to use when looking for records in a date range) so it basically took me all week to retrieve the data, make changes to the reporting application and test everything.  Phew.<\/p>\n\n<p>Now, back to what is in Chris' Brain for January 2007\n<ul>\n<li>I'm working on the article for <a href=http:\/\/hades.phparch.com\/artemis\/main\/>A\/R\/T, which is <a href=\"http:\/\/phparch.com\">php|architect's<\/a> online article repository.  First draft is done, just waiting to find out from Marco who to send it to and if they like it.<\/li>\n<li>Finished phase one of my work on Mustique Island, a side project I had been doing some PHP work on.  The work isn't online yet but it was interesting to do:  search engine for villas-for-rent on a private island in the Caribbean.  I got to flex my Ajax skills a little with some forms that refreshed without refreshing the page, etc.  Good practice for rallyhat<\/li>\n<li>Thinking about how to modify my presentation for my talk in February.  Have to mix it up a bit, make sure what's in there is still relevant.  Things do change fast, and my work with <a href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> should probably be worked into the presentation as well.<\/li>\n<li>Continue pestering <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> to do his fair share of the work on Zend_Service_Audioscrobbler and write the documentation that we are missing.<\/li>\n<li>Start working on the outline for that Ruby training course (I hope I haven't gotten in over my head)<\/li>\n<li>See if I can't have a working beta of <a href=\"rallyhat.com\">Rallyhat<\/a> to show people by the end of the month<\/li>\n<\/ul>\n<\/p>\n",
        "date": "2007-01-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What's In Chris' Brain -- January 2007 Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/05\/whats-in-chris-brain-january-2007-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My side project is <a href='http:\/\/rallyhat.com'>Rallyhat<\/a>, an idea I've had for some time now.  Basically, it's a digital photo scavenger hunt with a nice social networking twist.  I have a teaser page up right now where you can submit your email address to be notified of when a beta is ready to be used.<\/p>\n\n<p>\nIt's built using Ruby on Rails.  Why Rails?  Well, aside from all my soul-searching about what to use, there is a simple reason:  I could build it in PHP quite easily, but where's the challenge in that?  All my side projects teach me something and I'm confident I'll come out of this as a kick-ass Rails developer, along with learning some techniques I can apply to my PHP programming.\n<\/p>\n\n<p>\nPlease visit the site, sign up to be notified of the availability of a beta release and let me know any comments you might have.\n<\/p>\n",
        "date": "2007-01-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat.com -- Now live!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/03\/rallyhatcom-now-live\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>There was a posting on the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> mailing list today from someone asking for sources of advice on \"starting big applications\".  Having gone through this at my previous job, I posted the following response:\n<br \/>\n<blockquote>\nJust to inject some sanity into what should be a very interesting\nthread, I urge anyone building an application to simply BUILD IT and\nworry about the profiling \/ benchmarking for AFTER you've built it.\nTrust me when I say this:  no application of any significant size\nsurvives long enough to be scaled past it's original intent without\nwholesale architectural changes.  You *WILL* be rewriting things, you\n*WILL* be rethinking how your application is organized.  Like Death\nand taxes, it is inevitable.  But you can worry about it later.\n\nI say this as someone who has been through the \"let's build something\nmassive\" process, only to see it fail horribly due to all sorts of\npreconceptions at design time that resulted in major rewrites that no\nbenchmarking would've helped.  We didn't know what the bottlenecks\nwere until we actually saw them get hit, and then we set about\nrewriting the bottlenecks.  A little slipshod for sure, but there were\nmany things that happened that we could not have anticipated when we\nwere building it.\n\nIf your site is so busy that you need to do benchmarking and other\nrefactoring work, then you have accomplished more than 99% of other\nwebsites out there and deserve a round of applause.  Until then, Just\nBuild Something, Damnit and worry about fixing any performance issues\nlater.\n\nBefore everyone jumps on me, please understand that I am saying this\nout of experience.  Yes, there are certain things you can do in terms\nof building a cache-friendly app, or configuring a web server for\noptimal use but those are so application-specific I hesitate to\nrecommend those things until you actually know what you need.  Premature\noptimization lies on the path to developer madness.\n\nYou won't know what challenges your application will face until people\nother than you are actually using it. ;)\n\nHope that helps.\n<\/blockquote>\n\n<\/p>\n\n<p>My new mantra for programming in 2007 is Just Build It, Damnit!  I've been procrastinating too much on several personal projects so it's time to put my money where my mouth is.<\/p>\n",
        "date": "2007-01-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Just Build It, Damnit!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2007\/01\/02\/just-build-it-damnit\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After much digging around on the net, I finally got rallyhat under version control AND using <a href=\"http:\/\/manuals.rubyonrails.com\/read\/book\/17\">Capistrano<\/a>.  For the uninitiated, Capistrano is a tool for deploying your application.  It's command-line driven, has hooks in it for version control (I keep my code in a <a href=\"http:\/\/subversion.tigris.org\">Subversion repository<\/a>, and has all sorts of cool little features to it.\n<\/p>\n\n<p>\nI found a great <a href=\"http:\/\/blog.digitalduckies.net\/articles\/2006\/10\/31\/howto-capistrano-deployment-on-media-temples-grid-server\/\">tutorial on using Capistrano on media temple<\/a> and then found another link that showed <a href=\"http:\/\/jonathan.tron.name\/articles\/2006\/07\/15\/capistrano-password-prompt-tips\">some tips<\/a> for dealing with password prompts and such.\n<\/p>\n\n<p>\nSo now when I do my development work on my laptop, when I'm happy with the code I can push it up onto the live site with a series of commands.  It even allows me to roll stuff back if I have to.  I wish there was a tool this great written in PHP, but luckily you can use it with PHP or any other web-based scripting language.  All Capistrano cares about is that your code is located in the right place.  One of these days I'll put together the deployment script for pushing a PHP app as proof of concept.\n<\/p>\n",
        "date": "2006-12-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deploying Rails Apps With Capistrano",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/29\/deploying-rails-apps-with-capistrano\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWell, it's not much to look at it but I finally got rallyhat.com moved over to my new <a href=\"http:\/\/mediatemple.net\">host<\/a>, so I can get to work on it.  My man <a href=\"http:\/\/www.mutescreamz.com\/\">Biz<\/a> is going to be helping me with graphics and the look and feel, in exchange for me teaching him some more programming.  He's a really good sysadmin (all around Mac wizard) but he wants to get his programming skills past (to quote him) \"stealing other people's stuff and hacking on it until it sort of works.\"  Hey, that's how all of us start, but most of us get to the point where we can create our own stuff from scratch.\n<\/p>\n",
        "date": "2006-12-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat.com -- now has a home",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/26\/rallyhatcom-now-has-a-home\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you can read this, I've moved littlehart.net to it's new location, on a host at Media Temple, where I've signed up for a <a href=\"http:\/\/www.mediatemple.net\/webhosting\/gs\/\">Grid Server<\/a> account with them.  My friend <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> recommended I go with them after he spent a lot of time researching a host to move his own projects to.\n<\/p>\n\n<p>\nOne of the cooler features of this hosting plan is that if I get digged (or, for the older folks out there, slashdotted) they have this huge cluster of servers that can dynamically adjust to provide bandwidth for you.  Now, it seems to me that you could only get digged \/ slashdotted once or twice before they will ask you to start paying for a better plan, but it's nice to know that the site should be able to stay up.  Given the nature of my next project I think this protection will be good.  Of course, if it goes REALLY well then I'll need that better plan anyways. \n<\/p>\n\n<p>\nAs an extra bonus, I'm going to be speaking at the <a href=\"http:\/\/vancouver.php.net\/\">Vancouver PHP Conference 2007<\/a> on February 12-13, 2007.  I'll be giving my \"What Can PHP Learn From Ruby on Rails\" talk, but I'll be definitely updating it from the version I gave in September.  I've never been to Vancouver before so I hope to see a few sites while I'm there.\n<\/p>\n",
        "date": "2006-12-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "We've Moved!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/23\/weve-moved\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs I finally wrestle down my <a href=\"http:\/\/www.sportsticker.com\">Sportsticker<\/a> parser and scoreboard system into submission, I spent some time going through my code and applying the DRY (Don't Repeat Yourself) wherever I can.  So, I've moved some functionality into a support library and are slowly replacing old code with calls to new functions I've created.  The result?  Easier testing of my code when I add new features AND less lines of code to go through when figuring out more tweaks.\n<\/p>\n\n<p>\nIt also looks like I have a large amount of side work to do in the next little while.  Marco over at <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> has asked me to get involved in a few projects over there.  Firstly, he's asked me to contribute a smaller version of my recent magazine article to <a href=\"http:\/\/hades.phparch.com\/artemis\/main\/\">A\/R\/T<\/a>.  That shouldn't be too hard to do, the trick will be figuring out what to cut out.  Secondly, Marco also mentioned that he was interested in having me do a 20 minute webcast about \"What Can PHP Learn From Ruby on Rails\" as a teaser for my talk at <a href=\"http:\/\/www.phparch.com\/tek\">php|tek 2007<\/a>.  Again, that should be fairly easy...but I will have to definitely cut down my presentation from php|works to focus on just the basics.  Maybe just talk about \"convention over configuration\" or something.  I'll figure that out.\n<\/p>\n\n<p>\nLastly, I've been asked to participate in the creation of an introduction to Ruby training course.  This is very exciting and very scary at the same time.  While I'm no Ruby expert, I feel that I can show other people with programming experience just what Ruby has to offer.  Of course, it's ironic I'm asked to do this while I'm busy ignoring Ruby while fooling around with Python and <a href=\"http:\/\/www.djangoproject.org\">Django.<\/a> :)\n<\/p>\n\n<p>\nNot to feat though.  Your humble correspondent is up to the task.  Since I love to talk, coming up with up to 18 hours of instruction on Ruby (and some Rails as well), while challenging, is the type of task that kicks my butt and tends to help me create something good.  First step is the outline of the course.  If that goes well, then we can figure out how to turn that outline into a large quantity of slides for the actual course.\n<\/p>\n\n<p>\nBack to my Django tutorial... ;)\n<\/p>\n",
        "date": "2006-12-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Ruthless Refactoring and Other Activities",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/19\/ruthless-refactoring-and-other-activities\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs time goes on, I find that I'm drawn to web frameworks like a moth to a flame.  Why?  I've built so many web apps from scratch that if I have to build one more front controller from scratch I'm going to gouge my eyes out.  Okay, maybe I'm exaggerating a little.  As I get older, I start to value my time more.  Web frameworks usually let me build something faster than if I  had created the app from scratch.  Of course, this only works well with \"green field\" projects, one where you are starting from scratch.  Shoehorning an existing app into a web framework is  process that I usually refer to as a \"total rewrite of the system\" as it's very difficult to do it without, well, rewriting things.  The only exception might be homegrown MVC systems.\n<\/p>\n\n<p>\nAny how, as I think about rallyhat.com and what I want to do with it, I happened to stumble upon some info about Python.  YouTube apparantly is built with Python.  Google uses Python all over the place.  Gudio van Rossum, the creator of Python works there.  Someone told me that that GMail is run out of 3 python scripts:  one that generates the HTML\/Javascript output, one that handles the ever-expanding space for your email, and an email client.  Now *that* I could believe.\n<\/p>\n\n<p>\nThen I remembered that there is a web framework for Python called Django.  I dig a little more digging around and found the web site, along with some interesting benchmarks comparing it to some other frameworks.  Python is very similar to Ruby (but no blocks, which  become indispensible when you work with Ruby) so it looks very interesting.  For a little more info check out <a href=\"http:\/\/jesusphreak.infogami.com\/blog\/why_py\">this posting on  why one guy chose Python over Ruby<\/a> and <a href=\"http:\/\/jesusphreak.infogami.com\/blog\/why_django\">some constructive reasons for choosing Django over Rails<\/a>.\n<\/p>\n\n<p>\nSome of those comments are interesting and perhaps even wrong, but it was enough to set me off taking a look at Django and it's tutorials.  Rather than have me list some of the cool features, go and look at <a href=\"http:\/\/www.djangoproject.org\">the main Django site<\/a> and the links above.  Maybe you'll find something interesting.In the meantime, I've been following through the tutorial for Django, using the models I will need for rallyhat.com as examples...\n<\/p>\n\n<p>\nAnyway, a tip of the rallyhat to the first commenter who can tell me what programming languages are represented by the title of this post. :)\n<\/p>\n",
        "date": "2006-12-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Elephants, Rubies...and now Snakes?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/15\/elephants-rubiesand-now-snakes\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nA bug had been driving me CRAZY at work for a long time.  No matter what I changed in the code, the bug would still rear it's ugly head.  It would work PERFECTLY in development, but when you push the code to production it would generate the same bug.  I spent tons of time trying to figure out the difference between the data that the code would see in production (XML stream) and the data samples I had gotten from our partner for that piece of code.\n<\/p>\n\n<p>\nFinally, I decided maybe it was time to take a different approach.  I put in some code that would notify me if an XML document that I had generated couldn't be read in by a simplexml_load_file statement.  Sure enough, that was the problem.  Permissions issues.\n<\/p>\n\n<p>\nUgh.  Don't I feel like a total moron.  Later tonight when the next set of results makes their way down the XML stream I will see if my latest discovery is actually the proper fix.\n<\/p>\n",
        "date": "2006-12-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Sometimes The Weirdest Problems Have The Simplest Solutions",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/13\/sometimes-the-weirdest-problems-have-the-simplest-solutions\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I got an email this morning from <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> telling me that my proposal to give my \"What PHP Can Learn From Ruby On Rails\" has been expected.  My talk is tentatively scheduled for May 17th at 4:00PM.<\/p>\n\n<p>\nFor more info check out the <a href=\"http:\/\/hades.phparch.com\/ceres\/public\/tek\/page\/index.php\/schedule\">conference schedule<\/a> to see what else is being offered.  Hope to see you there!\n<\/p>\n",
        "date": "2006-12-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Speaking at php|tek ",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/08\/speaking-at-phptek\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIt's really a shame that most advanced bug-hunting techniques aren't learned until you've actually had to go through them.  I wish that I had seen <a href=\"http:\/\/adc.jgwong.org\/index.php\/2006\/11\/23\/effective-bugfixing-techniques-for-php\/\">this post on effective bugfixing techniques<\/a> when I first was learning PHP.  I'd say my bug-fixing skills are about 10 times better than what they were 4 years ago.  Working on a complicated site will do that to you.\n<\/p>\n\n<p>\nI think the biggest lesson you can take away from that article is to NEVER assume anything about the way your code works.  The weirdest bugs are the ones that result from assumptions on how things work.  This is why unit testing can be a big help, as it can let other people verify that your code is behaving the way you assume it is.\n<\/p>\n",
        "date": "2006-12-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Bug Hunting Should Be Taught To Beginners",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/06\/bug-hunting-should-be-taught-to-beginners\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAfter a lengthy conversation with my programming friend who lives in the Philipines (can't wait to hook up with you again when you come back to Toronto) where we debated the merits of Ruby (\"it's elegant, just feels right but is a lot slower than PHP\") vs. PHP (\"build it with PHP and you're stuck in the htdocs directory\") I took the first baby steps and created the shell of the application in Rails with a simple 'rails rallyhat.com' in a shell.\n<\/p>\n\n<p>\nThe next step is to get it into version control and experiment with using Capistrano to push it from my laptop onto a testing server.  That will make for an interesting blog post I think.\n<\/p>\n",
        "date": "2006-12-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rallyhat.com -- baby steps",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/12\/05\/rallyhatcom-baby-steps\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nRecently there was a posting on the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> mailing list from someone complaining that CakePHP's native web service support didn't work, mainly because he couldn't figure out how to get it to work.  So, I took up the challenge and sent out an email to the list showing that you can indeed use them.  Might I add that until I tried this, I had never built a web service with CakePHP before.  I found that by turning on the debug mode and actually following the instructions that were in the error messages (best undocumented feature of CakePHP if you ask me) I was able to build it.  Oh yeah, a big shout-out to Samuel DeVore for his near-simultaneous reply to the original message showing an ever simpler example than mine.  Which I promptly stole and used it in this example. :)\n<\/p>\n\n<p>\nThis example works with the latest stable version of CakePHP (1.1.10.3825) running on a Gentoo Linux box with PHP 5.1.2 and Apache 2.  It's my understanding that the native web service stuff was originally built for Cake 1.2 (not released yet) and back-ported to Cake 1.1.  Perhaps some key parts are missing, hence the need for some hackery mentioned below.\n<\/p>\n\n<p>\nFirst, open up \/app\/config\/core.php and turn on support for internal web services:\n~~~\n\/**\n *  The define below is used to turn cake built webservices\n *  on or off. Default setting is off.\n *\/\n    define('WEBSERVICES', 'on');\n~~~\n<\/p>\n\n<p>\nNow, you have to understand that CakePHP won't magically spit out your content as XML, or SOAP, or as REST or whatever.  The internal web services support provides built-in URLs for spitting out your content in whatever alternate format you want.  This concept will become clear as we continue on here.  Basically it lets you do the following:\n<ul>\n<li>mydomain\/controller\/action for regular content<\/li>\n<li>mydomain\/xml\/controller\/action to spit out your content formatted as XML<\/li>\n<\/ul>\n<\/p>\n\n<p>Okay, so first thing I did was create a test controller:\n~~~\n<?php\n\n\/**\n * Test controller for built-in web services\n *\n * @author Chris Hartjes\n *\n *\/\n \nclass TestController extends AppController\n{\n    var $name = 'Test';\n    var $uses = \"\";\n    var $components = array('xml');\n    \n    function index()\n    {\n        $message = \"This is a test of built-in web services\";\n        $this->set('message', $message);\n    }\n}\n\n?>\n~~~\nThose of you who are observant about CakePHP will notice that I've dragged in a component to be used.  Currently, you need to create a component *and* a helper to make the web service stuff work.  This is hackish, and hopefully goes away.\n<\/p>\n\n<p>\nYou need to create an XML component and put it in \/app\/controllers\/components\/xml.php\n~~~\n<?php\n\nclass XMLComponent extends Object\n{\n    \/\/ Blank for now as we're not doing anything weird\n}\n\n?>\n~~~\nand then create an XML helper, placing that in \/app\/views\/helpers\/xml.php\n~~~\n<?php\n\nclass XmlHelper extends Helper\n{\n    \/\/ blank for now\n}\n\n?>\n~~~ \n<\/p>\n\n<p>\nNow we need to generate a bunch of thtml files to display our output.  Of course, we have to create the default view for our action in the controller.  Put this in \/app\/views\/test\/index.thtml\n~~~\nContent generated via regular view<br \/>\n< ?php echo $message ?>\n~~~\nNext is the XML stuff.  There are two files we need to create.  One is \/app\/views\/layouts\/xml\/default.thtml, which simply tells CakePHP to use whatever data is passed into it.\n~~~\n< ?php echo $content_for_layout ?>\n~~~\nand then we create \/app\/views\/test\/xml\/index.thtml to spit out our data in XML\n~~~\n< ?php e('<?xml version=\"1.0\" encoding=\"utf-8\" ?>' . \"\\n\"); ?>\n<foo>\n<bar>< ?php echo $message ?><\/bar>\n<\/foo>\n~~~\nI believe the e(blah) function is a built-in helper for CakePHP.\n<\/p>\n\n<p>\nSo, now when we go to mydomain\/test we get the following output generated:\n~~~\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd\">\n<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n<head>\n<title>CakePHP Web Services Test<\/title>\n<link rel=\"stylesheet\" type=\"text\/css\" href=\"\/css\/cake.generic.css\" \/><meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/><\/head>\n<body>\n    <div id=\"container\">\n        <div id=\"content\">\n            Content generated via regular view<br \/>\nThis is a test of built-in web services     <\/div>\n\n        <div id=\"footer\">\n            &nbsp;\n        <\/div>\n    <\/div>\n    <\/body>\n<\/html>\n~~~\nand when we go to mydomain\/xml\/test we get the following output generated\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<foo>\n<bar>This is a test of built-in web services<\/bar>\n<\/foo>\n~~~\n<\/p>\n\n<p>\nLike I said before, a lot of hoops to jump through and hopefully those go away when CakePHP 1.2 comes out.\n<\/p>\n",
        "date": "2006-11-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Using CakePHP's Native Web Service Support",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/29\/using-cakephps-native-web-service-support\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Man, I never realized that I could actually learn to enjoy Javascript.  It looks just like PHP or even <em>gasp<\/em> Ruby code to me at times. :)<\/p>\n\n<p>For my <a target=\"_blank\" href=\"http:\/\/www.mustique-island.com\">current paid side project<\/a> I've been using <a target=\"_blank\" href=\"http:\/\/www.jquery.com\">jQuery<\/a> to do some cool transformational effects.  On the page that shows the details for a villa, there's a little section, sort of a sidebar, that has things like the number of rooms, price, etc.  Visitors are then allowed to share the information by sending an email.<\/p>\n\n<p>So, being a guy who always wants to learn I said \"Hell, lemme whip up some Ajax goodness so that we don't have to do any page refreshes.\"  Then I said \"How the hell do I do that with jQuery any way.\"  Long story short,  I got it to work.  I'm finally getting the hang of this stuff.  How easy was it?  Lemme show you:<\/p>\n\n<p>First, I put all the different divs that will be displayed into the main page. Perhaps this is sloppy, but I'm just a beginner at this.  I then went to the style sheet for that particular page and added in:<\/p>\n\n<pre><code>#email {\n    display: none;\n}\n\n#email_thankyou {\n    display: none;\n}\n<\/code><\/pre>\n\n<p>That made sure those two divs wouldn't show up until I turned them on.? Then, I created an href of the style <a xhref=\"javascript: foo();\"> in a successful effort to avoid having the page scroll up to the top when they click on the link.? Then, we added in the following jQuery magic:<\/p>\n\n<pre><code><br \/>function shareVilla() {\n\n$(\"#details\").hide(\"fast\");\n\n$(\"#email\").fadeIn(\"slow\"));\n\n}\n\n<\/code><\/pre>\n\n<p>Man, I love helper functions that actually read like English.<\/p>\n\n<p>So then I made sure to hack an existing form validation script to then use some Ajax and post the data to an external PHP script that will send the email.? Here's what I added in, again in jQuery style:<\/p>\n\n<pre><code><br \/>$.post(\"foo.php\",\n{ send_to: document.res_form.send_to.value,\nemail: document.res_form.email.value,\nfrom: document.res_form.from.value,\nyour_email_address: document.res_form.your_email_address.value,\ntextarea: document.res_form.textarea.value,\nvilla_description: document.res_form.villa_description.value,\nvilla_url: document.res_form.villa_url.value},\nfunction(){\n$(\"#email\").hide(\"fast\");\n$(\"#email_thanks\").fadeIn(\"slow\");\n});\n\n<\/code><\/pre>\n\n<p>Again, I find that code to be very readable which means I can actually go back to it later and figure out what it was doing. So, it works:? content fades in and out, data gets posted to an external script, so all that's left is to test to make sure that the emails actually do get sent out.<\/p>\n\n<p>A tip of my hat to John Resig for creating a great, compact Javascript library.? Steal from the best, I always say.<\/a><\/p>\n",
        "date": "2006-11-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Adventures with jQuery",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/24\/adventures-with-jquery\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My latest magazine article for <a target=\"_blank\" href=\"http:\/\/www.phparch.com\">php|architect magazine<\/a> entitled \"Learning from Ruby on Rails\" was published today.  You can think of it as a companion to my talk I gave at php|works back in September.  One thing I will have to do is see how much of the article was edited.  I worried that I rambled and that it would deviate too much from my talk.<\/p>\n\n<p>Anyhow, I encourage you to read it and send me your feedback.<\/p>\n",
        "date": "2006-11-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Learning from Ruby on Rails published",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/22\/learning-from-ruby-on-rails-published\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, the first version of the catfish didn't go well.? Lots of errors in IE and other flakiness.? Back to the drawing board and now we have a second version that shows some promise.? I went back to basics, grabbing the example from SitePoint because I was having a brain-disconnect on the other example that was using the Prototype library.<\/p>\n\n<p>Instead, I seized another opportunity to learn something and decided to use <a href=\"http:\/\/www.jquery.com\">jQuery<\/a>, a really cool lightweight Javascript library (based on moofx I think).? Right now I'm using it to do a nice fade-in for the graphic but we can expand it to cover other things depending on the demands of the site.<\/p>\n\n<p>I'll also being using jQuery for a <a href=\"http:\/\/www.mustique-island.com\">really cool consulting job I'm doing<\/a> that requires some Ajaxian goodness.<\/p>\n",
        "date": "2006-11-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Catfish Redux",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/21\/catfish-redux\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>No, I'm not talking about the delicious fish, I'm talking about <a href=\"http:\/\/www.sitepoint.com\/blogs\/2005\/10\/18\/the-catfish-part-1\/\">The Catfish<\/a>, a Javascript pop-up that sits at the bottom of the browser window and follows you as you scroll through the site.? The above-linked SitePoint uses the Catfish to show ads for their books (which I think are some of the best books for programmers just getting started).<\/p>\n\n<p>Before I point out an example at my work, why is it called The Catfish?? Well, catfish like to swim at the bottom of whatever body of water they are in...and the javascript Catfish sits at the bottom of your browser window.? Makes sense to me, but it sounds cool too.? \"Hey guys, I just got the catfish working.? Can you check it out in IE?\"<\/p>\n\n<p>Anyhow, I've been tasked with trying to fix our current catfish implementation (you can find ours at <a href=\"http:\/\/www.footballforum.com\">FootballForum<\/a> where we use it to entice people to sign up for a membership to the site) because it was having some problems.? So I dug around and found <a href=\"http:\/\/www.gen-x-design.com\/archives\/ajax-activity-indicators-make-them-global-and-unobtrusive\">this posting<\/a> that showed me how I could create a catfish using the <a href=\"http:\/\/prototype.conio.net\/\">Prototype javascript library<\/a>.? Now I can do some cool effects and such (like fade the catfish in, and will experiment with some other effects.<\/p>\n\n<p>However, the problem with the catfish right now isn't that it's not working, because the window is popping up at the bottom and it's staying at the bottom like it's supposed to.? I think the problem is CSS and DOM related, because we're layering two images over top of a tiled background.? It requires nasty hacks in CSS for IE in order to make it happen.? Not being a CSS guru I've passed those implementation details off to? the CSS guru here at work and he is confident he'll have it all worked out.<\/p>\n\n<p>Once that gets worked out I'll do a follow-up posting where I show the Javascript side of things that helped make it happen for us.<\/p>\n",
        "date": "2006-11-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Mmmm...catfish in a browser",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/17\/mmmmcatfish-in-a-browser\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Being an ADD programmer, I am always looking at the new and shiny to see if I can learn something.  I may have mentioned <a href=\"http:\/\/yarivsblog.com\">Yariv Sadan's blog<\/a> before.  Yariv is a guy who has thrown himself into Erlang, creating all sorts of cool tools to let you build web-based apps in Erlang.  I'll be honest:  Erlang looks wicked cool, but good luck finding someone to host a web app for you.  Maybe that might change.  I'd hate to have to host my cutting edge up on my own co-located server.  Especially when your budget for operations is close to zero.\n<\/p>\n\n<p>\nHe has a cool post on <a href=\"http:\/\/yarivsblog.com\/articles\/2006\/07\/18\/the-adventures-horrors-of-scaling-rails\">the problems some people had building a scalable Rails application<\/a>.  I've wondered how you would actually go about building a Rails app that can scale.  There aren't too many examples out there, and looking at the blog posts that Yariv's blog talks about brings back <sarcasm>fond memories<\/sarcasm> of my adventures in helping to build an online dating site.\n<\/p>\n\n<p>\nSo why do I find this interesting?  Well, it will go a long way towards helping me decide on the super-secret project.  I *know* that PHP can scale if I need it to.  I *know* where to find help on scaling PHP-driven web applications.  I'm worried that I don't know enough about Rails to scale it if it becomes a big success.  But perhaps I'm putting the horse before the cart here.\n<\/p>\n\n<p>\nEither way, it's certainly food for thought.  Of course, none of this will matter if I don't build the damn thing. \n<\/p>\n",
        "date": "2006-11-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Do You Scale A Rails App?  With Great Difficulty Apparantly",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/15\/how-do-you-scale-a-rails-app-with-great-difficulty-apparantly\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<ul>\n<li>Zend_Service_Audioscrobbler is almost finished but the group data web service functions aren't working so the unit tests are all failing.<\/li>\n<li>My attempt at writing an appending scoreboard for www.footballforums.com is not working properly...have you been working on something too long if you start dreaming about it?<\/li>\n<li>I read a very interesting article on <a href=\"http:\/\/thwartedefforts.org\/2006\/11\/11\/race-conditions-with-ajax-and-php-sessions\/\">race conditions when dealing with sessions and AJAX in PHP<\/a><\/li>\n<\/ul>\n",
        "date": "2006-11-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Quick Hits",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/14\/quick-hits-3\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nWork has been moving a lot slower on this than I would have liked for a number of reasons, mostly family related as my wife's return to the working world has meant a good portion of the time I used to devote to my various side projects is now devoted to doing things like making lunches for my daughter and helping to prepare dinner for the next day.  So I don't have the time I used to.\n<\/p>\n\n<p>\nAny how, in a <href =\"https:\/\/www.littlehart.net\/atthekeyboard\/2006\/09\/28\/zend_service_audioscrobbler-update\/\">previous posting I had talked about how the work on my Last.fm\/Audioscrobbler plugin had been going.  I've come a long way since then, and only have one more major category of functions to write the unit tests and accompanying code (notice that it's tests first, code second in true agile fashion).  After a bunch of suggestions, I've reworked the code and I think I've made it really simple for me to add new functionality.  Here's what I'm talking about:\n<\/href><\/p>\n\n<pre><code>    \/**\n    *\n    * Private method that queries REST service and returns SimpleXML response set\n    * @param string $service name of Audioscrobbler service file we're accessing\n    * @param string $params parameters that we send to the service if needded\n    * @return SimpleXML result set\n    *\/\n    private function getInfo($service, $params = NULL)\n    {\n        $service = (string) $service;\n        $params = (string) $params;\n\n        try {   \n            $request = $this-&gt;_rest-&gt;restGet($service, $params);\n\n            if ($request-&gt;isSuccessful()) {\n                $response = simplexml_load_string($request-&gt;getBody());\n                return $response;\n            } else {\n                if ($request-&gt;getBody() == 'No such path') {\n                    throw new Zend_Service_Exception('Could not find: ' . $dir);\n                } else if ($request-&gt;getBody() == 'No user exists with this name.') {\n                    throw new Zend_Service_Exception('No user exists with this name.');\n                } else {\n                    throw new Zend_Service_Exception('The REST service ' . $service . ' returned the following status code: ' . $request-&gt;getStatus());\n                }\n            }\n        }\n        catch (Zend_Service_Exception $e) {\n            throw ($e);\n        }\n    }\n<\/code><\/pre>\n\n<p>\nThat bit of code is what does all the heavy lifting for me. It uses the Zend_Service_Rest component to talk to Audioscrobbler's web services, and returns the results as a SimpleXML object.  Nice and simple.  A perfect example of what Zend Framework is trying to accomplish.\n<\/p>\n\n<p>\nSo, how do I query the web service?  I think an example of one of my unit tests will show you again how simple I've tried to make it.\n<\/p>\n\n<pre><code>&lt;?php\n\n\/**\n * @package    Zend_Service_Audioscrobbler\n * @subpackage UnitTests\n *\/\n\n\/**\n * Zend_Service_Audioscrobbler\n *\/\nrequire_once 'Zend\/Service\/Audioscrobbler.php';\n\n\/**\n * PHPUnit test case\n *\/\nrequire_once 'PHPUnit\/Framework\/TestCase.php';\n\n\/**\n * @package    Zend_Service_Audioscrobbler\n * @subpackage UnitTests\n *\/\nclass Zend_Service_Audioscrobbler_TagDataTest extends PHPUnit_Framework_TestCase\n{\n    public function testGetTopTags()\n    {\n        try {\n            $as = new Zend_Service_Audioscrobbler();\n            $response = $as-&gt;tagGetTopTags();\n            $this-&gt;assertNotNull($response-&gt;tag);\n        } catch (Exception $e ) {\n                $this-&gt;fail(\"Exception: [\" . $e-&gt;getMessage() . \"] thrown by test\");\n        }\n    }\n\n    public function testGetTopArtists()\n    {\n         try {\n                $as = new Zend_Service_Audioscrobbler();\n                $as-&gt;set('tag', 'Rock');\n                $response = $as-&gt;tagGetTopArtists();\n                $this-&gt;assertNotNull($response-&gt;artist);\n                $this-&gt;assertEquals($response['tag'], strtolower($as-&gt;get('tag')));\n            } catch (Exception $e ) {\n                    $this-&gt;fail(\"Exception: [\" . $e-&gt;getMessage() . \"] thrown by test\");\n            }       \n    }\n\n    public function testGetTopTracks() \n    {\n        try {\n            $as = new Zend_Service_Audioscrobbler();\n            $as-&gt;set('tag', 'Rock');\n            $response = $as-&gt;tagGetTopTracks();\n            $this-&gt;assertNotNull($response-&gt;track);\n            $this-&gt;assertNotNull($response-&gt;artist);\n            $this-&gt;assertEquals($response['tag'], strtolower($as-&gt;get('tag')));\n        } catch (Exception $e) {\n            $this-&gt;fail(\"Exception: [\" . $e-&gt;getMessage() . \"] thrown by test\");\n        }\n    }\n\n}\n\n?&gt;\n<\/code><\/pre>\n\n<p>\nI can't stress enough that I've really come around to the idea of that simple is always better, and if you want people to actually use what you've written you need to make it easy to use.  I hope to get the unit tests all done in the next week, and then write up some documentation on how to use the component.  After that, I'll send something to the fw-general mailing list announcing the fruits of my labours and people should take a look at the component.\n<\/p>\n",
        "date": "2006-11-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend_Service_Audioscrobbler Update",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/10\/zend_service_audioscrobbler-update-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs I start working on my <a href=http:\/\/www.rallyhat.com>super secret project<\/a> (in true Web 3.14159 style you can't tell anything about it from the domain name) I have to make a decision on what technology to use.  In my case, it's a battle between <a href=http:\/\/www.php.net>PHP<\/a> and <a href=http:\/\/www.rubyonrails.com>Ruby on Rails<\/a>.\n<\/p>\n\n<p>\nSo what do I do here?  My PHP skills are more advanced than my Rails skills, but I feel like I could easily pick up what I need to know in Rails because, well, programming knowledge of web-based languages is really transferable.  But this project is supposed to be fun at the same time.  I could build it in PHP, but that's not really much of a challenge.  So I'm going to build it in Rails because I'll learn something new by building this application.  In the end, it's all about learning for me.  I've built a simple blog with Rails before, so it will be interesting for me to see if Rails lives up to the \"productivity boost\" that I (and others) have been claiming.\n<\/p>\n\n<p>\nI also think I need to go and buy the revised version of the Agile Software Development for Rails book.  Never hurts to have some dead-tree information about Rails.\n<\/p>\n\n<p>\nSo what is the site about?  Can't tell you quite yet.  I'll be finding some hosting and putting up a splash page shortly.  I happen to think that it will be a very interesting application, and one that will generate a lot of fun for the people who choose to use it.\n<\/p>\n",
        "date": "2006-11-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Constant Battle That Goes On In My Head",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/08\/the-constant-battle-that-goes-on-in-my-head\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nA while back Cal Evans (editor of <a href=\"http:\/\/devzone.zend.com\">Zend Developer Zone<\/a>) sent me an email asking me to send him a picture of myself for a community project that he thought would be fun.  Being a huge egomaniac, I sent him probably the best picture of myself my wife has ever taken with our digital camera.  The result?  <a href=\"http:\/\/www.flickr.com\/photos\/calevans\/sets\/72157594355906012\/\">PHP Community Playing Cards<\/a> deck.  I'll be getting a copy of the deck in the mail from Cal.  I'm the <a href=\"http:\/\/www.flickr.com\/photos\/calevans\/286001179\/in\/set-72157594355906012\/\">8 of Diamonds<\/a> in the deck.\n<\/p>\n\n<p>\nI'll be sure to play Go Fish with my oldest daughter when I get my copy.\n<\/p>\n",
        "date": "2006-11-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHP Community Card Deck",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/02\/php-community-card-deck\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Hi guys, two days of looking after my daughter at home has fried my brain and reduced my creative output. So, here's what I've been thinking about.<\/p>\n\n<p>\n<ul>\n<li>the new Amazon web services stuff is *perfect* for my supersecret project, so it's time to stack talking about it and get 'er done (horrible Larry the Cable Guy reference)<\/li>\n<li>If <a href=\"http:\/\/www.symfony-project.com\">this PHP 5 web framework<\/a> is good enough for Yahoo! (the world's largest user of PHP) to use to build their Yahoo! Bookmarks application, it's time for me to look at it and see if it will work with the supersecret project.  <a href=http:\/\/cakephp.org>CakePHP<\/a> is good...but Symfony's extensive documentation just blows it out of the water for the experienced-with-php-but-not-with-the-framework crowd.  I went through the Ajax tutorial that they had and after figuring out how to configure Apache to serve up my app and how to turn on debugging mode I did the whole tutorial in about 20 minutes (that's with my daughter sitting in my lap).<\/li>\n<li>Also, time to stop procrastinating and get going on the Rails version of my administration portal for <a href=\"http:\/\/www.ibl.org\">the IBL<\/a>.  I always need side projects to learn new technologies, so this is the perfect Rails-plus-Ajax vehicle.<\/li>\n<li>Oh yeah, also gotta time up the loose ends on my <a href=\"http:\/\/www.audioscrobbler.net\">Audioscrobbler<\/a> component for <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a>.  I've got 80% of the unit tests done, so I need to finish those up and write the documentation on how to actually use the sucker.<\/li>\n<li>Way too many outstanding projects...gotta get some closure on this stuff I've been working on.  It's no good to have 5 projects in various stages of completeness.  Have to turn them into 5 projects that are done.\n<\/li>\n<\/ul><\/p>\n",
        "date": "2006-11-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Chris Is Thinking About, November Edition",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/11\/01\/what-chris-is-thinking-about-november-issue\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n(My appologies for the late posting.  DNS problems caused my site to disappear for a while but everthing is okay now).\n<\/p>\n\n<p>\nMy friend Kevin (working away overseas in Southeast Asia) pointed out the new Amazon web services to me.  Here's our conversation:\n\n\n<blockquote>\n9:23:18 PM chorgheavyinc: something else weird.. have you checked out amazon web services recently?\n9:23:27 PM chriswebfinity: no I haven't\n9:23:36 PM chorgheavyinc: aws.amazon.com\n9:23:40 PM chorgheavyinc: take a look\n9:24:02 PM chriswebfinity: the only web services Ive been working with lately are with last.fm\/audioscrobbler.net\n9:24:09 PM chriswebfinity: writing a component for the Zend Framework\n9:24:09 PM chorgheavyinc: then grab your secret list of projects that you were waiting to become rich to do\n9:24:31 PM chriswebfinity: um, ok\n9:26:41 PM chorgheavyinc: anyway, that's the message.  when you get a chance lmk what you think.. i'd be interested in your opinon and thoughts\n9:26:55 PM chorgheavyinc: lastfm looks neat\n9:26:57 PM chriswebfinity: I will take a look at it for sure\n9:27:46 PM chorgheavyinc: like it's crazy what could be done with it, gonna try something goofy starting Nov 1, :D\n9:33:36 PM chriswebfinity: so is Amazon going to give both ends away then?\n9:33:42 PM chriswebfinity: the API *and* code to use it?\n9:33:45 PM chriswebfinity: Im confused\n9:34:00 PM chorgheavyinc: the keystone is S3, the storage.\n9:34:29 PM chorgheavyinc: that was the first thing i saw, few months ago.  \n9:34:39 PM chorgheavyinc: \"Cool idea\" i said \n9:35:26 PM chorgheavyinc: the virtualized server ( the beta) is very interesting\n9:35:35 PM chorgheavyinc: yes, they are making this available\n9:36:00 PM chorgheavyinc: you have to pay sure, but only for what you use\n9:37:52 PM chorgheavyinc: the broad ramifications are that you can implement a demo on your lappy, and scale that bad boy up to about youtube size\n9:38:18 PM chorgheavyinc: all pay as you go, like per second cell phone rate\n9:39:56 PM chriswebfinity: interesting\n9:40:00 PM chorgheavyinc: like i do contracts and live in the philippines because i am saving to do the projects i  really want to do\n9:40:33 PM chorgheavyinc: but... i have to reconsider now.  I have the tech expertise to do it, no question.. \n9:40:53 PM chorgheavyinc: but has the lazyweb helped me again?\n9:41:19 PM chriswebfinity: it saves you when you least expect it ;)\n9:41:56 PM chorgheavyinc: it sure does... it's very hard to work hard sometimes .. \n9:43:53 PM chorgheavyinc: so im taking from tomorrow until next  monday to check into this\n9:48:00 PM chriswebfinity: okay, created an account\n9:48:07 PM chriswebfinity: I'll see what comes to me about using it\n9:48:12 PM chriswebfinity: maybe hack together a demo of something\n9:48:33 PM chorgheavyinc: yeah , im thinking that too\n9:49:07 PM chriswebfinity: gotta be carefull though...because they charge you could rack up a big bill testing ;)\n9:49:09 PM chorgheavyinc: it is making me redefine the \"but what can i do today\" question\n9:49:37 PM chorgheavyinc: true.. i just want to learn the api's\n9:49:41 PM chorgheavyinc: i can test locally\n9:53:53 PM chriswebfinity: I think the ability to use the storage is huge\n9:54:01 PM chorgheavyinc: like i sure could have used S3 to back up my drive\n9:54:03 PM chorgheavyinc: yes\n9:54:12 PM chriswebfinity: actually...I have an idea\n9:54:16 PM chriswebfinity: not sure how to pay for it though\n9:54:30 PM chriswebfinity: and I've been planning on building the site even though i have no idea how to make any money of off it\n9:55:03 PM chorgheavyinc: *ding*\n9:55:17 PM chorgheavyinc: time to build\n<\/blockquote>\n\nVery interesting stuff indeed.\n\n<\/p>\n",
        "date": "2006-10-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Amazon Web Services Takes It To The Next Level",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/29\/amazon-web-services-takes-it-to-the-next-level\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Traffic has been up on the <a href=\"http:\/\/cakephp.org\">CakePHP<\/a> mailing list, and unfortunately not all of it is good.  Lots of the same questions and lots of people asking really off-topic questions about PHP that aren't really related to Cake.  So, one of the senior members of the CakePHP team finally had enough and said something about it:\n\n<blockquote>\nHey, happy Tuesday, how's everybody doing?  I just wanted to take a\nmoment out of my afternoon to remind everyone about the awesome search\ntechnology this mailing list is built on.  It's called Google, and it\ncan help you quickly and efficiently find answers to questions that you\nmight have.\n\nNormally I wouldn't take the time to point this out, as it is usually\nfairly self-evident (refer to the logo in the upper left-hand corner of\nyour screen), but lately the CakePHP community has been experiencing\nsome growing pains.  (Not to say that growth is bad, by all means, keep\nit going).  We've had people joining the community at all levels of PHP\nand programming experience, which is great.\n\nWhat's not great is that people are continuing to ask questions without\nbothering to search for an answer beforehand.  CakePHP is over a year\nold, and this mailing list is quickly approaching 3000 users.  What\nthat means for you is that almost any question you could ever want to\nask in your first 3 months of using Cake (or ever) has already been\nasked, and answered.... many, many, many times.\n\nNot only that, but people are also asking questions that are blatantly\noff-topic, or are general PHP questions that have nothing specific to\ndo with Cake.  While this isn't a terrible thing to do, strictly\nspeaking, it certainly doesn't help.  (Hint: if you click on the\n\"About\" link and scroll to the bottom of the page, there are at least\ntwo general PHP mailing lists linked, where you can ask all the PHP\nquestions you want).\n\nSo, why is this bad?\n\nFor one thing, I simply can't understand the level of patience required\nto do something like that.  The latest versions of all three major\nbrowers have search boxes built right in, which means quick access to\ninformation is literally seconds away, whereas asking questions on a\nmailing list requires you to wait for minutes, hours, or in some cases,\ndays.  I don't know about you, but I simply don't have that kind of\ntime.\n\nFurthermore, it makes it more difficult for myself and others like me\n(sdevore, AD7six, psychic, jzimmerman, and more [you know who you are])\nwho answer your questions on our own time and at our own expense.  This\nis Open Source, no one gets paid to answer questions.  These people do\nit because they care about the advancement of this project.  As a core\ndeveloper, I feel a certain amount of responsibility to them, and if\nyou can't meet them halfway by taking a little bit of effort to answer\nyour own questions, rather than relying on others to spoon-feed you\ninformation, that is nothing short of disrespect.\n\nAlso, and this is probably the single most important point: asking\nredundant questions dilutes the pool of relevant information for those\nthat come after you.  When the same question is asked 20 different\ntimes in 20 different ways, it makes it harder to wade through search\nresults when trying to find an answer to your question, which, of\ncourse, is the *entire point*.\n\nAnd for those of you who were wondering, the answer is yes: I am keenly\naware that the title of this post contains a double negative.\n<\/blockquote>\n<\/p>\n\n<p>\nNate makes the very fair but tough point that this list isn't about PHP, it's about solving problems with CakePHP. Now, I used to be a noob just like a lot of people who are posting on the mailing list but I would always search for answers to my problems before asking questions.  Old-skool mailing list etiquette I guess.  I give out advice on the list for those who have obviously taken the time to understand the problem they are facing.\n<\/p>\n\n<p>\nThe purpose of the list isn't to teach you PHP, it's to teach you how to use CakePHP and you have to assume a certain level of programming knowledge in order to gain anything from it.  The website has lots of good info, and you can use Google itself to search through the mailing list.  For Nate's sanity, please do lots of research before you ask a question and you will find plenty of people willing to help you out.  If you are asking \"how do you write PHP code\" or \"how do you build this\" questions, well, I think you need to buy a PHP book or something and learn the basics.  Then come back and ask us again.  We'll probably be less cranky by then as well. \n<\/p>\n",
        "date": "2006-10-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "If They Want To Eat Cake, They Have To Ask Nicely",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/24\/if-they-want-to-eat-cake-they-have-to-ask-nicely\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nCongratulations to my meet-once-but-talk-all-the-time-via-IM friend <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> for winning the RailsDay Contest for the app she wrote with her frind Bryan Wood called <a href=\"http:\/\/www.slash7.com\/articles\/2006\/06\/21\/railsday-railsconf\">Freckle<\/a>, an online app for keeping track of wedding stuff.  \n<\/p>\n\n<p>\nI know that Amy is getting married \"some time soon\" (but not to Bryan) so it's no surprise that she came up with something like this.  There's a <a href=\"http:\/\/blog.evanweaver.com\/articles\/2006\/10\/19\/grand-tour-of-the-13-railsday-winners\">great breakdown of the winners<\/a> over at <a href=\"http:\/\/blog.evanweaver.com\">Evan Weaver's blog<\/a>\n<\/p>\n\n<p>\nCongrats Amy!\n<\/p>\n",
        "date": "2006-10-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Freckles Are Cute!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/20\/freckles-are-cute\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, I've sold out and put some ads on my site.  But it's for a really good product that I won't hesitate to recommend.  I've enjoyed reading <a href=\"http:\/\/thedailywtf.com\/Default.aspx\">The Daily WTF<\/a>, a blog dedicated to pointing out the absurdities developers encounter every day on the job.  When I found out they had created the HiddenNetwork I decided to jump on board to try and help out.\n<\/p>\n\n<p>\nThe ad you see on the right-hand side is from their network.  Prospective employers who read this blog who are looking to hire someone, please visit <a href=\"http:\/\/hiddennetwork.com\/ref.ashx?1079\">HiddenNetwork.com<\/a> to place an ad with their network.  It's hard to find talented people, and the folks at HiddenNetwork think that the type of people who read my blog are the type of people you want to hire.\n<\/p>\n\n<p>\nI get money if people read this blog posting and post a job on the network using my referral code.  It's that simple.  Finding a good job is hard, so if I can help employers and employees find each other, I'm a happy camper.\n<\/p>\n",
        "date": "2006-10-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New Ads On The Site",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/17\/new-ads-on-the-site\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI've been visiting Michael Mahemoff's web site <a href=\"http:\/\/www.softwareas.com\">Software As She's Developed<\/a> off-and-on for about a year.  He's an Ajax guru who does a cool podcast about his experiences with Ajax, and he even has a cool resouce called <a href=\"http:\/\/www.ajaxpatterns.org\">Ajax Patterns<\/a> that has really helped me wrap my head around Ajax in general.  I took the plunge and bought his excellent book \"Ajax Design Patterns\" since I am trying to improve my Javascript and presentation skillz because I want to be part of the modern web.\n<\/p>\n\n<p>\nWorking with Javascript (once I got over prejudices picked up from reading other people's comments about Javascript) seems very natural.  If you know PHP, the syntax for Javascript is dead simple.  This book, when combined with the efforts of my only-met-her-once-but-talk-all-the-time-via-IM friend <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> I feel like I'm starting to finally understand the impact using Javascript can have on a web site.\n<\/p>\n\n<p>\nI'm only about 5 chapters in at this point but those 5 chapters have led me to believe that I made a solid choice in picking up this book.  Yes, this book focuses on \"Ajax design patterns\" but it really has a recipes-style feel to it.  As an aside, this book was on the shelf at my local bookstore near Chad Fowler's Rails Recipes book.  Yes, fate has a sense of humour.\n<\/p>\n\n<p>\nSo, Michael goes through all sorts of design patterns by presenting them as follows:\n<ul>\n<li>a story to illustrate what the problem is, usually in real-world terms<\/li>\n<li>a technical breakdown of the problem<\/li>\n<li>a neat section called \"Forces\" that explains concepts or items that you will encounter in applying the pattern<\/li>\n<li>how the problem was solved using the design pattern<\/li>\n<li>real-world examples if there are any<\/li>\n<li>and the most important thing to a lazy programmer like me:  code examples<\/li>\n<\/ul>\n<\/p>\n\n<p>\nWhen I first encountered design patterns, I didn't quite understand what they were or how they could help me.  These days, I have acquired the habit of figuring out the problem in words instead of code and then finding solutions to the words.  Design patterns are a shortcut to help you solve problems that, well, other people have already solved.  Hopefully you learn something in the process. :) <\/p>\n\n<p>\nThis book is no different.  I found it so easy to jump around the book, reading up on a particular pattern (\"Cross-Domain Proxy\") to find what problem it's helping to solve (\"How can you augment your application with services available elsewhere on the Web?) to what the short version of the solution is (\"Create proxying and mediating web services to facilitate communication between the browser and external domains\") and what other patterns are related to this one (\"Since external calls can be expensive, the Performance Optimization patterns apply.\").\n<\/p>\n\n<p>\nI'm into reference books with examples on how to do things, so this book is obviously a natural for me.  Go check out Michael's <a href=\"http:\/\/www.softwareas.com\">site<\/a> and if you are looking to really *understand*  Ajax then <a href=\"http:\/\/www.ajaxpatterns.org\">Ajax Patterns<\/a> should be your first stop.\n<\/p>\n",
        "date": "2006-10-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Mini-book Review:  Ajax Design Patterns",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/13\/mini-book-review-ajax-design-patterns\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm just back from a long weekend (Thanksgiving in Canada) and very tired after a weekend where my youngest was sick, and clingy, and not sleeping well.  Such is life.  So, instead of a tutorial I'll have to talk about what I'm thinking about.<\/p>\n\n<ul>\n<li>Have to give a quick demo tomorrow of the code I posted the other day to post things to a vBulletin thread.  The problem?  A lack of baseball-related info coming down the pipe from SportsTicker.  I'll figure something out.<\/li>\n<li>On the advice of my friend <a href=\"http:\/\/slash7.com\">Amy<\/a> I'm going to investigate switching over the IBL site from using Typo to using Mephisto.  I'm having a hell of a time getting it installed though.  Not the best instructions available.<\/li>\n<li>Trying to figure out what to build my super-secret project with:  Rails?  CakePHP?  Roll my own?  Toture myself by following <a href=\"http:\/\/yarivsblog.com\">this guy's work<\/a> and build the site in Erlang.   Tough to decide.<\/li>\n<li>Mourn the potential loss of my iBook to some weird hardware problem...it's in the hands of a MacGenius so we'll see what happens.<\/li>\n<li>Take my iPod in for repairs...for a second time...with the same problems as before...and appearing after the latest iTunes update...and I'm not alone in seeing problems.<\/li><\/ul>\n",
        "date": "2006-10-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Chris Is Thinking About",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/10\/what-chris-is-thinking-about-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nMy day-job requires me to create code that will talk to <a href=\"http:\/\/www.vbulletin.com\">vBulletin<\/a> web sites we run.  My latest task involves taking data that we get from <a href=\"http:\/\/www.pa-sportsticker.com\/en\/index.html\">PA Sportsticker<\/a> and create posts in one of our forums.  Lucky for me, somebody smarter than me figured out how to do this.  It's very simple, and I've taken their work and modified it for our needs.\n<br \/>\n~~~\n<?php\n\n\/**\n * Script that posts info sent to it by the Sportsticker parser as a thread in a forum\n * Based on code found in http:\/\/www.vbulletin.org\/forum\/showthread.php?t=97283&page=2\n *\n * @author Chris Hartjes\n *\/\n\nrequire '.\/global.php';\nrequire '.\/includes\/class_dm.php';\nrequire '.\/includes\/class_dm_threadpost.php';\nrequire '.\/includes\/functions_databuild.php';\n\n$threaddm = new vB_DataManager_Thread_FirstPost($vbulletin, ERRTYPE_STANDARD);\n$post_userid = 1; \/\/ Admin\n$userid = 1;\n$user_name = 'chartjes';\n$allow_smilie = '1';\n$visible = '1';\n\nif (isset($_POST['forum_id'])) $forum_id = (int)$_POST['forum_id'];\nif (isset($_POST['post_text'])) $post_text = (string)strip_tags($_POST['post_text']);\nif (isset($_POST['title'])) $title = (string)strip_tags($_POST['title']);\n\n$threaddm->do_set('forumid', $forum_id);\n$threaddm->do_set('postuserid', $post_userid);\n$threaddm->do_set('userid', $userid);\n$threaddm->do_set('username', $user_name);\n$threaddm->do_set('posttext', $post_text);\n$threaddm->do_set('title', $title);\n$threaddm->do_set('allowsmilie', $allow_smilie);\n$threaddm->do_set('visible', $visible);\n$threaddm->save();\nbuild_forum_counters($forum_id);\n\n?>\n~~~\n<\/p>\n\n<p>\nI did see some talk abot how using that do_set method is not recommended as it bypasses the data manager object vBulletin uses.  I tried using that datamanager by actually looking at the code that does posts, but couldn't get it to work.  I suspect part of the problem is that the data manager assumes you are logged in, while you can post without being logged in with the method above.  At least it sure looks that way.  More testing is obviously required but I think I'm on the right track.\n<\/p>\n\n<p>\nIn a nutshell, the script that I wrote to parse the XML feed that Sportsticker provides will grab all the necessary info from the stream and then send that data to the above code via a POST request.  Nice and simple.  Hope this code sample helps.\n<\/p>\n",
        "date": "2006-10-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Tutorial: How to create a thread in vBulletin with a script",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/06\/tutorial-how-to-create-a-thread-in-vbulletin-with-a-script\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n(I appologize for the cheesy Star Trek quote above).\n<\/p>\n\n<p>\nMy beloved iBook gave up the ghost on Sunday night, and is currently in good hands with a man I only know as MacGenius.  It's definitely hardware related as the hard-drive is okay and the diagnostics for the memory and other stuff turned up ok.  Maybe the hard-drive controller.  Anyway, my work very generously replaced my iBook for me with a new MacBook, and boy is it slick. ;)\n<\/p>\n\n<p>\nAnyhow, I'm busy rebuilding all the developer's tools I normally use (Ruby, PHP, MySQL, Postgres) so I can get back to actually Getting Things Done.  Once that is set, then I'll be monkeying around with some changes to Zend_Service_Audioscrobbler.\n<\/p>\n",
        "date": "2006-10-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It's Dead, Jim",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/10\/04\/its-dead-jim\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In my spare time I've been banging away at writing the required unit tests for the <a href=\"http:\/\/framework.zend.com\/wiki\/display\/ZFPROP\/Zend_Service_Audioscrobbler+Proposal+-+Chris+Hartjes,+Derek+Martin\">Zend_Service_Audioscrobbler<\/a> component that <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> and I had started.  I finished all the unit tests for the user based functions, which is a nice milestone.  Then I decided to go back and actually read the comments made from the proposal.  Oops.  I discovered there were a bunch of changes that the folks at Zend said needed to be made in order to accept them.  I agree with most of them.  To save you the trouble of scrolling all the way to the bottom, here they are:\n<\/p>\n\n<blockquote>\nZend Comments\n\nThe proposal is approved on the condition that the following issues are addressed by the proposal author.\n\nPublic properties make the set* methods redundant. Ideas for resolution:\n\n    * Change the properties to be protected and using the existing set* methods along with new corresponding get* methods.\n    * Override __get() and __set(), storing properties in a protected array.\n\nAnother option would be to pass the \"properties\" as method arguments:\n\n< ?php\n$as = new Zend_Service_Audioscrobbler();\n$profileInfo = $as->userGetProfileInformation('BigDaddy71');\n$relatedArtists = $as->artistGetRelatedArtists('LCD Soundsystem');\n\/\/ ...\n?>\n\nNo underscores within variable names and compliance with other coding standards.\n\nWhat is the reason that setDate() and getInfo() methods are designated private? Should they not be inherited and accessible by subclasses, and if so, why not?\n\nWe should leverage Zend_Date as it becomes available for date-specific operations.\n\nHow do Zend_Service_Audioscrobbler and the Audioscrobbler web services support limiting the number of records returned by a request?\n\nThe API presented causes extra effort to programmatically select functionality, due to the practice of essentially embedding options into the method names. Usually function names accept parameters to select between different, related behaviors. For example, the proposal shows:\n\npublic function userGetRecentWeeklyArtistChart()\npublic function userGetRecentWeeklyAlbumChart()\npublic function userGetRecentWeeklyTrackChart()\npublic function userGetPreviousWeeklyArtistChart()\npublic function userGetPreviousWeeklyAlbumChart()\npublic function userGetPreviousWeeklyTrackChart()\n\nUsing class constants having string values we could nicely refactor the above list of methods to something like:\n\ngetChart($type, $recent = true)\n\nSimilarly, what about:\n\n\/\/ source = 'user' | 'artist'\n\/\/ type = 'artists' | 'albums' | 'tracks' | etc.\ngetTop($source, $type)\n<\/blockquote>\n\n<p>\nAll very sensible, so I've got some refactoring work to do.\n<\/p>\n",
        "date": "2006-09-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend_Service_Audioscrobbler Update",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/28\/zend_service_audioscrobbler-update\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>To make up for the lack of posting, go read this amazing post about <a href=\"http:\/\/steve-yegge.blogspot.com\/2006\/09\/good-agile-bad-agile_27.html\">Good Agile, Bad Agile<\/a>.  One of the most interesting things I've read in a while.<\/p>\n",
        "date": "2006-09-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "There Is Such A Thing As Bad Agile Software Development",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/27\/there-is-such-a-thing-as-bad-agile-software-development\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Many thanks to the CakePHP mailing list for pointing out some really dumb errors I made along the way getting this stuff to work.  It turns out that case-sensitivity does actually matter at time. :)\n<\/p>\n\n<p>\nOkay, for a project at <a href=\"http:\/\/www.verticalscope.com\">work<\/a> I was asked to add graphs to some of the reports I'd already created.  So I looked around for solutions for graphing in PHP and stumbled upon <a href=\"http:\/\/www.maani.us\/charts\/\">PHP\/SWF Charts<\/a> as a solution.  Basically, it comes in two parts:  a Flash movie that generates the charts for you and a PHP library that sends data to the Flash movie to create those great charts.\n<\/p>\n\n<p>\nSo, first thing I did was download the package from the PHP\/SWF Charts site.  I then dumped everything into a \/graphs directory in my web root.  Why?  Well, that's the only way I could get the thing working and I am a disciple who worships at the altar of Get It Done because there are other things I'd rather deal with.  I'm sure one of the CakePHP people who runs across this tutorial can correct things for me so it's all inside the framework itself.\n<\/p>\n\n<p>\nNow, that the library is unzipped and in it's own directory, we go and start altering the code I need to make this work.   First thing I did was add a subdirectory to my app\/views directory called graphs and added in users.thtml\n~~~\n<?php\nvendor('charts');\n$chart['chart_data'] = array($header, $member_data, $visitor_data);\n$chart['chart_type'] = 'stacked area';\n$chart['axis_category'] = array('size' => 9);\n$chart['chart_grid_h'] = array('thickness' => 1);\n$chart['chart_grid_v'] = array('thickness' => 1);\nSendChartData($chart);\n?>\n~~~\nThis code will pass the info I've passed to my view to the flash component.  This is the part that will spit out the chart, but I also had to add in some code to the main view for the report itself so the graph will show up\n\n~~~\n<div align = \"center\">\n    <br \/><br \/>\n    Users Online For Entire Network For Last 24 Hours\n    <br \/><br \/>\n    < ?php vendor(\"charts\") ?>\n    < ?php echo InsertChart ('\/verticalscope_stats\/img\/charts.swf', \"\/graphs\/charts_library\", '\/verticalscope_stats\/graphs\/users\/' . uniqid(rand(), true), 800, 250, 'FFFFFF') ?>\n<\/div>\n~~~\nAs you can tell, I omitted a step above.  When I downloaded the charts package I stuck the charts.swf Flash movie in app\/webroot\/img so I can find it later.  The uniqid stuff is to make sure it doesn't get cached by your browser.\n<\/p>\n\n<p>\nOkay, so now here's the code I created to pull results from our database, munge the data and pass it over to the view:\n~~~\nclass GraphsController extends AppController\n{\n    var $name = 'Graphs';\n    var $uses = array('OnlineUser');\n    \n    public function users()\n    {\n        \/\/ create graph for charts based on users online for the past 24 hours\n        $members = array();\n        $visitors = array();\n        $total_users = array();\n        $header = array();\n        $member_data = array();\n        $visitor_data = array();\n        \n        $this->OnlineUser->recursive = -1;      \n        $temp = $this->OnlineUser->findBySQL(\"SELECT MAX(ou_date) as max_ou_date FROM online_users\");\n        $max_ou_date = $temp[0][0]['max_ou_date'];      \n        $result = $this->OnlineUser->findAll(\"DATE_SUB('$max_ou_date', INTERVAL 1 DAY) < = ou_date\");\n        \n        foreach ($result as $data) {\n            \/\/ Now we have to find the top value for each hour within\n            \/\/ all the data for an hour\n            $hour = date(\"H:00\", strtotime($data['OnlineUser']['ou_date']));\n            $site_id = $data['OnlineUser']['site_id'];\n\n            if (!isset($members[$site_id][$hour])) {\n                $members[$site_id][$hour] = 0; \n            }\n\n            if ( $members[$site_id][$hour] < $data['OnlineUser']['members']) {\n                $members[$site_id][$hour] = $data['OnlineUser']['members'];\n            }\n\n            if (!isset($visitors[$site_id][$hour])) {\n                $visitors[$site_id][$hour] = 0;\n            }\n\n            if ( $visitors[$site_id][$hour] < $data['OnlineUser']['visitors']) {\n                $visitors[$site_id][$hour] = $data['OnlineUser']['visitors'];\n            }\n\n        }\n\n        \/\/ Phew, that's a lot of dating munging.  Okay, now we need to cycle through\n        \/\/ the raw data and create totals for each hour\n        $member_data = array( );\n        $visitor_data = array( );\n\n        foreach ($members as $site_id => $member) {\n            foreach ($member as $hour => $count) {\n                \n                if (!isset($member_count[$hour])) $member_count[$hour] = 0;\n                \n                $member_count[$hour] += $members[$site_id][$hour];\n            }\n        }\n\n        foreach ($visitors as $site_id => $visitor) {\n            foreach ($visitor as $hour => $count) {\n                if (!isset($visitor_count[$hour])) $visitor_count[$hour] = 0;\n                \n                $visitor_count[$hour] += $visitors[$site_id][$hour];\n            }\n        }\n\n        $header[] = \"\";\n        $member_data[] = \"Members\";\n        $visitor_data[] = \"Visitors\";\n        \n        foreach ($member_count as $hour => $count) {\n            $header[] = $hour;\n            $member_data[] = $count;\n            $visitor_data[] = $visitor_count[$hour];\n        }\n\n        $this->set('header', $header);\n        $this->set('member_data', $member_data);\n        $this->set('visitor_data', $visitor_data);\n        $this->layout = 'ajax';\n    }\n}\n\n?>\n~~~\n<\/p>\n\n<p>\nSo, I think that's all you need in order to get your code working and talking nicely with PHP\/SWF charts.  I'll go over this stuff again to look for any errors and clear up anything that looks confusing.\n<\/p>\n",
        "date": "2006-09-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Tutorial: Integrating PHP\/SWF Charts with CakePHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/26\/tutorial-integrating-phpswf-charts-with-cakephp\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\n...until the stuff broke when I moved it into production.  *sigh*.\n<\/p>\n\n<p>\nI was going to post a tutorial on how to get PHP\/SWF Charts to work with CakePHP.  Everything is working okay on my iBook, but when I moved it up to the production server the graphs stop working and I get an error that is not reported on my iBook.  CakePHP reports that it's missing some default layout for AJAX, which is weird considering it's exactly the same code running in both environments.  Smarter people than me will tell me the answer, I'm sure.\n<\/p>\n",
        "date": "2006-09-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It was a good day for a tutorial...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/20\/it-was-a-good-day-for-a-tutorial\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well, I made it through the conference in one piece (except for the head cold I picked up from my oldest daughter, and has spread to my wife as well).  I also noticed I'm getting lots of love on the web from Cal Evans over at <a href=\"http:\/\/devzone.zend.com\">DevZone<\/a> and some nice posts from the folks over at <a href=\"http:\/\/www.phpdeveloper.org\">PHPDeveloper.org<\/a>.  I wasn't looking for this kind of exposure but it sure is nice.\n<\/p>\n\n<p>\nSo I as wrap up my day with some organzing of future projects and taking another stab at using Eclipse and the Zend PHP plugin for it (I'd love to use Komodo but can't afford to pay for a copy of it) I have some thoughts on what I saw and the people I talked to.\n<\/p>\n\n<p>\nBy far, the most informative session for me was the one Ilia Alshanetsky gave on migrating to PHP 5.2 from PHP 4 or PHP 5.0\/5.1.  That will be used as ammunition in a discussion with my boss about what version of PHP to use when we start doing are site reorganization for the forum sites.  I also enjoyed some cool chats with John Coggeshall about Zend Framework and his ZFApp tool which he has asked me to help him do some work on (once he gets a repository for it created).  He was gracious enough to let me take a look at it before he gave his talk today and it's a very interesting tool.  I look forward to getting a chance to analyze his code and figure out how the heck he did it all. ;)\n<\/p>\n\n<p>\nI also got to meet some people that I had been following online but never gotten to meet before:  Cal, John, Sebastian Bergman (we had an interesting little chat about efforts to integrate Selenium with PHPUnit3 and a tool under development called SmartFrog), Paul M. Jones (of Solar and Savant fame). The big upshoot to this conference was that I got a chance to give a talk that was well received, so I'm definitely going to submit this same proposal to other PHP conferences since the talk should have a decent shelf-life.  Anyhow, that's it for me about php|works.\n<\/p>\n",
        "date": "2006-09-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works Day 3 (Falling asleep at home edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/15\/live-from-phpworks-day-3-falling-asleep-at-home-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in John Coggeshall's talk about the Zend Framework and ZFApp.  Last night I had a good talk with him about this stuff as he enjoyed my talk and thought I should take a preview look at the code.  Very much like Rails in that he's providing a way to autogenerate the directory structure for a Zend Framework application and provide some cool support modules for it as well.\n<\/p>\n\n<p>\nI missed the first two sessions this morning because I was with my wife checking out a daycare centre where we're going to be putting our youngest child, but I did make it here in time.  But the one session I really wanted to catch was this one so I could hear John's thoughts about the Framework (you can almost hear the capital F when he says it ;) ) and ZFApp.\n<\/p>\n",
        "date": "2006-09-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works Day 3 (Almost there edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/15\/live-from-phpworks-day-3-almost-there-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nDay 2 is over and I had a good time.  Lots of great feedback from people who saw my talk, which again is good for the ego and will definitely encourage me to push this talk to other conferences and even come up with some more talks.\n<\/p>\n\n<p>\nAfter the Flash talking to PHP session I went to a talk by Lukas Smith on creating portable database code.  I had been thinking about a lot of these things for my supersecret rallyhat.com project, so it's nice to get a complimentary viewpoint on it.  Again, I wish I had thought of this stuff when working on the <a href=\"http:\/\/www.sexsearch.com\">dating site<\/a> stuff instead of the horrible mishmash we ended up creating.  Learn from your mistakes is the key.\n<\/p>\n\n<p>\nOh yeah, I also got a mention over at the Zend Developer Zone in Cal Evan's round-up about <a href=\"http:\/\/devzone.zend.com\/node\/view\/id\/916\">day 2 at php|works.<\/a> After my interview yesterday he told me that the interview should be available in about a month as he's still processing the interviews he did at OSCON.\n<\/p>\n",
        "date": "2006-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works Day 2 (sitting in the lobby edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/14\/live-from-phpworks-day-2-sitting-in-the-lobby-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nPhew!  My talk is over and I think it went really well.  I was *so* nervous for the first 5 minutes or so but cruised along nicely.  I even finished with 5 minutes to spare.  I want to thank all the people who came up to me after the talk and told me how they liked it and that I did a good job.  Nothing like a little ego boost to make you come through nicely after a stressful time.\n<\/p>\n\n<p>\nI'm currently in Chrsitan Wenz's talk on using Flash with PHP.  At work, we're creating a flash movie for use on our web sites that interacts with a module I've created to parse the XML stream that Sportsticker sends out.  I think I will send a link to this presentation to our flash guy (who I think could use some tips on interacting with a PHP script via Flash) so he can get a better understanding of what we need to do.\n<\/p>\n",
        "date": "2006-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works Day 2 (decompressing edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/14\/live-from-phpworks-day-2-decompressing-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in the keynote on day 2 where Joe Stagner from Microsoft is talking about how to make PHP play nicely with Microsoft's various tools, ranging from IIS to how to talk to Excell.  I don't have any sites that run on IIS but I can imagine that a lot of people are doing  so.\n<\/p>\n\n<p>\nSo, while he's talking I'm going over my slides for my presentation.  I'd be lieing if I said I wasn't nervous, but I should be okay once I get going.\n<\/p>\n",
        "date": "2006-09-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works Day 2 (Keynote edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/14\/live-from-phpworks-day-2-keynote-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI just wrapped up an interview with Cal Evans over at the Zend Developer Zone where we talked about myself and some of the work I've been doing.  Of interest to him was finding out how things go with our planned implementation of mcluster to work with our network of vBulletin sites.\n<\/p>\n\n<p>\nCal and I share the same humble beginnings in computers:  we both used to have Commodore VIC 20's!  Wow, that really brings back a lot of memories on my first adventures in programming.  Teaching myself BASIC, typing in programs from Compute magazine.  Ah, the good old days.\n<\/p>\n",
        "date": "2006-09-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works - Interview with Cal Evans",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/13\/live-from-phpworks-interview-with-cal-evans\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nSo much for liveblogging.  Honestly, I found that having my laptop with me was a huge distraction so I simply took it upstairs to my hotel room and left it there.  That way I was able to concentrate on the talks.\n<\/p>\n\n<p>\nSo, after my interview with Cal Evans I went to a talk on \"The Truth Behind XSS\" by security expert Chris Shiflett.  Honestly, the talk was way too short:  it could've easily been two hours of talking by Chris.  He knows his stuff and gets his point across in a very low-key way.  I've been really thinking about the implications of XSS and CSRF (cross site request forgeries) when it comes to all the forum sites.  I wonder how good a job vBulletin is doing of it.\n<\/p>\n\n<p>\nNext was a talk by Ilia Alshanetsky (I met him at least year's show and he autographed a copy of his book that I owned) on migrating to PHP 5.2 from either PHP 4 or PHP 5.1.  I need to get those slides, print them out, put them on my bosses desk and say \"this is proof of why we need to move to 5.2 when we upgrade and redesign the forums.\"  It's really that simple, and he dispelled a lot of myths about what sort of things will break when you move from PHP 4 to PHP 5.\n<\/p>\n\n<p>\nI then went to Joshua Eichhorn's talk on \"Javascript Sweet and Light\", but I was too busy tinkering with my slides to pay full attention.  He did do a good job of showing just how easy it is to use the Prototype javascript library for most of your AJAX needs.  For some reason, I've turned to using YUI for my Ajax stuff.  I seem to be able to understand it better.\n<\/p>\n\n<p>\nFinally, I went to another talk by Chris Shiflett on \"Agile PHP Testing\" but he had modified it and included some great tips on doing security testing for your application as well.  Again, I'm starting to have some thoughts about how we need to implement some testing of our code at work beyond the \"please do a quick run-through of the site\" variety.  I'm hoping that I won't get a lot of push back on it, because I'm itching to also slap some of the tools onto vBulletin that Rasmus talked about during his keynote.\n<\/p>\n\n<p>Anyhow, I'm off to do a last run through of my slides and get some sleep so I'm not dog-tired when I give my talk.\n<\/p>\n",
        "date": "2006-09-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works (laying in bed edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/13\/live-from-phpworks-laying-in-bed-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm sitting in the conference room at php|works listening to the Father of PHP Rasmus Lerdorf give his always-interesting talk on creating rich web apps.  But he lead things off with a talk about how the web is broken, and how IE has been the tool used to break it.\n<\/p>\n\n<p>\nI've become a believer in how important web security is, so I'm glad to see senior figures in the PHP community talking about how important security is.  Now that my project for rallyhat.com is in the planning stages, I've been thinking a lot about security because I will be accepting a lot of user input.\n<\/p>\n\n<p>\nMore updates to follow as the conference goes on.\n<\/p>\n",
        "date": "2006-09-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Live From php|works (Keynote edition)",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/13\/live-from-phpworks-keynote-edition\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI just finished my slides and while they will be available on the website for the conference, I'll be making them available on my blog via this post.  If you're going to be at the conference, feel free to download them and follow along.\n<\/p>\n\n<p>\n<a href=\"https:\/\/www.littlehart.net\/php_works_06.pdf\">Slides from my presentation<\/a>\n<\/p>\n",
        "date": "2006-09-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Slides For My php|works Presentation \"What Can PHP Learn From Ruby On Rails?\"",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/12\/slides-for-my-phpworks-presentation-what-can-php-learn-from-ruby-on-rails\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAh, only one more day of work (today) then I'm off to <a href=\"http:\/\/www.phparch.com\/works\">php|works<\/a> for three days, and hopefully not embarassing myself during my talk \"What Can PHP Learn From Rails\".  I hope to run into some people I met before and make some new friends.  It's weird going to a conference where you really don't know anyone and no co-workers are coming with you.  Luckily I'm not shy, so I'm sure I'll make some friends while I'm there.\n<\/p>\n\n<p>\nI spent some time yesterday adding some code to the stats reporting system I created for <a href=\"http:\/\/www.verticalscope.com\">work<\/a> to display an animated graphic (stolen from <a href=\"http:\/\/ajaxpatterns.org\">AjaxPatterns<\/a>, a site I find myself going to more and more as I expand my l33t skillz to include practical Ajax stuff).  Using the Yahoo YUI, here's all the javascript code I'm using to make it happen:\n\n~~~\n<script type=\"text\/javascript\">\n\n    \/\/ Object that handles response from XmlHttpRequest\n    var responseObj = {\n        success: function (o) {\n            YAHOO.util.Dom.setStyle(\"progress\", \"visibility\", \"hidden\");\n            YAHOO.util.Dom.setStyle(\"hiddenDIV\", \"visibility\", \"visible\");\n            response = o.responseText;\n            YAHOO.util.Dom.get (\"hiddenDIV\").innerHTML = response;\n        },\n        \n        failure: function (o) {\n            alert (\"ERROR -- Could not get data for your report!\");\n        }\n    }\n    \n    \/\/ process request to get page views information\n        \n    function getpageviews(field, start_date, finish_date) {\n        YAHOO.util.Dom.setStyle(\"hiddenDIV\", \"visibility\", \"hidden\");\n        YAHOO.util.Dom.setStyle(\"progress\", \"visibility\", \"visible\");\n        YAHOO.util.Connect.asyncRequest('GET', \"\/verticalscope_stats\/reports\/getpageviews\/\" + field + \"\/\" + start_date + \"\/\" + finish_date, responseObj);\n    }\n    \n    YAHOO.util.Dom.setStyle('progress\", \"visibility\", \"visible\");\n    getpageviews(\"page_views\", \"< ?php echo $start_date ?>\", \"< ?php echo $finish_date ?>\");\n    \n<\/script>\n\n~~~\n\n<\/p>\n\n<p>\nThis example is from a report that scrapes Google Analytics and then presents the data.  I wish I could say I was smart enough to figure out the Google Analytics stuff on my own, but I wasn't.  It's a made-for-CakePHP solution and you can find it <a href=\"http:\/\/www.thinkingphp.org\/2006\/06\/19\/google-analytics-php-api-cakephp-model\">here at ThinkingPHP<\/a>.  Man, I love it when people smarter than me have figured stuff out. ;)<\/p>\n",
        "date": "2006-09-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Run-up To php|works and some AJAX fun",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/12\/run-up-to-phpworks-and-some-ajax-fun\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIt's been a very long two weeks for your humble correspondant.  My evenings have been taken up working on a consulting job (that is down to the clean-up of functionality stage and final testing) and with my daughter's last few baseball games and practices before the final tournament this coming Saturday.\n<\/p>\n\n<p>\nI'm also getting ready for my presentation next week at <a href=\"http:\/\/www.phparch.com\/works\">php|works<\/a>.  I've been working on the slides on the train and hope that the presentation is well-received.  Anyhow, that's all for now.  I'll post some stuff on Tuesday.\n<\/p>\n",
        "date": "2006-09-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "TGIF",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/08\/tgif\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Another lively round-up of things I'm thinking about<\/p>\n\n<ul>\n<li>ugh, this consulting gig I'm doing is cutting into my prep-time for doing slides for my presentation on the 14th<\/li>\n<li>making more plans for my supersecret project<\/li>\n<li>what happened to the unit tests I wrote for my Zend Framework AudioScrobbler plugin?  Gotta dig through the subversion logs<\/li>\n<li>Comet (streaming requests from server to browser and back for things like web-based chat like Meebo) looks very interesting...and may have some applications for my supersecret project<\/li>\n<li>SportsTicker just blasts too much info at you in their streams.  I could work full-time just parsing all the data out<\/li>\n<li>Ruthless refactoring always shows you that what you thought you knew when you started on a piece of code is always vastly different from what you actually knew when you finished it<\/li>\n<\/ul>\n",
        "date": "2006-09-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Chris Is Thinking About",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/05\/what-chris-is-thinking-about\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nI'm on the CakePHP mailing list, and recently someone sent an email asking what product to people recommend to obsfucate their code.  The poster in question is going to be distributing their application and I guess he doesn't want them to be able to figure out how the application works or even look at the source code.\n<\/p>\n\n<p>\nI replied asking why he was trying to protect his source code, and another developer jumped in calling my logic \"flawed\" and going into a fairly long rant about the evils of not protecting your intellectual property and support issues from people who've modified what you've worked on and expect you to fix it for them and a few other things I won't go into here.\n<\/p>\n\n<p>\nPersonally, I don't think it's worth worrying about that stuff for more than about 1\/10th of a second.  If I build something and sell it to people, well, I've got licensing arrangements that prevent you from distributing my code without my permission.  I did this with a parser I wrote for Canada Post's E-parcel system many years ago.  Did the company in question copy the code and distribute it?  I have no idea, but I'm not wasting any time worrying about it.\n<\/p>\n\n<p>\nI feel that if you're obsfucating the code and then selling it to people, you're saying that you don't trust your own customers.  That's a very dangerous business practice.  People reverse engineer how things work all the time without access to sources, so there are bound to be people smarter than me who figure out how my stuff works without asking me for the source.  I'd prefer to trust my customers and continue to produce high-quality code.  It's not the code that's worth the salary I'm being paid by my current employer,  it's my knowledge on how to create the code.\n<\/p>\n\n<p>\nAs for the support issues, well, I guess people aren't as straightforward as I would be:  if you've modified the code without me knowing about it, you're on your own.  But I suspect my attitude is very different from most other developers.\n<\/p>\n\n<p>\nObfuscate your code if you must, but you should be aware what other people will think of you for doing that.  Trust is a big issue, and once you lose the trust of your customers, well, you should start thinking about an exit plan.\n<\/p>\n",
        "date": "2006-09-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Should You Protect Your Code?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/09\/03\/should-you-protect-your-code\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>No real focus to this post today, just 2 things to talk about.<\/p>\n\n<p>\nFirst, I got an email from the fine folx at <a href=\"http:\/\/framework.zend.com\">the Zend Framework team<\/a> informing me that the proposal <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> and I had done to add a component to the core of the framework to handle talking to <a href=\"http:\/\/last.fm\">Last.FM's<\/a> web services has been moved out of the proposal stage and into the incubator, which is amazing news.  This means that once Derek and I finish all the unit tests we can move the component to the core of the framework.  We've done all the hard work, and just have to make sure nothing is broken thanks to our unit tests.\n<\/p>\n\n<p>Secondly, I was listening to the <a href=\"http:\/\/podcast.phparch.com\">Pro-PHP podcast<\/a> and they mentioned briefly a talk about 6 things that Theo S. didn't like about PHP.  One of the more interesting ones was the idea that the PHP has the worst build system out there.  So that got me to thinking.\n<\/p>\n\n<p>\nI've always wondered why some elements were build as part of the core of the language and why some were extensions.  From a build perspective, might it not be easier to make EVERYTHING an extension beyond just some core functionality.  That way you would install the base of PHP and then all the extensions you wanted to customize your install.\n<\/p>\n\n<p>\nSean Coates had commented that at some point, the whole build process for PHP was going  to have to be carefully examined.  Maybe it would be a good idea to think about a system similar to the one I've talked about.  Trim the core PHP install down to a bare minimum (no DB, no XML, etc) and then make all that stuff installable as extensions.  Not that I have any idea on how to make that happen, but it's an interesting idea for the core PHP team.<\/p>\n",
        "date": "2006-08-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Random Thoughts",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/29\/random-thoughts\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>For the stats system I built at work, there is a component that tracks clicks (meaning we track IP addresses who have visited the site) and track \"raw clicks\" and \"unique clicks\".  I was trying to think of the easiest way to do it, and a co-worker (who has a ton more experience with <a href=\"http:\/\/www.vbulletin.com\">vBulletin<\/a> than myself) suggested I do it as a plugin.\n<br \/><br \/>\nNow, I'm pretty sure I'm not giving anything away by showing you guys the plugin.  After all, it only works with vBulletin and you need the other half (the puller) to make use of the data.  So, here's a nice, open source contribution to the world:\n<br \/><br \/>\n<a href=\"https:\/\/www.littlehart.net\/product-vs-clicktracking.xml\">Clicktracking plugin<\/a>\n<br \/><br \/>\nIt's pretty straightforward, and the only trick was finding some code that works well with people hiding behind proxies and other places.  That I borrowed from a posting about how &lt;a href=\"http:\/\/www.oscommerce.com>osCommerce<\/a> does it.<\/p>\n",
        "date": "2006-08-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Plugins for vBulletin",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/25\/plugins-for-vbulletin\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Here's a short list of some of the things I've been thinking about<\/p>\n\n<ul>\n<li>Adding in code to the stats system at work to collect raw and unique IP addresses.  The twist?  I'm creating it as a plugin for vBulletin<\/li>\n<li>Doing some rework on my <a href=\"http:\/\/hades.phparch.com\/ceres\/public\/page\/index.php\/works::schedule::synopses::what_can_php_learn_from_rails\">session at php|works<\/a> by reorganizing the content of the talk.  I've listened to a few podcasts lately that have given me some more insight into making this a cool talk<\/li>\n<li>I have a domain name -- rallyhat.com -- that I'm trying to figure out what to do with<\/li>\n<li>I highly recommend that you go and read Scott Johnson's excellent <a href=\"http:\/\/www.fuzzyblog.com\">Fuzzyblog<\/a> and listen to his podcasts as well.  Along with listening to <a href=\"http:\/\/podcast.phparch.com\">php|architect's Pro PHP Podcast<\/a>\n<\/li><\/ul>\n\n<p>See y'all on Friday.<\/p>\n",
        "date": "2006-08-22T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Quick Hits",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/22\/quick-hits-2\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIt's always nice to beat a deadline at work, and I beat one by 2 hours for getting the alpha version of my <a href=http:\/\/www.pa-sportsticker.com\/en\/index.html>Sportsticker<\/a> XML stream parser done.  Looking back, I wasted a lot of time on a complicated procedure for parsing the stream when I should've kept it simple.  Luckily, I set it aside for a few hours on Wednesday and then spent Thursday looking for a simpler way to do it.  I found another example on <a href=\"http:\/\/www.devshed.com\/c\/a\/PHP\/Socket-Programming-With-PHP\/\">creating socket servers over at DevShed<\/a> and that did the trick.  Here's the quick algorithm for what I did.\n<\/p>\n\n<p>\n<ul>\n<li>Read in the stream one line at a time<\/li>\n<li>If the current line is the start of a properly-formed XML block then grab what we've buffered and pass it to SimpleXML, then clear the buffer and start processing the string<\/li>\n<li>If it's not the start of a properly-formed XML block then keep adding the data to the buffer<\/li>\n<\/ul>\n<\/p>\n\n<p>Once I've got the XML, I parse through it and check the attributes to see if I've got the data I'm actually looking for, which is baseball boxscores from the AL and the NL.  I'll post the code early next week as I can't access if from home, cleaned up and free of any info that would compromise the company.  I take the info from the XML document (again, I can't say enough about how easy SimpleXML makes these things) and store them in a database. <\/p>\n\n<p>The second part of the system are two scripts that spit out XML info based on the stuff I've stored in the database, and another developer at work is creating a Flash component that will read in that XML and display the info on our forum sites.  Should be very slick stuff.<\/p>\n",
        "date": "2006-08-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Socket Servers Redux",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/18\/socket-servers-redux\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nIn the absence of anything really pressing to talk about, I thought I'd share two tidbits I found via my feed reader.\n<\/p>\n\n<p>\nJ. Scott Johnson had a great post at his blog about <a href=\"http:\/\/fuzzyblog.com\/archives\/2006\/08\/12\/sql_calc_found_rows-and-faster-count-alternatives\/\">SQL_CALC_FOUND_ROWS and Faster Count(*) Alternatives<\/a>.  If you've ever had to write some code that loops through a database searching for counts that match specific where clauses, then go and read this posting.  It just makes so much sense and I had always suspected there was a better way to do the old \"query once to get the data you want and then query again to get the count that matches that data\" trick.  I must get my SQL skills boosted up one of these days.\n<\/p>\n\n<p>The second posting is from Josh Susser where he talks about <a href=http:\/\/blog.hasmanythrough.com\/articles\/2006\/08\/13\/how-dynamic-finders-work>how ActiveRecord's dynamic finders work<\/a>.  For those not wiling to go through the archives, ActiveRecord is an Object Relational Mapping wrapper for database connections that makes using databases in your Rails code insanely easy.  <a href=\"http:\/\/www.cakephp.org>CakePHP<\/a> has it's own ORM stuff and I've been thinking about trying to find a way to expand the findByFoo to be able to handle findByFooAndBar, which it currently does not support.\n<\/p>\n\n<p>I know this is a posting for hardcore programmer geeks, but even if you're mildly interested I suggest you check both those posts out.<\/p>\n",
        "date": "2006-08-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Database Metaprogramming",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/14\/database-metaprogramming\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Got @TheBallPark back up and running (and managed to save all the old posts too).  Phew.  Too tired to blog, I'll post something tomorrow...<\/p>\n",
        "date": "2006-08-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "All Quiet...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/12\/all-quiet\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, I'm aware that my other blog is broken.  Trying to resolve an issue with an upgrade gone horribly wrong. :)<\/p>\n",
        "date": "2006-08-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "@TheBallPark is broken",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/10\/theballpark-is-broken\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A lot of programmers who work with PHP don't even know that you can create shell scripts that run in PHP.  I've used them to pull data from remote servers as part of a work project and are also doing fun things with creating a PHP daemon that runs in the background listening to TCP\/IP requests on a specifc port.<\/p>\n\n<p>Why? I'm writing code that will have to parse the output of a Java client that connects to the <a href=http:\/\/www.pa-sportsticker.com\/en\/index.html>SportsTicker<\/a> service.  We have plans to create a Flash applet that goes on our forum sites that will present the SportsTicker info in various formats.  SportsTicker spits out XML (which PHP 5 is very good at managing) so my listener simply buffers all the data that comes in and then spits out the XML data to a file that another script will most likely read and modify the info.  I know that Flash can apparantly read in XML data, but who knows if the guy who will be building the Flash component actually knows how to do it.<\/p>\n\n<p>Here's a sample of the code I've been working on (not the final version obviously) based on a cool tutorial on the Zend site called <a href=http:\/\/www.zend.com\/pecl\/tutorials\/sockets\/php>Writing Socket Servers in PHP<\/a>.<\/p>\n\n<pre><code><br \/>#!\/usr\/bin\/php\n&lt;?php\n\n\/**\n * PHP script that acts as a listener for the output from the Java Sportsticker Client\n *\n * @author Chris Hartjes\n *\/\n\nset_time_limit(0);\n\n$address = '127.0.0.1';\n$port = 9600;\n$max_clients = 10;\n$clients = Array();\n$read = Array();\n$buffer = \"\";\n$sock = socket_create(AF_INET, SOCK_STREAM, 0);\nsocket_bind($sock, $address, $port) or die('Could not bind to address');\nsocket_listen($sock);\n\nwhile (TRUE) {\n    $read[0] = $sock;\n\n    for ($i = 0; $i&lt; $max_clients; $i++) {\n        if (isset($client[$i]['sock']) &amp;&amp; $client[$i]['sock'] != NULL) {\n            $read[$i + 1] = $client[$i]['sock'];\n        }\n    }\n\n    $ready = socket_select($read, $write = NULL, $except = NULL, NULL);\n\n    if (in_array($sock, $read)) {\n\n        for ($i = 0; $i &lt; $max_clients; $i++) {\n\n            if (!isset($client[$i]['sock'])) {\n                $client[$i]['sock'] = socket_accept($sock);\n                break;\n            } else if ($i == $max_clients - 1) {\n                print \"Too many clients\";\n            }\n        }\n\n        if (--$ready &lt;= 0) {\n            continue;\n        }\n    }\n\n    for ($i = 0; $i &lt; $max_clients; $i++) {\n\n        if (isset($client[$i]['sock']) &amp;&amp; in_array($client[$i]['sock'], $read)) {\n            $input = socket_read($client[$i]['sock'], 1024);\n\n            if ($input == NULL) {\n                unset($client[$i]);\n            }\n\n            $input = trim($input);\n\n            \/\/ Now, we add info to the buffer\n            $buffer .= $input;\n\n            \/\/ Write the data to a file if we have a closing XML tag\n            if (stristr($buffer, '&lt;\/xml&gt;')) {\n                echo $buffer;\n                $buffer = \"\";\n            }\n\n        } else {\n            if (isset($client[$i]['sock'])) {\n                socket_close($client[$i]['sock']);\n                unset($client[$i]);\n            }\n        }\n    }\n}\n\nsocket_close($sock);\n?&gt;\n\n<\/code><\/pre>\n\n<p>In just about 80 lines you have a working server that listens for requests on a specific port and spits out the data when it thinks you've reached the end.  Once I get a better handle on the actual info coming from SportsTicker (the server that is supposed to run the Java client is having some Java configuration issues that one of our admins is fixing as I type this) then I'm sure I'll put in some error handling and other exceptions.<\/p>\n\n<p>I'm not entirely happy with the for loop being used to go through all the connections so perhaps I'll spend some time trying to fix it.  If it turns out that I never have more than one connection at a time then I can probably elminate that loop totally, creating some tighter code.  It's never too early to refactor stuff. :)<\/p>\n",
        "date": "2006-08-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Socket Servers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/09\/socket-servers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>...and I'm busy working on my talk \"What can PHP Learn From Ruby On Rails\".  I've been spending time on my train ride home putting together my magazine article for php|architect magazine on the same issue.  I've got 1500 of the requisite 4000 words done...and are trying to make sure that I'm staying on topic and creating something I will be happy about.<\/p>\n\n<p>Anyhow, I've got another week or so to get the article done.  It's always an interesting process for me when writing an important document (whether it's a magazine article or a technical specification) as I often turn in stuff that I'm not happy with when I hand it in, but are happy with it when I actually read it after publication.  Too critical?  Maybe.<\/p>\n",
        "date": "2006-08-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "php|works Isn't That Far Off...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/08\/02\/phpworks-isnt-that-far-off\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Success!  I did manage to get the sortable grid working for the stats reporting system.  It was my first real example of creating an AJAX component for a work project.  It took me quite a while to figure some of the trickier things out.  I did use <a href=http:\/\/www.crackajax.net\/grid.php>this excellent tutorial<\/a> to show me a basic example of implementing a sortable grid backed by data pulled from a SQL database.  After that, I found Graham Bird's excellent tutorial on <a href=http:\/\/grahambird.co.uk\/cake\/tutorials\/ajax.php>creating an AJAX sortable task list with Cake<\/a><\/p>\n\n<p>Now, what I did was a little more complicated because not only did I have to sort by the header columns in the table, I also had date ranges selected via a form <em>and<\/em> categories selectable via a form to take into consideration.<\/p>\n\n<p>I can say this:  the AJAX helper functions for CakePHP are just fantastic and spared me from having to figure out all this stuff on my own.  I did have to create some stuff by hand in order to build the following little snipper:<\/p>\n\n<p>body onLoad = \"new Ajax.Updater('hiddenDIV','\/verticalscope_stats\/reports\/getusers\/site_name\/99', {asynchronous:true, evalScripts:true, requestHeaders:['X-Update', 'hiddenDIV']}) }, false);\"<\/p>\n\n<p>Yikes.  Not the kind of stuff I want to be building by hand if I can avoid it.  Now, the Cake AJAX helpers use scriptaculous and prototype as the base for their actions.  I found a post in the wiki for Cake complaining about the large size of those two helper libraries, and they do have a point.<\/p>\n\n<p>The post also turned me on to <a href=\"http:\/\/jquery.com\">jQuery<\/a> , which describes itself as \"... a Javascript library that takes this motto to heart: Writing Javascript code should be fun. jQuery acheives this goal by taking common, repetitive, tasks, stripping out all the unnecessary markup, and leaving them short, smart and understandable.\"<\/p>\n\n<p>I have an idea to try and see if I can take a stab at creating my own Cake helper that uses jQuery instead of the awesome-but-quite-large scriptaculous+prototype combo for the AJAX stuff.<\/p>\n\n<p>I plan on creating a tutorial on the stuff I did (specifically for implementing a sortable grid in CakePHP) in the next week or so.  It would be nice to share all the stuff I did. :)<\/p>\n",
        "date": "2006-07-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Cake and AJAX",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/28\/cake-and-ajax\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Just a selection of quick hits due to me being behind on this post<\/p>\n\n<ul>\n<li>got the go-ahead on my article for php|architect magazine<\/li>\n<li>struggling with implementing a sortable grid using CakePHP and AJAX (but I'll tame that sucker yet)<\/li>\n<li>wondering if there is a better way to teach the girls I'm coaching to hit a baseball, or is it simply all about hand-eye coordination<\/li>\n<li>complaining that I can't watch my beloved Blue Jays because they are on a west coast road-trip<\/li>\n<li>trying to figure out what to do with my new domain rallyhat.com<\/li>.\n<\/ul>\n",
        "date": "2006-07-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Quick Hits",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/26\/quick-hits\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Alpha version of my stats app using <a href=http:\/\/framework.zend.com>Zend Framework<\/a> was looked at...and deemed as having \"implemented basic functionality\".  Well, not exactly resounding praise but it is an alpha.  Next up?  Pulling in data by date range and then making the data sortable by column, which leads me to my next thought.<\/p>\n\n<p><a href=http:\/\/derekmartin.ca>Derek<\/a> emailed me yesterday saying that his work was considering using a framework called Xoop.  I took a like at it, and didn't like what I saw.  Neither did Derek.  So he asked me what framework they should consider using.  I know he was expecting me to say Zend Framework...but I told him to use <a href=http:\/\/cakephp.org>CakePHP<\/a>.<\/p>\n\n<p>Why?  Well, for starters, ZF isn't even remotely close to being stable.  While I am perfectly willing to use unstable versions of software (I'm an attention-deficit-disorder programmer that always likes the new and shiny) if it's going to be live on the internet where people other than your company are going to use it, well, stick with stable because it's less likely to blow up.<\/p>\n\n<p>I like ZF, but it is still missing some features I'd like to see.  I was trying to do some Javascript stuff with ZF and it was just pissing me off.  Now, I'm a Javascript n00b and what I wanted to do was pretty simple...but the view helpers in ZF wouldn't let me do what I wanted.  Now, who's fault is that?  Probably mine since I'm such a beginner at it.  But providing helpers so that people like me can quickly hack together Javascript stuff is invaluable.<\/p>\n\n<p>CakePHP, on the other hand, has implemented all the Rails goodness that I like:  ActiveRecord database module, javascript helpers, and gobs of documentation on how to do things.  If the point is rapid application development, well, having someone else do all the hard work for me and I just use their labours to build my neato-keen site is just fine by me.<\/p>\n\n<p>Part of me is saying \"wait until ZF is more stable for doing work-related projects and instead use CakePHP\".  And to be honest, I can't really argue with that.  I'm early enough in the project that I could switch (it would require some grunt work but at a manageable level) and it wouldn't be that painfull.  I think that ZF is going to be rock-solid when it hits 1.0 (and I'm not going to ignore it while it works towards that) but at this time I think CakePHP simply fits my needs better.<\/p>\n\n<p>On a totally unrelated note, <a href=http:\/\/www.phparch.com>php|architect<\/a> has asked me to write another magazine article for them.  The topic?  \"What Can PHP Learn From Ruby on Rails?\".  Heh.  I imagine that it will be in the issue of the magazine that comes out in September during php|works.  I find it funny that not only am I getting paid to give a talk on that topic, I'm also getting paid to actually <em>write<\/em> the talk.  Doing the article will basically entail putting my presentation down onto paper, since I already have an outline (and slides) finished.<\/p>\n\n<p>So, I'm off to read the CakePHP documentation and start moving stuff over.<\/p>\n",
        "date": "2006-07-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I Think I Might Be Hungry For Cake...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/21\/i-think-i-might-be-hungry-for-cake\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm sitting here watching the Blue Jays game with my wife and a commerical for \"Ant Bully\" (a new animated movie this is, oddly enough, about ants) comes on.<\/p>\n\n<p>My wife: \"Haven't there been enough ant movies lately?\"\nMe: \"Why are you such a hater?\"<\/p>\n\n<p>Ah, wedded bliss.<\/p>\n",
        "date": "2006-07-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Friday Night With The Wife",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/21\/friday-night-with-the-wife\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I am delivering an \"alpha\" version of a project for work, a centralized stats reporting system for the various (I believe we are almost up to 40 of them now) forum sites my employer owns.<\/p>\n\n<p>Having built a few sites with Rails, I found it very easy to build something using the Model-View-Controller pattern.  Although the framework isn't at a 1.0 stable release, the components I am using are stable enough for production use.  There is a component that is in the \"incubator\" (which is considered unstable and under development) that I would like to use as a helper for the views (it generates URL's based on the controller and action) but I'm trying to avoid the realy unstable code.<\/p>\n\n<p>When I do the database stuff, that is when I really miss Rail's ActiveRecord database implementation.  The funny thing is that I stumbled across a posting on the <a href=http:\/\/phplens.com\/phpeverywhere>PHP Everywhere blog<\/a> (a great web site by a PHP developer who knows what he's doing) where he talked about how he quickly hacked together an ActiveRecord implementation for ADODb (his own DB abstraction layer) based on an early Zend_Db_Model component.  That component isn't in the current code base, which is very weird.<\/p>\n\n<p>I'm wondering if we'll see that any time soon?  Maybe I'll switch to using ADODb version for the stats reporting system when I get to phase 3 of the project (which is adding pretty graphs to the reports).<\/p>\n",
        "date": "2006-07-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Working With The Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/18\/working-with-the-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm sure my more diligent readers have noticed a lack of posting for two weeks.  I'm back from a vacation with the family in St. Louis (visiting my brother-in-law).  I had a great time, despite the insanely-long 15-hour drive from Canada to St. Louis across the midwest.  I can't imagine doing that trip all the time like some long-haul truckers do.<\/p>\n\n<p>So anyway, I'm taking some time next week to tweak the outline for my upcoming talk (it's only two months away) at php|works to figure  out where (and more important what they will be) to put the coding examples designed to illustrate ideas from Rails and how they could apply to PHP.<\/p>\n\n<p>My buddy <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> is enthused about his new job.  I winced a bit when I saw him burning some bridges at his old work with his comments, but given the way he had been treated since I left the company I'm not surprised by it.  Welcome back to the world of actually creating things, Derek. :)<\/p>\n\n<p>I've been working on a stats reporting system at work with the Zend Framework and it's been going well.  I'm right on schedule and expect to deliver a beta version for testing and comments by Wednesday of next week.  I found that doing all the unit tests have also revealed some errors I wouldn't have thought to look for.<\/p>\n\n<p>I'm also spending some time to day taking another stab at using Eclipse as my development environment.  Despite the lack of a working SFTP plugin, I can see how the benefits outweigh the annoyance of not being able to copy the files to the server.<\/p>\n\n<p>Besides, I've started using my iBook as my development environment more and more.  Which is a good practice to get into, as I learn techniques for generating data sets for testing and making sure my code is portable across environments.<\/p>\n",
        "date": "2006-07-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Back At The Keys",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/13\/back-at-the-keys\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As you can see from the graphic in the upper-right-hand corner of my blog, the php|works conference isn't that far off.  I've been working on the outline for my talk \"What Can PHP Learn From Rails?\" and have settled upon the basics for it.<\/p>\n\n<p>But it begs a bigger question:  is it possible to take what is really great about Rails (and by definition that means some great features of Ruby) and make it work in PHP?  When going to my friend <a href=\"http:\/\/derekmartin.ca\">Derek's<\/a> goodbye party (he's switching jobs to work for a company next door to his old one) I was talking to my old co-workers about my talk.  And they raised a good question: what are PHP's strengths.<\/p>\n\n<p>I opened my mouth to say something and then closed it.  Maybe it was the beer that made me pause.  I'll be honest:  I really like Ruby and there are some really neat things being done.<\/p>\n\n<p>The biggest problem with being able to duplicate a lot of what Rails is doing is, well, PHP isn't Ruby.  Ruby's method of treating everything like an object is something that PHP just can't do.  ActiveRecord in Ruby works so well because Ruby can examine it's own properties (I believe that is called reflection), and ActiveRecord takes full advantage of that.  One of the thrusts of my talk is that developers who are creating tools for other developers to use (I'm not talking about creating applications) have to use the strengths of PHP instead of railing (heh) against PHP's perceived limitations.<\/p>\n\n<p>I've probably posted things like this before, but ActiveRecord is able to do things like this:<\/p>\n\n<pre><code><br \/>person = new FamilyMember\ndata = person.find_by_last_name_and_sex('Hartjes', 'female')\n\n<\/code><\/pre>\n\n<p>Without me doing <em>anything<\/em>, ActiveRecord knows to translate this into \"SELECT * FROM familymembers WHERE last_name = 'Hartjes' AND sex = 'female'<\/p>\n\n<p>Can you do that in PHP? I do know that <a href=http:\/\/www.cakephp.org>CakePHP<\/a> (which has been getting lots of favourable reviews) has their own ActiveRecord implementation.  Can it do the above?  Not quite yet.  It does handle something like this: (taken from the CakePHP website):<\/p>\n\n<pre><code><br \/>$this-&gt;Post-&gt;findByTitle('My First Blog Post');\n$this-&gt;Author-&gt;findByLastName('Rogers');\n$this-&gt;Property-&gt;findAllByState('AZ');\n$this-&gt;Specimen-&gt;findAllByKingdom('Animalia');\n\n<\/code><\/pre>\n\n<p>I can see how this behaviour would be easier to implement in PHP 5, and I will have to take a look at CakePHP to see how they do it in PHP 4.  With a little bit of effort I'm sure you can add multiple terms to a PHP ActiveRecord implementation to mimic how ActiveRecord works in Ruby.<\/p>\n\n<p>We, as PHP developers, should hesitate to take good ideas from other programming languages and see if there is a way to make an implementation that is just as easy to use as the original.  Object Relational Mapping works not just with ActiveRecord in Ruby, but with other items in Ruby as well.  I saw a slide show of David Heinemeier Hansson's presentation he gave at a Ruby conference in Japan.  He showed an item called ActiveResource that acts just like ActiveRecord but will work on all sorts of things.<\/p>\n\n<p>Where are the people who are creating things like that in PHP 5?  Maybe people are doing that work, but they aren't as eager to share that info with the rest of the world as DHH (and the rest of the Rails crowd in general).  Maybe this is what happens when the core group of people working on a language gets to the point where one person can't drive the language my the sheer will of their ego.  This isn't a bad thing, by any means.  It shows that PHP has gotten a huge level of acceptance and that there are now many people capable of contributing to it.<\/p>\n\n<p>Anyway, I should save some of this for my presentation instead of sharing it on the blog. :)<\/p>\n",
        "date": "2006-07-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Thoughts About My Upcoming Talk",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/07\/01\/thoughts-about-my-upcoming-talk\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I work on code using the Zend Framework for a project at work (a stats reporting system for all our forums) I noticed that a lot of static class methods are being used instead of calling them dynamically:<\/p>\n\n<pre><code><br \/>&lt;?php\n$db = Zend_Db::factory('pdoMysql', $params);\nZend::register('db', $db);\n$view = new Zend_View();\n$view-&gt;setScriptPath('..\/app\/views');\nZend::register('view', $view);\n$controller = Zend_Controller_Front::getInstance();\n?&gt;\n\n<\/code><\/pre>\n\n<p>So i said to myself \"why are we using these static class calls instead of dynamically creating instances of these classes?\".  Little did I know that I had stumbled upon another one of the Great Holy Wars of Programming:  static vs. dynamic.<\/p>\n\n<p>Not only does this war cover static typing vs. dynamic typing for languages (PHP uses dynamic typing), but it also covers the use of static methods vs. instance methods.  50+ messages in the thread later and we're nowhere closer to solving the problem.  All I wanted to know was why we were doing it this way, and as a secondary goal to try understand when we need to do it dynamically (when the state of the object is important) and when to call an object method statically (when the state of the object that the method belongs too is not important).<\/p>\n\n<p>My thanks to Ralph Shindler for pointing me at <a href=\"http:\/\/www.javaworld.com\/javaworld\/javaqa\/2001-11\/03-qa-1121-mrhappy.html\">this little gem<\/a> that tries to explain the static method vs. instance method problem.  This is one area of OOP that I hadn't paid much attention to since I had heard \"static bad, dynamic good\" back in my very early OOP days.  Like everything else, there is a place for static methods and a place for instance methods.<\/p>\n\n<p>One of the common reasons to NOT use static methods was that it can make unit testing difficult.  Of course, you could always wrap the call to the static method so that it comes off as an instance method in your code, but that is a topic that is left to more experienced OOP developers.<\/p>\n\n<p>As an aside, I've pretty much settled on the outline for the talk I'm going to be giving at php|works.  Now I'm working on some code snippets involving the Zend Framework to illustrate just what the heck I'm talking about.<\/p>\n",
        "date": "2006-06-27T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Static Members",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/27\/static-members\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><a target=\"_blank\" href=\"http:\/\/derekmartin.ca\">Derek<\/a> and I got our submisison in today for a component for the <a target=\"_blank\" href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> called (oddly enough) Zend_Service_Audioscrobbler.? As the name states, it's intended to allow people to access Audioscrobbler's REST service.<\/p>\n\n<p>For those who don't know, Last.fm is powered by Audioscrobbler's stuff and the Zend Framework handles REST sevices very easily.? It's in the new proposals section right now.? We're keeping our finger's crossed that it gets accepted.<\/p>\n\n<p>At work I'm working on a prototype for a new stats tracking system.? I want to use the Zend Framework for it...but there is no built-in authorization component.? I know, I know, I should roll my own...but do I really want to?<\/p>\n\n<p>I have two choices:? figure out a way to do simple .htaccess based auth so I can continue to use the Zend Framework (it uses .htaccess already to handle rewrites) or forget about Zend Framework and go with <a target=\"_blank\" href=\"http:\/\/www.cakephp.org\">CakePHP<\/a> instead.? CakePHP is a really good Rails clone...but given I have to write a talk with code examples in PHP I think it's wise I stick with Zend Framework unless I can't make it work.<\/p>\n",
        "date": "2006-06-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend_Service_Audioscrobbler",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/23\/zend_service_audioscrobbler\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was thrilled to find out on Friday that the <a href=\"http:\/\/www.phparch.com\/works\">php|works<\/a> conference had accepted my proposal to give a talk on \"What PHP Can Learn From Rails.\"  The conference runs from September 13th to September 15th of this year in Toronto, at the Holiday Inn Yorkdale (which is across the street from the largest shopping mall in the city).  I attended last year's conference and had a <em>great<\/em> time.  It's a local thing for me as I live just outside Toronto.<\/p>\n\n<p>I'm approaching this topic with some trepidation because, well, the Ruby on Rails framework is a touchy subject amongst some PHP developers.  As anyone who reads this blog knows, I use Rails as well.  I like it.  Is there anything wrong with liking Rails <em>and<\/em> liking PHP?  I don't think so.  Right now, PHP pays the bills but I certainly wouldn't say no if the right opportunity to use Rails and get paid for it comes up.  PHP is a great language for doing rapid application development, and you certainly can't go wrong with Ruby on Rails if it fits what you need.<\/p>\n\n<p>Anyway, the point of all this is not to bash PHP.  It's to show other PHP developers some of the ideas that Rails has embraced and make them part of any PHP developer's toolbox.  More on the presentation as I get it together.  I'll be using coding examples from the <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> in my presentation, which is something that I'm looking forward to as well since I'm on the verge of making my first submission to add a component to the framework, Zend_Service_Audioscrobbler (a joint submission between myself and my buddy Derek).  They got my Contributor License Agreement today, which is needed to allow me to contribute things to the framework.  By signing it I am saying that all the work is original and not copied.<\/p>\n\n<p>The component itself is finished, and I am just making sure all the unit tests are passing before I create the submission in the project's wiki.  The framework uses PHPUnit2, which is very similar to SimpleTest so I don't anticipate a major problem getting unit tests written for all methods.<\/p>\n\n<p>So, if you're going to be going to php|works make sure you stop buy and say hello to me.  I'll be the guy being tossed out of the conference for saying nice things about Rails. :)<\/p>\n",
        "date": "2006-06-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "See You In September",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/20\/see-you-in-september\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the choices that have to be made when you become a parent is the choice to set aside the ridiculous amounts of time you used to spend on your hobbies and instead, you know, be a responsible parent and play with your kids.  My oldest daughter is almost 7 and is starting to enjoy playing board games.  When I was a kid I spent MANY hours playing board games with my sister and my friends.<\/p>\n\n<p>So I decided to do a little digging around on eBay to see if some of my favourite games from my childhood were still around to be purchased.  Lo-and-behold I managed to find a copy of <a href=\"http:\/\/cgi.ebay.ca\/ws\/eBayISAPI.dll?ViewItem&item=8825557742&ssPageName=ADME:B:EOIBSA:CA:11\">Waddington's Game of Dracula<\/a>, a game that I really enjoyed as a kid and think that Lauryn will like it to.<\/p>\n\n<p>It's coming from England, so who knows how long it will be.  I'm looking forward to it.<\/p>\n",
        "date": "2006-06-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "A Hidden Joy Of Parenting",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/16\/a-hidden-joy-of-parenting\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I first ran across <a href=\"http:\/\/philip.greenspun.com&\/\">Philip Greenspun<\/a> when I found out that AOL had it's own web server (AOLServer) that ran on TCL.  Talk about  different.  He is also a great writer and I came across a new book he is writing (and the chapters are appearing online) called <a title=\"SQL for Web Nerds\" href=\"http:\/\/phillip.greenspun.com\/sql\/index.html\">SQL for Web Nerds<\/a><\/p>\n\n<p>If you work with anything but the most trivial SQL code I suggest you check this manuscript-in-progress for tips on how to make the most of your SQL.<\/p>\n\n<p>On the open source front, I'm diving back into <a title=\"Rephlux\" href=\"http:\/\/rephlux.sourceforge.net\">Rephlux<\/a> and have to map how all the CVS stuff works so I can add <a title=\"Subversion\" href=\"http:\/\/subversion.tigris.org\">Subversion<\/a> support to it.  Work also continues on the <a title=\"AudioScrobbler\" href=\"http:\/\/www.audioscrobbler.net\">AudioScrobbler<\/a> module for the <a title=\"Zend Framework\" href=\"http:\/\/framework.zend.com\">Zend Framework.<\/a><\/p>\n\n<p style=\"text-align: right; font-size: 8px\">Blogged with <a target=\"_new\" title=\"Flock\" href=\"http:\/\/www.flock.com\">Flock<\/a><\/p>\n",
        "date": "2006-06-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "SQL For Web Nerds",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/13\/sql-for-web-nerds\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>\nAs I start working on PHP 5 projects in my own time (and pushing for the upgrade of our sites to PHP 5 at work) I'm gaining more exposure to the newer features of PHP 5.  The big one for me is the try-catch-throw exception handling abilities.  When I think of <a href=\"http:\/\/www.sexsearch.com\">my old job<\/a> and the problems we faced with exception handling it makes me wish that we could've written it in PHP 5.\n<\/p>\n\n<p>\nAnyhow I've been working with my friend <a href=\"http:\/\/derekmartin.ca\">Derek Martin<\/a> on a component for the <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> to provide support for using <a href=\"http:\/\/last.fm\">Last.fm<\/a> via <a href=\"http:\/\/www.audioscrobbler.net\">Audioscrobller's<\/a> REST web services.\n<\/p>\n\n<p>\nSince the ZF is PHP 5 only it was time to break out the try-catch-throw.  Check out how simple this can be:\n<\/p>\n\n<div><ol><li><div>&#160;<\/div><\/li><li><div>protected function _getInfoByUser&#40;$service&#41;<\/div><\/li><li><div>&#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; $service = &#40;string&#41; $service;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; <\/div><\/li><li><div>&#160; &#160; &#160; &#160; try &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; $response = $this-&amp;gt;_rest-&amp;gt;restGet&#40;\"\/1.0\/user\/{$this-&amp;gt;user}\/{$service}\"&#41;;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; <\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; if &#40;$response-&amp;gt;isSuccessful&#40;&#41;&#41; &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; $profile_info = simplexml_load_string&#40;$response-&amp;gt;getBody&#40;&#41;&#41;;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; return $profile_info;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125; else &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; <\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; if &#40;$response-&amp;gt;getBody&#40;&#41; == \"No such user\"&#41; &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw new Zend_Service_Exception&#40;'Could not find the user ' . $this-&amp;gt;user&#41;;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125; else &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw new Zend_Service_Exception&#40;'The REST service ' . $service . ' returned the following status code: ' . $response-&amp;gt;getStatus&#40;&#41;&#41;;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; <\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#125;<\/div><\/li><li><div>&#160;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#125; catch &#40;Zend_Service_Exception $e&#41; &#123;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; throw &#40;$e&#41;;<\/div><\/li><li><div>&#160; &#160; &#160; &#160; &#125;<\/div><\/li><li><div>&#160;<\/div><\/li><li><div>&#125;<\/div><\/li><li><div>&#160;<\/div><\/li><\/ol><\/div>\n\n<p>\nSo, if there are any errors generated I \"throw\" an exception that the framework can handle.  I then \"catch\" that exception and \"throw\" it up another level, where the controller (which is calling the above code in question) catches the exception I originally created.  Nice and easy.  Thanks to <a href=\"http:\/\/www.slash7.com\">Amy Hoy<\/a> for giving me a 60 second clinic on try-catch-throw via IM yesterday.\n<\/p>\n\n<p>\nNext week has been decleared \"Proposals Week\" on the Zend Framework mailing list, so Derek and I are trying to get our contribution together so that we can submit it next week.  Last.fm and Audioscrobbler are a neat technology that I use all the time to track my own musical tastes and find things that I like.  Hopefully the other users like it enough that it gets accepted.\n<\/p>\n",
        "date": "2006-06-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why Exception Handling Matters",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/09\/why-exception-handling-matters\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(<a href=\"http:\/\/www.w-uh.com\/articles\/030709-people_over_30.html\">found this article<\/a> via <a href=\"http:\/\/reddit.com\">reddit<\/a>, but even more appropriate because I'm a parent of two small children and never cease to be amazed at the lengths some people go to trying to \"protect\" their kids)<\/p>\n\n<p>People over 30 should be dead<\/p>\n\n<p>Wednesday,  07\/09\/03  04:37 PM<\/p>\n\n<p>According to today's regulators and bureaucrats, those of us who were kids in the 40's, 50's, 60's, or even maybe the early 70's probably shouldn't have survived.<\/p>\n\n<p>Our baby cribs were covered with bright colored lead-based paint.<\/p>\n\n<p>We had no childproof lids on medicine bottles, doors or cabinets, and when we rode our bikes, we had no helmets. (Not to mention the risks we took hitchhiking.)<\/p>\n\n<p>As children, we would ride in cars with no seat belts or air bags.<\/p>\n\n<p>Riding in the back of a pickup truck on a warm day was always a special treat.<\/p>\n\n<p>We drank water from the garden hose and not from a bottle.  Horrors!<\/p>\n\n<p>We ate cupcakes, bread and butter, and drank soda pop with sugar in it, but we were never overweight because we were always outside playing.  We shared one soft drink with four friends, from one bottle, and no one actually died from this.<\/p>\n\n<p>We would spend hours building our go-carts out of scraps and then rode down the hill, only to find out we forgot the brakes.  After running into the bushes a few times, we learned to solve the problem.<\/p>\n\n<p>We would leave home in the morning and play all day, as long as we were back when the street lights came on.  No one was able to reach us all day.  No cell phones.  Unthinkable!<\/p>\n\n<p>We did not have Playstations, Nintendo 64, X-Boxes, no video games at all, no 99 channels on cable, video tape movies, surround sound, personal cell phones, personal computers, or Internet chat rooms.  We had friends!  We went outside and found them.  We played dodge ball, and sometimes, the ball would really hurt.<\/p>\n\n<p>We fell out of trees, got cut and broke bones and teeth, and there were no lawsuits from these accidents.  They were accidents.  No one was to blame but us.  Remember accidents?<\/p>\n\n<p>We had fights and punched each other and got black and blue and learned to get over it.<\/p>\n\n<p>We made up games with sticks and tennis balls and ate worms, and although we were told it would happen, we did not put out very many eyes, nor did the worms live inside us forever.<\/p>\n\n<p>We rode bikes or walked to a friend's home and knocked on the door, or rang the bell or just walked in and talked to them.<\/p>\n\n<p>Little League had tryouts and not everyone made the team.  Those who didn't had to learn to deal with disappointment.<\/p>\n\n<p>Some students weren't as smart as others, so they failed a grade and were held back to repeat the same grade.  Horrors!  Tests were not adjusted for any reason.<\/p>\n\n<p>Our actions were our own.  Consequences were expected.<\/p>\n\n<p>The idea of a parent bailing us out if we broke a law was unheard of.  They actually sided with the law.  Imagine that!<\/p>\n\n<p>This generation has produced some of the best risk-takers and problem solvers and inventors, ever.  The past 50 years have been an explosion of innovation and new ideas.  We had freedom, failure, success and responsibility, and we learned how to deal with it all.  And you're one of them!<\/p>\n\n<p>Congratulations!<\/p>\n\n<p>Please pass this on to others who have had the luck to grow up as kids, before lawyers and government regulated our lives for our own good....<\/p>\n\n<p>Doesn't it kind of make you want to run through the house with scissors?<\/p>\n",
        "date": "2006-06-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "People Over 30 Should Be Dead",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/05\/people-over-30-should-be-dead\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My oldest daughter likes to play rock-paper-scissors with me, but this is a total another level from that.<\/p>\n\n<p><a href=\"http:\/\/www.umop.com\/rps25.htm\">RPS-25<\/a><\/p>\n\n<p>It's rock-paper-scissors with <strong>25<\/strong> different hand-gestures!  I'm not even sure I could do some of them myself.  Thanks to <a>BoingBoing<\/a> for showing me the link via their RSS feed.<\/p>\n",
        "date": "2006-06-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Rock-Paper-Scissors 25",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/06\/01\/rock-paper-scissors-25\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>The past few days I've been working on a couple of different things.<\/p>\n\n<p>1) working on adding in support for Subversion to <a href=\"http:\/\/rephlux.sourceforge.net\">Rephlux<\/a>\n2) added in some new stat reports (all in Ruby too) for the <a href=\"http:\/\/www.ibl.org\">IBL website<\/a>\n3) ran through the tutorial for the <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> and have started making plans for a website using the framework (more details later).<\/p>\n\n<p>The Rephlux stuff is going slow because, well, the CVS stuff is really tangled up and is in the process of being cleaned by the other developer on the project.  He's going to send me some specs on how it's supposed to work and I'll model my patches for Subversion support on that.<\/p>\n\n<p>The new stats are making lots of people happy, which is good.  The site runs pretty snappy considering how much work the database is doing to generate those reports.<\/p>\n\n<p>The Zend Framework looks really good so far, and I shouldn't have any problems using it.  Some stuff is missing but I can build my own for now and replace it as the framework matures.  I'm also going to hold strict to my unit testing practices and create tests for all the models I create.  Gotta eat your own dogfood if you're going to talk about testing.<\/p>\n",
        "date": "2006-05-31T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Odds and Ends",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/31\/odds-and-ends\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>One of the cooler features of <a href=\"http:\/\/www.rubyonrails.com\">Ruby on Rails<\/a> is it's support for a concept that they call database migrations.  In a nutshell you can create Ruby code that will generate tables and insert data into them.  Why is this a good idea?  It's also database agnostic, so it doesn't matter what database server you're running:  your database changes just work.<\/p>\n\n<p>For the <a href=\"http:\/\/www.ibl.org\">baseball league web site<\/a> I'm running <a href=\"http:\/\/www.typosphere.org\">Typo<\/a>, which I've hacked and extended for the things that I need that aren't part of the weblog engine.  It also supports migrations.  Whenever I create a new model (a representation of a table in a database that I need to work with) it also created a migration file.  Which is cool, but not totally necessary for the league site as it's not being deployed in multiple places.<\/p>\n\n<p>Now, I'm also running the trunk version of Typo, meaning I updated it directly from the <a href=\"http:\/\/subversion.tigris.org\">Subversion<\/a> repository it's hosted in.  When I did an upgrade of the site on Friday afternoon, it also grabbed some migrations as well.  Except those migrations conflicted with ones I had already created when I created all sorts of model code.  The result:  a crashing web site.<\/p>\n\n<p>Arrrgh!  I panicked for a minute.  Then I hit Google trying to find a solution.  After about half-an-hour of looking I finally found a solution.  Turns out there is a table in the Rails structure that keeps track of what migration you're currently up to (schema_info for those who want to look into it).  I updated that to point to the migration BEFORE I accidentally started adding in my own.<\/p>\n\n<p>Okay, so I executed a 'rake migrate' command...and still nothing.  Site still complaining that it couldn't find a table...that the migration is supposed to create.  More panicking.  Another deep breath and more searching on Google.  I finally found an example of how to manually run a migration script.  I did that for the first migration and then everything else went okay.  Phew<\/p>\n\n<p>I think so many sites would just crash and die if it wasn't for Google.  I guess it's a vicious circle:  solutions to problems available in Google lead to more and more sites making it through tricky points which leads to more people looking for solutions.<\/p>\n\n<p>So everything is just fine now.  The latest addition to the site is a stats module.  There appear to be some problems in the stats themselves (one series entered twice from the looks of it, which isn't supposed to be possible) but I'll get that sorted out.<\/p>\n",
        "date": "2006-05-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It's Not Just Birds That Migrate",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/28\/its-not-just-birds-that-migrate\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I find more and more these days that the description \"infrastructure programmer\" seems to be more and more applicable to the type of work I do.  My <a href=\"http:\/\/www.verticalscope.com\">current employer<\/a> owns an ever-expanding number of discussion boards (like http:\/\/www.fordforums.com and www.tunerfriends.com).  So, we buy them from people and have to move them over from their current locations to our servers.  99% of the sites are running on <a href=\"http:\/\/www.vbulletin.com\">vBulletin<\/a>, a commerical PHP-based product.<\/p>\n\n<p>But sometimes the sites aren't running vBulletin, so I end up having to use the import tools that vBulletin provides (covering a surprisingly large number of forum software packages).  They do a pretty good job but I invariably end up having to write some custom tool to migrate the non-standard part of the site.  In this case I had to migrate the users's vehicle information (pictures and descriptions) from one site to the other.<\/p>\n\n<p>While working on this tool (making it generic enough to work on the other two sites I need to migrate as well) I realized that I'd been doing infrastructure work all the time and not very much user interface work.  Which is just as well because my CSS and make-things-look-pretty skills need a lot of work.  I am trying but it's gonna be a tough go.<\/p>\n\n<p>\/me hikes up his pants to hide the PHP Plumber butt<\/p>\n",
        "date": "2006-05-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I'm A PHP Plumber",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/26\/im-a-php-plumber\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>(Wow! Two posts in one day!)<\/p>\n\n<p>There is a great blog posting by Jared White where he is talking about <a href=\"http:\/\/www.theideabasket.com\/2006\/05\/17\/winning-the-php-5-framework-wars\/\">Winning The PHP 5 Framework Wars<\/a>.  He brings up some very valid points (mainly that there will be no winner because adoption of PHP 5 has been so slow.  In some of the comments for that post (both on his blog and at php|architect magazine's linking to the article) comes the idea of why does there have to be a war and that there is plenty of room for everyone.  I used to think that way but have come to the conclusion that there can only be ONE dominant framework for a programming language.<\/p>\n\n<p>In theory the idea of \"there is plenty of room for everyone\" sounds nice when it comes to frameworks.  The reality of the situation is that one dominant framework is needed to drive things forward.  The more frameworks there are, the more people are having to \"reinvent the wheel\" in order to make their stuff work.  More cycles wasted redoing work that other people (usually smarter than you, which is a good thing) have already done and made stable and made easy to use.<\/p>\n\n<p>Look at Rails as an example.  Rails is not the only framework that works with Ruby but it is by far the dominant one.  That enables Ruby developers who want to do web work to stop worrying about nuts and bolts and instead start worrying about fine details.  I came to this realization when I started using Rails for some hobby projects.  I still do PHP at the day job and don't intend on stopping.  But there are just too damn many PHP web frameworks out there and it's impossible to pick one.  I'm betting that the Zend Framework becomes the Rails of PHP (meaning the dominant web framework for PHP 5) and the rest of us can get on with applying finishing touches instead of building from scratch.<\/p>\n\n<p>The pragmatic approach to programming extolls the virtue of Don't Repeat Yourself and You Ain't Gonna Need It.  What does this have to do with frameworks?  Unless you have huge amounts of spare time I can't imagine why you need to create Yet Another Framework, unless you are trying to learn how to create one of these things.  I thought about it.  Then I realized how much I enjoy sleeping.  To me, creating your own framework smacks of both DRY and YAGNI.<\/p>\n\n<p>Now, before you think I'm an arrogant person or just deluded, hear me out:  there is nothing wrong with taking something that someone else has created and changing it to suit your needs.  Let's be honest:  the number of projects that are <strong>so<\/strong> different and <strong>so<\/strong> unique that they require a totally written-from-scratch solution are really slim.  It's only developer arrogance (and often developer ignorance) that says you can't take something that someone else has done and make it work for you.<\/p>\n\n<p>As far as I can tell there are three types of frameworks any web-based programming language needs:<\/p>\n\n<p>1) One that a beginner can use to get a site up and running quickly.<\/p>\n\n<p>This is Rails.  A programmer experienced in other languages can get a Rails site up and running pretty quickly.  The <a href=\"http:\/\/www.ibl.org\">IBL website<\/a> took my about a month to do working in my spare time and building off an existing application, a blogging app called <a href=\"http:\/\/www.typosphere.org\">Typo<\/a>.  There is nothing like this for PHP yet.  Yes, Cake and Trax (I think it's called Trax) are very close to this by copying Rails and I think that the Zend Framework is also aiming to be helpfull this way.<\/p>\n\n<p>2) One that an intermediate programmer can use because they understand what the hell they are doing.<\/p>\n\n<p>I would put the Zend Framework in there too, moreso than in the beginner camp.  ZF is for PHP developers who understand the concepts behind building a web application.  They know about MVC, they know how to build applications of moderate complexity.  A good framework of this type gets all the details out of your way so you can just build the damn thing.  You don't have to worry about database abstraction or templating or even program flow.  It gives you the structure you need.  Like little children, programmers need structure as well and a framework forces you to do things a certain way.  I know that Rasmus Lerdorf hates framworks, but most of us non-savant developers desperately need the structure that a framwork gives you in order to save ourselves from debugging and maintenance hell.<\/p>\n\n<p>3) Custom solutions that require a great overall application architectural solution.<\/p>\n\n<p>This is, of course, the place where frameworks fear to tread.  Ookles.  Wikipedia.  Hell, even the dating site I used to work on is in here.  When you get to a certain level of traffic on your site you can no longer use off-the-shelf solutions and you are forced to create completely custom solutions.  No web application scales up to huge levels without undergoing serious changes.  I listened to a great interview with the head of Ookles and everything he talked about is what I encountered while working on the dating site.  Makes me appreciate even more that the dating site worked as well as did during my time there.  Perhaps I'm just too critical.<\/p>\n\n<p>So, if we stray back to the topic of the post I can try and wrap things up.  The upcoming framework war in PHP is also the battle to push PHP 5 to where it needs to be.  The structure that a framework provides will create a group of developers who all speak a common langauge and understand how to accomplish the same thing.  Yes, the rugged independants will scorn frameworks or even show us how to push them to their limits.  But pushing your skills to their limits is the best way I know of to get better.<\/p>\n\n<p>Pay attention to the Zend Framework because it has the type of community around it that is determined to see good ideas pushed forward.  Already the calls for \"when will it be production ready\" are coming on the mailing list.  Me, I wouldn't use it for production stuff yet because there is much that will change.  For small side projects, I heartily endorse it's use if you're doing PHP stuff.<\/p>\n",
        "date": "2006-05-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Upcoming PHP Framework War",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/23\/the-upcoming-php-framework-war\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My 4th gen 20 GB iPod finally gave up the ghost on Thursday.  The first sign?  I kept locking up when I tried to transfer files to it.  So I followed the instructions, removed <a href=\"http:\/\/www.rockbox.org\">Rockbox<\/a> from it and put the original firmware back.  Restored it (according to the Apple instructions again) and everything seemed ok.<\/p>\n\n<p>Put it kept locking up while uploading files from iTune.  Finally, all it would do is boot up and show me the \"folder with an exclamation point\" symbol.  Which means the hard drive is fux0rd.  Since I am smart and bought the extended warranty when I got it on Boxing Day 2004 I took it back to Best Buy.  They confirmed my analysis of a borked hard drive and out it goes for repairs.  <strong>Sniff<\/strong><\/p>\n\n<p>When Best Buy fixed our digital camera they went down to the last day before they would have to give me a new one and called me to tell me to come and get it.  I'm hoping they won't be able to fix the iPod and that they will have to give me a new one...which means a low-end video iPod.<\/p>\n\n<p>Of course, I'm never <strong>that<\/strong> lucky.<\/p>\n",
        "date": "2006-05-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I've Got iPod Withdrawl",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/23\/ive-got-ipod-withdrawl\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Since I apparantly have tons of free time, I'm helping out an open source project called <a href=\"http:\/\/rephlux.sourceforge.net\">Rephlux<\/a>.  It's a continuous integration environment built for PHP.  Basically, you write SimpleTest unit tests and Rephlux checks out the code, runs the tests and creates reports for those tests.  Ideally, you run it on a seperate machine and it has RSS feeds that report on errors that it finds.<\/p>\n\n<p>I'm a big believer in testing your code (always do tests for my new stuff) so this seemed like an interesting project to get involved in.  I've been talking with the creator and have already figured out a few tasks to contribute to the project.  Like <a href=\"https:\/\/www.littlehart.net\/r00bstat\">r00bstat<\/a>, I'll keep you posted.<\/p>\n",
        "date": "2006-05-17T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Non-acid rephlux",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/17\/non-acid-rephlux\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I finally got around to using a gift certificate I'd gotten for my birthday back at the end of March and ordered myself a copy of <a href=\"http:\/\/pragmaticprogrammer.com\/titles\/pad\/index.html\">Practices of an Agile Developer<\/a>.  Now, a lot of what is in there is common sense but my experiences have taught me that the forces of fate will toss common sense to the four winds if it can get it's talons embedded.<\/p>\n\n<p>My eldest daughter (she likes the angel and devil sidebars in the book) asked me why I keep reading all these books.  I tell her it's because I never want to stop learning things, and reading these programming books also helps me to remember best practices for my job.<\/p>\n\n<p>Until you do something a million times, you fall back on old habits.  But after a while the new habits <strong>become<\/strong> the old habits.  Yes, I'm an unfocused slacker at times but I do like to do things the right way (at least the right way as I see it).  Agile development practices seem to be the right way to me, but I sure didn't work in an agile development environment before.  Where I am now, I have a chance to put some of those ideas in play.  That makes me feel a lot better about sitting in a cubicle missing my old work buddies.<\/p>\n\n<p>Pick up a copy of this book and check it out.  There is a lot of really neat information in there that even if you are only able to implement a few of the suggestions you'll be that much further ahead.  If you are going to cherry-pick a few suggestions I highly recommend getting both unit testing and automated integration testing put in place.  Ignore the old-timers and uberslackers who say that testing is lame and a waste of time.  Remind them of that the next time they are fixing a bug in their code that a series of tests would've revealed.<\/p>\n",
        "date": "2006-05-08T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Never Stop Learning",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/08\/never-stop-learning\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Reworking the <a href=\"http:\/\/www.ibl.org\">website for my simulation baseball league<\/a> has brought forth my wanna-do-something side.  The website is looking good, and the next step is to get the theme that I want working properly and implement that stats-on-demand module that I've been promising.<\/p>\n\n<p>However, I've also wanted to do something that I could share with other people.  In this case, I've decided to start an open source project.  My favourite programmer girl <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> recently went through a site meltdown thanks to a scriptac.ulo.us cheatsheet getting <a href=\"http:\/\/digg.com\">dugg<\/a>.  In that article she said that she wished she had a Rails-based weblog tracking application to use.  Some further discussions via IM with Amy convinced me that this is something I could do.<\/p>\n\n<p>At my previous employer I did write a bunch of website-tracking code.  It was not very efficient in it's first incarnation but by the time I got around to getting the okay for a rewrite, they replaced it with something else that they paid a TON of money for.  Ah well.  Being older and wiser (and more experienced with such things) I know how I'd do this using Rails, so we'll see if I can put my money where my mouth is.<\/p>\n\n<p>Anyhow, I've set up a small page for <a href=\"https:\/\/www.littlehart.net\/r00bstat\">r00bstat<\/a> just to get it out there.  I've already been working on the plugin part with some testing coming up in the near future (unit tests to be included!), but the accompanying Rails appication to display the data is the daunting part of the task.  I have a few ideas...and being able to develop on my laptop on the train is good way to try these things out.<\/p>\n\n<p>Thanks to my friend <a href=\"http:\/\/derekmartin.ca\">Derek<\/a> for helping me to come up with a suitable Web 2.0 name for the project. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n",
        "date": "2006-05-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Scratchin' An Itch",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/05\/01\/scratchin-an-itch\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At my <a href=\"http:\/\/www.verticalscope.com\">current job<\/a> we also run a website for information about web hosting called <a href=\"http:\/\/www.tophosts.com\">TopHosts<\/a>.  I did most of the form submission code in the background and integrated <a href=\"http:\/\/htdig.org\">ht:\/\/Dig<\/a> with the articles that are up there.  I was asked to contribute a short article on PHP.  So I quickly whipped up <a href=\"http:\/\/www.tophosts.com\/articles\/002974.html\">this article<\/a>.<\/p>\n\n<p>Just a quick intro for people who don't know much about PHP.  They've asked me to contribute other articles down the road on the topic of PHP, mainly because the editor of the site liked my article in <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> magazine.<\/p>\n",
        "date": "2006-04-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Article over at tophosts.com",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/28\/article-over-at-tophostscom\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>If you program on a Mac, maybe you've used &lt;a href=\"\/\/www.codingmonkeys.de\/subethaedit\/\"\">SubEthaEdit from CodingMonkeys<\/a>.  It's a cool text editing tool that lets you do collaborative editing.  I tried it once with some of my buddies and the three of us we hacked out some code all at the same time.  Really cool stuff.<\/p>\n\n<p>Well, <a href=\"\/\/maczot.com\/\"\">BLOGZOT 2.0 on MacZOT.com<\/a> has decided to offer SubEthaEdit at a reduced cost.  <a href=\"\/\/www.codingmonkeys.de\/blog\/articles\/2006\/04\/25\/maczot-blogzot-subethaedit-bargain-maybe-even-for-free-today\"\">Every person who blogs about it helps drive the price down<\/a>.  This means that MacZOT and TheCodingMonkeys will award $105,000 in Mac software if the price goes all the way down to zero. SubEthaEdit does syntax highlighting for all the major languages, and integrates with an FTP client of your choice to save your work on a remote server.<\/p>\n\n<p>Blog about this and we can get a copy FOR FREE!.  Spread the wurd.<\/p>\n",
        "date": "2006-04-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Help Make SubEthaEdit Free!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/25\/help-make-subethaedit-free\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Recently I have been told \"Chris, you're a great developer but a terrible sysadmin.\"  Considering how often I muck-up the box that hosts my various web sites, there might be some truth to that.  So now I'm trying to be less of a sucky sysadmin and find solutions that both myself (and my poor friend Sean who cleans up my sysadmin messes).<\/p>\n\n<p>When one of my employer's <a href=\"http:\/\/www.autoforums.com\">new sites<\/a> was about to be launched one of the tasks I was given was to come up with an automated deployment system instead of the do-everything-by-hand system that we have in place now.  In-house, there was already a web-based tool that would export stuff from the CVS repository but anything else had to be done by hand.<\/p>\n\n<p>Being a Rails fan, I had known about &lt;a href=\"\/\/manuals.rubyonrails.com\/read\/chapter\/97\"\">Capistrano<\/a> (used to be called Switchtower but they ran into some copyright issues on that name) but was unsure how it would work with a non-Rails app.  I did manage to hack something together but wasn't entirely happy with it.<\/p>\n\n<p>In the end, the project had scaled down quite a bit (only one server instead of the three they had planned for) so the manual system is okay for now.  But I was still frustrated by not having an elegant, CLI solution to deploy the site.  I had toyed around with the idea of writing my own Capistrano clone for PHP (as source material for another I googled around some more today and found that Geoffrey Grosenbach (Rails guy and main force behind the Ruby on Rails podcast) &lt;a href=\"\/\/nubyonrails.com\/articles\/read\/460\"\">had done the same thing, but only better<\/a>.<\/p>\n\n<p>Looking at that blog posting makes me realize that it's possible to use Capistrano to distribute PHP apps.  Wish this had been around at my old gig...<\/p>\n",
        "date": "2006-04-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Deploying Applications",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/25\/deploying-applications\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm a guy who believes in the value of agile software development.  My former employers never seemed to quite grasp the concept fully.  My <a href=\"http:\/\/www.sexsearch.com\">old project<\/a> started off agile, but it became a strictly big-design-up-front-all-decisions-from-the-top when things came to a head.  Now, they've gotten even more process intensive and I don't think I could be really productive in that sort of environment at this point in my career.<\/p>\n\n<p>Anyhow, one of the smart things that we did was create unit tests for just about every single function we had.  We used the <a href=\"http:\/\/www.lastcraft.com\/simple_test.php\">SimpleTest<\/a> unit testing framework.  It works well, can produce output for both web browser and command line stuff.  I'm not sure if they are still using it.<\/p>\n\n<p>As my interest in PHP security has grown, I started reading Chris Shiflett's <a href=\"http:\/\/shiflett.org\">blog<\/a> and he had some great info on <a href=\"http:\/\/brainbulb.com\/agile-php-testing.pdf\">Agile Testing<\/a> with <a href=\"http:\/\/shiflett.org\/code\/test-more.php\">test-more.php<\/a>, a PHP port of a Perl testing package called (oddly enough) Test::More.  It uses something called TAP (Test Anything Protocol).<\/p>\n\n<p>Check out the site, check out the PDF, and you will see how easy it can be to implement testing for your PHP applications.<\/p>\n",
        "date": "2006-04-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Simple Testing with PHP",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/19\/simple-testing-with-php\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My buddy <a href=\"\/\/derekmartin.ca\"\">Derek<\/a> sent me a link to a bunch of pictures he took of <a href=\"\/\/flickr.com\/photos\/derekmartin\/130077899\/in\/set-72057594109348817\/\"\">him building a corner computer desk from an old desk.<\/a>.<\/p>\n",
        "date": "2006-04-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Geeks Can Build More Stuff Than Software",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/18\/geeks-can-build-more-stuff-than-software\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My friend <a href=\"http:\/\/davesbrain.ca\">Dave<\/a> has a new website up.  Go check it out.<\/p>\n\n<div align=\"\"center\"\">\n    <div>\n        <img src=\"\/\/www.davesbrain.ca\/aura\/images\/title.jpg\"\" width=\"\"508\"\" height=\"\"67\"\" alt=\"\"\"\" border=\"\"0\"\">\n                    <p align=\"\"center\"\">\n                <br \/>\n            Your aura colours are overlapped. Your most likely colours are:<\/p>\n                        <p align=\"\"center\"\">Magenta.<br \/>\n            <table width=\"\"350\"\"><tr><td>\n                <img src=\"\/\/www.davesbrain.ca\/aura\/images\/ma_mug.jpg\"\" width=\"\"100\"\" height=\"\"80\"\" alt=\"\"\"\" border=\"\"0\"\" align=\"\"left\"\">\n                \n                Magentas are jesters. They are zany, spontaneous, offbeat, outrageous, physical, innovative, in the here-and-now, inventors, attention-seekers. Sometimes they're loners.               \n            <\/td><\/tr><\/table>\n                            <p align=\"\"center\"\">Violet.<br \/>\n            <table width=\"\"350\"\"><tr><td>\n                <img src=\"\/\/www.davesbrain.ca\/aura\/images\/vi_mug.jpg\"\" width=\"\"100\"\" height=\"\"80\"\" alt=\"\"\"\" border=\"\"0\"\" align=\"\"left\"\">\n                \n                Violet are the visonaries and the leaders of the spectrum. They are spiritual, driven, motivated, dedicated, responsible, charismatic big-picture-types. They can also be curmedgeons.              \n            <\/td><\/tr><\/table>\n                \n            \n            <p>Find out <a href=\"\/\/www.davesbrain.ca\/aura\/\"\">what colour your aura is<\/a>.<\/p>\n        <\/div>\n<\/div>\n",
        "date": "2006-04-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Colour Is Your Aura?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/11\/what-colour-is-your-aura\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I've seen a lot of web-based memes floating around.  My <a href=\"http:\/\/www.lisahartjes.com\">sister<\/a> sends a lot of them to me as well.  So, in that spirit, I present to you my Google Image Meme.<\/p>\n\n<p>For each question, you are supposed to choose one picture from the first page of the search results on Google Image.  So, here we go:<\/p>\n\n<p>1) The city (and state) of the town you grew up in.<\/p>\n\n<p>&lt;img src=\"\/\/www.canadianheritage.org\/images\/regular\/20375.jpg\"\" alt=\"\"\"\" \/><\/p>\n\n<p>2) The town where you currently reside.<\/p>\n\n<p>&lt;img src=\"\/\/www.countryheritagepark.com\/map3sm.gif\"\" alt=\"\"\"\" \/><\/p>\n\n<p>3) Your first and last name<\/p>\n\n<p>&lt;img src=\"\/\/www.graafschapfans.nl\/database\/geenfoto.jpg\"\" alt=\"\"\"\" \/><\/p>\n\n<p>4) Your grandfather's name<\/p>\n\n<p>&lt;img src=\"\/\/www.born-today.com\/Today\/pix\/barth_karl.jpg\"\" alt=\"\"\"\" \/>\n(not really my grandfather <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/> )<\/p>\n\n<p>5) Your favourite food<\/p>\n\n<p>&lt;img src=\"\/\/www.pmachinehowto.com\/howtogallery\/chinese_food_medium.jpg\"\" alt=\"\"\"\" \/><\/p>\n\n<p>6) Your favourite drink<\/p>\n\n<p>&lt;img src=\"\/\/tell.fll.purdue.edu\/JapanProj\/FLClipart\/Nouns\/food&amp;drink\/beer.gif\"\" alt=\"\"\"\" \/><\/p>\n\n<p>7) Your favourite smell<\/p>\n\n<p>&lt;img src=\"\/\/pics.drugstore.com\/prodimg\/10787\/200.jpg\"\" alt=\"\"\"\" \/><\/p>\n",
        "date": "2006-04-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "When Meme's Attack!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/10\/when-memes-attack\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I always like to try new things, so I'm forever destroying my applications trying new things and updating.  Luckily I am smarter with this blog and Serendipity makes it dead simple to upgrade.  Mad props to them.<\/p>\n\n<p>Over at my &lt;a href=\"\/\/www.littlehart.net\/attheballpark\"\">other blog<\/a> I've decided to move it from being served up by the Apache2 + FastCGI combo that is pretty common for <a href=\"http:\/\/www.rubyonrails\">Rails<\/a> applications to being served up by <a href=\"http:\/\/www.lighttpd.net\">LightTPD<\/a>, which is a very lightweight webserver that handles FastCGI much better than Apache2 does.<\/p>\n\n<p>I mean, Apache2 is great webserver for general purpose stuff, but most of it's features are overkill for my powered-by-Rails blog.  So, I dug around on the Rails wiki and got some great documentation.  Here's what you do:<\/p>\n\n<p>1) make sure that you install mod_proxy for Apache 2\n2) create a rule in your httpd.conf file that tells it to pass all requests for your blog to a webserver running on a different port (in this case it's lighttpd)\n3) configure lighttpd to run your Rails blog, with much better control over how many FastCGI processes are running at any one time\n4) test the snot out of it\n5) cry when things don't work and you don't know why\n6) triumph your success on your own blog when you get it to work<\/p>\n\n<p>The truth is that lighttpd + FastCGI will consume less resources than the Apache2 + FastCGI combination.  The server that hosts both these blogs is getting a good workout these days, so the more memory available for things like JBoss, the better.<\/p>\n",
        "date": "2006-04-07T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Blog Maintenance",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/04\/07\/blog-maintenance\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Some of you may know that I used to own a comic book store with my <a href=\"http:\/\/www.lisahartjes.com\">sister<\/a> back in the mid-90's.  I haven't bought many comics since the store closed.  Warren Ellis' \"Desolation Jones\" is just about the only one other than a few graphic novels here and there.<\/p>\n\n<p>These days I work just around the corner from one of the <a href=\"http:\/\/www.silversnail.com\">oldest comic book stores in Toronto<\/a> so I decided to venture over there and see if I could find a copy of a comic that had generated a lot of buzz by being in an issue of Wired magazine.<\/p>\n\n<p>Batman 100 is a 4 book series that takes place in some whacked-out, futuristic police-state America in the year 2039.  Bruce Wayne (who should be something like 140 years old at this point) is back as Batman...and the government has no record of who he is or where they can find him.  There's some weirdness going on with the federal gov't, Commissioner Gordon's grandson is Commissioner now, and Batman is now this aggressive, feral creature who doesn't seem to hesitate to try and kill people who get in his way.  Grim and gritty for sure.<\/p>\n\n<p>They're up to issue 2.  If you're into comics at all I suggest you try and track down some copies.  As is typical of most comics, the first issue is hard to find but issues 2 through 4 should be easy to come by.<\/p>\n",
        "date": "2006-03-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Batman Year 100",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/29\/batman-year-100\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>While upgrading my <a>other blog<\/a> I seem to have broken it.  Ugh.  Hopefully I can get this fixed in short order.<\/p>\n",
        "date": "2006-03-28T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "I Broke It...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/28\/i-broke-it\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My friend <a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> has posted a really good article on her weblog about <a href=\"http:\/\/www.slash7.com\/pages\/vampires\">Help Vampires<\/a>.  Amy writes in a very unique voice (using humour in a forum where people seem adverse to being funny) and this is no exception.<\/p>\n\n<p>Also, if you're into Ruby and Ruby-on-Rails, she is becoming a frequent speaker at conventions.  Maybe she does birthday parties and bar mitzvahs too (just kidding, Amy).<\/p>\n",
        "date": "2006-03-23T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Help Vampires",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/23\/help-vampires\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>With no warning (and little fanfare) I found out that my article entitiled \"Building Scalable PHP Applications\" came out today in the latest issue of <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> magazine.  I have to say it looks pretty good (very little editing on their part, except for the crappy diagrams I made being correctly not included).<\/p>\n\n<p>I expect a flurry of comments that I don't know what the heck I'm talking about...<\/p>\n",
        "date": "2006-03-20T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My PHP Article Is Out!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/20\/my-php-article-is-out\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I very rarely stray into the world of politics on my blog...but this is too good to pass up.  Please read this:<\/p>\n\n<p><a href=\"http:\/\/www.zenarchery.com\/2005\/09\/22\/full-text-of-the-grim-meathook-future-thing\/\">The Grim Meathook Future<\/a>.<\/p>\n\n<p>Thanks to <a href=\"http:\/\/www.warrenellis.com\">Warren Ellis<\/a> (not like he's a close personal friend or anything) for bringing it to my attention via his latest <a href=\"http:\/\/www.comicon.com\/pulse\/\">THE MINISTRY<\/a> column:<\/p>\n\n<blockquote>\nOh ... Spime Future? No, I'm not totally convinced of the Spime Future, or, as it is also sometimes known, The Internet Of Things. The idea is close to that of the noosphere, an invisible world of information flows. A Spime is an object (or blobject, or blogject) that exists as, around and within a constantly-updated, totally-recorded flow of information. In Sterling's words, \"A Spime is an object that ate and internalized the previous industrial order.\"\n\nIn practise, it's probably going to turn into that dumb idea of internet fridges that email shopping lists to the supermarket. If it's anything like my local Tesco online delivery service, the groceries won't turn up for four days and will be missing half the stuff you ordered anyway. Bruce Sterling wrote an excellent book on spimes called SHAPING THINGS, published by MIT Media Lab, which I recommend to you. A lot of people are thinking about this right now, and the conversation will soon start leaking into the wider world. There's also a fair chance that more and more people will be implanting hacked Radio Frequency ID tags and the like into themselves over the next few years. Which leads me to:\n\nThere's a middle distance between the complete collapse of infrastructure and some weird geek dream of electronically knowing where all your stuff is. (I'm cheating: the end result of pure spime theory is electronic omniscience, which is not a useless concept.) Between apocalyptic politics and nerdvana is the human dimension; how this stuff is taken onboard by smart people at street level. You all know Bill Gibson's saw from his cyberpunk novels, that the street finds its own use for things. It still holds. But, right now, I think there's an urgency and a sense of envelope-pushing in exactly what uses are found for these things.\n<\/blockquote>\n",
        "date": "2006-03-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Grim Meathook Future",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/09\/the-grim-meathook-future\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Well...the folks over at Zend have released an incredibly alpha version of their <a href=\"http:\/\/framework.zend.com\">Zend Framework<\/a> for the overanxious developer (such as myself) to check out and see if they can get it working.<\/p>\n\n<p>Well, I grabbed it...and started working on it with my laptop...and I'm disappointed.  Why?  It's not even close to being usable for what most people will use it for, which is database-driven web sites.  Yeah, it's got some really cool web services components that do work, but I want to use it to build the new IBL web site.  The provided documentation is actually incorrect in how you create an instance of any of the database objects, which is disappointing as well.<\/p>\n\n<p>I'm happy it's out, for sure.  And I await the next version.  Hopefully with working database components.<\/p>\n",
        "date": "2006-03-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend Framework Preview",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/06\/zend-framework-preview\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I sent in my article to <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> on Monday.  I'm feeling a little anxious about what they may (or may not) ask me to do to the article to get it ready for publication.  Hopefully nothing major (although I can say without hesitation that my diagram drawing skills suck).<\/p>\n\n<p>The February issue of the magazine came out yesterday.  I find that in every issue there is always one article that I read that makes me go \"woah!  Now <strong>that<\/strong> is a cool idea.\"  This month <a href=\"http:\/\/blogs.phparch.com\/mt\/\">Marco Tabini<\/a>, the publisher of php|architect, has a very cool article on using PHP 5's Standard PHP Library to create what is called a poka-yoke, a Japanese term that means \"fail-safe mechanism\".<\/p>\n\n<p>It shows how to create a input-filtering object that prevents a developer from mishandling the data that is in the superglobals most commonly used for user input ($_GET, $_POST and $_REQUEST).  You can also do it with any of the other superglobals.  Personally, I can see using it for $_SESSION right away.<\/p>\n\n<p>Anyhow, great article Marco!  And I hope he likes my article on \"Scaling PHP Applications\".<\/p>\n",
        "date": "2006-03-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Poka-Yoke!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/03\/01\/poka-yoke\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Almost after I wrote my last entry I remembered a site that takes huge amounts of traffic that was built with Rails.<\/p>\n\n<p><a href=\"http:\/\/www.penny-arcade.com\">The Penny Arcade online comic<\/a>.<\/p>\n",
        "date": "2006-02-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Ruby On Rails At The High-Volume Level",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/02\/24\/ruby-on-rails-at-the-high-volume-level\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As I've been pecking away at my article for php|architect (up to 1700 words now) I realized I need to add a section about user tracking for your application.  Here at work I've been introduced to a powerfull tool called <a href=\"http:\/\/www.cacti.net\">Cacti<\/a>, which uses something called <a href=\"http:\/\/people.ee.ethz.ch\/~oetiker\/webtools\/rrdtool\/\">RRDTool<\/a> in order to generate nice graphs of, well, just about anything.<\/p>\n\n<p>In my case I've been learning how to use it in order to do some user tracking not only for our <a href=\"http:\/\/www.tunerfriends.com\">TunerFriends<\/a> site, but for a <a href=\"http:\/\/www.autoforums.com\">new site that is launching tomorrow<\/a>.<\/p>\n\n<p>If there is one complaint I have of Cacti is that, well, the user-supplied documentation sucks.  For real answers you have to go to their forums.  I got a lot of help, more than you would think a n00b would get from  your typical open source crowd.  It's pretty good though...lets us graph all sorts of things.  Basically, I can write PHP scripts that hit our databases, grabbing a bunch of numbers and then tell Cacti to create graphs based on that output.  Pretty simple stuff and it saves me the toruble of writing my own (which I despise, having done it many times).<\/p>\n",
        "date": "2006-02-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Graphing Results",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/02\/24\/graphing-results\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes.  I admit it.  I like PHP.<\/p>\n\n<p>I've been working exclusively in PHP for so long writing PHP code has become second nature to me.  When I use other languages I ask myself how I would do this in PHP, then look for the equivalent in whatever language I'm using, whether it be Perl or Ruby or whatever.<\/p>\n\n<p>Now, as Ruby-On-Rails has picked up speed, my old, comfortable friend PHP has been getting beaten up all over the place.  It's too simple!  It's messy!  It has no structure!  It lacks consistency!<\/p>\n\n<p>Now, I like Rails too...but Rails isn't perfect either.  I'm still waiting to hear of a Rails-based application that takes the type of traffic that some PHP-based applications do...like <a href=\"http:\/\/www.sexsearch.com\">my former employers<\/a>.  Harry Fueks has posted an <a href=\"http:\/\/www.sitepoint.com\/blogs\/2006\/02\/21\/a-pro-php-rant\/\">excellent rant in support of PHP<\/a> on his blog.<\/p>\n\n<p>Go read it and tell me that PHP isn't the right tool for creating large web sites.<\/p>\n\n<p>Which reminds me...I've finished the rough draft of my article for <a href=\"http:\/\/www.phparch.com\">php|architect<\/a> magazine.  Just under 4100 words, and I have a few diagrams and code examples to put in.  I'm pretty happy with it but I'm sure the editors will have a few things they will want me to fix.  No problem.  If there's one thing I've learned, it's how to handle people critiquing my work and suggesting changes.  Can't be a developer without that skill, believe me.<\/p>\n",
        "date": "2006-02-21T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Gimme That PHP Lovin'",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/02\/21\/gimme-that-php-lovin\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm going to be writing an feature-length article for <a href=\"http:\/\/www.phparch.com\">php|architect Magazine<\/a> on the topic of scaling PHP applications.  It will be more targeted at the beginner\/intermediate PHP developer, as I'ms ure the folks at places like Yahoo would have something to say about how to scale PHP stuff. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n\n<p>I'm looking forward to the experience.  I've got about 2-1\/2 weeks to crank out the full article.  I have an outline, so at least I know what I'm going to be writing about.  I haven't had to crank anything this big out since, well, high school.  In college I didn't have to take any essay-writing courses. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n\n<p>I'll talk to them about whether or not snippets of the article can appear online in the future.<\/p>\n",
        "date": "2006-02-09T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Coming To A Magazine Near You...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/02\/09\/coming-to-a-magazine-near-you\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Every programmer worth his code has a liking for sci-fi.  Anyone who says otherwise is not a true coder. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n\n<p>This is courtesy of my <a href=\"http:\/\/www.lisahartjes.com\">sister<\/a><\/p>\n\n<table border='0' cellpadding='5' cellspacing='0' width='600'><tr><td><img src='http:\/\/images.quizfarm.com\/1131947385MillenniumFalcon.JPG'><\/td><td> You scored as <b>Millennium Falcon (from Star Wars)<\/b>. The world around you is at war.  Fortunately you know how to handle that with the greatest of ease.  You are one of the best at what you do and no one needs to tell you that.  Now if only the droids could be quiet for five seconds.\n<p>\nComing on December 1, 2005:<br \/>\nYour Ultimate Sci-Fi Profile: which sci-fi crew would you best fit in? The Sequel<br \/><br \/><table border='0' width='300' cellspacing='0' cellpadding='0'><tr><td><p><font face='Arial' size='1'>Millennium Falcon (from Star Wars)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='94' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>94%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Moya (from Farscape)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='75' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>75%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Serenity (from Firefly)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='63' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>63%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>SG-1 (from Stargate)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='63' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>63%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Nebuchadnezzar (from The Matrix)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='63' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>63%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Enterprise D (from Star Trek)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='50' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>50%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Galactica (from Battlestar: Galactica)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='50' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>50%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Bebop (from Cowboy Bebop)<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='50' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>50%<\/font><\/td><\/tr><\/td><\/tr><\/table><br \/><a href='http:\/\/quizfarm.com\/test.php?q_id=102272'>Which sci-fi crew would you best fit in? v1.0<\/a><br \/><font face='Arial' size='1'>created with <a href='http:\/\/quizfarm.com'>QuizFarm.com<\/a><\/font><\/table>\n",
        "date": "2006-01-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Which Sci-Fi Crew Do You Belong Too",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/30\/which-sci-fi-crew-do-you-belong-too\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I found <a href=\"http:\/\/www.hacknot.info\/hacknot\/action\/showEntry?eid=81\">this page<\/a> via Digg.  As much as I hate to admit it, I see a bit of myself in Open Source Oliver, in that I always like to try new technologies and the latest versions of things.  I've gotten better because I realize how much time can be wasted trying to implement something that might not fit.<\/p>\n\n<p>I like to do the research of new stuff to see if it will fit.  And it's almost always an open source tool because my employers didn't want to pay for a commercial one. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/>  I'm sure you've run into pretty much every type of programmer listed there.<\/p>\n",
        "date": "2006-01-26T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "What Type Of Programmer Are You?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/26\/what-type-of-programmer-are-you\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I went out for beers with my former work buddies at our <a href=\"http:\/\/www.martiniboys.com\/pages\/reviews\/rhino.htm\">usual hangout<\/a> and a good time was had by all.  This morning I was talking with <a href=\"http:\/\/www.juliansimpson.com\">Julian<\/a> about all-time best hangovers.  Here are my top 3:<\/p>\n\n<ol>\n<li>23rd birthday where I tried to drink 23 rum-and-cokes (it was 1.08 drink night) and made it to 19<\/li>\n<li>My bachelor party (although all the drinking got done in a ridiculously short period of time)<\/li>\n<li>A company Halloween party where it was packed with webmasters and staff, and it was OPEN BAR.  My friend Kris still talks about that party to this day.<\/li>\n<\/ol>\n",
        "date": "2006-01-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "All-time Best Hangovers",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/25\/all-time-best-hangovers\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My lovely wife can tell you that I am of the optimist persuasion, confident that Fate has dealt me a good hand and that any problems I encounter will always turn out in my favour given enough time.  Here is such an example.<\/p>\n\n<p>Back at the beginning of December, end of November, there was a call put out for papers for the <a href='http:\/\/www.phparch.com\/tek\/'>php|tek<\/a> convention going on in Orlando, FLA in April.  Alas, my submission was not accepted so I won't be going.  Which sucks.<\/p>\n\n<p>However, I did receive an e-mail from them saying (and I'm paraphrasing here) \"\"we got your submission, it didn't fit into what we needed but we think it could make a great article for the magazine.\"  So, they sent me some documents (tips on how to write for them and a template for creating an article) and asked me to do up a 5 or 6 paragraph summary of a potential article for them.  If they like it, then I'll go full bore and write the article for them.<\/p>\n\n<p>Way cool, I tell you.<\/p>\n\n<p>Chalk up another victory for Fate.<\/p>\n",
        "date": "2006-01-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Why Being An Optimist Sometimes Pays Off",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/18\/why-being-an-optimist-sometimes-pays-off\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I got an e-mail the other day from the folks at <a href=\"http:\/\/www.zend.com\">Zend<\/a> informing me that they were going to be certifying their 1000th person very shortly, and as a thank you for being one of the first 1000 Zend Certified Engineers we were given a special grahpic to put on our web site instead of the usual graphic that they recommended using to signify you are Zend Certified.  So I uploaded it to this site and you can see it in the \"About The Blogger\" section.<\/p>\n\n<p>I know some people have poo-pooed the certification, but it got me my current job and recommend that anyone who wants to be taken seriously as a PHP developer write the test.  Don't forget to study though. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n",
        "date": "2006-01-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "The Few, The Proud, The 1000",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/11\/the-few-the-proud-the-1000\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>In an attempt to round out my otherwise top-notch coding skills I've decided it wouldn't hurt to learn some more advanced HTML and CSS stuff so I can make my pages look purty and stop using tables for layout (yes &lt;a href=\"\/\/slash7.com\"\">Amy<\/a>, I remember what you said).<\/p>\n\n<p>So, I picked up <a href=\"http:\/\/www.amazon.com\/gp\/product\/059610197X\/qid=1136905648\/sr=8-1\/ref=pd_bbs_1\/104-6744991-8319958?n=507846&amp;s=books&amp;v=glance\">Head First HTML with CSS and XML<\/a>, which came highly recommended on some blog somewhere.  I guess I should've bookmarked the post or something.  Anyway, it's humourous yet startlingly thorough guide on HTML and CSS and should be enough to get this codemonkey doing fancy, schmancy layouts on both of his blogs.<\/p>\n",
        "date": "2006-01-10T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Not Just A Codemonkey Any More",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/10\/not-just-a-codemonkey-any-more\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, it's finally up and running.  I settled on <a href=\"http:\/\/www.drupal.org\">Drupal<\/a> as the CMS of choice and spent some time hacking together a module to automatically display the latest standings.  It took me about an hour from starting the tutorial to getting it to work.  Right now it's done both as a \"block\" that's on the side of the page and as a standalone page with expanded information about the standings. Go take a look:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/www-dev.ibl.org\">main page<\/a><\/li>\n<li><a href=\"http:\/\/www-dev.ibl.org\/standings\">expanded standings page<\/a><\/li>\n<\/ul>\n\n<p>Obviously, there is more work to be done but we've started.<\/p>\n",
        "date": "2006-01-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "New IBL web site  now in development",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/06\/new-ibl-web-site-now-in-development\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I hope everyone out there had a fun holiday season.  I enjoyed all the time I spent with my kids (and fought against the inevitable accusations of favouritism leveled against me by the 6 year-old with respect to the 10 month-old).  In the meantime, I decided on my programming-related goals for 2006:<\/p>\n\n<p>1) get the new <a href=\"http:\/\/www.ibl.org\">IBL site<\/a> up and running before the season starts\n2) learn how to use the new Zend Framework when it appears\n3) clean-up the scripts I use to generate data for the IBL card set, possibly re-writing them in Ruby\n4) keep up the standard of writing easy-to-maintain, secure-when-I-can-do-it code in all my projects<\/p>\n\n<p>4 pretty lofty, yet achievable goals.  Feel free to share your goals with me...<\/p>\n",
        "date": "2006-01-03T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Happy New Year!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2006\/01\/03\/happy-new-year\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yes, gentle reader, we're finally getting underway with the long-awaited <a href=\"http:\/\/www.ibl.org\">IBL website<\/a>.  I had bandied about ideas for what technology to use.  I'm still not 100% sure, but it's obviously going to be some sort of content management system.  I'm not going to write my own because, well, I really don't have the time for such things these days.<\/p>\n\n<p><a href=\"http:\/\/drupal.org\">Drupal<\/a> is one that I am seriously taking a look at because, well, it fits the idea of a \"content management system\" and is written in PHP.  And it's open source, which means I can go in there and hackyhackyhacky anything that we need fixed.<\/p>\n\n<p>Also, by moving to a CMS-type site, it frees up our poor webguru to simple publish entries via an already-created interface AND work on the look and feel of the site.  It will also let our registrar and our statitician to post stuff up to the site as well in an easier format.  We have some existing online-scripts that I will have to figure out how to hook the output from them into Drupal.  But I'm a ZCE, so I should know how to do it. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n",
        "date": "2005-12-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Work Commences on New IBL Site",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/12\/30\/work-commences-on-new-ibl-site\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Okay, be honest now.  As a programmer, you get very attached to the work you've done.  It's not always good, but it's YOURS damnit!  But do you ever really consider that somebody somewhere else will have to deal with the code you've written at a later date?  I've come to realization that actually thinking about the next sucker who has to work on your code is something that aids in becoming a Great Developer(tm).  And isn't that what I want to be?<\/p>\n\n<p>Like most programmers, I've inherited a bunch of code from someone else.  It uses a software package I don't particularly like, and it's been written in a style that I can only call inconsistent.  However, it's mine now and I have to deal with.  For your own sanity, please consider using a tool like <a href=\"http:\/\/pear.php.net\/package\/PHP_Beautifier\/\">PHP Beautifier<\/a> to take that old crufty code and at least make it look manageable.  It's only drawback is that it's written in PHP5, so you will need to get that crufy code somewhere where PHP5 is installled.<\/p>\n\n<p>In this case, it's perfect for me because I have PHP5 installed on my laptop.  I took the offending file, ran it through the beautifier (command line version please) and in 3 seconds, I had a nicely formatted piece of code that I could actually figure out where things were!  Praise to Murphy!<\/p>\n\n<p>In all seriousness, using a consistent format for your code means that somebody other than you will be able to take what you've done and use it.  Anyone who thinks that \"job security\" is more important than readble code should be fired on the spot.  You're not helping yourself when you create a system only you can understand.<\/p>\n\n<p>Okay, now to go and figure out why an image upload is working right...at least I KNOW which nested conditional it's in now. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/><\/p>\n",
        "date": "2005-12-19T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Beauty Is In The Eye Of The Coder",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/12\/19\/beauty-is-in-the-eye-of-the-coder\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Went and picked up my framed certificate from Zend that they mailed to me from the post office today.  Nice to finally have it...I'll put it up on the wall of my basement office once it gets built in the summer.<\/p>\n\n<p>However, what bugs me is how long it took to get here.  The postage on it says it was mailed on November 21st.  From California.  That's almost 3 weeks to get here.  That's ridiculous.<\/p>\n",
        "date": "2005-12-15T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend Certificate *Finally* Arrives",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/12\/15\/zend-certificate-finally-arrives\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I was surprised at how quickly I got into the groove working at <a href=\"http:\/\/www.verticalscope.com\">the new job<\/a>, considering I knew <strong>nothing<\/strong> about what I would be doing when I got there.<\/p>\n\n<p>For now, I'm working on making changes to <a href=\"http:\/\/www.tunerfriends.com\">TunerFriends<\/a>, which is an online community for people who like to trick out and modify their cars.  It uses <a href=\"http:\/\/www.vbulletin.com\">vBulletin<\/a> top power it.  I can't say I'm a big fan because the existing site, well, the code's a mess.  Lots of cut-and-pasting going on and it needs a really good cleanup and refactor.<\/p>\n\n<p>I'm trying to push for a chance to do it, but who knows.  When the IT department is just part of the company, not the main focus of the company, I can see how requests like that might be ignored unless I can guarantee it takes less time.  I need to find a code profiler and unleash it on the code base to see what can be done...<\/p>\n",
        "date": "2005-12-13T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Back in the groove",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/12\/13\/back-in-the-groove\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I managed to catch the <a href=\"http:\/\/www.phparch.com\/webcasts\/recordings\/andi.php\">Zend Framework Webcast<\/a> that the folks from phpArchitect managed to pull together.  No new news, really.  Although it was nice to see some coding examples where they showed how to use ActiveRecord (familiar with this from my work with <a href=\"http:\/\/www.rubyonrails.com\">Ruby on Rails<\/a>), ActiveMail and ActiveSearch, which is a port of the Lucene search engine thingy that was originally available in Java.<\/p>\n\n<p>Some other interesting things to come out of it:<\/p>\n\n<ul>\n<li>They are already building sites for clients with it<\/li>\n<li>There will be unit tests (using PHPUnit2) and use cases<\/li>\n<li>They are expecting to release code to the public in Q1 of next year<\/li>\n<li>They are emphasizing that it's not really MVC, it's more model and controller<\/li>\n<\/ul>\n\n<p>I recommend you check out the link above and view the webcast at your leisure.  If you plan on doing ANY sort of work with PHP 5 in the future then you will want to consider how this framework can get help you.<\/p>\n",
        "date": "2005-12-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Zend Framework Webcast",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/12\/05\/zend-framework-webcast\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I'm an avid reader of <a href=\"http:\/\/www.phparch.com\">php|architect magazine<\/a> and had a blast when attending their conference back in September here in Toronto.  Well, they've announced their next conference, <a href=\"http:\/\/www.phparch.com\/tek\/index.php\">php|tek<\/a>, which will be taking place in Orlando at the end of April.<\/p>\n\n<p>I decided to submit a proposal to give a talk called \"Scaling for n00bs\", where I would give a lecture about some of the things I learned while working on the adult dating site I helped build.  I should find out at the end of December if they like the proposal or not.<\/p>\n",
        "date": "2005-11-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "php|tek conference",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/29\/phptek-conference\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Recently I switched my other <a href=\"https:\/\/www.littlehart.net\/attheballpark\">blog<\/a> over to using <a href=\"http:\/\/typo.leetsoft.com\">the Typo blog engine<\/a> instead of the one I had written myself.  It's written in <a href=\"http:\/\/www.rubyonrails.com\">Rails<\/a> as well, so I will be able to go into it and hack around.  First task is to add some captcha stuff to the comments.<\/p>\n\n<p>I don't get tons of traffic to that blog, but I hate comment spammers with a passion.  With captcha in there, it will get rid of all but the most hardcore of spammers.  Which is good enough for me.<\/p>\n",
        "date": "2005-11-29T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Sometimes It's Better To Give In",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/29\/sometimes-its-better-to-give-in\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I recently got my copy of the <a href=\"http:\/\/www.pragmaticprogrammer.com\/titles\/ruby\/index.html\">Pick Axe<\/a>, properly known \"Progamming Ruby, 2nd Edition\" and have been reading through it on the train ride to and from work mostly.  One of the more interesting chapters is called \"Duck Typing\".  It was referred to this because Ruby (and PHP to some extent) just \"knows\" what the variable or object is that you are using.  To paraphrase the book: \"If it walks like a duck, and quacks like a duck, it is a duck.\"  This means that Ruby will let you do all sorts of things to an object or variable, and will let you know if what you're trying to do just won't work because of the type of thing it is.<\/p>\n\n<p>Ruby and PHP share the same dynamic typing mechanism for variables.  For those who don't know what that means (or perhaps a reminder for some), it means that in order to use a variable or object you don't have to declare what type of thing it is in advance.  This is in stark contrast to how C, C++ and Java work.  That gives Ruby and PHP a lot of flexability when it comes time to refactor things.<\/p>\n\n<p>Ruby and PHP will throw exceptions (or generate errors) if you try to use an object (in this case I mean either a real object or a variable) in a way that you just aren't allowed to.  This means throwing errors if you try to add two strings together in PHP, or if you try to treat a string as an object and use a method that doesn't exist in Ruby.<\/p>\n\n<p>They even go on to explain an example where duck typing saved them.  A site for a client provided a CSV download that contained information about people participating in a contest.  Things worked well for a while, then the download started timing out.  When they looked at the code, it became obvious that the overhead involved in the algorithm they chose to build the CSV file has getting to be too high.  So, they changed ONE line in the code in question to build the CSV file (I'm serious, it was one line) and POOF, the problem went away.<\/p>\n\n<p>That is the power of dynamic typing.  Since the variable receiving the information didn't care what the source was (thanks to duck typing), it was trivial to change how to get it.  Because the variable they were using to collect the information didn't care if you changed it from a string to an array, it was trivial to change.<\/p>\n\n<p>Besides, it's such a cool name for a programming philosophy.  Duck typing. Quack.<\/p>\n",
        "date": "2005-11-18T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "If It Walks Like A Duck...",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/18\/if-it-walks-like-a-duck\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Today has been a bittersweet day.  I handed in my resignation at my current employer and are moving on to work at &lt;a href=\"\/\/www.verticalscope.com\"\">VerticalScope<\/a>.  I've been working in the same place for almost 4 years, which is a <strong>long<\/strong> time for working in the internet biz.<\/p>\n\n<p>Things have started to feel stale here, and I started hearing the little voice in my head telling me that it was time to move on.  I've really enjoyed my time there, having had a hand in hiring pretty much all the guys I've worked closely with all this time.  It's nice to be starting some new stuff, but it's sad that I won't be doing it in the place where I am now.<\/p>\n",
        "date": "2005-11-16T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Movin' On",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/16\/movin-on\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Things have been slow...baby has been very fussy at night so I'm lacking the energy to post lately.  However, I have been thinking about my latest programming challenge.  At work, it's unit tests.  Which I'm a fan of because it lets me prove that the stuff I just wrote isn't horribly broken.<\/p>\n\n<p>I am also roughing out the specs for stat tracking for my &lt;a href=\"\/\/www.littlehart.net\/attheballpark\"\">other site<\/a>, using some interesting techniques:  post via javascript on a remote site, and then passing a bunch of information to a PHP script that does all the parsing of the important data.<\/p>\n\n<p>I'm also toying with releasing the code for my blogging engine that I wrote in Rails to the outside world.  I have to work at making it a little more generic before I can do that.  I'll keep you posted...<\/p>\n",
        "date": "2005-11-11T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Been Quiet",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/11\/been-quiet\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>After thinking about just what the heck I'd be using sessions for on the <a href=\"https:\/\/www.littlehart.net\/attheballpark\">other site<\/a>, I decided to dig around a little and after updating <a href=\"http:\/\/www.rubyonrails.com\">Rails<\/a> to the latest version (almost 1.0) I figured out how to disable sessions completely.<\/p>\n\n<p>More importantly, I implemented caching for the user-facing portion of my blog in under a half-hour.  That's right, less than a half-hour.  I sure hope that the new <a href=\"http:\/\/www.zend.com\/collaboration\">Zend Framework<\/a> makes things that easy.<\/p>\n\n<p>A co-worker asked me today if I were freelancing, what would I be using to build new sites.  Without hesitating I told him \"Rails.  Unless I couldn't get Rails installed on the server, in which case I'd break out my mad PHP skillz.\"<\/p>\n",
        "date": "2005-11-04T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Sessions update...and some caching",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/04\/sessions-updateand-some-caching\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>At my day job, session handling was at one time the bane of our existance.  One poor server holding all the sessions for a large number of users.  We did lots of work to streamline them so that they take up far fewer resources than before, and are now going to be refactoring our code to remove all unnecessary info from the session.  Less data flowing back-and-forth, the better.<\/p>\n\n<p>Over at <a href=\"https:\/\/www.littlehart.net\/attheballpark\">my other blog<\/a>, I was dealing with a session-related problem.  The sysadmin for the box had gotten sick of seeing all these files starting with ruby_ appearing in \/tmp and told me to \"fix it, damnit\".  So off I went to the <a href=\"http:\/\/wiki.rubyonrails.com\">Ruby wiki<\/a> and figured it out in short order.<\/p>\n\n<p>So now, I have a Postgres-backed session handling option for the site...and no more files in \/tmp that I have to go in and delete!<\/p>\n",
        "date": "2005-11-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Session handling",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/11\/02\/session-handling\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Intersting <a href=\"http:\/\/netevil.org\/node.php?nid=633\">post<\/a> over at Wez Furlong's blog where he talks about the Zend Framework.  Check out the comments for lots of whining and gnashing of teeth.<\/p>\n\n<p>Why do some people hate Zend so much?  They're just trying to make money off of PHP.  Just like every developer who gets paid to work in PHP, if you ask me.<\/p>\n",
        "date": "2005-10-25T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Some more info about the Zend Framework",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/25\/some-more-info-about-the-zend-framework\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>As shocking as it seems, I sometimes don't follow smart programming practices. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/>  As a good example, I was refactoring the code that I use to keep track of results from the <a href=\"http:\/\/www.ibl.org\">simulation baseball league<\/a> I am the commissioner of.  It's a PHP 4 app.<\/p>\n\n<p>Specifically, I was changing database access to use the <a href=\"http:\/\/www.martinfowler.com\/eaaCatalog\/activeRecord.html\">Active Reord<\/a> pattern.  Everything was going just fine until I did the update method.  I forgot to specify the id of the record I was updating.  Instead I overrote EVERY SINGLE ENTRY in the table.  Of production data.<\/p>\n\n<p><strong>sigh<\/strong><\/p>\n\n<p>We have backups, but it will be some work to get back what I need back.<\/p>\n\n<p>So the lesson?  Backup the database before you do anything like I did OR have a development database you can use.  One of the things I like about <a href=\"http:\/\/www.rubyonrails.com\">Ruby On Rails<\/a> is that they build that capability right into it.  You have a database config file that you tell where to find the development databases, production databases and test databases.<\/p>\n",
        "date": "2005-10-24T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Bad programming practices, example 1",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/24\/bad-programming-practices-example-1\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>No, really.<\/p>\n\n<p>If you look at my <a href=\"https:\/\/www.littlehart.net\/attheballpark\">other blog<\/a>, you will notice that I'm the commissioner of the league.  There's a weekly newsletter that goes out to the league, with results and other info of interest to the league.<\/p>\n\n<p>I've been Commish since the middle of the 2000 season and I was stunned to see that the newsletter was being compiled by hand (shudder), and that was the most difficult part of the job.  So, I quickly wrote a bunch of PHP scripts to collect the raw info needed to do the newsletter and then munge it all into the format it needs.  I'd show you guys the app, but it's password protected and the security is pretty much non-existent.<\/p>\n\n<p>Which brings me back to the topic at hand.  We're going to be redesigning the <a href=\"http:\/\/www.ibl.org\">Internet Baseball League's website<\/a> to make it more CMS-like and have our webguru stop putting things in by hand.  Part of the work is moving my code from where it lives right now (under my own littlehart.net domain) to be part of the new site.<\/p>\n\n<p>Right now I'm using my own DB abtraction layer, but since I'm going to be using PEAR::DB for the new site I might as well go back into my existing code and refactor it to use that code.  Plus fix the ugly-looking interface.<\/p>\n\n<p>I'm probably the only person out there who enjoys going back and fixing his old programming mistakes...<\/p>\n",
        "date": "2005-10-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Refactoring is actually fun",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/06\/refactoring-is-actually-fun\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>I found this via my friend <a href=\"http:\/\/www.davesbrain.ca\">Dave<\/a><\/p>\n\n<table border='0' cellpadding='5' cellspacing='0' width='600'><tr><td><img src='http:\/\/images.quizfarm.com\/1109469973poisons.jpg'><\/td><td> You scored as <b>Posion<\/b>. Your death will be by poison, probably because you are a glutton and are around so many people that it would be easy to get away with it. Several important people in history share your fate.<br \/><br \/><table border='0' width='300' cellspacing='0' cellpadding='0'><tr><td><p><font face='Arial' size='1'>Posion<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='73' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>73%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Natural Causes<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='67' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>67%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Stabbed<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='67' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>67%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Eaten<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='67' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>67%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Suffocated<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='53' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>53%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Bomb<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='47' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>47%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Suicide<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='47' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>47%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Disappear<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='47' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>47%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Accident<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='40' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>40%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Disease<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='33' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>33%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Gunshot<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='33' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>33%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Cut Throat<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='27' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>27%<\/font><\/td><\/tr><tr><td><p><font face='Arial' size='1'>Drowning<\/font><\/p><\/td><td><table border='1' cellpadding='0' cellspacing='0' width='0' bgcolor='#dddddd'><tr><td><\/td><\/tr><\/table><\/td><td><font face='Arial' size='1'>0%<\/font><\/td><\/tr><\/td><\/tr><\/table><br \/><a href='http:\/\/quizfarm.com\/test.php?q_id=8960'>How Will You Die??<\/a><br \/><font face='Arial' size='1'>created with <a href='http:\/\/quizfarm.com'>QuizFarm.com<\/a><\/font><\/table>\n",
        "date": "2005-10-06T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "How Will You Die?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/06\/how-will-you-die\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>There's a <a href=\"http:\/\/blogs.phparch.com\/mt\/?p=106\">posting<\/a> over at Marco Tabini's weblog where he talks about the rough year that he thinks PHP is facing.  It's all related to the PHP 4 to PHP 5 migration that is going on.  And how many people aren't doing it.  Go read it.<\/p>\n\n<p>As for me, well, I'm running PHP 5.0.4 right now on my laptop and I'm pushing my host to upgrade to PHP 5 as well.  Work is contemplating making the move, and it wouldn't require very much work at all on our port to make the necessary changes to our code base to take advantage of PHP 5's new features (which are a lot more than \"better support for objects\".<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Year of Confusion?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/year-of-confusion\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>11:03:17 AM 6161180: One of my personal projects coming up is a PHP5 web framework...prelude to a supersecret open source project\n11:04:06 AM sp1ffar1ff1c: oh noes\n11:04:08 AM sp1ffar1ff1c: a framework\n11:04:31 AM 6161180: Yes, an evil framework\n11:04:40 AM sp1ffar1ff1c: 99% of frameworks are\n11:04:42 AM sp1ffar1ff1c: evil\n11:04:51 AM 6161180: It's a tool to allow me to pimp myself out to various PHP conferences\n11:05:00 AM 6161180: \"How to build a PHP 5 framework that is not Evil\"\n11:05:09 AM sp1ffar1ff1c: step 1: download Cake.\n11:05:14 AM sp1ffar1ff1c: there is no step 2!\n11:05:50 AM 6161180: Cake is not ready\n11:06:00 AM 6161180: it doesn't have any frosting yet\n11:06:16 AM sp1ffar1ff1c: on the flip side, it mimics the best framework yet. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/>\n11:06:27 AM sp1ffar1ff1c: mmm cake. now i'm hungry.\n11:06:28 AM 6161180: There is some truth to that\n11:06:35 AM 6161180: <strong>rummages around for a snack<\/strong>\n11:06:43 AM sp1ffar1ff1c: the beauty of ruby on rails is how it is loosely coupled\n11:06:55 AM 6161180: I dunno...a lot of stuff I do now are exercises to expand my own programming skillz\n11:06:58 AM sp1ffar1ff1c: it doesn't make doing things a different way any harder\n11:07:11 AM 6161180: maybe it's time I looked at cake closely\n11:07:20 AM 6161180: and abandoned my crazy dreams\n11:07:39 AM sp1ffar1ff1c: i'm not convinced that php's design as a language really allows the creation of a good framework\n11:07:58 AM sp1ffar1ff1c: it's missing a lot of important higher-level language features\n11:07:58 AM 6161180: I don't see why not\n11:08:03 AM sp1ffar1ff1c: meta-programming's practically impossible \n11:08:20 AM 6161180: what do you mean by \"meta-programming\" in this instance?\n11:08:28 AM sp1ffar1ff1c: writing code which writes code on the fly\n11:08:40 AM 6161180: you're talking about the generator scripts?\n11:08:45 AM sp1ffar1ff1c: no.\n11:08:47 AM sp1ffar1ff1c: let me show you.\n11:10:03 AM sp1ffar1ff1c:    {:up =&gt; :move_higher, :down =&gt; :move_lower, :top =&gt; :move_to_top, :bottom =&gt; :move_to_bottom}.each do |action, list_method|\n   define_method(action) do\n        if params['id']\n              @section = Section.find(params['id'])\n              @section.send(list_method)\n        end\n        redirect_to :action =&gt; 'list'\n      end\n    end<br \/>\n11:10:30 AM sp1ffar1ff1c: this bit of code writes methods when the class is invoked. it's not inside another method, it's just in the class. \n11:10:46 AM sp1ffar1ff1c: the fancy thing is a closure\n11:10:57 AM sp1ffar1ff1c: closures + metaprogramming = simplicity\n11:11:12 AM sp1ffar1ff1c: it was paul graham who really made me see that ther ereally is a huge power difference between languages\n11:11:28 AM sp1ffar1ff1c: he of course pushes lisp, but ruby has most of the features which make lisp great, without the horrible dialects. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/>\n11:12:26 AM 6161180: I guess the biggest problem is that PHP grew so fast\n11:12:32 AM 6161180: hard to go back after the fact and clean up the mess\n11:12:47 AM sp1ffar1ff1c: the biggest problem is that it was made by a guy who hates to program and design things. <img src=\"\/\/www.littlehart.net\/atthekeyboard\/templates\/default\/img\/emoticons\/smile.png\"\" alt=\"-)\"\" \/> php is a sledgehammer.\n11:12:51 AM sp1ffar1ff1c: but sometimes you need finer tools\n11:13:06 AM sp1ffar1ff1c: it's still the best out there vs eveyrthing but ruby\n11:13:07 AM sp1ffar1ff1c: for web dev<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "True Tales From The Internet",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/true-tales-from-the-internet\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Back when I was at the php|works conference, i hooked up for dinner with <a href=\"http:\/\/www.slash7.com\">Amy Hoy<\/a>, who I had met on the #rubyonrails IRC channel.  My other <a href=\"https:\/\/www.littlehart.net\/attheballpark\">blog<\/a> uses <a href=\"http:\/\/www.rubyonrails\">Ruby on Rails<\/a> as the underlying technology.  Anyhow, at the time she mentioned there was a supersecret project she had been working on that she couldn't talk about.<\/p>\n\n<p>Yesterday, I read about <a href=\"http:\/\/www.ning.com\">Ning<\/a>, a site that lets you build what they call \"community and social software\" applications really easily.  It looks like they host everything for you, and profide an API (PHP only for now) for you to write your own stuff.  Very interesting concept, and I signed up for a beta developer account if only to screw around with it and see what's going on.<\/p>\n\n<p>When I saw that Amy's <a href=\"http:\/\/www.omniti.com\">employer<\/a> was helping them out, I put one and one together and figured out that this was the project Amy had mentioned.  Congrats to Amy on being involved in something that is very cool (and sure to spawn imitators).<\/p>\n\n<p>I also chuckled when I saw that they claim you could create your own <a href=\"http:\/\/dating.ning.com\">dating site<\/a>.  C'mon guys, that's sort of half-true.  The site I work on is sitting at 300K+ lines of code.  Maybe that could be ruthlessly cut down to half via refactoring and rewriting, but that is still a lot of code to maintain.  Simple dating site?  Sure.  Money-making dating site?  Can't see it happening the way Ning is currently setup.  Not to say that it couldn't change because, after all, it's still in beta.<\/p>\n\n<p>Given that Ning is free (and premium stuff is coming that you'll obviously have to pay for) it might be tough to hack together something that you could make money off of.  Hrm...sounds like an interesting programming challenge...<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Supersecret project is revealed",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/supersecret-project-is-revealed\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>A big shoutout needs to go to Amy Hoy who <a href=\"http:\/\/slash7.com\/articles\/2005\/10\/19\/podcast-book\">is writing a book about Ruby with the Pragmatic Programmer guys<\/a>.  Also check out her interview with the folks from the Ruby on Rails podcast.<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Programmer Grrl Does Grreat",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/programmer-grrl-does-grreat\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>My open source project has gotten underway, as the three conspirators met and hashed out how we wanted the view\/template part of the system to work.  We got to play around with <a href=\"http:\/\/www.codingmonkeys.de\/subethaedit\/\">SubEthaEdit<\/a> and it's great collaborative capabilities.  It was cool to see me edit something in the document, then the <a href=\"http:\/\/www.derekmartin.ca\">other guy<\/a>, and then <a href=\"http:\/\/www.jobblender.com\">our other partner<\/a> add in his info.  You should seriously check it out sometime.<\/p>\n\n<p>But I've started to wonder if <a href=\"http:\/\/www.rubyonrails.com\">Rails<\/a> hasn't, well, spoiled me.  When I think about how to implement Rails in PHP (although <a href=\"http:\/\/www.cakephp.org\">Cake<\/a> is trying), I realize that I don't know if it could be done as slickly as Rails was done with Ruby.  Doing a half-assed web application framework is easy.  Doing a good one is hard.<\/p>\n\n<p>And on top of this all, Zend annoucned their new <a href=\"http:\/\/www.zend.com\/collaboration\/\">PHP Collaboration Project<\/a> which, at this time, consists of working with <a href=\"http:\/\/www.eclipse.org\">Eclipse<\/a> to make it easier to do PHP dev work with it (Zend Studio 6 maybe?), and...a PHP framework.  Open sourced.  Blessed for use in the \"enterprise\".<\/p>\n\n<p>So, maybe the second part of the Grand Project must wait until we take a look at what Zend comes up.  I can't help but wonder if <a href=\"http:\/\/http:\/\/www.xisc.com\/\">this little project that won a Zend programming contest<\/a> is what will become the Zend PHP Framework...<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "PHP Frameworks...are they worth the trouble?",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/php-frameworksare-they-worth-the-trouble\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Tomorrow I'm starting some work on my supersecretsideproject, which is going to be an open source project.  I've never done any code that I've given away under open source, only paid stuff.  Many moons ago I wrote a system to interface with Canada Post's eParcel system, and I managed to sell a copy of it for good coin too.<\/p>\n\n<p>At the time I got a few emails from people hoping to get it from me for free.  Since I was woefully underemployed at the time (my first foray into the world of freelance work) I didn't want to lose out on any money.  So of course I said no to people.  Only ever made the one sale, and that code is long gone.<\/p>\n\n<p>I'm hoping to make up for previous stupidity now and create something that more than just one person will want to use out there on the internet.  I'll keep you posted on how it goes.<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "My first steps towards open source",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/my-first-steps-towards-open-source\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p><a href=\"http:\/\/slash7.com\">Amy Hoy<\/a> has a posting up at her blog about her efforts in <a href=\"http:\/\/www.slash7.com\/articles\/2005\/10\/09\/super-customizing-typo-svk-more\">hax0ring at Typo so her blog can be all pretty-like<\/a>.  In it she mentions using something called <a href=\"http:\/\/svk.elixus.org\">SVK<\/a>, which is \"decentralized version controls system\" that uses some elements of <a href=\"http:\/\/subversion.tigris.org\">Subversion<\/a>.<\/p>\n\n<p>Now, I messaged Amy when I got into work and asked her what the big deal was, because I took a look at it last night and couldn't see what the advantage was.  Of course, I was sleep deprived from three days of the baby waking up 3 times a night.  Amy explained it to me thusly:<\/p>\n\n<p>1) you check out the code you wish to hack using SVK\n2) any changes you make to it, when committed, remain only in <strong>your<\/strong> copy of the repository\n3) when you do an update of your repository, any changes made upstream appear in <strong>your<\/strong> copy of the repository<\/p>\n\n<p>As soon as she explained it, the light bulb went on.  I <strong>immediately<\/strong> understood why that was a good thing.  To take it even further, this technique could be used at work when the time came for us to reboot the templating of the site effort.  The templaters could work on their own stuff, committing their changes locally and then pulilng down updates the maintenance team was doing.<\/p>\n\n<p>I've installed SVK on my iBook and going to fool around with it for a while to see if I can work with it.<\/p>\n",
        "date": "2005-10-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "It's like meta-versioning",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/05\/its-like-meta-versioning\/"
    },
    {
        "author": null,
        "categories": null,
        "content": "<p>Yeah, yeah, I know it's a cliche but you do have to start somewhere.  Some of you searching around on the web may have found my other blog <a href=\"https:\/\/www.littlehart.net\/attheballpark\">@TheBallPark<\/a>, where I talk about my experiences with my simulation baseball team.  However, I decided to start up @TheKeyboard to talk about the other side of my life, where I'm a programmer who's working with PHP at his day job and learning Rails on the side.<\/p>\n\n<p>Again, I need some time to modify this blog as I learn how Serendipity likes to do things.<\/p>\n\n<p>So, what about my day job?  Well, I work for a company called Instaclick and we do adult dating sites (no names just quite yet, you inquisitive little monkeys).  I spend my days working with PHP code and MySQL databases.  We started out quite small but now we're up to 18 developers, with 4 more on the way.  You may think that's a lot of developers to deal with one web site, but it's a pretty massive code base of 300,000 lines of code.<\/p>\n\n<p>Anyway, today I got some great news.  Two weeks ago I had attended the php|works conference in Toronto and took the Zend PHP Certification test.  It was a brutal test of 70 questions that cover EVERYTHING in PHP.  In all honesty, if you work with PHP on a regular basis and study a little bit to cover the things you haven't worked much with, you should be able to pass the test.  But you really need a broad knowledge of the language.<\/p>\n\n<p>You can check out my entry on Zend's web site <a href=\"http:\/\/zend.com\/zce.php?c=ZEND901167&amp;r=0910099\">here<\/a><\/p>\n",
        "date": "2005-10-01T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "First Post!",
        "uri": "https:\/\/grumpy-learning.com\/blog\/2005\/10\/01\/first-post\/"
    }
]