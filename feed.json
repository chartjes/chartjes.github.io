
                                        
[
    {
        "author": null,
        "categories": [
            "indieweb",
            "technology"
        ],
        "content": "<p>As I write this blog post, Twitter is convulsing as it's new\nowner Elon Musk is trying to treat a huge cruise ship like\nit's a jetski. Having cut a ton of staff and literally workshopping\nideas in public, it's not going well.<\/p>\n\n<p>I have ignored blogging and some other interactions as Twitter made\nit so easy to share those little thoughts and I also became reliant\non a curated feed to find stuff I was interested in. Along the way\nI ran into the idea of the <a href=\"https:\/\/indieweb.org\/\">IndieWeb<\/a>.<\/p>\n\n<p>I have made a non-trivial amount of money off selling my <a href=\"https:\/\/leanpub.com\/u\/chartjes\">books<\/a>\nand have dabbled in paid courses and workshops. So it made a lot of\nsense to me to check out this <a href=\"https:\/\/indiewebify.me\">guide to joining the IndieWeb<\/a>\nand learn about <a href=\"https:\/\/microformats.org\">microformats<\/a>, <a href=\"http:\/\/webmention.org\/\">Webmentions<\/a>\nand start really leaning into POSSEing (Publish on my Own Site, Syndicate Elsewhere)\nmy stuff.<\/p>\n\n<p>This is the first blog post that (if I have set up things correctly at my end) that\nwill be syndicated out to other platforms.<\/p>\n",
        "date": "2022-11-12T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Federating Yourself",
        "uri": "\/blog\/2022\/11\/12\/federating-yourself\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "testing"
        ],
        "content": "<p>This post could also be subtitled \"The Grumpy Programmer's Guide to Getting Rejected at Interviews\".<\/p>\n\n<p>Someone tagged me in a tweet...<\/p>\n\n<blockquote>\n  <p><em>Book idea for @grmpyprogrammer: an interviewing guide for job seekers wanting to get an idea of how dedicated companies are to testing. Questions to ask, ways to gauge the culture, etc.<\/em>\n  <em>(Originally posted on Twitter at <a href=\"https:\/\/twitter.com\/n00bJackleCity\/status\/1481632465403981824?s=20\">https:\/\/twitter.com\/n00bJackleCity\/status\/1481632465403981824?s=20<\/a>)<\/em><\/p>\n<\/blockquote>\n\n<p>...and it got me to thinking about where to start with\na request like this one. My personal opinion that there\nreally isn't a book in here but it did get me to start thinking\nabout what sort of questions you should be asking.<\/p>\n\n<p>Again, keep in mind that all of this is just my opinion. One based\non many years of experience, but still an opinion.<\/p>\n\n<h2 id=\"why-does-it-matter%3F\">Why Does It Matter?<\/h2>\n\n<p>In my experience, companies that make a commitment to doing automated\ntesting also tend to make a commitment towards \"quality\"\nin their coding practices and \"automation\" in their software development tooling.\nThe reason those are in quotes is because they definitely can mean \ndifferent things depending on the company.<\/p>\n\n<p>Now, again, in my experience, you are likely to have more success\nin solving problems and growing your own skills as a developer if you work\nin an environment where they value those things.<\/p>\n\n<p>After all, just because we can get paid a lot of money to dig in the pixel\nmines doesn't mean we should be forced to eat a shit sandwich. We should at \nleast have a choice of the additional toppings.<\/p>\n\n<h2 id=\"what-questions-should-i-ask%3F\">What Questions Should I Ask?<\/h2>\n\n<p>Like a lot of things related to programming, I find it helpful to start at the\nend result you want and work backwards to figure out what needs to be done. Therefore\nI think the first two things to ask are:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>What things always have to work when you push changes into production\n    and how do you verify that it works as expected?<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>This question cuts to the heart of the issue: what matters and how do we make\nsure it stays that way.<\/p>\n\n<p>What you are looking for is clear statements about what matters and clearer statements\nabout how they verify it. Again, not every company has invested the time and money\ninto having the ability for code changes to seamlessly flow from a development\nenvironment into production, accompanied by effective automated tests and a clear understanding\nof outcomes.<\/p>\n\n<p>If they already have some kind of commitment to testing, asking follow-up questions\nlike this are also very informative:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>What do you like about your current testing practices and what do you want to change?<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>Pay as much attention to what they like as what they dislike. That will give you an idea\nof what challenges lie ahead if you want to be the person making the changes.<\/p>\n\n<p>Finally, if you want to find out about what their commitment to quality is, I feel like\na great question is:<\/p>\n\n<blockquote>\n  <blockquote>\n    <p>Tell me about how code gets from the developer and up into production<\/p>\n  <\/blockquote>\n<\/blockquote>\n\n<p>Look for things like:<\/p>\n\n<ul>\n<li>code reviews<\/li>\n<li>coding standards<\/li>\n<li>static code analysis<\/li>\n<li>continuous integration systems<\/li>\n<li>separate staging and production environments<\/li>\n<li>automated deployments<\/li>\n<\/ul>\n\n<p>Not all of these things are going to guarantee great results (nothing\ndoes and never believe anyone who says it) but, when taken together,\nthey show a commitment to making sure that:<\/p>\n\n<ul>\n<li>the intent of code is clear<\/li>\n<li>others can understand the code<\/li>\n<li>the code is taking advantage of appropriate language features<\/li>\n<li>the team uses tooling that integrates with version control to automate error-prone manual checklists<\/li>\n<li>application \/ end-to-end testing happens before it reaches production<\/li>\n<li>repeatable processes ensure consistency<\/li>\n<\/ul>\n\n<h2 id=\"so-now-what%3F\">So Now What?<\/h2>\n\n<p>It's hard for me to give any more specific advice other than \"don't be \nafraid to ask more questions based on the answers you are hearing.\" \nIf we're being honest, most companies aren't doing all that stuff I listed\nabove. You can always start at the bottom (\"we try and manually test all changes\")\nand work as hard as you are allowed to on getting to the point where you\nhave an automated test suite catching issues before your users do.<\/p>\n",
        "date": "2022-01-14T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Asking Companies About Testing",
        "uri": "\/blog\/2022\/01\/14\/asking-companies-about-testing\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "PHP"
        ],
        "content": "<p>I was presented with a problem that was occurring in the <a href=\"https:\/\/grumpy-learning.com\/blog\/2021\/12\/30\/repeatable-dev-environments\/\">virtual machine<\/a>\nI was using for client development work -- the PHP-based acceptance test suite was running\nextremely slowly. Normally it takes 12-13 minutes to run outside of the \nvirtual machine but it was taking...54 minutes!<\/p>\n\n<p>Because I am almost never afraid to ask for help, I bugged <a href=\"https:\/\/twitter.com\/ocramius\">Marco Pivetta<\/a>\nto give me a hand, since he is working on the same client project. I figured if anyone knew of where to START diagnosing what\nthe problem is, it would be Marco.<\/p>\n\n<p>Marco's suggestion after watching a smaller test suite run both in his\nlocal environment and in my VM was that we should run the test suite\nwith a debugger enabled so we can see what is going on terms of resources\nbeing consumed. For PHP, this usually means using <a href=\"https:\/\/xdebug.org\">Xdebug<\/a>.<\/p>\n\n<p>What Xdebug allows you to do is:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/xdebug.org\/docs\/step_debug\">step debugging<\/a><\/li>\n<li>see better <code>var_dump()<\/code> information<\/li>\n<li>write every function call to disk for later summarizing and reporting<\/li>\n<li>profile your code to look for performance bottlenecks<\/li>\n<li>generate code coverage when using PHPUnit (not sure if it works with other testing frameworks)<\/li>\n<\/ul>\n\n<p>I've used the step debugging feature a lot on unfamiliar\ncode bases but the profiling feature was definitely what we needed.<\/p>\n\n<p>To ask Xdebug to profile the code we're testing, you need to have the\nXdebug extension installed and then tell <a href=\"https:\/\/phpunit.de\">PHPUnit<\/a> that you want\nto use it. The command to do it from your shell looks something like\nthis:<\/p>\n\n<p><code>XDEBUG_MODE=profile vendor\/bin\/phpunit --testsuite=unit<\/code><\/p>\n\n<p>Because our test environment was configured to run these tests using a specific\nDocker container, I had to access the container directly via <code>docker-compose exec php-fpm<\/code>\nand then execute this command inside the container.<\/p>\n\n<p>This ran the test suite and generated a large number of <a href=\"https:\/\/valgrind.org\/docs\/manual\/cg-manual.html\">cachegrind<\/a>\nfiles. These files contain profiling data but you need a specialized\ntool to read them and get information out of them that makes sense.\nFor Linux users you would likely want to use <a href=\"https:\/\/kcachegrind.github.io\">KCachegrind<\/a>\nbut luckily for me you can read these files using <a href=\"https:\/\/www.jetbrains.com\/phpstorm\/\">PhpStorm<\/a>.<\/p>\n\n<p>The first step was to figure out which of these cachegrind files to \nexamine. Unfortunately this is more intuition than science: our test\nsuite uses <code>@runInSeparateProcess<\/code> annotations so all the small ones\nrepresent single tests. These are likely not to return any meaningful \ninformation. \"Just pick the biggest one and let's see what happens.\"<\/p>\n\n<p>So, we both opened up cachegrind files of similar sizes and took a look\nat the data. What exactly where we looking for? In terms of bottlenecks\nwe can place things in either \"network\" or \"CPU\" categories. Is the application\nwaiting a lot for external resources (say, a service in a different container)\nor is it waiting for the CPU to finishing doing something before it \ncan continue.<\/p>\n\n<p>Sadly, I cannot share the cachegrind output here as I have NDA's surrounding\nthe client work but the approach was:<\/p>\n\n<ul>\n<li>sort the calls by how much time was being spent on executing them<\/li>\n<li>figure out if it is network or CPU<\/li>\n<\/ul>\n\n<p>For network issues, we were looking for things like time spent connecting\nto a MySQL database in another container. As we scrolled through the list\nat my end together we started noticing a few things:<\/p>\n\n<ul>\n<li>network access wasn't the problem<\/li>\n<li>we were spending an awful lot of time continually parsing a configuration file written using <a href=\"https:\/\/toml.io\/en\/\">TOML<\/a> during bootstrap (ticket filed to fix this)<\/li>\n<li>a lot of very simple PHP calls were taking significant amounts of CPU time<\/li>\n<\/ul>\n\n<p>The next step was to look at how much memory and CPU power I was giving to \nthe virtual machine. I was giving it half my processing cores and half the\navailable memory. So that should not have been an issue.<\/p>\n\n<p>Marco did some searching and found some forum posts of folks complaining about\nhow slow some VM's were in the latest version of <a href=\"https:\/\/www.vmware.com\/products\/fusion.html\">VMWare Fusion<\/a>\nbut their situation didn't seem to be the same as ours.<\/p>\n\n<p>\"Hrm, Chris, open up that 'Advanced Options' section in the 'Processors &amp; Memory' configuration\nsection. Aha!\"<\/p>\n\n<p>In that section were two disabled options, both dealing with running containers\ninside the virtual machine. Given that we are heavily relying on Docker it definitely\nmade sense to enable those.<\/p>\n\n<p>So I shut down the virtual machine, enabled those two options, and started it up.\nMuch to my surprise, the acceptance test suite now ran in 10 minutes instead of\n54 minutes! Huge improvement and is also faster than how long it takes outside\nof the virtual machine.<\/p>\n\n<p>Afterwards, Marco was explaining to me how much Docker relies on having direct memory\naccess to things so not forcing those connections to go through a different path\nin the VM would yield a huge gain. Now I'm happier with the performance of the test\nsuite.<\/p>\n\n<p>So, in summary:<\/p>\n\n<ul>\n<li>the test suite was much slower than expected<\/li>\n<li>a decision was made to run the test suite with Xdebug profiling enabled<\/li>\n<li>we made an educated guess as to which profile output file to analyze<\/li>\n<li>the profiling output led us to believe that there was a CPU-related bottleneck<\/li>\n<li>the virtual machine had adequate memory and processor resources allocated to it<\/li>\n<li>the VM was not configured to run containerized applications optimally<\/li>\n<li>the VM has stopped and options pertaining to running containers inside the VM were enabled<\/li>\n<li>re-running the test suite saw a huge increase in performance and execution time<\/li>\n<\/ul>\n\n<p>Without the ability to profile the code to get a better idea of where there might \nbe problems, it would've taken a lot longer to come to an effective solution.<\/p>\n",
        "date": "2022-01-05T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Solving Problems With Profiling",
        "uri": "\/blog\/2022\/01\/05\/solving-problems-with-profiling\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "automation",
            "twitter"
        ],
        "content": "<p>I\u2019m not a New Year\u2019s resolution type but here are some suggestions for my fellow devs of things I believe can lead to better outcomes:<\/p>\n\n<p>Learn your IDE\/editor better: I spent a lot of 2021 refining my <a href=\"https:\/\/neovim.org\">Vim<\/a> setup and I plan on adding increased use of <a href=\"https:\/\/vimwiki.github.io\/\">VimWiki<\/a> for making notes and linking things together.<\/p>\n\n<p>If your dynamic language of choice supports types, start using them and <a href=\"https:\/\/psalm.dev\">static<\/a> <a href=\"https:\/\/phpstan.org\">analysis<\/a> tools. It leads to much clearer intent and can catch problems at the edges.<\/p>\n\n<p>Focus on automation. Stop doing things manually the computer can do for you. Take the time to semi-automate manual processes first. It frees your brain up to solve different problems.<\/p>\n\n<p>Make continuous learning a foundation of everything you do. Even after 23 years of getting paid to program, I learn new things almost every day.<\/p>\n\n<p>Remember that what people call \u201cluck\u201d is often you having the skills to take advantage of an opportunity.<\/p>\n\n<p>(This was originally posted as a Twitter thread starting with <a href=\"https:\/\/twitter.com\/grmpyprogrammer\/status\/1477326886766362626\">https:\/\/twitter.com\/grmpyprogrammer\/status\/1477326886766362626<\/a>)<\/p>\n",
        "date": "2022-01-02T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Better Outcomes",
        "uri": "\/blog\/2022\/01\/02\/better-outcomes\/"
    },
    {
        "author": null,
        "categories": [
            "development",
            "automation"
        ],
        "content": "<p>If you have used <a href=\"https:\/\/docker.com\">Docker<\/a> on a Mac\nlaptop, you have likely ran into the \"crossing file systems\"\nissue that can lead to really poor performance in your containers.\nThis becomes frustrating if you are recreating a development environment \nfor applications that rely on a lot of services (micro or otherwise)\n to run. If you are a Windows or Linux user, this sort of thing is pretty much\na non-issue.<\/p>\n\n<p>It seemed like I had two choices on how to potentially deal with this.\nChoice number one was to switch to a different operating system (I have been looking\nat <a href=\"https:\/\/frame.work\">Framework<\/a> laptops) but I was (LOL) grumpy about\ngetting a new laptop when the 2020 13\" MacBook pro I have as I write this is only slightly\nmore than a year old. Okay, I could sell it. But that seems like a bunch\nof busy work.<\/p>\n\n<p>The second choice was to see if I could create a development environment\nthat was faster and still allowed me to use Docker, which is 100% a requirement\nfor the client work I am currently doing.<\/p>\n\n<p>In the past, other people online had hinted at the possibility of doing the development\nwork inside a virtual machine. Basically like connecting to another machine\nvia SSH and then doing my work in there. Good thing I am already a member of the \nCult of Vim.<\/p>\n\n<p>Okay, I think I could work with this. The next issue was HOW to do this all. I've played\naround enough with <a href=\"https:\/\/www.vagrantup.com\/\">Vagrant<\/a>, <a href=\"https:\/\/vmware.com\">VMWare<\/a> and\nVirtual Private Servers to know that the steepest part of the curve with using\nthis solution is getting configured and in a state where it useful rather than\na time-sink or a toy.<\/p>\n\n<p>I am always one to extol the virtues of \"better lucky than good\" and I happened to\nstumble across a tweet from Mitchell Hashimoto (one of the creators of Vagrant)\nwhere he talked about how he does all his development work inside a VM running\non a Mac laptop. I can't find the original tweet, but I made a note about it\nand then he did another tweet about it:<\/p>\n\n<blockquote>\n  <p><em>My NixOS configurations for my dev VM setup are finally sanitized and open source. They work for both Intel and Apple Silicon. And I put together a video showing how I setup a new machine!<\/em>\n  (originally posted at <a href=\"https:\/\/twitter.com\/mitchellh\/status\/1452721115009191938\">https:\/\/twitter.com\/mitchellh\/status\/1452721115009191938<\/a>)<\/p>\n<\/blockquote>\n\n<p>In that tweet he also shared a link to a <a href=\"https:\/\/www.youtube.com\/watch?v=ubDMLoWz76U\">YouTube video<\/a> and\nthe <a href=\"https:\/\/github.com\/mitchellh\/nixos-config\">GitHub repo<\/a> that he was publicly sharing\nthat you could use as a template.<\/p>\n\n<p>Again, in a big coincidence, Mr. Hashimoto was also using <a href=\"https:\/\/nixos.org\">NixOS<\/a> as his\nVM's operating system. NixOS is a Linux distribution based on <a href=\"https:\/\/nixos.org\/manual\/nix\/stable\/introduction.html\">Nix package manager<\/a>.\nWhich doesn't mean much if you're not a fan of their approach.<\/p>\n\n<p>The reason to like Nix is that it bills itself as a <em>purely functional package manager<\/em>.\nIf you've ever come across the \"functional style\" of programming then you might know\nhow powerful it is to have code that has no \"side effects\". This means that your\ncode is not doing things like writing to the file system, or updating records in a database.\nIn a functional world (unless the code is supposed return something random) it is easy\nto test code because the same input should always generate the same output.<\/p>\n\n<p>If you apply this to package management, it means your are choosing and installing dependencies\nin such a way that you can isolate them from each other. It can be difficult to have, for example,\ntwo different versions of PHP installed for your use unless you are relying on third party tools\nto keep track of what version should be active.<\/p>\n\n<p>Nix handles this by forcing you to declare any dependencies explicitly. No more\nworrying about globally-installed libraries causing incompatibility problems. \nWant to see if your PHP project runs on 7.4, 8.0, and 8.1? You can do that easily\nwith NixOS and it's tooling.<\/p>\n\n<p>I guess you can tell I am a fan of NixOS and look forward to using it a lot more.<\/p>\n\n<p>The idea from a high level is this: given a NixOS VM running in VMWare (I am using\nVMWare Fusion) it should take less than 10 minutes to create a development\nenvironment configured with my preferred tools installed from scratch.<\/p>\n\n<p>The repo he provides is definitely not ready to go as-is. You will need to modify\na lot of the things in there -- I know I did. It took about a week of poking at it,\ncreating and destroying lots of VM's, and learning how NixOS wants to do things to\nget it to the point where I could get it up and running and actually use it.<\/p>\n\n<p>I ended up removing a bunch of tools that are related to Mitchell's work on Docker\nand added a few things I knew I was going to need for my work with this client. It\nalso took me a while to figure out how to generate a hash for the password for the \nuser account the build-and-configure process can create for you. But in the\nend I had a VM up and running (that I could also SSH into if I wanted to)<\/p>\n\n<p>By default, the VM uses a graphical interface with a <a href=\"https:\/\/i3wm.org\/\">tiling window manager<\/a>\nand you type Command-N on your Mac and it opens up a terminal session in \n<a href=\"https:\/\/sw.kovidgoyal.net\/kitty\/\">Kitty<\/a> and you are ready to go!.<\/p>\n\n<p>I also had modified the configuration to install Docker and the related\ncommand-line tools. Once I cloned the client repo all I had to do was\n<code>make build<\/code> to create the Docker containers the development environment\nneeded and <code>make unit<\/code> to run the unit test suite in less than half the time.<\/p>\n\n<p>So what is the point of doing all this work? Let's go back to my original\nproblem. Running a test suite that used a development environment consisting\nof multiple Docker containers was incredibly slow. Running on my Mac (and giving\nDocker half the cores and half the available memory) it takes about 80 seconds.\nRunning inside a VM that has access to the same resources takes about 35 seconds.<\/p>\n\n<p>If you've never done a development work flow of \"make a change, run a process to \nverify the change works as expected\" for a large chunk of your work day then perhaps\nyou don't think this is a big deal. Every loop also has come context switching\nas you try and figure out what happened. If you do this 100 times in a day, you\nprobably want this loop to run as quickly as possible.<\/p>\n\n<p>I don't know if there is a phrase or concept or \"law\" about this sort of perception-versus-reality\nissue, but I find myself wanting to get things done FASTER when the process by\nwhich results are determined gets SLOWER. When my test suite runs in 30 seconds,\nI feel like I have lots of time to solve the problem. When it takes a minute-and-a-half\nI get...anxious? Maybe that's the wrong emotion. I know something takes too long \nwhen I start muttering to myself \"this is taking too <insert preferred swear word> long.\".<\/p>\n\n<p>With the \"happens faster than before\" issue solved, I find the next benefit to be \nas I learn how to use Nix to build repeatable environments, a major mistake can be \nsolved by deleting the VM and trying again. Maybe 20 minutes tops to get back to \nwhere I was. When I mess up my development environment\non my MacBook (OS update or maybe <a href=\"https:\/\/brew.sh\/\">Homebrew<\/a> updates an underlying\ndependency) it can be a whole afternoon spent trying to \"fix whatever I broke.\"<\/p>\n\n<p>It's not clear there will ever be any kind of solution for the \"crossing file systems\"\nissue that leads to Docker performing so poorly. My fellow programmers who are\nrunning the newer MacBooks that use Apple's new chips tell me performance is \nquite good. Spending another CAD$3k so Docker runs faster seems like a waste of \nmoney to me, but that is just a personal opinion.<\/p>\n\n<p>I used to be someone who lived on the bleeding edge when it came to their software.\nAs I got older and grumpier I started to value stability and repeatability in my \nsoftware more. A development environment that can be built using <a href=\"https:\/\/www.gnu.org\/software\/make\/\">Make<\/a>\nand a VM is one I can rely on to start me off at a known point, exhibiting\nbehaviour I am expecting. Almost like the benefits of a test suite!<\/p>\n\n<p>Doing this NixOS-in-a-VM stuff relies on you having some experience with Linux \nenvironments. I did run Linux as my desktop environment for several years \nbefore I started buying Apple hardware (which I've done since 2002) and \nMacOS's \"<a href=\"https:\/\/en.wikipedia.org\/wiki\/Berkeley_Software_Distribution\">BSD<\/a> with a pretty window manager\" approach also let me use those\ncommand-line skills.<\/p>\n\n<p>I highly recommend watching Mitchell's YouTube video as he explains how the\nwhole process works. I found it useful because he explains the philosophy of \nhis approach. Understanding WHY someone does things can often lead you to \nquicker insights as to what needs to change to fit your needs.<\/p>\n\n<p>If you do get it all set up, let me know your experiences. With some effort\nI can probably create a more generic version of my set up and create a GitHub\nrepo with all the files in it.<\/p>\n",
        "date": "2021-12-30T00:00:00+00:00",
        "site": null,
        "tags": null,
        "title": "Repeatable Development Environments",
        "uri": "\/blog\/2021\/12\/30\/repeatable-dev-environments\/"
    }
]