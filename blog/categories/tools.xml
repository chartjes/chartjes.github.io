<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Grumpy Learning]]></title>
    <link href="https://grumpy-learning.com/blog/categories/tools.xml" rel="self"/>
    <link href="https://grumpy-learning.com/"/>
    <updated>2024-11-03T18:00:37+00:00</updated>
    <id>https://grumpy-learning.com/</id>
            <author>
            <name><![CDATA[Chris Hartjes]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Reducing Friction in Development Environments]]></title>
            <link href="https://grumpy-learning.com/blog/2023/09/29/reducing-friction-in-development-environments/"/>
            <updated>2023-09-29T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2023/09/29/reducing-friction-in-development-environments/</id>
            <content type="html"><![CDATA[<h1 id="reducing-friction-in-development-environments">Reducing Friction in Development Environments</h1>

<p>As my 27th year of getting paid to create web applications
starts to wind down, I reflect on how hard I work to try
and create a development environment experience (heh, that
sounds so pretentious when spoken out loud!) that has as
little friction as possible.</p>

<p>Late in 2023, what does that look like for me?</p>

<h2 id="learn-your-editor">Learn your editor</h2>

<p>I have lost count of the number of editors I have used over
the years. Some I would never touch again. Some I felt changed
how people built all future editors. If it was available for
my Mac, I was at least trying it out.</p>

<p>One thing that did eventually change was that I
settled on one editor (well, sort-of) and dedicated time
to exploring it's other features beyond just editing text.</p>

<p>Just to be clear, I really don't care what editor you use.
I just think you should pick one and learn it really well.</p>

<p>I do flip back and forth between <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>
and <a href="https://neovim.io">NeoVim</a>, depending on the task.
Years of using Vim and NeoVim has imprinted both modal
editing and Vim keybindings into my muscle memory, so
I have Vim bindings installed for PhpStorm.</p>

<p>If your editor has an extensive list of keyboard shortcuts,
take the time to learn all the common ones. While I'm
not some kind of productivity grifter, I do feel like reducing
the number of times your hands leave your keyboard can
only be a good thing.</p>

<p>I should probably stop grabbing my phone so much too.</p>

<p>Learning how to use your editor and how easily it can integrate
with other tools is, for me, the first step towards reducing
friction.</p>

<h2 id="repeatability">Repeatability</h2>

<p>"Works on my machine" is both a joke and a reality when you do
development work. Here are some solutions I recommend:</p>

<ul>
<li><a href="https://www.docker.com">Docker</a> to create containers that duplicate production</li>
<li><a href="https://nixos.org/">Nix and NixOS</a> to make reproducible systems</li>
</ul>

<p>The bottom line is that you can reduce friction by adopting
tools that allow other people to use the same dependencies
that you are using. Yes, it can be annoying and frustrating
to get thing "just right", along with duplicating a production
environments that relies on a ton of services. But once you
have it as close to production as possible, the time to get
code out of your development environment and into production
is greatly reduced.</p>

<h2 id="standards">Standards</h2>

<p>Coding standards make sure your code all looks the same. I should
not be able to figure out who wrote some code by looking at it.
Static code analysis applies standards in terms of how the code
you wrote should be used by others. Testing standards ensure
that you have confidence that the code you wrote will continue
to behave in the way you expect it to.</p>

<h2 id="automation">Automation</h2>

<p>For me, this is the one that I think a lot of developers need
to embrace more. Write small shell scripts to execute multiple
commands that you type into your CLI. Use Makefiles. Add things
to your <code>composer.json</code> file so you can type <code>composer test</code>
and have the tests run.</p>

<p>Everything you can do to automate repetitive tasks is one less
thing you have to remember. I'd rather be working on solving
a business-related problem than remembering what order I need
to run these 10 commands to get my code from my laptop and into
production.</p>

<h2 id="willingness-to-learn">Willingness to Learn</h2>

<p>I don't know how typical I am in terms of evaluating my tools
and techniques on a regular basis, but I feel like my willingness
to learn new things and try out new tools that solve old problems
has really helped me reduce friction.</p>

<p>Except for rebasing things in Git. That still gives me so many
problems and I will go to my post-programming life insisting
that version control systems do not need to be so complicated.</p>

<h2 id="too-much-friction-causes-fires">Too Much Friction Causes Fires</h2>

<p>I think my over-arching point is that the tools you use to
write code every day should not cause you problems. It's entirely
possible I have learned to ignore the rough edges my tools
present (Vim certainly has a steep learning curve) but I truly
work on making sure a computer does repetitive actions for me
as much as possible. It's not going to complain about it to me.</p>

<p>I hope I've gotten you to start evaluating or re-evaluating your
chosen tools and find some new-or-different ways to reduce
any friction you are finding in your development environments
and processes.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[NeoVim and Xdebug]]></title>
            <link href="https://grumpy-learning.com/blog/2023/04/03/neovim-and-xdebug/"/>
            <updated>2023-04-03T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2023/04/03/neovim-and-xdebug/</id>
            <content type="html"><![CDATA[<h1 id="neovim-and-xdebug">NeoVim and Xdebug</h1>

<p>As I continue to work on the configuration for the <a href="https://neovim.io">One True Editor</a>
I had everything working just about the way that duplicated how I use <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>
except for one thing -- using <a href="https://xdebug.org">Xdebug</a>.</p>

<p>As I write this blog post I have an article submitted for <a href="https://www.phparch.com">php[architect]</a>
on how I use NeoVim to do PHP development work and in that article
I talked about the next few things I was going to work on adding
support for ($100 a year to do enemy research on Copilot AI?!?)
and getting the tool that I regret not embracing earlier but
now find it indispensable.</p>

<p>This is not the blog post if you are looking to figure out
how to get Xdebug running with whatever version of PHP you
are trying to use. The excellent documentation on the Xdebug
web site will absolutely point you in the right direction.</p>

<p>In my case, I went the route of manually compiling the 3.2.x
series (I honestly cannot remember why) but most package
managers for your operating system of choice can help you
with that.</p>

<h2 id="xdebug-and-dap">Xdebug and DAP</h2>

<p>DAP (which is short for the <a href="https://microsoft.github.io/debug-adapter-protocol/">Debug Anywhere Protocol</a>.
Look, you can quibble about who is behind DAP but the overarching
goal of providing a standardized way for both debugging tools
and programming languages to talk to each other makes a lot
of sense. The <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a>
is a similar effort that has found a lot of traction outside
of Microsoft.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>You to have the following before we get started:</p>

<ul>
<li>a version of PHP with Xdebug support</li>
<li>NeoVim 0.5+ or better</li>
<li>the ability to edit your NeoVim configuration files</li>
<li>the ability to install NeoVim plugins</li>
<li>Node installed (need it to install some tooling)</li>
<li>Git CLI tools installed</li>
</ul>

<h2 id="debug-adapter-for-php">Debug Adapter for PHP</h2>

<p>To start, I followed the excellent instructions found <a href="https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#PHP">here</a>
but to replicate them here:</p>

<pre><code class="bash">git clone https://github.com/xdebug/vscode-php-debug.git
cd vscode-php-debug
npm install &amp;&amp; npm run build
</code></pre>

<p>Leveraging an existing tool to make it work is always galaxy-brain-level
thinking.</p>

<p>Next, I decided on which plugins I wanted to use to interact
with Xdebug while inside NeoVim. I chose:</p>

<ul>
<li><a href="https://github.com/mfussenegger/nvim-dap">mfussenegger/nvim-dap</a> for high-level support</li>
<li><a href="https://github.com/rcarriga/nvim-dap-ui">rcarriga/nvim-dap-ui</a> as my UI for looking at the debug details</li>
<li><a href="https://github.com/theHamsta/nvim-dap-virtual-text">theHamsta/nvim-dap-virtual-text</a> find variable definitions</li>
<li><a href="https://github.com/nvim-telescope/telescope-dap.nvim">nvim-telescope/telescope-dap.nvim</a> to provide compatibility with Telescope</li>
</ul>

<p>Again, I encourage people to start with a base that WORKS and
then start experimenting to get it the way you want it.</p>

<h2 id="dap-plugin-configuration">DAP Plugin Configuration</h2>

<p>Again, this is for my own setup. It might be different for your
own.</p>

<p>I needed to make sure that I turn on Telescope support in my
<code>init.vim</code> file. I need it for other plugins but make sure
you enable it if you are using <code>telescope-dap.nvim</code>.</p>

<pre><code class="bash">lua require('telescope').setup
</code></pre>

<p>Note that the above is how to load <a href="https://www.lua.org">Lua</a> files
inside a <a href="https://devhints.io/vimscript">Vimscript</a> file. I am starting
to work on the outline of using Lua for all my NeoVim configuration
settings.</p>

<p>Next, I have a configuration file just for DAP that I also load in
my <code>init.vim</code> file:</p>

<pre><code class="lua">local dap = require('dap')
require('telescope').load_extension('dap')

dap.adapters.php = {
    type = "executable",
    command = "node",
    args = { os.getenv("HOME") .. "/vscode-php-debug/out/phpDebug.js" }
}

dap.configurations.php = {
    {
        type = "php",
        request = "launch",
        name = "Listen for Xdebug",
        port = 9003
    }
}
</code></pre>

<p>In here I tell NeoVim:</p>

<ul>
<li>load the DAP extension for Telescope (it overrides the default UI)</li>
<li>I want to use the VS Code DAP adapter</li>
<li>what port to listen for Xdebug info on (Xdebug 3.2.x goes with 9003 as the standard port)</li>
</ul>

<p>On the Xdebug web site section <a href="https://github.com/xdebug/vscode-php-debug#supported-launchjson-settings">about VS Code</a>
it points out that you can also add in a <code>pathMappings</code>
value in <code>dap.configurations.php</code> to "map the files on the server to
the right files on your local machine." and gives an example.</p>

<p>I don't use <code>pathMappings</code> and my setup works just fine.</p>

<p>Of course, I could not really use Xdebug from inside the editor without
some keyboard mappings:</p>

<pre><code class="lua">vim.keymap.set('n', '&lt;F5&gt;', function() require('dap').continue() end)
vim.keymap.set('n', '&lt;F10&gt;', function() require('dap').step_over() end)
vim.keymap.set('n', '&lt;F11&gt;', function() require('dap').step_into() end)
vim.keymap.set('n', '&lt;F12&gt;', function() require('dap').step_out() end)
vim.keymap.set('n', '&lt;Leader&gt;b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '&lt;Leader&gt;B', function() require('dap').set_breakpoint() end)
vim.keymap.set('n', '&lt;Leader&gt;lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '&lt;Leader&gt;dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '&lt;Leader&gt;dl', function() require('dap').run_last() end)
vim.keymap.set({'n', 'v'}, '&lt;Leader&gt;dh', function()
  require('dap.ui.widgets').hover()
end)
vim.keymap.set({'n', 'v'}, '&lt;Leader&gt;dp', function()
  require('dap.ui.widgets').preview()
end)
vim.keymap.set('n', '&lt;Leader&gt;df', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.frames)
end)
vim.keymap.set('n', '&lt;Leader&gt;ds', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.scopes)
end)
</code></pre>

<p>My usual workflow for debugging is:</p>

<ul>
<li>code I am debugging open in the editor</li>
<li>if I didn't already start debugging, hit <code>F5</code> to turn on the debugging session</li>
<li>set breakpoints where I want them with <code>\b</code></li>
<li>run the code, step through the breakpoints, and see what's going on</li>
</ul>

<p>Not different in any significant way than how I would do things in PhpStorm.</p>

<p>So there you have it! If you are a NeoVim user and want to
start utilizing Xdebug to help you, well, debug your code
faster my documentation above should get you pointed in
the correct direction.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Thinking About Testing Too Much]]></title>
            <link href="https://grumpy-learning.com/blog/2023/03/09/thinking-about-it-too-much/"/>
            <updated>2023-03-09T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2023/03/09/thinking-about-it-too-much/</id>
            <content type="html"><![CDATA[<h1 id="thinking-about-testing-too-much">Thinking About Testing Too Much</h1>

<p>Back in February and had a <a href="https://www.freethegeek.fm/51">very long and fun chat</a> with
my friend Matt Setter about the one topic I think about way too much -- testing. Rather
than steal what Matt wrote, just go read the linked above post to get a sense of what
we discussed. If you have followed my rantings online for any period of time, none of
what I discussed there should be new to you.</p>

<p>I mean, you can't really blame me -- my career niche has been "testing PHP code" since at
least 2006. That is a really, really long time to be focussed on an issue. Now, I might
not be the best programmer (a lot of times I feel like I have been doing programming for
1 year, 25 times) but I do know a ton about what does and does not lead to good outcomes
for long-running projects.</p>

<h2 id="the-next-wave-of-testing">The Next Wave Of Testing</h2>

<p>As I write this, I am at a crossroads as to what to talk about next. I'm kind of over speaking
at conferences except in places I have not been (if you are an organizer of an event in Africa,
South America, or Japan -- please get in touch) and I am not sure I want to put the effort
in to write yet another book or do training courses. If I am being honest, I am getting older
and like hanging out at home more and having unstructured time. I have two frustrating hobbies
that can keep my mind sharp. Arguing with people about testing their code feels like a losing
proposition and a huge waste of my time.</p>

<p>So, what I have found interesting is the increasingly-growing idea that there are some code-related
things that you can do that can reduce the amount of tests you need to write for your code
or sometimes even eliminate them. This is, of course, at best misguided and at worst, wrong.</p>

<h2 id="types-as-tests">Types As Tests</h2>

<p>When they got introduced into the language, I viewed typing (I define it as declaring at creation
what 'type' of thing an object or variable is supposed to be) as something that would get rid
of some types of tests I found myself writing and allow the PHP interpreter to enforce rules
about what sort of things my code was returning to other code that called it. No more tests
verifying that a method returned an array!</p>

<p>They are NOT a substitute for tests. They are a helpful tool that provides intent for your code
and greatly reduces the likelihood of SOME types of errors happening when (for example) your
code is expecting a list of things and instead gets a string.</p>

<h2 id="static-analysis-as-tests">Static Analysis As Tests</h2>

<p>Static analysis tools are something I have been using professionally for a few years. They are
an additional layer ON TOP OF types that goes even further down the road of making sure the intent
of your code is clear. Sure, it's annoying to have a tool say "well, actually, you said over HERE
that you are expecting an array but you ACTUALLY are passing a list. What one is it?" but it's
better than you trying to figure out why some code you wrote yesterday suddenly stopped working
today when you (and this is often not reality) "didn't change anything".</p>

<p>Again, these are NOT a substitute for tests. They are a COMPLEMENTARY tool for testing. Just because
PHPStan is not reporting any errors doesn't mean your code is behaving as expected!</p>

<h2 id="grumpy%27s-theory-on-tests">Grumpy's Theory On Tests</h2>

<p>I am incredibly confident in saying that you should 100% have automated tests for your application
that cover:</p>

<ul>
<li>business logic</li>
<li>how your users will interact with your app</li>
</ul>

<p>What testing tools you use to make this happens is up to you. If you have done a decent job of
creating a decoupled code base where you are injecting dependencies to your objects (let's be
real, 90% of PHP code out there still running and accessible online is object oriented) then
you should be able to write unit tests where you create the dependencies the code you are testing
needs.</p>

<p>They can be the real thing (which I prefer) or doubles (don't be scared, you probably waste more
time on social media than it would take to keep the doubles in sync as you work on the code base)
but you MUST have the ability to modify these dependencies at run time.</p>

<p>If you also write your code in a more defensive style -- think filtering input, escaping output,
validating things, using immutability -- your tests become easier
to create and the testing scenarios you create become easier and easier to define and implement.</p>

<p>You need tests. Your code should be easy to test. I'm not mad at you if your code isn't in a place
where it easy to test. There are ways  to make them testable. No, I am
not talking about end-to-end tests with browser automation. Those are brittle and I have seen too
many of those types of test suites with weird custom helpers and step definitions that do not
reflect how the application works AT ALL. Don't do that. Browser automation is a last, desperate
test in my opinion.</p>

<p>Write assertion-based tests using real dependencies as much as possible. I'm happy to help you
get there. It will cost some time and some money but it will make the cost of the NEXT change so
much easier.</p>

<p>Hope you enjoyed the results of thinking too much about this stuff. There is SO much more I want
to learn in order to make your testing tasks easier.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Adding search to a static blog]]></title>
            <link href="https://grumpy-learning.com/blog/2023/02/10/adding-search-to-a-static-blog/"/>
            <updated>2023-02-10T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2023/02/10/adding-search-to-a-static-blog/</id>
            <content type="html"><![CDATA[<h2 id="why-does-search-matter%3F">Why does search matter?</h2>

<p>I recently decided to take all the old posts from my old blog AtTheKeyboard
and add them to this site. Since I used the same <a href="https://getsculpin.io">blogging system</a> it
was as simple as copying the markdown source into the correct place
and generating static HTML for it.</p>

<p>I used to have a custom Google site search configured but in this new
age of me giving a shit about the <a href="https://indieweb.org">IndieWeb</a> I wanted
something a little more open and a little more free. I needed something else.</p>

<p>Like all things, this solution might not work one day but I will worry
about that when the time comes.</p>

<p>Since I have blog posts dating all the way back to 2005 I felt it was
essential to allow folks to search for stuff when they come here.</p>

<h2 id="outsourcing-research">Outsourcing Research</h2>

<p>As someone who has been on social media for along time, the best way to find
an answer is to just ask your devoted audience a question. Eventually someone
will answer you. I had tried to use <a href="https://lunrjs.com">Lunr</a> but there was
a lack of knowledge at my end on how to get the index I generated into the
correct place onto the GitHub-pages-powered version of this web site. I had
decided to just use a really basic "redirect-the-request-to-Google" input text
form and rely on my site's new content getting indexed sometime soon.</p>

<p>Probably not great but I am the type of person who is lazy-with-intense-bursts-of-action.</p>

<p>Luckily for me, <a href="https://phpc.social/@dgoosens">Dmitri Goosens</a> found a solution
and let me know. I under 30 minutes I had it all working. Which is stunning to me.</p>

<h2 id="pagefind">Pagefind</h2>

<p><a href="https://pagefind.app">Pagefind</a> is a CLI-based solution that appears to do everything
I wanted:</p>

<ul>
<li>it can be run via the CLI</li>
<li>it will index all your blog posts</li>
<li>they provide you with snippets of code to embed search boxes and results</li>
<li>it's customizable (came in handy due to some GitHub Pages limitations)</li>
</ul>

<p>Their documentation is great and I now have working static search for my blog. For those</p>

<h2 id="how-i-do-it">How I Do It</h2>

<p>After adding the suggested code snippets to the pages for my blog, I do the following:</p>

<ul>
<li>build the site pages</li>
<li>run Pagefind to generate the index, specifying where my blog posts are and what directory to put Pagefind-specific stuff in</li>
<li>copy all the stuff over to the repo for my blog</li>
<li>add the changes, commit, and push!</li>
</ul>

<p>So, if you have a static blog and were wondering how to make it work, I highly
recommend giving Pagefind a try.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How a grumpy programmer writes Python IRC bots]]></title>
            <link href="https://grumpy-learning.com/blog/2022/12/31/python-irc-bot/"/>
            <updated>2022-12-31T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2022/12/31/python-irc-bot/</id>
            <content type="html"><![CDATA[<h2 id="why-python-and-why-irc%3F">Why Python and why IRC?</h2>

<p>My longest-running hobby is being a member of <a href="https://www.ibl.org">tabletop simulation baseball league</a>
that uses dice and cards and charts to determine outcomes. There are a lot
of charts so a signifcant amount of time is spent looking up results that
players haven't memorized.</p>

<p>Our league uses IRC as the way to play the games -- the players connect to
the server we host and then play games out using a bot that rolls dice
and communicating with each other via text. Very old school.</p>

<p>Making things a little more player-friendly will help the league get
team owners up to speed quicker, so naturally I turned to automation
and programming as a way to do it.</p>

<p>I chose Python because it had been a while since I had done <em>anything</em> with
it, so why not sharpen the dull edge of my experience there a little. Thankfully
there are lots of examples on how to work with IRC using just the default
libraries that come with Python. In this case, the server the bot would be
running on runs Python 3.8. I started off with <a href="https://pythonspot.com/building-an-irc-bot/">this blog post</a>
and went from there.</p>

<h2 id="initial-implementation">Initial implementation</h2>

<p>From a high level, we are doing the following</p>

<p>1) connect to the IRC server
2) loop endlessly while grabbing any responses from the server
3) examine those responses for my chosen chartbot trigger
4) if triggered, then look for dice rolls
5) display results in-channel</p>

<p>Now, I am sure there are better implementations for what I am trying
to do here involving more commonly-accepted design patterns. In fact,
the code analysis tools I am using are already complaining that the
<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a>
is too high.</p>

<p>So, here is an example of what I have been doing</p>

<pre><code class="python">while True:
    text = irc.get_response()

    if "PRIVMSG" in text and ".c ifr" in text:
        details = text.split(' ')
        msgChannel = details[-4].strip()
        batterHand[msgChannel] = details[-1].strip()
        lookForIfrRoll[msgChannel] = "yes"
</code></pre>

<p>An example command that this would look for would be '.c ifr rsp'.
This maps to:</p>

<ul>
<li>.c is "activate chartbot"</li>
<li>ifr is "Infield Range"</li>
<li>rsp is "right-spray hitter", with other options available</li>
</ul>

<p>Early on I realized that I needed to have some kind of "state"
in here because it was a two-step process. Once it knew which
chart it was supposed to refer to, it then needed to wait to
get a die roll. Again, this feels like a brute-force method
but I could not think of any other way. Maybe, again, there
is a better pattern for keeping track of this.</p>

<p>So, having figured out we want to refer to the "infield range chart"
(commonly known as IFR in game terms), we tell the bot "the next roll
in this channel should be checked to see if it works with the IFR chart."</p>

<p>Here is a sample of the code that watches for an IFR roll:</p>

<pre><code class="python">    if "rolled" in text:
        details = text.split(' ')
        msgChannel = details[-4].strip()
        roll = details[-1].strip()

        if (msgChannel in lookForIfrRoll and
                batterHand[msgChannel] in validBatterHand and
                len(roll) == 2):
            irc.send(
                 msgChannel, ifrChart.lookup(batterHand[msgChannel], roll)
            )
            del lookForIfrRoll[msgChannel]
            del batterHand[msgChannel]

</code></pre>

<p>All rolls for the IFR chart will be from 00-99, so we make sure the rollbot
returned something 2 characters in length. We also make sure that the
batter hand type matches our expectations. If that is all good, then
we call an object that contains our chart information, do a lookup, and
then send the results of that lookup into the channel.</p>

<p>Here is a sample of what the IFR chart object looks like:</p>

<pre><code class="python">class IFRChart:
    chart = {}

    def __init__(self):
        self.chart = {
            'lp': {
                "00": "Up the middle P",
                "01": "High chopper P",
                "02": "Line drive P",
                "03": "Down the line 1B",
                "04": "Down the line 1B",
                "05": "Down the line 1B",
                # more results snipped
            }
        }

    def lookup(self, bats, roll):
        return self.chart[bats][roll]

</code></pre>

<p>I will say that creating this chart objects helped me get my muscle
memory for Emacs in a better place. So much cut-and-pasting-and-replacing
of things!</p>

<p>So there you have it, a small example of how I have started writing an
IRC bot that:</p>

<ul>
<li>reads responses for a trigger</li>
<li>figures out what chart to read</li>
<li>waits for a die roll that matches expectations</li>
<li>spits out the lookup result in channel</li>
</ul>

<p>As always, I am happy to get some advice on better ways to refactor
and implement solutions for this code.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Current NeoVim setup]]></title>
            <link href="https://grumpy-learning.com/blog/2022/12/13/current-neovim-setup/"/>
            <updated>2022-12-13T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2022/12/13/current-neovim-setup/</id>
            <content type="html"><![CDATA[<h2 id="grumpiness-and-neovim">Grumpiness and NeoVim</h2>

<p>I have been a <a href="https://vim.org">Vim</a> user since the early 2000's.
Someone who worked in the same building as me and was also a fellow
Linux user (this was before I had bought my first Macbook) got
to talking with me as I struggled to figure out <a href="https://www.gnu.org/software/emacs/">Emacs</a>
suggested I sit with him for a little bit as he showed me how to
use Vim. Still not sure to this day why it clicked with me but I
have been using it ever since.</p>

<p>In the past few years I have changed which version of Vim I am
using and switched to <a href="https://neovim.io/">NeoVim</a>.</p>

<p>Now, to be transparent, these days I use <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>
as my main PHP programming tool and use NeoVim for pretty much everything
else. I do pay for PhpStorm because I think it's important to encourage the creation
of tools for the programming languages I use. If I was still doing a lot of
Python work, I'd be paying for <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>.
I had really good experiences with it while at Mozilla.</p>

<p>Anyway, I still like to keep up with what is going on in the NeoVim "community"
and I am happy to see a vibrant group of people creating plugins and
sharing their knowledge. I wanted to give things with NeoVim and PHP another
spin so it was time to go look at my current setup.</p>

<h2 id="why-do-all-this%3F">Why do all this?</h2>

<p>My goal is to have a Vim experience that matches the way I currently work.
I've been using Vim for so long that there is lots of muscle memory and
I usually enable "Vim mode" in any tools I use. Editing things a "modal way"
has become my default and any tools that don't support doing things that
way slow me down immensely.</p>

<p>So, what do I want out of my NeoVim setup.</p>

<ul>
<li>works well with the languages I will use</li>
<li>allows me to quickly find files</li>
<li>allows me to quickly find source definitions</li>
<li>allows me to quickly find places where code is used</li>
</ul>

<p>Now, of course, PhpStorm does all this but also carries a lot of extra
functionality around with it. Which is fine! But in an era where the tools
we use on desktop operating systems get bigger and bigger and consume more
and more resources, I find something appealing in using tools that take up
as few resources as possible.</p>

<p>I did an older post on my old blog from about a year ago so I will
follow the same structure but I noticed some changes. I'll be going
through my current NeoVim config and filling things in as we go</p>

<pre><code>set nocompatible
syntax on 
set encoding=utf8
filetype off

" Load our plugins
lua require('plugins')
</code></pre>

<p>I am using as much <a href="https://www.lua.org">Lua</a> as I can within NeoVim.
The first few steps here are pretty much standard:</p>

<ul>
<li>you always turn "no compatible" off otherwise lots of things break</li>
<li>I want syntax highlighting by default</li>
<li>I want things to be UTF8</li>
<li>I am going to define my own behaviour for how I want NeoVim to
handle filetypes</li>
</ul>

<h2 id="plugins">Plugins</h2>

<p>My list of plugins:</p>

<pre><code class="lua">  return require('packer').startup(function()
    use 'wbthomason/packer.nvim'
    use 'neovim/nvim-lspconfig'

    -- General plugins
    use 'dracula/vim'
    use 'junegunn/vim-easy-align'
    use {
        'nvim-treesitter/nvim-treesitter',
        run = ':TSUpdate'
    }
    use 'onsails/lspkind-nvim'
    use 'vim-vdebug/vdebug'

    -- See the git status of the current line in the gutter
    use 'airblade/vim-gitgutter'

    --  PHP plugins
    use 'tpope/vim-dispatch'
    use 'StanAngeloff/php.vim'
    use 'stephpy/vim-php-cs-fixer'
    use 'jwalton512/vim-blade'
    use 'noahfrederick/vim-laravel'

    -- Help for vim-laravel
    use 'tpope/vim-projectionist'
    use 'noahfrederick/vim-composer'

    -- Respect .editorconfig files for a project
    use 'editorconfig/editorconfig-vim'

    -- Telescope support
    use 'nvim-lua/plenary.nvim'
    use 'nvim-telescope/telescope.nvim'
    use 'sharkdp/fd'
    use {'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }

    -- LSP support for Typescropt
    use 'jose-elias-alvarez/nvim-lsp-ts-utils'

    -- nvim-cmp support
    use 'hrsh7th/nvim-cmp'
    use 'hrsh7th/cmp-nvim-lsp'
    use 'saadparwaiz1/cmp_luasnip'
    use 'L3MON4D3/LuaSnip'

end)
</code></pre>

<p>I am using <a href="https://github.com/wbthomason/packer.nvim">Packer</a> to
handle installing all my packages. I have commented in places where I
felt that things were not clear, but I guess some further explanations
couldn't hurt.</p>

<ul>
<li>I use the <a href="https://draculatheme.com/vim">Dracula</a> theme</li>
<li>I use <a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a>
to make it easier to line up blocks of code</li>
<li><a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a> shows me
which lines have changed from Git's perspective</li>
<li>I like to respect the
<a href="https://github.com/editorconfig/editorconfig-vim">EditorConfig</a>
settings for a project if they exist</li>
<li><a href="https://github.com/nvim-telescope/telescope.nvim">Telescope</a> 
forms the basis for a lot of fuzzy find functionality</li>
<li>I use <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a> as my
completion engine (and it plays nicely with Intelephense)</li>
</ul>

<h2 id="more-neovim-settings">More NeoVim Settings</h2>

<pre><code>" Do smart autoindenting
set smartindent
set autoindent

" I like linenumbers, thanks
set number

" set search case to a good configuration http://vim.wikia.com/wiki/Searching
set ignorecase
set smartcase

" I like pretty colours in my terminal
set t_Co=256

" Let's get some good colours in our terminal
let $NVM_TUI_ENABLE_TRUE_COLOR=1
set termguicolors
color dracula 

" We want to use ripgrep for any grep commands
set grepprg='rg'

" Basic configuration options
set tabstop=4
set shiftwidth=4
set softtabstop=0
set smarttab
set expandtab
set wildmenu
set wildmode=list:longest,full
set ttyfast
set showmatch
set hlsearch
set incsearch
set backspace=indent,eol,start

" Make sure we are using the version of Python we want
let g:python3_host_prog = "/opt/homebrew/bin/python3"

" We always want to use UTF-8
set encoding=UTF-8
set fileencoding=UTF-8
</code></pre>

<p>A lot of what is up there is fairly straightforward when it comes to
Vim/NeoVim, so I am not going to go over a lot of them.</p>

<h2 id="lsp-configuration">LSP Configuration</h2>

<p>This is the critical piece for me -- supporting different languages
makes NeoVim so versatile.</p>

<p>In my config I have these two lines:</p>

<pre><code>lua require('lsp-config')
lua require('nvm-cmp')
</code></pre>

<p>and these handle my languages and making sure autocompletion behaves
as I expect.</p>

<pre><code class="lua">--- Configuration for LSP, formatters, and linters.
local nvim_lsp = require("lspconfig")

-- short cut methods.
local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '&lt;space&gt;e', '&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '[d', '&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', ']d', '&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '&lt;space&gt;q', '&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '&lt;space&gt;f', '&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;', opts)

local on_attach = function(client, bufnr)
  -- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;C-k&gt;', '&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wa', '&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wr', '&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wl', '&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;D', '&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;rn', '&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;ca', '&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;', opts)
end

-- PHP
nvim_lsp.intelephense.setup {
    cmd = { "intelephense", "--stdio" },
    filetypes = { "php" },
}

--- Linter setup
local filetypes = {
  typescript = "eslint",
  typescriptreact = "eslint",
  php = {"phpcs", "psalm"},
}

local linters = {
  phpcs = {
    command = "vendor/bin/phpcs",
    sourceName = "phpcs",
    debounce = 300,
    rootPatterns = {"composer.lock", "vendor", ".git"},
    args = {"--report=emacs", "-s", "-"},
    offsetLine = 0,
    offsetColumn = 0,
    sourceName = "phpcs",
    formatLines = 1,
    formatPattern = {
      "^.*:(\\d+):(\\d+):\\s+(.*)\\s+-\\s+(.*)(\\r|\\n)*$",
      {
        line = 1,
        column = 2,
        message = 4,
        security = 3
      }
    },
    securities = {
      error = "error",
      warning = "warning",
    },
    requiredFiles = {"vendor/bin/phpcs"}
  },
  psalm = {
    command = "./vendor/bin/psalm",
    sourceName = "psalm",
    debounce = 100,
    rootPatterns = {"composer.lock", "vendor", ".git"},
    args = {"--output-format=emacs", "--no-progress"},
    offsetLine = 0,
    offsetColumn = 0,
    sourceName = "psalm",
    formatLines = 1,
    formatPattern = {
      "^[^ =]+ =(\\d+) =(\\d+) =(.*)\\s-\\s(.*)(\\r|\\n)*$",
      {
        line = 1,
        column = 2,
        message = 4,
        security = 3
      }
    },
    securities = {
      error = "error",
      warning = "warning"
    },
    requiredFiles = {"vendor/bin/psalm"}
  }
}

nvim_lsp.diagnosticls.setup {
  on_attach = on_attach,
  filetypes = vim.tbl_keys(filetypes),
  init_options = {
    filetypes = filetypes,
    linters = linters,
  },
}
</code></pre>

<p>A lot of what is in here I simple stole from other people's
configurations but I think most of it should be straightforward to
figure out.</p>

<p>Some highlights from my perspective:</p>

<ul>
<li>you pick which language servers to care about</li>
<li>you map functionality to existing Vim bindings so, again, it behaves
as expected</li>
</ul>

<p>Here is what I have for getting the autocompletion engine working:</p>

<pre><code class="lua">local capabilities = vim.lsp.protocol.make_client_capabilities()

local lspconfig = require('lspconfig')

-- Enable some language servers with the additional completion capabilities offered by nvim-cmp
local servers = { 'intelephense', 'tsserver' }
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    -- on_attach = my_custom_on_attach,
    capabilities = capabilities,
  }
end

-- luasnip setup
local luasnip = require 'luasnip'

-- nvim-cmp setup
local cmp = require 'cmp'
cmp.setup {
  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end,
  },
  mapping = {
    ['&lt;C-p&gt;'] = cmp.mapping.select_prev_item(),
    ['&lt;C-n&gt;'] = cmp.mapping.select_next_item(),
    ['&lt;C-d&gt;'] = cmp.mapping.scroll_docs(-4),
    ['&lt;C-f&gt;'] = cmp.mapping.scroll_docs(4),
    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),
    ['&lt;C-e&gt;'] = cmp.mapping.close(),
    ['&lt;CR&gt;'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['&lt;Tab&gt;'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end,
    ['&lt;S-Tab&gt;'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end,
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
}
</code></pre>

<p>Again, more mapping of existing keys to get the plugin to behave as
expected. This sort of thing lies at the very heart of how Vim/NeoVim
plugins do so much work -- they literally alter how the application
behaves by overriding things. Perhaps this is actually a form of
monkey patching? TIME IS A CIRCLE.</p>

<h2 id="key-mappings">Key Mappings</h2>

<pre><code class="vim">" ------------------------------------------------------------------------------
" # Mappings
" ------------------------------------------------------------------------------
" # All of your mappings go in this file! Don't worry about your mappings
" # being separate from related config. Sourcery provides mappings to
" # easily jump between plugin definitions, mappings, and configs.
" #
" # More info: https://github.com/jesseleite/vim-sourcery#jumping-between-files


" ------------------------------------------------------------------------------
" # Example
" ------------------------------------------------------------------------------

" easily switch between vsplit windows
map &lt;Leader&gt;j &lt;C-w&gt;j
map &lt;Leader&gt;k &lt;C-w&gt;k
map &lt;Leader&gt;h &lt;c-w&gt;h
map &lt;Leader&gt;l &lt;c-w&gt;l

" Remove highlighing of search terms
nnoremap &lt;leader&gt;&lt;space&gt; :nohlsearch&lt;CR&gt;

" Mappings for EasyAlign
xmap ga &lt;Plug&gt;(EasyAlign)
nmap ga &lt;Plug&gt;(EasyAlign)

" Use &lt;Tab&gt; and &lt;S-Tab&gt; to navigate through popup menu
inoremap &lt;expr&gt; &lt;Tab&gt;   pumvisible() ? "\&lt;C-n&gt;" : "\&lt;Tab&gt;"
inoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? "\&lt;C-p&gt;" : "\&lt;S-Tab&gt;"

" Telescope Lua mappings
nnoremap &lt;leader&gt;ff &lt;cmd&gt;lua require('telescope.builtin').find_files()&lt;cr&gt;
nnoremap &lt;leader&gt;fg &lt;cmd&gt;lua require('telescope.builtin').live_grep()&lt;cr&gt;
nnoremap &lt;leader&gt;fb &lt;cmd&gt;lua require('telescope.builtin').buffers()&lt;cr&gt;
nnoremap &lt;leader&gt;fh &lt;cmd&gt;lua require('telescope.builtin').help_tags()&lt;cr&gt;
nnoremap &lt;leader&gt;fr &lt;cmd&gt;lua require('telescope.builtin').lsp_references()&lt;cr&gt;
nnoremap &lt;leader&gt;fd &lt;cmd&gt;lua require('telescope.builtin').lsp_definitions()&lt;cr&gt;
nnoremap &lt;leader&gt;ft &lt;cmd&gt;lua require('telescope.builtin').lsp_type_definitions()&lt;cr&gt;
</code></pre>

<p>No Vim setup is complete without mapping and re-mapping keys in
Vim. The list above mostly focuses on making Telescope friendlier to
use.</p>

<p>So there you have it -- this is my current NeoVim setup. It is more
than sufficient for me to do daily PHP development work. What are some
other things I am looking to integrate into my setup?</p>

<ul>
<li>Make it easier to use <a href="https://xdebug.org">XDebug</a></li>
<li>More refactoring tools (I understand Intelephense can help but I
have also experimented with
<a href="https://github.com/phpactor/phpactor">Phpactor</a></li>
</ul>

<p>As always, I continue to tweak my configuration as I evaluate new
tools or discover new ways of completing old tasks. I hope you find my
setup useful.</p>
]]></content>
        </entry>
    </feed>