<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Grumpy Learning]]></title>
    <link href="https://grumpy-learning.com/blog/categories/tools.xml" rel="self"/>
    <link href="https://grumpy-learning.com/"/>
    <updated>2023-02-03T22:58:28+00:00</updated>
    <id>https://grumpy-learning.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How a grumpy programmer writes Python IRC bots]]></title>
            <link href="https://grumpy-learning.com/blog/2022/12/31/python-irc-bot/"/>
            <updated>2022-12-31T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2022/12/31/python-irc-bot/</id>
            <content type="html"><![CDATA[<h2 id="why-python-and-why-irc%3F">Why Python and why IRC?</h2>

<p>My longest-running hobby is being a member of <a href="https://www.ibl.org">tabletop simulation baseball league</a>
that uses dice and cards and charts to determine outcomes. There are a lot
of charts so a signifcant amount of time is spent looking up results that
players haven't memorized.</p>

<p>Our league uses IRC as the way to play the games -- the players connect to
the server we host and then play games out using a bot that rolls dice
and communicating with each other via text. Very old school.</p>

<p>Making things a little more player-friendly will help the league get
team owners up to speed quicker, so naturally I turned to automation
and programming as a way to do it.</p>

<p>I chose Python because it had been a while since I had done <em>anything</em> with
it, so why not sharpen the dull edge of my experience there a little. Thankfully
there are lots of examples on how to work with IRC using just the default
libraries that come with Python. In this case, the server the bot would be
running on runs Python 3.8. I started off with <a href="https://pythonspot.com/building-an-irc-bot/">this blog post</a>
and went from there.</p>

<h2 id="initial-implementation">Initial implementation</h2>

<p>From a high level, we are doing the following</p>

<p>1) connect to the IRC server
2) loop endlessly while grabbing any responses from the server
3) examine those responses for my chosen chartbot trigger
4) if triggered, then look for dice rolls
5) display results in-channel</p>

<p>Now, I am sure there are better implementations for what I am trying
to do here involving more commonly-accepted design patterns. In fact,
the code analysis tools I am using are already complaining that the
<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a>
is too high.</p>

<p>So, here is an example of what I have been doing</p>

<pre><code class="python">while True:
    text = irc.get_response()

    if "PRIVMSG" in text and ".c ifr" in text:
        details = text.split(' ')
        msgChannel = details[-4].strip()
        batterHand[msgChannel] = details[-1].strip()
        lookForIfrRoll[msgChannel] = "yes"
</code></pre>

<p>An example command that this would look for would be '.c ifr rsp'.
This maps to:</p>

<ul>
<li>.c is "activate chartbot"</li>
<li>ifr is "Infield Range"</li>
<li>rsp is "right-spray hitter", with other options available</li>
</ul>

<p>Early on I realized that I needed to have some kind of "state"
in here because it was a two-step process. Once it knew which
chart it was supposed to refer to, it then needed to wait to
get a die roll. Again, this feels like a brute-force method
but I could not think of any other way. Maybe, again, there
is a better pattern for keeping track of this.</p>

<p>So, having figured out we want to refer to the "infield range chart"
(commonly known as IFR in game terms), we tell the bot "the next roll
in this channel should be checked to see if it works with the IFR chart."</p>

<p>Here is a sample of the code that watches for an IFR roll:</p>

<pre><code class="python">    if "rolled" in text:
        details = text.split(' ')
        msgChannel = details[-4].strip()
        roll = details[-1].strip()

        if (msgChannel in lookForIfrRoll and
                batterHand[msgChannel] in validBatterHand and
                len(roll) == 2):
            irc.send(
                 msgChannel, ifrChart.lookup(batterHand[msgChannel], roll)
            )
            del lookForIfrRoll[msgChannel]
            del batterHand[msgChannel]

</code></pre>

<p>All rolls for the IFR chart will be from 00-99, so we make sure the rollbot
returned something 2 characters in length. We also make sure that the
batter hand type matches our expectations. If that is all good, then
we call an object that contains our chart information, do a lookup, and
then send the results of that lookup into the channel.</p>

<p>Here is a sample of what the IFR chart object looks like:</p>

<pre><code class="python">class IFRChart:
    chart = {}

    def __init__(self):
        self.chart = {
            'lp': {
                "00": "Up the middle P",
                "01": "High chopper P",
                "02": "Line drive P",
                "03": "Down the line 1B",
                "04": "Down the line 1B",
                "05": "Down the line 1B",
                # more results snipped
            }
        }

    def lookup(self, bats, roll):
        return self.chart[bats][roll]

</code></pre>

<p>I will say that creating this chart objects helped me get my muscle
memory for Emacs in a better place. So much cut-and-pasting-and-replacing
of things!</p>

<p>So there you have it, a small example of how I have started writing an
IRC bot that:</p>

<ul>
<li>reads responses for a trigger</li>
<li>figures out what chart to read</li>
<li>waits for a die roll that matches expectations</li>
<li>spits out the lookup result in channel</li>
</ul>

<p>As always, I am happy to get some advice on better ways to refactor
and implement solutions for this code.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Current NeoVim setup]]></title>
            <link href="https://grumpy-learning.com/blog/2022/12/13/current-neovim-setup/"/>
            <updated>2022-12-13T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2022/12/13/current-neovim-setup/</id>
            <content type="html"><![CDATA[<h2 id="grumpiness-and-neovim">Grumpiness and NeoVim</h2>

<p>I have been a <a href="https://vim.org">Vim</a> user since the early 2000's.
Someone who worked in the same building as me and was also a fellow
Linux user (this was before I had bought my first Macbook) got
to talking with me as I struggled to figure out <a href="https://www.gnu.org/software/emacs/">Emacs</a>
suggested I sit with him for a little bit as he showed me how to
use Vim. Still not sure to this day why it clicked with me but I
have been using it ever since.</p>

<p>In the past few years I have changed which version of Vim I am
using and switched to <a href="https://neovim.io/">NeoVim</a>.</p>

<p>Now, to be transparent, these days I use <a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>
as my main PHP programming tool and use NeoVim for pretty much everything
else. I do pay for PhpStorm because I think it's important to encourage the creation
of tools for the programming languages I use. If I was still doing a lot of
Python work, I'd be paying for <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>.
I had really good experiences with it while at Mozilla.</p>

<p>Anyway, I still like to keep up with what is going on in the NeoVim "community"
and I am happy to see a vibrant group of people creating plugins and
sharing their knowledge. I wanted to give things with NeoVim and PHP another
spin so it was time to go look at my current setup.</p>

<h2 id="why-do-all-this%3F">Why do all this?</h2>

<p>My goal is to have a Vim experience that matches the way I currently work.
I've been using Vim for so long that there is lots of muscle memory and
I usually enable "Vim mode" in any tools I use. Editing things a "modal way"
has become my default and any tools that don't support doing things that
way slow me down immensely.</p>

<p>So, what do I want out of my NeoVim setup.</p>

<ul>
<li>works well with the languages I will use</li>
<li>allows me to quickly find files</li>
<li>allows me to quickly find source definitions</li>
<li>allows me to quickly find places where code is used</li>
</ul>

<p>Now, of course, PhpStorm does all this but also carries a lot of extra
functionality around with it. Which is fine! But in an era where the tools
we use on desktop operating systems get bigger and bigger and consume more
and more resources, I find something appealing in using tools that take up
as few resources as possible.</p>

<p>I did an older post on my old blog from about a year ago so I will
follow the same structure but I noticed some changes. I'll be going
through my current NeoVim config and filling things in as we go</p>

<pre><code>set nocompatible
syntax on 
set encoding=utf8
filetype off

" Load our plugins
lua require('plugins')
</code></pre>

<p>I am using as much <a href="https://www.lua.org">Lua</a> as I can within NeoVim.
The first few steps here are pretty much standard:</p>

<ul>
<li>you always turn "no compatible" off otherwise lots of things break</li>
<li>I want syntax highlighting by default</li>
<li>I want things to be UTF8</li>
<li>I am going to define my own behaviour for how I want NeoVim to
handle filetypes</li>
</ul>

<h2 id="plugins">Plugins</h2>

<p>My list of plugins:</p>

<pre><code class="lua">  return require('packer').startup(function()
    use 'wbthomason/packer.nvim'
    use 'neovim/nvim-lspconfig'

    -- General plugins
    use 'dracula/vim'
    use 'junegunn/vim-easy-align'
    use {
        'nvim-treesitter/nvim-treesitter',
        run = ':TSUpdate'
    }
    use 'onsails/lspkind-nvim'
    use 'vim-vdebug/vdebug'

    -- See the git status of the current line in the gutter
    use 'airblade/vim-gitgutter'

    --  PHP plugins
    use 'tpope/vim-dispatch'
    use 'StanAngeloff/php.vim'
    use 'stephpy/vim-php-cs-fixer'
    use 'jwalton512/vim-blade'
    use 'noahfrederick/vim-laravel'

    -- Help for vim-laravel
    use 'tpope/vim-projectionist'
    use 'noahfrederick/vim-composer'

    -- Respect .editorconfig files for a project
    use 'editorconfig/editorconfig-vim'

    -- Telescope support
    use 'nvim-lua/plenary.nvim'
    use 'nvim-telescope/telescope.nvim'
    use 'sharkdp/fd'
    use {'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }

    -- LSP support for Typescropt
    use 'jose-elias-alvarez/nvim-lsp-ts-utils'

    -- nvim-cmp support
    use 'hrsh7th/nvim-cmp'
    use 'hrsh7th/cmp-nvim-lsp'
    use 'saadparwaiz1/cmp_luasnip'
    use 'L3MON4D3/LuaSnip'

end)
</code></pre>

<p>I am using <a href="https://github.com/wbthomason/packer.nvim">Packer</a> to
handle installing all my packages. I have commented in places where I
felt that things were not clear, but I guess some further explanations
couldn't hurt.</p>

<ul>
<li>I use the <a href="https://draculatheme.com/vim">Dracula</a> theme</li>
<li>I use <a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a>
to make it easier to line up blocks of code</li>
<li><a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a> shows me
which lines have changed from Git's perspective</li>
<li>I like to respect the
<a href="https://github.com/editorconfig/editorconfig-vim">EditorConfig</a>
settings for a project if they exist</li>
<li><a href="https://github.com/nvim-telescope/telescope.nvim">Telescope</a> 
forms the basis for a lot of fuzzy find functionality</li>
<li>I use <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a> as my
completion engine (and it plays nicely with Intelephense)</li>
</ul>

<h2 id="more-neovim-settings">More NeoVim Settings</h2>

<pre><code>" Do smart autoindenting
set smartindent
set autoindent

" I like linenumbers, thanks
set number

" set search case to a good configuration http://vim.wikia.com/wiki/Searching
set ignorecase
set smartcase

" I like pretty colours in my terminal
set t_Co=256

" Let's get some good colours in our terminal
let $NVM_TUI_ENABLE_TRUE_COLOR=1
set termguicolors
color dracula 

" We want to use ripgrep for any grep commands
set grepprg='rg'

" Basic configuration options
set tabstop=4
set shiftwidth=4
set softtabstop=0
set smarttab
set expandtab
set wildmenu
set wildmode=list:longest,full
set ttyfast
set showmatch
set hlsearch
set incsearch
set backspace=indent,eol,start

" Make sure we are using the version of Python we want
let g:python3_host_prog = "/opt/homebrew/bin/python3"

" We always want to use UTF-8
set encoding=UTF-8
set fileencoding=UTF-8
</code></pre>

<p>A lot of what is up there is fairly straightforward when it comes to
Vim/NeoVim, so I am not going to go over a lot of them.</p>

<h2 id="lsp-configuration">LSP Configuration</h2>

<p>This is the critical piece for me -- supporting different languages
makes NeoVim so versatile.</p>

<p>In my config I have these two lines:</p>

<pre><code>lua require('lsp-config')
lua require('nvm-cmp')
</code></pre>

<p>and these handle my languages and making sure autocompletion behaves
as I expect.</p>

<pre><code class="lua">--- Configuration for LSP, formatters, and linters.
local nvim_lsp = require("lspconfig")

-- short cut methods.
local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '&lt;space&gt;e', '&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '[d', '&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', ']d', '&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '&lt;space&gt;q', '&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;', opts)
vim.api.nvim_set_keymap('n', '&lt;space&gt;f', '&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;', opts)

local on_attach = function(client, bufnr)
  -- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;C-k&gt;', '&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wa', '&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wr', '&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;wl', '&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;D', '&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;rn', '&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '&lt;space&gt;ca', '&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;', opts)
end

-- PHP
nvim_lsp.intelephense.setup {
    cmd = { "intelephense", "--stdio" },
    filetypes = { "php" },
}

--- Linter setup
local filetypes = {
  typescript = "eslint",
  typescriptreact = "eslint",
  php = {"phpcs", "psalm"},
}

local linters = {
  phpcs = {
    command = "vendor/bin/phpcs",
    sourceName = "phpcs",
    debounce = 300,
    rootPatterns = {"composer.lock", "vendor", ".git"},
    args = {"--report=emacs", "-s", "-"},
    offsetLine = 0,
    offsetColumn = 0,
    sourceName = "phpcs",
    formatLines = 1,
    formatPattern = {
      "^.*:(\\d+):(\\d+):\\s+(.*)\\s+-\\s+(.*)(\\r|\\n)*$",
      {
        line = 1,
        column = 2,
        message = 4,
        security = 3
      }
    },
    securities = {
      error = "error",
      warning = "warning",
    },
    requiredFiles = {"vendor/bin/phpcs"}
  },
  psalm = {
    command = "./vendor/bin/psalm",
    sourceName = "psalm",
    debounce = 100,
    rootPatterns = {"composer.lock", "vendor", ".git"},
    args = {"--output-format=emacs", "--no-progress"},
    offsetLine = 0,
    offsetColumn = 0,
    sourceName = "psalm",
    formatLines = 1,
    formatPattern = {
      "^[^ =]+ =(\\d+) =(\\d+) =(.*)\\s-\\s(.*)(\\r|\\n)*$",
      {
        line = 1,
        column = 2,
        message = 4,
        security = 3
      }
    },
    securities = {
      error = "error",
      warning = "warning"
    },
    requiredFiles = {"vendor/bin/psalm"}
  }
}

nvim_lsp.diagnosticls.setup {
  on_attach = on_attach,
  filetypes = vim.tbl_keys(filetypes),
  init_options = {
    filetypes = filetypes,
    linters = linters,
  },
}
</code></pre>

<p>A lot of what is in here I simple stole from other people's
configurations but I think most of it should be straightforward to
figure out.</p>

<p>Some highlights from my perspective:</p>

<ul>
<li>you pick which language servers to care about</li>
<li>you map functionality to existing Vim bindings so, again, it behaves
as expected</li>
</ul>

<p>Here is what I have for getting the autocompletion engine working:</p>

<pre><code class="lua">local capabilities = vim.lsp.protocol.make_client_capabilities()

local lspconfig = require('lspconfig')

-- Enable some language servers with the additional completion capabilities offered by nvim-cmp
local servers = { 'intelephense', 'tsserver' }
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    -- on_attach = my_custom_on_attach,
    capabilities = capabilities,
  }
end

-- luasnip setup
local luasnip = require 'luasnip'

-- nvim-cmp setup
local cmp = require 'cmp'
cmp.setup {
  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end,
  },
  mapping = {
    ['&lt;C-p&gt;'] = cmp.mapping.select_prev_item(),
    ['&lt;C-n&gt;'] = cmp.mapping.select_next_item(),
    ['&lt;C-d&gt;'] = cmp.mapping.scroll_docs(-4),
    ['&lt;C-f&gt;'] = cmp.mapping.scroll_docs(4),
    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),
    ['&lt;C-e&gt;'] = cmp.mapping.close(),
    ['&lt;CR&gt;'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['&lt;Tab&gt;'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end,
    ['&lt;S-Tab&gt;'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end,
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
}
</code></pre>

<p>Again, more mapping of existing keys to get the plugin to behave as
expected. This sort of thing lies at the very heart of how Vim/NeoVim
plugins do so much work -- they literally alter how the application
behaves by overriding things. Perhaps this is actually a form of
monkey patching? TIME IS A CIRCLE.</p>

<h2 id="key-mappings">Key Mappings</h2>

<pre><code class="vim">" ------------------------------------------------------------------------------
" # Mappings
" ------------------------------------------------------------------------------
" # All of your mappings go in this file! Don't worry about your mappings
" # being separate from related config. Sourcery provides mappings to
" # easily jump between plugin definitions, mappings, and configs.
" #
" # More info: https://github.com/jesseleite/vim-sourcery#jumping-between-files


" ------------------------------------------------------------------------------
" # Example
" ------------------------------------------------------------------------------

" easily switch between vsplit windows
map &lt;Leader&gt;j &lt;C-w&gt;j
map &lt;Leader&gt;k &lt;C-w&gt;k
map &lt;Leader&gt;h &lt;c-w&gt;h
map &lt;Leader&gt;l &lt;c-w&gt;l

" Remove highlighing of search terms
nnoremap &lt;leader&gt;&lt;space&gt; :nohlsearch&lt;CR&gt;

" Mappings for EasyAlign
xmap ga &lt;Plug&gt;(EasyAlign)
nmap ga &lt;Plug&gt;(EasyAlign)

" Use &lt;Tab&gt; and &lt;S-Tab&gt; to navigate through popup menu
inoremap &lt;expr&gt; &lt;Tab&gt;   pumvisible() ? "\&lt;C-n&gt;" : "\&lt;Tab&gt;"
inoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? "\&lt;C-p&gt;" : "\&lt;S-Tab&gt;"

" Telescope Lua mappings
nnoremap &lt;leader&gt;ff &lt;cmd&gt;lua require('telescope.builtin').find_files()&lt;cr&gt;
nnoremap &lt;leader&gt;fg &lt;cmd&gt;lua require('telescope.builtin').live_grep()&lt;cr&gt;
nnoremap &lt;leader&gt;fb &lt;cmd&gt;lua require('telescope.builtin').buffers()&lt;cr&gt;
nnoremap &lt;leader&gt;fh &lt;cmd&gt;lua require('telescope.builtin').help_tags()&lt;cr&gt;
nnoremap &lt;leader&gt;fr &lt;cmd&gt;lua require('telescope.builtin').lsp_references()&lt;cr&gt;
nnoremap &lt;leader&gt;fd &lt;cmd&gt;lua require('telescope.builtin').lsp_definitions()&lt;cr&gt;
nnoremap &lt;leader&gt;ft &lt;cmd&gt;lua require('telescope.builtin').lsp_type_definitions()&lt;cr&gt;
</code></pre>

<p>No Vim setup is complete without mapping and re-mapping keys in
Vim. The list above mostly focuses on making Telescope friendlier to
use.</p>

<p>So there you have it -- this is my current NeoVim setup. It is more
than sufficient for me to do daily PHP development work. What are some
other things I am looking to integrate into my setup?</p>

<ul>
<li>Make it easier to use <a href="https://xdebug.org">XDebug</a></li>
<li>More refactoring tools (I understand Intelephense can help but I
have also experimented with
<a href="https://github.com/phpactor/phpactor">Phpactor</a></li>
</ul>

<p>As always, I continue to tweak my configuration as I evaluate new
tools or discover new ways of completing old tasks. I hope you find my
setup useful.</p>
]]></content>
        </entry>
    </feed>