<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Grumpy Learning]]></title>
    <link href="https://grumpy-learning.com/blog/categories/automation.xml" rel="self"/>
    <link href="https://grumpy-learning.com/"/>
    <updated>2022-11-12T16:13:19+00:00</updated>
    <id>https://grumpy-learning.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Better Outcomes]]></title>
            <link href="https://grumpy-learning.com/blog/2022/01/02/better-outcomes/"/>
            <updated>2022-01-02T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2022/01/02/better-outcomes/</id>
            <content type="html"><![CDATA[<p>I’m not a New Year’s resolution type but here are some suggestions for my fellow devs of things I believe can lead to better outcomes:</p>

<p>Learn your IDE/editor better: I spent a lot of 2021 refining my <a href="https://neovim.org">Vim</a> setup and I plan on adding increased use of <a href="https://vimwiki.github.io/">VimWiki</a> for making notes and linking things together.</p>

<p>If your dynamic language of choice supports types, start using them and <a href="https://psalm.dev">static</a> <a href="https://phpstan.org">analysis</a> tools. It leads to much clearer intent and can catch problems at the edges.</p>

<p>Focus on automation. Stop doing things manually the computer can do for you. Take the time to semi-automate manual processes first. It frees your brain up to solve different problems.</p>

<p>Make continuous learning a foundation of everything you do. Even after 23 years of getting paid to program, I learn new things almost every day.</p>

<p>Remember that what people call “luck” is often you having the skills to take advantage of an opportunity.</p>

<p>(This was originally posted as a Twitter thread starting with <a href="https://twitter.com/grmpyprogrammer/status/1477326886766362626">https://twitter.com/grmpyprogrammer/status/1477326886766362626</a>)</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Repeatable Development Environments]]></title>
            <link href="https://grumpy-learning.com/blog/2021/12/30/repeatable-dev-environments/"/>
            <updated>2021-12-30T00:00:00+00:00</updated>
            <id>https://grumpy-learning.com/blog/2021/12/30/repeatable-dev-environments/</id>
            <content type="html"><![CDATA[<p>If you have used <a href="https://docker.com">Docker</a> on a Mac
laptop, you have likely ran into the "crossing file systems"
issue that can lead to really poor performance in your containers.
This becomes frustrating if you are recreating a development environment 
for applications that rely on a lot of services (micro or otherwise)
 to run. If you are a Windows or Linux user, this sort of thing is pretty much
a non-issue.</p>

<p>It seemed like I had two choices on how to potentially deal with this.
Choice number one was to switch to a different operating system (I have been looking
at <a href="https://frame.work">Framework</a> laptops) but I was (LOL) grumpy about
getting a new laptop when the 2020 13" MacBook pro I have as I write this is only slightly
more than a year old. Okay, I could sell it. But that seems like a bunch
of busy work.</p>

<p>The second choice was to see if I could create a development environment
that was faster and still allowed me to use Docker, which is 100% a requirement
for the client work I am currently doing.</p>

<p>In the past, other people online had hinted at the possibility of doing the development
work inside a virtual machine. Basically like connecting to another machine
via SSH and then doing my work in there. Good thing I am already a member of the 
Cult of Vim.</p>

<p>Okay, I think I could work with this. The next issue was HOW to do this all. I've played
around enough with <a href="https://www.vagrantup.com/">Vagrant</a>, <a href="https://vmware.com">VMWare</a> and
Virtual Private Servers to know that the steepest part of the curve with using
this solution is getting configured and in a state where it useful rather than
a time-sink or a toy.</p>

<p>I am always one to extol the virtues of "better lucky than good" and I happened to
stumble across a tweet from Mitchell Hashimoto (one of the creators of Vagrant)
where he talked about how he does all his development work inside a VM running
on a Mac laptop. I can't find the original tweet, but I made a note about it
and then he did another tweet about it:</p>

<blockquote>
  <p><em>My NixOS configurations for my dev VM setup are finally sanitized and open source. They work for both Intel and Apple Silicon. And I put together a video showing how I setup a new machine!</em>
  (originally posted at <a href="https://twitter.com/mitchellh/status/1452721115009191938">https://twitter.com/mitchellh/status/1452721115009191938</a>)</p>
</blockquote>

<p>In that tweet he also shared a link to a <a href="https://www.youtube.com/watch?v=ubDMLoWz76U">YouTube video</a> and
the <a href="https://github.com/mitchellh/nixos-config">GitHub repo</a> that he was publicly sharing
that you could use as a template.</p>

<p>Again, in a big coincidence, Mr. Hashimoto was also using <a href="https://nixos.org">NixOS</a> as his
VM's operating system. NixOS is a Linux distribution based on <a href="https://nixos.org/manual/nix/stable/introduction.html">Nix package manager</a>.
Which doesn't mean much if you're not a fan of their approach.</p>

<p>The reason to like Nix is that it bills itself as a <em>purely functional package manager</em>.
If you've ever come across the "functional style" of programming then you might know
how powerful it is to have code that has no "side effects". This means that your
code is not doing things like writing to the file system, or updating records in a database.
In a functional world (unless the code is supposed return something random) it is easy
to test code because the same input should always generate the same output.</p>

<p>If you apply this to package management, it means your are choosing and installing dependencies
in such a way that you can isolate them from each other. It can be difficult to have, for example,
two different versions of PHP installed for your use unless you are relying on third party tools
to keep track of what version should be active.</p>

<p>Nix handles this by forcing you to declare any dependencies explicitly. No more
worrying about globally-installed libraries causing incompatibility problems. 
Want to see if your PHP project runs on 7.4, 8.0, and 8.1? You can do that easily
with NixOS and it's tooling.</p>

<p>I guess you can tell I am a fan of NixOS and look forward to using it a lot more.</p>

<p>The idea from a high level is this: given a NixOS VM running in VMWare (I am using
VMWare Fusion) it should take less than 10 minutes to create a development
environment configured with my preferred tools installed from scratch.</p>

<p>The repo he provides is definitely not ready to go as-is. You will need to modify
a lot of the things in there -- I know I did. It took about a week of poking at it,
creating and destroying lots of VM's, and learning how NixOS wants to do things to
get it to the point where I could get it up and running and actually use it.</p>

<p>I ended up removing a bunch of tools that are related to Mitchell's work on Docker
and added a few things I knew I was going to need for my work with this client. It
also took me a while to figure out how to generate a hash for the password for the 
user account the build-and-configure process can create for you. But in the
end I had a VM up and running (that I could also SSH into if I wanted to)</p>

<p>By default, the VM uses a graphical interface with a <a href="https://i3wm.org/">tiling window manager</a>
and you type Command-N on your Mac and it opens up a terminal session in 
<a href="https://sw.kovidgoyal.net/kitty/">Kitty</a> and you are ready to go!.</p>

<p>I also had modified the configuration to install Docker and the related
command-line tools. Once I cloned the client repo all I had to do was
<code>make build</code> to create the Docker containers the development environment
needed and <code>make unit</code> to run the unit test suite in less than half the time.</p>

<p>So what is the point of doing all this work? Let's go back to my original
problem. Running a test suite that used a development environment consisting
of multiple Docker containers was incredibly slow. Running on my Mac (and giving
Docker half the cores and half the available memory) it takes about 80 seconds.
Running inside a VM that has access to the same resources takes about 35 seconds.</p>

<p>If you've never done a development work flow of "make a change, run a process to 
verify the change works as expected" for a large chunk of your work day then perhaps
you don't think this is a big deal. Every loop also has come context switching
as you try and figure out what happened. If you do this 100 times in a day, you
probably want this loop to run as quickly as possible.</p>

<p>I don't know if there is a phrase or concept or "law" about this sort of perception-versus-reality
issue, but I find myself wanting to get things done FASTER when the process by
which results are determined gets SLOWER. When my test suite runs in 30 seconds,
I feel like I have lots of time to solve the problem. When it takes a minute-and-a-half
I get...anxious? Maybe that's the wrong emotion. I know something takes too long 
when I start muttering to myself "this is taking too <insert preferred swear word> long.".</p>

<p>With the "happens faster than before" issue solved, I find the next benefit to be 
as I learn how to use Nix to build repeatable environments, a major mistake can be 
solved by deleting the VM and trying again. Maybe 20 minutes tops to get back to 
where I was. When I mess up my development environment
on my MacBook (OS update or maybe <a href="https://brew.sh/">Homebrew</a> updates an underlying
dependency) it can be a whole afternoon spent trying to "fix whatever I broke."</p>

<p>It's not clear there will ever be any kind of solution for the "crossing file systems"
issue that leads to Docker performing so poorly. My fellow programmers who are
running the newer MacBooks that use Apple's new chips tell me performance is 
quite good. Spending another CAD$3k so Docker runs faster seems like a waste of 
money to me, but that is just a personal opinion.</p>

<p>I used to be someone who lived on the bleeding edge when it came to their software.
As I got older and grumpier I started to value stability and repeatability in my 
software more. A development environment that can be built using <a href="https://www.gnu.org/software/make/">Make</a>
and a VM is one I can rely on to start me off at a known point, exhibiting
behaviour I am expecting. Almost like the benefits of a test suite!</p>

<p>Doing this NixOS-in-a-VM stuff relies on you having some experience with Linux 
environments. I did run Linux as my desktop environment for several years 
before I started buying Apple hardware (which I've done since 2002) and 
MacOS's "<a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">BSD</a> with a pretty window manager" approach also let me use those
command-line skills.</p>

<p>I highly recommend watching Mitchell's YouTube video as he explains how the
whole process works. I found it useful because he explains the philosophy of 
his approach. Understanding WHY someone does things can often lead you to 
quicker insights as to what needs to change to fit your needs.</p>

<p>If you do get it all set up, let me know your experiences. With some effort
I can probably create a more generic version of my set up and create a GitHub
repo with all the files in it.</p>
]]></content>
        </entry>
    </feed>